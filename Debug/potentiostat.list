
potentiostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020c78  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08020e10  08020e10  00030e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022920  08022920  00040190  2**0
                  CONTENTS
  4 .ARM          00000008  08022920  08022920  00032920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022928  08022928  00040190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000004c  08022928  08022928  00032928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000004c  08022974  08022974  00032974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080229c0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af98  20000190  08022b50  00040190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b128  08022b50  0004b128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000401c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0011412f  00000000  00000000  00040203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011a93  00000000  00000000  00154332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004810  00000000  00000000  00165dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000371f  00000000  00000000  0016a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024223  00000000  00000000  0016dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044e2f  00000000  00000000  00191f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9825  00000000  00000000  001d6d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000161cc  00000000  00000000  00290570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  002a673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000190 	.word	0x20000190
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08020df8 	.word	0x08020df8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000194 	.word	0x20000194
 80001d4:	08020df8 	.word	0x08020df8

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpun>:
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x10>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d10a      	bne.n	8000ace <__aeabi_dcmpun+0x26>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__aeabi_dcmpun+0x20>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d102      	bne.n	8000ace <__aeabi_dcmpun+0x26>
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	f04f 0001 	mov.w	r0, #1
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_frsub>:
 8000c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	e002      	b.n	8000c10 <__addsf3>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fsub>:
 8000c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c10 <__addsf3>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	bf1f      	itttt	ne
 8000c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c18:	ea92 0f03 	teqne	r2, r3
 8000c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c24:	d06a      	beq.n	8000cfc <__addsf3+0xec>
 8000c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2e:	bfc1      	itttt	gt
 8000c30:	18d2      	addgt	r2, r2, r3
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	4048      	eorgt	r0, r1
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	bf88      	it	hi
 8000c40:	4770      	bxhi	lr
 8000c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4240      	negne	r0, r0
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4249      	negne	r1, r1
 8000c62:	ea92 0f03 	teq	r2, r3
 8000c66:	d03f      	beq.n	8000ce8 <__addsf3+0xd8>
 8000c68:	f1a2 0201 	sub.w	r2, r2, #1
 8000c6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c70:	eb10 000c 	adds.w	r0, r0, ip
 8000c74:	f1c3 0320 	rsb	r3, r3, #32
 8000c78:	fa01 f103 	lsl.w	r1, r1, r3
 8000c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__addsf3+0x78>
 8000c82:	4249      	negs	r1, r1
 8000c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c8c:	d313      	bcc.n	8000cb6 <__addsf3+0xa6>
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d306      	bcc.n	8000ca2 <__addsf3+0x92>
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9a:	f102 0201 	add.w	r2, r2, #1
 8000c9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ca0:	d251      	bcs.n	8000d46 <__addsf3+0x136>
 8000ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	ea40 0003 	orr.w	r0, r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	eb40 0000 	adc.w	r0, r0, r0
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	bf28      	it	cs
 8000cc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc4:	d2ed      	bcs.n	8000ca2 <__addsf3+0x92>
 8000cc6:	fab0 fc80 	clz	ip, r0
 8000cca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cce:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd6:	bfaa      	itet	ge
 8000cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cdc:	4252      	neglt	r2, r2
 8000cde:	4318      	orrge	r0, r3
 8000ce0:	bfbc      	itt	lt
 8000ce2:	40d0      	lsrlt	r0, r2
 8000ce4:	4318      	orrlt	r0, r3
 8000ce6:	4770      	bx	lr
 8000ce8:	f092 0f00 	teq	r2, #0
 8000cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf0:	bf06      	itte	eq
 8000cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf6:	3201      	addeq	r2, #1
 8000cf8:	3b01      	subne	r3, #1
 8000cfa:	e7b5      	b.n	8000c68 <__addsf3+0x58>
 8000cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	bf18      	it	ne
 8000d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0a:	d021      	beq.n	8000d50 <__addsf3+0x140>
 8000d0c:	ea92 0f03 	teq	r2, r3
 8000d10:	d004      	beq.n	8000d1c <__addsf3+0x10c>
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	bf08      	it	eq
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	4770      	bx	lr
 8000d1c:	ea90 0f01 	teq	r0, r1
 8000d20:	bf1c      	itt	ne
 8000d22:	2000      	movne	r0, #0
 8000d24:	4770      	bxne	lr
 8000d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2a:	d104      	bne.n	8000d36 <__addsf3+0x126>
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3a:	bf3c      	itt	cc
 8000d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d40:	4770      	bxcc	lr
 8000d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	4770      	bx	lr
 8000d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d54:	bf16      	itet	ne
 8000d56:	4608      	movne	r0, r1
 8000d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d5c:	4601      	movne	r1, r0
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	bf06      	itte	eq
 8000d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d66:	ea90 0f01 	teqeq	r0, r1
 8000d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_ui2f>:
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e004      	b.n	8000d80 <__aeabi_i2f+0x8>
 8000d76:	bf00      	nop

08000d78 <__aeabi_i2f>:
 8000d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	bf48      	it	mi
 8000d7e:	4240      	negmi	r0, r0
 8000d80:	ea5f 0c00 	movs.w	ip, r0
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	e01c      	b.n	8000dce <__aeabi_l2f+0x2a>

08000d94 <__aeabi_ul2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e00a      	b.n	8000db8 <__aeabi_l2f+0x14>
 8000da2:	bf00      	nop

08000da4 <__aeabi_l2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_l2f+0x14>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	ea5f 0c01 	movs.w	ip, r1
 8000dbc:	bf02      	ittt	eq
 8000dbe:	4684      	moveq	ip, r0
 8000dc0:	4601      	moveq	r1, r0
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc8:	bf08      	it	eq
 8000dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd2:	fabc f28c 	clz	r2, ip
 8000dd6:	3a08      	subs	r2, #8
 8000dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ddc:	db10      	blt.n	8000e00 <__aeabi_l2f+0x5c>
 8000dde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de2:	4463      	add	r3, ip
 8000de4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	f020 0001 	biceq.w	r0, r0, #1
 8000dfe:	4770      	bx	lr
 8000e00:	f102 0220 	add.w	r2, r2, #32
 8000e04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e08:	f1c2 0220 	rsb	r2, r2, #32
 8000e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e10:	fa21 f202 	lsr.w	r2, r1, r2
 8000e14:	eb43 0002 	adc.w	r0, r3, r2
 8000e18:	bf08      	it	eq
 8000e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_uldivmod>:
 8000e20:	b953      	cbnz	r3, 8000e38 <__aeabi_uldivmod+0x18>
 8000e22:	b94a      	cbnz	r2, 8000e38 <__aeabi_uldivmod+0x18>
 8000e24:	2900      	cmp	r1, #0
 8000e26:	bf08      	it	eq
 8000e28:	2800      	cmpeq	r0, #0
 8000e2a:	bf1c      	itt	ne
 8000e2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e30:	f04f 30ff 	movne.w	r0, #4294967295
 8000e34:	f000 b9ae 	b.w	8001194 <__aeabi_idiv0>
 8000e38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e40:	f000 f844 	bl	8000ecc <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_f2ulz>:
 8000e50:	b5d0      	push	{r4, r6, r7, lr}
 8000e52:	f7ff fb37 	bl	80004c4 <__aeabi_f2d>
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__aeabi_f2ulz+0x38>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4606      	mov	r6, r0
 8000e5c:	460f      	mov	r7, r1
 8000e5e:	f7ff fb89 	bl	8000574 <__aeabi_dmul>
 8000e62:	f7ff fe5f 	bl	8000b24 <__aeabi_d2uiz>
 8000e66:	4604      	mov	r4, r0
 8000e68:	f7ff fb0a 	bl	8000480 <__aeabi_ui2d>
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <__aeabi_f2ulz+0x3c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f7ff fb80 	bl	8000574 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4630      	mov	r0, r6
 8000e7a:	4639      	mov	r1, r7
 8000e7c:	f7ff f9c2 	bl	8000204 <__aeabi_dsub>
 8000e80:	f7ff fe50 	bl	8000b24 <__aeabi_d2uiz>
 8000e84:	4621      	mov	r1, r4
 8000e86:	bdd0      	pop	{r4, r6, r7, pc}
 8000e88:	3df00000 	.word	0x3df00000
 8000e8c:	41f00000 	.word	0x41f00000

08000e90 <__aeabi_d2ulz>:
 8000e90:	b5d0      	push	{r4, r6, r7, lr}
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__aeabi_d2ulz+0x34>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	4606      	mov	r6, r0
 8000e98:	460f      	mov	r7, r1
 8000e9a:	f7ff fb6b 	bl	8000574 <__aeabi_dmul>
 8000e9e:	f7ff fe41 	bl	8000b24 <__aeabi_d2uiz>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	f7ff faec 	bl	8000480 <__aeabi_ui2d>
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <__aeabi_d2ulz+0x38>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f7ff fb62 	bl	8000574 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	4639      	mov	r1, r7
 8000eb8:	f7ff f9a4 	bl	8000204 <__aeabi_dsub>
 8000ebc:	f7ff fe32 	bl	8000b24 <__aeabi_d2uiz>
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ec4:	3df00000 	.word	0x3df00000
 8000ec8:	41f00000 	.word	0x41f00000

08000ecc <__udivmoddi4>:
 8000ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed0:	9e08      	ldr	r6, [sp, #32]
 8000ed2:	460d      	mov	r5, r1
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460f      	mov	r7, r1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d14a      	bne.n	8000f72 <__udivmoddi4+0xa6>
 8000edc:	428a      	cmp	r2, r1
 8000ede:	4694      	mov	ip, r2
 8000ee0:	d965      	bls.n	8000fae <__udivmoddi4+0xe2>
 8000ee2:	fab2 f382 	clz	r3, r2
 8000ee6:	b143      	cbz	r3, 8000efa <__udivmoddi4+0x2e>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0220 	rsb	r2, r3, #32
 8000ef0:	409f      	lsls	r7, r3
 8000ef2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef6:	4317      	orrs	r7, r2
 8000ef8:	409c      	lsls	r4, r3
 8000efa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efe:	fa1f f58c 	uxth.w	r5, ip
 8000f02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f06:	0c22      	lsrs	r2, r4, #16
 8000f08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f10:	fb01 f005 	mul.w	r0, r1, r5
 8000f14:	4290      	cmp	r0, r2
 8000f16:	d90a      	bls.n	8000f2e <__udivmoddi4+0x62>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f20:	f080 811c 	bcs.w	800115c <__udivmoddi4+0x290>
 8000f24:	4290      	cmp	r0, r2
 8000f26:	f240 8119 	bls.w	800115c <__udivmoddi4+0x290>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	1a12      	subs	r2, r2, r0
 8000f30:	b2a4      	uxth	r4, r4
 8000f32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f3e:	fb00 f505 	mul.w	r5, r0, r5
 8000f42:	42a5      	cmp	r5, r4
 8000f44:	d90a      	bls.n	8000f5c <__udivmoddi4+0x90>
 8000f46:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f4e:	f080 8107 	bcs.w	8001160 <__udivmoddi4+0x294>
 8000f52:	42a5      	cmp	r5, r4
 8000f54:	f240 8104 	bls.w	8001160 <__udivmoddi4+0x294>
 8000f58:	4464      	add	r4, ip
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f60:	1b64      	subs	r4, r4, r5
 8000f62:	2100      	movs	r1, #0
 8000f64:	b11e      	cbz	r6, 8000f6e <__udivmoddi4+0xa2>
 8000f66:	40dc      	lsrs	r4, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0xbc>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	f000 80ed 	beq.w	8001156 <__udivmoddi4+0x28a>
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000f82:	4608      	mov	r0, r1
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	fab3 f183 	clz	r1, r3
 8000f8c:	2900      	cmp	r1, #0
 8000f8e:	d149      	bne.n	8001024 <__udivmoddi4+0x158>
 8000f90:	42ab      	cmp	r3, r5
 8000f92:	d302      	bcc.n	8000f9a <__udivmoddi4+0xce>
 8000f94:	4282      	cmp	r2, r0
 8000f96:	f200 80f8 	bhi.w	800118a <__udivmoddi4+0x2be>
 8000f9a:	1a84      	subs	r4, r0, r2
 8000f9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	4617      	mov	r7, r2
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d0e2      	beq.n	8000f6e <__udivmoddi4+0xa2>
 8000fa8:	e9c6 4700 	strd	r4, r7, [r6]
 8000fac:	e7df      	b.n	8000f6e <__udivmoddi4+0xa2>
 8000fae:	b902      	cbnz	r2, 8000fb2 <__udivmoddi4+0xe6>
 8000fb0:	deff      	udf	#255	; 0xff
 8000fb2:	fab2 f382 	clz	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 8090 	bne.w	80010dc <__udivmoddi4+0x210>
 8000fbc:	1a8a      	subs	r2, r1, r2
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f fe8c 	uxth.w	lr, ip
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000fcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000fd0:	0c22      	lsrs	r2, r4, #16
 8000fd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fd6:	fb0e f005 	mul.w	r0, lr, r5
 8000fda:	4290      	cmp	r0, r2
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x124>
 8000fde:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x122>
 8000fe8:	4290      	cmp	r0, r2
 8000fea:	f200 80cb 	bhi.w	8001184 <__udivmoddi4+0x2b8>
 8000fee:	4645      	mov	r5, r8
 8000ff0:	1a12      	subs	r2, r2, r0
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ff8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ffc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001000:	fb0e fe00 	mul.w	lr, lr, r0
 8001004:	45a6      	cmp	lr, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x14e>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001010:	d202      	bcs.n	8001018 <__udivmoddi4+0x14c>
 8001012:	45a6      	cmp	lr, r4
 8001014:	f200 80bb 	bhi.w	800118e <__udivmoddi4+0x2c2>
 8001018:	4610      	mov	r0, r2
 800101a:	eba4 040e 	sub.w	r4, r4, lr
 800101e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001022:	e79f      	b.n	8000f64 <__udivmoddi4+0x98>
 8001024:	f1c1 0720 	rsb	r7, r1, #32
 8001028:	408b      	lsls	r3, r1
 800102a:	fa22 fc07 	lsr.w	ip, r2, r7
 800102e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001032:	fa05 f401 	lsl.w	r4, r5, r1
 8001036:	fa20 f307 	lsr.w	r3, r0, r7
 800103a:	40fd      	lsrs	r5, r7
 800103c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001040:	4323      	orrs	r3, r4
 8001042:	fbb5 f8f9 	udiv	r8, r5, r9
 8001046:	fa1f fe8c 	uxth.w	lr, ip
 800104a:	fb09 5518 	mls	r5, r9, r8, r5
 800104e:	0c1c      	lsrs	r4, r3, #16
 8001050:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001054:	fb08 f50e 	mul.w	r5, r8, lr
 8001058:	42a5      	cmp	r5, r4
 800105a:	fa02 f201 	lsl.w	r2, r2, r1
 800105e:	fa00 f001 	lsl.w	r0, r0, r1
 8001062:	d90b      	bls.n	800107c <__udivmoddi4+0x1b0>
 8001064:	eb1c 0404 	adds.w	r4, ip, r4
 8001068:	f108 3aff 	add.w	sl, r8, #4294967295
 800106c:	f080 8088 	bcs.w	8001180 <__udivmoddi4+0x2b4>
 8001070:	42a5      	cmp	r5, r4
 8001072:	f240 8085 	bls.w	8001180 <__udivmoddi4+0x2b4>
 8001076:	f1a8 0802 	sub.w	r8, r8, #2
 800107a:	4464      	add	r4, ip
 800107c:	1b64      	subs	r4, r4, r5
 800107e:	b29d      	uxth	r5, r3
 8001080:	fbb4 f3f9 	udiv	r3, r4, r9
 8001084:	fb09 4413 	mls	r4, r9, r3, r4
 8001088:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800108c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001090:	45a6      	cmp	lr, r4
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x1da>
 8001094:	eb1c 0404 	adds.w	r4, ip, r4
 8001098:	f103 35ff 	add.w	r5, r3, #4294967295
 800109c:	d26c      	bcs.n	8001178 <__udivmoddi4+0x2ac>
 800109e:	45a6      	cmp	lr, r4
 80010a0:	d96a      	bls.n	8001178 <__udivmoddi4+0x2ac>
 80010a2:	3b02      	subs	r3, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010aa:	fba3 9502 	umull	r9, r5, r3, r2
 80010ae:	eba4 040e 	sub.w	r4, r4, lr
 80010b2:	42ac      	cmp	r4, r5
 80010b4:	46c8      	mov	r8, r9
 80010b6:	46ae      	mov	lr, r5
 80010b8:	d356      	bcc.n	8001168 <__udivmoddi4+0x29c>
 80010ba:	d053      	beq.n	8001164 <__udivmoddi4+0x298>
 80010bc:	b156      	cbz	r6, 80010d4 <__udivmoddi4+0x208>
 80010be:	ebb0 0208 	subs.w	r2, r0, r8
 80010c2:	eb64 040e 	sbc.w	r4, r4, lr
 80010c6:	fa04 f707 	lsl.w	r7, r4, r7
 80010ca:	40ca      	lsrs	r2, r1
 80010cc:	40cc      	lsrs	r4, r1
 80010ce:	4317      	orrs	r7, r2
 80010d0:	e9c6 7400 	strd	r7, r4, [r6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010dc:	f1c3 0120 	rsb	r1, r3, #32
 80010e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80010e4:	fa20 f201 	lsr.w	r2, r0, r1
 80010e8:	fa25 f101 	lsr.w	r1, r5, r1
 80010ec:	409d      	lsls	r5, r3
 80010ee:	432a      	orrs	r2, r5
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80010fc:	fb07 1510 	mls	r5, r7, r0, r1
 8001100:	0c11      	lsrs	r1, r2, #16
 8001102:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001106:	fb00 f50e 	mul.w	r5, r0, lr
 800110a:	428d      	cmp	r5, r1
 800110c:	fa04 f403 	lsl.w	r4, r4, r3
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x258>
 8001112:	eb1c 0101 	adds.w	r1, ip, r1
 8001116:	f100 38ff 	add.w	r8, r0, #4294967295
 800111a:	d22f      	bcs.n	800117c <__udivmoddi4+0x2b0>
 800111c:	428d      	cmp	r5, r1
 800111e:	d92d      	bls.n	800117c <__udivmoddi4+0x2b0>
 8001120:	3802      	subs	r0, #2
 8001122:	4461      	add	r1, ip
 8001124:	1b49      	subs	r1, r1, r5
 8001126:	b292      	uxth	r2, r2
 8001128:	fbb1 f5f7 	udiv	r5, r1, r7
 800112c:	fb07 1115 	mls	r1, r7, r5, r1
 8001130:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001134:	fb05 f10e 	mul.w	r1, r5, lr
 8001138:	4291      	cmp	r1, r2
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x282>
 800113c:	eb1c 0202 	adds.w	r2, ip, r2
 8001140:	f105 38ff 	add.w	r8, r5, #4294967295
 8001144:	d216      	bcs.n	8001174 <__udivmoddi4+0x2a8>
 8001146:	4291      	cmp	r1, r2
 8001148:	d914      	bls.n	8001174 <__udivmoddi4+0x2a8>
 800114a:	3d02      	subs	r5, #2
 800114c:	4462      	add	r2, ip
 800114e:	1a52      	subs	r2, r2, r1
 8001150:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001154:	e738      	b.n	8000fc8 <__udivmoddi4+0xfc>
 8001156:	4631      	mov	r1, r6
 8001158:	4630      	mov	r0, r6
 800115a:	e708      	b.n	8000f6e <__udivmoddi4+0xa2>
 800115c:	4639      	mov	r1, r7
 800115e:	e6e6      	b.n	8000f2e <__udivmoddi4+0x62>
 8001160:	4610      	mov	r0, r2
 8001162:	e6fb      	b.n	8000f5c <__udivmoddi4+0x90>
 8001164:	4548      	cmp	r0, r9
 8001166:	d2a9      	bcs.n	80010bc <__udivmoddi4+0x1f0>
 8001168:	ebb9 0802 	subs.w	r8, r9, r2
 800116c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001170:	3b01      	subs	r3, #1
 8001172:	e7a3      	b.n	80010bc <__udivmoddi4+0x1f0>
 8001174:	4645      	mov	r5, r8
 8001176:	e7ea      	b.n	800114e <__udivmoddi4+0x282>
 8001178:	462b      	mov	r3, r5
 800117a:	e794      	b.n	80010a6 <__udivmoddi4+0x1da>
 800117c:	4640      	mov	r0, r8
 800117e:	e7d1      	b.n	8001124 <__udivmoddi4+0x258>
 8001180:	46d0      	mov	r8, sl
 8001182:	e77b      	b.n	800107c <__udivmoddi4+0x1b0>
 8001184:	3d02      	subs	r5, #2
 8001186:	4462      	add	r2, ip
 8001188:	e732      	b.n	8000ff0 <__udivmoddi4+0x124>
 800118a:	4608      	mov	r0, r1
 800118c:	e70a      	b.n	8000fa4 <__udivmoddi4+0xd8>
 800118e:	4464      	add	r4, ip
 8001190:	3802      	subs	r0, #2
 8001192:	e742      	b.n	800101a <__udivmoddi4+0x14e>

08001194 <__aeabi_idiv0>:
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <_ZN10spi_analogC1Ev>:

static uint8_t config_adress = 0x08;
static uint16_t config = 0x200A;
static uint8_t data_adress = 0x58;

spi_analog::spi_analog()
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
{
	SPIx = ANALOG_SPI;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a35      	ldr	r2, [pc, #212]	; (8001278 <_ZN10spi_analogC1Ev+0xe0>)
 80011a4:	605a      	str	r2, [r3, #4]
	pin_cs1 = REF_ELECT_UNI_cs_pin;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	819a      	strh	r2, [r3, #12]
	GPIOx_cs1 = REF_ELECT_UNI_cs_GPIO_Port;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <_ZN10spi_analogC1Ev+0xe4>)
 80011b0:	609a      	str	r2, [r3, #8]
	pin_rd1 = REF_ELECT_UNI_rd_pin;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	829a      	strh	r2, [r3, #20]
	GPIOx_rd1 =  REF_ELECT_UNI_rd_GPIO_Port;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <_ZN10spi_analogC1Ev+0xe4>)
 80011bc:	611a      	str	r2, [r3, #16]
	pin_cs2 = TIA_OUT_UNI_cs_pin;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	839a      	strh	r2, [r3, #28]
	GPIOx_cs2 = TIA_OUT_UNI_cs_GPIO_Port;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <_ZN10spi_analogC1Ev+0xe8>)
 80011c8:	619a      	str	r2, [r3, #24]
	pin_rd2 = TIA_OUT_UNI_rd_pin;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	849a      	strh	r2, [r3, #36]	; 0x24
	GPIOx_rd2 =  TIA_OUT_UNI_rd_GPIO_Port;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <_ZN10spi_analogC1Ev+0xe8>)
 80011d4:	621a      	str	r2, [r3, #32]

	HAL_GPIO_WritePin(GPIOx_cs1, pin_cs1, GPIO_PIN_SET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6898      	ldr	r0, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	899b      	ldrh	r3, [r3, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	f016 f867 	bl	80172b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_cs2, pin_cs2, GPIO_PIN_SET);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6998      	ldr	r0, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8b9b      	ldrh	r3, [r3, #28]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f016 f85f 	bl	80172b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_cs1, pin_cs1, GPIO_PIN_RESET);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6898      	ldr	r0, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	899b      	ldrh	r3, [r3, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	f016 f857 	bl	80172b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIx, &config_adress, 1, 128);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6858      	ldr	r0, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	2201      	movs	r2, #1
 800120e:	491d      	ldr	r1, [pc, #116]	; (8001284 <_ZN10spi_analogC1Ev+0xec>)
 8001210:	f017 ffdd 	bl	80191ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPIx, (uint8_t*)&config, 2, 128);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6858      	ldr	r0, [r3, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	2202      	movs	r2, #2
 800121c:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN10spi_analogC1Ev+0xf0>)
 800121e:	f017 ffd6 	bl	80191ce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx_cs1, pin_cs1, GPIO_PIN_SET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6898      	ldr	r0, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f016 f841 	bl	80172b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_cs2, pin_cs1, GPIO_PIN_RESET);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6998      	ldr	r0, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	899b      	ldrh	r3, [r3, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	f016 f839 	bl	80172b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPIx, &config_adress, 1, 128);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6858      	ldr	r0, [r3, #4]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	2201      	movs	r2, #1
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <_ZN10spi_analogC1Ev+0xec>)
 800124c:	f017 ffbf 	bl	80191ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPIx, (uint8_t*)&config, 2, 128);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6858      	ldr	r0, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	2202      	movs	r2, #2
 8001258:	490b      	ldr	r1, [pc, #44]	; (8001288 <_ZN10spi_analogC1Ev+0xf0>)
 800125a:	f017 ffb8 	bl	80191ce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx_cs2, pin_cs1, GPIO_PIN_SET);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6998      	ldr	r0, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	899b      	ldrh	r3, [r3, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f016 f823 	bl	80172b4 <HAL_GPIO_WritePin>
}
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001ac 	.word	0x200001ac
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	20000000 	.word	0x20000000
 8001288:	20000002 	.word	0x20000002

0800128c <_Z18store_flash_memorymPht>:
typedef uint64_t flash_datatype;
#define DATA_SIZE sizeof(flash_datatype)


void store_flash_memory(uint32_t memory_address, uint8_t *data, uint16_t data_length)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]
   uint8_t double_word_data[DATA_SIZE];
   FLASH_EraseInitTypeDef flash_erase_struct = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
   HAL_FLASH_Unlock();
 80012aa:	f015 fcf5 	bl	8016c98 <HAL_FLASH_Unlock>
   // defining the members of a struct
   flash_erase_struct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
   // defining an onset number page to be erased

   // erase the pages, this step is mandatory
   //HAL_FLASHEx_Erase(&flash_erase_struct, &error_status);
   int i = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   // using while loop, convey all data to the flash memory
   while ( i <= data_length)
 80012b6:	e01e      	b.n	80012f6 <_Z18store_flash_memorymPht+0x6a>
   {
	double_word_data[i % DATA_SIZE] = data[i];
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	441a      	add	r2, r3
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	3330      	adds	r3, #48	; 0x30
 80012c8:	443b      	add	r3, r7
 80012ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
	i++;
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	3301      	adds	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (i % DATA_SIZE == 0)
 80012d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10b      	bne.n	80012f6 <_Z18store_flash_memorymPht+0x6a>
	{
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memory_address + i -
 80012de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	f1a3 0108 	sub.w	r1, r3, #8
		DATA_SIZE, *((uint64_t *)double_word_data));
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memory_address + i -
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	2003      	movs	r0, #3
 80012f2:	f015 fc7d 	bl	8016bf0 <HAL_FLASH_Program>
   while ( i <= data_length)
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dddc      	ble.n	80012b8 <_Z18store_flash_memorymPht+0x2c>

	}
   }
   // convey data if something left
   if (i % DATA_SIZE != 0)
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00d      	beq.n	8001324 <_Z18store_flash_memorymPht+0x98>
   {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memory_address + i
 8001308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	441a      	add	r2, r3
		- i % DATA_SIZE, *((flash_datatype *)double_word_data));
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	f003 0307 	and.w	r3, r3, #7
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memory_address + i
 8001314:	1ad1      	subs	r1, r2, r3
		- i % DATA_SIZE, *((flash_datatype *)double_word_data));
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, memory_address + i
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	2003      	movs	r0, #3
 8001320:	f015 fc66 	bl	8016bf0 <HAL_FLASH_Program>
   }
	// lock the memory
   HAL_FLASH_Lock();
 8001324:	f015 fcda 	bl	8016cdc <HAL_FLASH_Lock>
}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_Z17read_flash_memorymPht>:

void read_flash_memory(uint32_t memory_address, uint8_t *data, uint16_t data_length)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < data_length; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e00b      	b.n	800135c <_Z17read_flash_memorymPht+0x2c>
    {
	*(data + i) = (*(uint8_t *)(memory_address + i));
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	4619      	mov	r1, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	780a      	ldrb	r2, [r1, #0]
 8001354:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < data_length; i++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbef      	blt.n	8001344 <_Z17read_flash_memorymPht+0x14>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_ZN2ps5RangeINS_8VoltGainEtED1Ev>:

namespace ps
{

    template<typename GainType, typename IntType>
    class Range
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f01d f97a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN2ps9VoltRangeD1Ev>:
#include "stdint.h"
using namespace std;

namespace ps
{
    class VoltRange : public Range<VoltGain,uint16_t> 
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffeb 	bl	8001372 <_ZN2ps5RangeINS_8VoltGainEtED1Ev>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_ZN2ps5RangeINS_12CurrGainPathEtED1Ev>:
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f01d f960 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZN2ps12ReturnStatusC1Ev>:
    class ReturnStatus
    {

        public:

            ReturnStatus() { };
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3304      	adds	r3, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f01d f92e 	bl	801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_ZN11ArduinoJson9Internals11NonCopyableC1Ev>:
#include <string.h>
namespace ArduinoJson {
namespace Internals {
class NonCopyable {
 protected:
  NonCopyable() {}
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>:
class JsonObject;
class JsonVariant : public Internals::JsonVariantBase<JsonVariant> {
  template <typename Print>
  friend class Internals::JsonSerializer;
 public:
  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_ZNK11ArduinoJson11JsonVariant14variantIsArrayEv>:
  template <typename T>
  T variantAsInteger() const;
  bool variantIsBoolean() const;
  bool variantIsFloat() const;
  bool variantIsInteger() const;
  bool variantIsArray() const {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    return _type == Internals::JSON_ARRAY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b06      	cmp	r3, #6
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
  }
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>:
}
namespace ArduinoJson {
namespace Internals {
class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
    if (!jsonBuffer) return NULL;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE+0x14>
 8001446:	2300      	movs	r3, #0
 8001448:	e007      	b.n	800145a <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE+0x24>
    return jsonBuffer->alloc(n);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	4798      	blx	r3
 8001456:	4603      	mov	r3, r0
 8001458:	bf00      	nop
  }
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZN11ArduinoJson9JsonArrayC1EPNS_10JsonBufferE>:
                  public Internals::ReferenceType,
                  public Internals::NonCopyable,
                  public Internals::List<JsonVariant>,
                  public Internals::JsonBufferAllocated {
 public:
  explicit JsonArray(JsonBuffer *buffer) throw()
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
      : Internals::List<JsonVariant>(buffer) {}
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffb8 	bl	80013e2 <_ZN11ArduinoJson9Internals11NonCopyableC1Ev>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fc9c 	bl	8001db4 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEEC1EPNS_10JsonBufferE>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <_ZN11ArduinoJson9JsonArray7invalidEv>:
  JsonObject &createNestedObject();
  void remove(size_t index) {
    remove(begin() += index);
  }
  using Internals::List<JsonVariant>::remove;
  static JsonArray &invalid() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    static JsonArray instance(NULL);
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_ZN11ArduinoJson9JsonArray7invalidEv+0x48>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f3bf 8f5b 	dmb	ish
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d011      	beq.n	80014ca <_ZN11ArduinoJson9JsonArray7invalidEv+0x42>
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <_ZN11ArduinoJson9JsonArray7invalidEv+0x48>)
 80014a8:	f01c ffd6 	bl	801e458 <__cxa_guard_acquire>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf14      	ite	ne
 80014b2:	2301      	movne	r3, #1
 80014b4:	2300      	moveq	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <_ZN11ArduinoJson9JsonArray7invalidEv+0x42>
 80014bc:	2100      	movs	r1, #0
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <_ZN11ArduinoJson9JsonArray7invalidEv+0x4c>)
 80014c0:	f7ff ffcf 	bl	8001462 <_ZN11ArduinoJson9JsonArrayC1EPNS_10JsonBufferE>
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <_ZN11ArduinoJson9JsonArray7invalidEv+0x48>)
 80014c6:	f01c ffd3 	bl	801e470 <__cxa_guard_release>
    return instance;
 80014ca:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <_ZN11ArduinoJson9JsonArray7invalidEv+0x4c>)
  }
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000033c 	.word	0x2000033c
 80014d4:	20000334 	.word	0x20000334

080014d8 <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_9JsonArrayEE3getEv>:
  }
};
namespace Internals {
template <>
struct JsonVariantDefault<JsonArray> {
  static JsonArray &get() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    return JsonArray::invalid();
 80014dc:	f7ff ffd4 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 80014e0:	4603      	mov	r3, r0
  }
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZN11ArduinoJson9JsonArrayixEj>:
                                const JsonArraySubscript& source) {
  return source.printTo(os);
}
#endif
}
inline Internals::JsonArraySubscript JsonArray::operator[](size_t index) {
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	613b      	str	r3, [r7, #16]
      : _array(array), _index(index) {}
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
  return Internals::JsonArraySubscript(*this, index);
 8001506:	bf00      	nop
}
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>:
}
#ifdef _MSC_VER
#pragma warning(pop)
#endif
namespace ArduinoJson {
inline JsonArray &JsonArray::createNestedArray() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if (!_buffer) return JsonArray::invalid();
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x18>
 8001524:	f7ff ffb0 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 8001528:	4603      	mov	r3, r0
 800152a:	e00a      	b.n	8001542 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x2e>
  JsonArray &array = _buffer->createArray();
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f80a 	bl	800154a <_ZN11ArduinoJson10JsonBuffer11createArrayEv>
 8001536:	60f8      	str	r0, [r7, #12]
  add(array);
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fc66 	bl	8001e0c <_ZN11ArduinoJson9JsonArray3addIS0_EEbRKT_>
  return array;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_ZN11ArduinoJson10JsonBuffer11createArrayEv>:
  JsonObject &object = _buffer->createObject();
  add(object);
  return object;
}
}
inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  JsonArray *ptr = new (this) JsonArray(this);
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	2008      	movs	r0, #8
 8001556:	f7ff ff6e 	bl	8001436 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 800155a:	4604      	mov	r4, r0
 800155c:	2c00      	cmp	r4, #0
 800155e:	d003      	beq.n	8001568 <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x1e>
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff ff7d 	bl	8001462 <_ZN11ArduinoJson9JsonArrayC1EPNS_10JsonBufferE>
 8001568:	60fc      	str	r4, [r7, #12]
  return ptr ? *ptr : JsonArray::invalid();
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x2e>
 8001570:	f7ff ff8a 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 8001574:	4603      	mov	r3, r0
 8001576:	e000      	b.n	800157a <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x30>
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}

08001582 <_ZN11ArduinoJson9Internals7isdigitEc>:
  return object;
}
}
namespace ArduinoJson {
namespace Internals {
inline bool isdigit(char c) {
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b2f      	cmp	r3, #47	; 0x2f
 8001590:	d904      	bls.n	800159c <_ZN11ArduinoJson9Internals7isdigitEc+0x1a>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b39      	cmp	r3, #57	; 0x39
 8001596:	d801      	bhi.n	800159c <_ZN11ArduinoJson9Internals7isdigitEc+0x1a>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <_ZN11ArduinoJson9Internals7isdigitEc+0x1c>
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_ZN11ArduinoJson9Internals6issignEc>:
inline bool issign(char c) {
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  return '-' == c || c == '+';
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b2d      	cmp	r3, #45	; 0x2d
 80015b8:	d002      	beq.n	80015c0 <_ZN11ArduinoJson9Internals6issignEc+0x16>
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b2b      	cmp	r3, #43	; 0x2b
 80015be:	d101      	bne.n	80015c4 <_ZN11ArduinoJson9Internals6issignEc+0x1a>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <_ZN11ArduinoJson9Internals6issignEc+0x1c>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_ZN11ArduinoJson9Internals7isFloatEPKc>:
}
}
namespace ArduinoJson {
namespace Internals {
inline bool isFloat(const char* s) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if (!s) return false;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x12>
 80015e2:	2300      	movs	r3, #0
 80015e4:	e075      	b.n	80016d2 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xfe>
  if (!strcmp(s, "NaN")) return true;
 80015e6:	493d      	ldr	r1, [pc, #244]	; (80016dc <_ZN11ArduinoJson9Internals7isFloatEPKc+0x108>)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe fdf5 	bl	80001d8 <strcmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x24>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e06c      	b.n	80016d2 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xfe>
  if (issign(*s)) s++;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ffd4 	bl	80015aa <_ZN11ArduinoJson9Internals6issignEc>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <_ZN11ArduinoJson9Internals7isFloatEPKc+0x3a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	607b      	str	r3, [r7, #4]
  if (!strcmp(s, "Infinity")) return true;
 800160e:	4934      	ldr	r1, [pc, #208]	; (80016e0 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x10c>)
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7fe fde1 	bl	80001d8 <strcmp>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x4c>
 800161c:	2301      	movs	r3, #1
 800161e:	e058      	b.n	80016d2 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xfe>
  if (*s == '\0') return false;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x5e>
 8001628:	2300      	movs	r3, #0
 800162a:	e052      	b.n	80016d2 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xfe>
  while (isdigit(*s)) s++;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffa3 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f4      	bne.n	800162c <_ZN11ArduinoJson9Internals7isFloatEPKc+0x58>
  if (*s == '.') {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b2e      	cmp	r3, #46	; 0x2e
 8001648:	d10e      	bne.n	8001668 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x94>
    s++;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
    while (isdigit(*s)) s++;
 8001650:	e002      	b.n	8001658 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x84>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff90 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f4      	bne.n	8001652 <_ZN11ArduinoJson9Internals7isFloatEPKc+0x7e>
  }
  if (*s == 'e' || *s == 'E') {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b65      	cmp	r3, #101	; 0x65
 800166e:	d003      	beq.n	8001678 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xa4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b45      	cmp	r3, #69	; 0x45
 8001676:	d125      	bne.n	80016c4 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xf0>
    s++;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
    if (issign(*s)) s++;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff91 	bl	80015aa <_ZN11ArduinoJson9Internals6issignEc>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xc0>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
    if (!isdigit(*s)) return false;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff72 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xe0>
 80016aa:	2300      	movs	r3, #0
 80016ac:	e011      	b.n	80016d2 <_ZN11ArduinoJson9Internals7isFloatEPKc+0xfe>
    while (isdigit(*s)) s++;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff62 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f4      	bne.n	80016ae <_ZN11ArduinoJson9Internals7isFloatEPKc+0xda>
  }
  return *s == '\0';
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	08020e10 	.word	0x08020e10
 80016e0:	08020e14 	.word	0x08020e14

080016e4 <_ZN11ArduinoJson9Internals9isIntegerEPKc>:
}
}
namespace ArduinoJson {
namespace Internals {
inline bool isInteger(const char* s) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if (!s) return false;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <_ZN11ArduinoJson9Internals9isIntegerEPKc+0x12>
 80016f2:	2300      	movs	r3, #0
 80016f4:	e01d      	b.n	8001732 <_ZN11ArduinoJson9Internals9isIntegerEPKc+0x4e>
  if (issign(*s)) s++;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff55 	bl	80015aa <_ZN11ArduinoJson9Internals6issignEc>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <_ZN11ArduinoJson9Internals9isIntegerEPKc+0x30>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
  while (isdigit(*s)) s++;
 800170c:	e002      	b.n	8001714 <_ZN11ArduinoJson9Internals9isIntegerEPKc+0x30>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff32 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f4      	bne.n	800170e <_ZN11ArduinoJson9Internals9isIntegerEPKc+0x2a>
  return *s == '\0';
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_ZN11ArduinoJson11JsonVariantC1ERKNS_9JsonArrayE>:
  return negative_result ? T(~result + 1) : result;
}
}
}
namespace ArduinoJson {
inline JsonVariant::JsonVariant(const JsonArray &array) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  if (array.success()) {
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fb6e 	bl	8001e28 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE7successEv>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <_ZN11ArduinoJson11JsonVariantC1ERKNS_9JsonArrayE+0x26>
    _type = Internals::JSON_ARRAY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2206      	movs	r2, #6
 8001756:	701a      	strb	r2, [r3, #0]
    _content.asArray = const_cast<JsonArray *>(&array);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	e002      	b.n	8001766 <_ZN11ArduinoJson11JsonVariantC1ERKNS_9JsonArrayE+0x2c>
  } else {
    _type = Internals::JSON_UNDEFINED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  }
}
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_ZNK11ArduinoJson11JsonVariant14variantAsArrayEv>:
    _content.asObject = const_cast<JsonObject *>(&object);
  } else {
    _type = Internals::JSON_UNDEFINED;
  }
}
inline JsonArray &JsonVariant::variantAsArray() const {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if (_type == Internals::JSON_ARRAY) return *_content.asArray;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b06      	cmp	r3, #6
 800177e:	d102      	bne.n	8001786 <_ZNK11ArduinoJson11JsonVariant14variantAsArrayEv+0x16>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	e003      	b.n	800178e <_ZNK11ArduinoJson11JsonVariant14variantAsArrayEv+0x1e>
  return JsonArray::invalid();
 8001786:	f7ff fe7f 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 800178a:	4603      	mov	r3, r0
 800178c:	bf00      	nop
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv>:
  if (_type == JSON_BOOLEAN) return true;
  if (_type != JSON_UNPARSED || _content.asString == NULL) return false;
  return !strcmp(_content.asString, "true") ||
         !strcmp(_content.asString, "false");
}
inline bool JsonVariant::variantIsInteger() const {
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  using namespace Internals;
  return _type == JSON_POSITIVE_INTEGER || _type == JSON_NEGATIVE_INTEGER ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d00f      	beq.n	80017c6 <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv+0x30>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d00b      	beq.n	80017c6 <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv+0x30>
         (_type == JSON_UNPARSED && isInteger(_content.asString));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
  return _type == JSON_POSITIVE_INTEGER || _type == JSON_NEGATIVE_INTEGER ||
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d109      	bne.n	80017ca <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv+0x34>
         (_type == JSON_UNPARSED && isInteger(_content.asString));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff92 	bl	80016e4 <_ZN11ArduinoJson9Internals9isIntegerEPKc>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv+0x34>
  return _type == JSON_POSITIVE_INTEGER || _type == JSON_NEGATIVE_INTEGER ||
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv+0x36>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv>:
inline bool JsonVariant::variantIsFloat() const {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  using namespace Internals;
  return _type == JSON_FLOAT || _type == JSON_POSITIVE_INTEGER ||
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
         _type == JSON_NEGATIVE_INTEGER ||
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d013      	beq.n	800180c <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x38>
  return _type == JSON_FLOAT || _type == JSON_POSITIVE_INTEGER ||
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d00f      	beq.n	800180c <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x38>
         _type == JSON_NEGATIVE_INTEGER ||
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
  return _type == JSON_FLOAT || _type == JSON_POSITIVE_INTEGER ||
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d00b      	beq.n	800180c <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x38>
         (_type == JSON_UNPARSED && isFloat(_content.asString));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
         _type == JSON_NEGATIVE_INTEGER ||
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d109      	bne.n	8001810 <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x3c>
         (_type == JSON_UNPARSED && isFloat(_content.asString));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fee7 	bl	80015d4 <_ZN11ArduinoJson9Internals7isFloatEPKc>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x3c>
         _type == JSON_NEGATIVE_INTEGER ||
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv+0x3e>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZN2ps13convertUsToMsEy>:

namespace ps
{

    inline uint32_t convertUsToMs(uint64_t t)
    {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	e9c7 0100 	strd	r0, r1, [r7]
        return uint32_t(t/UINT64_C(1000));
 8001824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7ff faf6 	bl	8000e20 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
    }
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZN2ps13convertMsToUsEm>:


    inline uint64_t convertMsToUs(uint32_t t)
    {
 8001842:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
        return uint64_t(t)*UINT64_C(1000);
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	2000      	movs	r0, #0
 8001850:	460c      	mov	r4, r1
 8001852:	4605      	mov	r5, r0
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f04f 0a00 	mov.w	sl, #0
 800185c:	f04f 0b00 	mov.w	fp, #0
 8001860:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001864:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001868:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800186c:	4650      	mov	r0, sl
 800186e:	4659      	mov	r1, fp
 8001870:	1b02      	subs	r2, r0, r4
 8001872:	eb61 0305 	sbc.w	r3, r1, r5
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001884:	0090      	lsls	r0, r2, #2
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	eb12 0804 	adds.w	r8, r2, r4
 800188e:	eb43 0905 	adc.w	r9, r3, r5
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	4642      	mov	r2, r8
 80018ac:	464b      	mov	r3, r9
    }
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80018ba:	4770      	bx	lr

080018bc <timerCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ps::SystemState systemState;
extern "C" void timerCallback()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
    systemState.updateTestOnTimer();
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <timerCallback+0x10>)
 80018c2:	f012 fbbb 	bl	801403c <_ZN2ps11SystemState17updateTestOnTimerEv>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003d0 	.word	0x200003d0

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d4:	f014 ffe4 	bl	80168a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d8:	f000 f820 	bl	800191c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f000 f9c0 	bl	8001c60 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 80018e0:	f000 f894 	bl	8001a0c <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 80018e4:	f000 f8ce 	bl	8001a84 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80018e8:	f000 f95c 	bl	8001ba4 <_ZL12MX_TIM3_Initv>
  MX_USB_DEVICE_Init();
 80018ec:	f01c f8ca 	bl	801da84 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //Serial.begin(UsbSerialBaudrate);
  systemState.initialize();
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <main+0x44>)
 80018f2:	f00f f839 	bl	8010968 <_ZN2ps11SystemState10initializeEv>
  systemState.setTestTimerCallback(timerCallback);
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <main+0x48>)
 80018f8:	4806      	ldr	r0, [pc, #24]	; (8001914 <main+0x44>)
 80018fa:	f012 fb8c 	bl	8014016 <_ZN2ps11SystemState20setTestTimerCallbackEPFvvE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  systemState.updateMessageData();
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <main+0x44>)
 8001900:	f012 fa08 	bl	8013d14 <_ZN2ps11SystemState17updateMessageDataEv>
	  systemState.processMessages();
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <main+0x44>)
 8001906:	f012 fa29 	bl	8013d5c <_ZN2ps11SystemState15processMessagesEv>
	  systemState.serviceDataBuffer();
 800190a:	4802      	ldr	r0, [pc, #8]	; (8001914 <main+0x44>)
 800190c:	f012 fb20 	bl	8013f50 <_ZN2ps11SystemState17serviceDataBufferEv>
	  systemState.updateMessageData();
 8001910:	e7f5      	b.n	80018fe <main+0x2e>
 8001912:	bf00      	nop
 8001914:	200003d0 	.word	0x200003d0
 8001918:	080018bd 	.word	0x080018bd

0800191c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2230      	movs	r2, #48	; 0x30
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f01f f982 	bl	8020c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <_Z18SystemClock_Configv+0xe8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <_Z18SystemClock_Configv+0xe8>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <_Z18SystemClock_Configv+0xe8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <_Z18SystemClock_Configv+0xec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <_Z18SystemClock_Configv+0xec>)
 800196a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <_Z18SystemClock_Configv+0xec>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001986:	2301      	movs	r3, #1
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198a:	2310      	movs	r3, #16
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	2302      	movs	r3, #2
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001998:	2310      	movs	r3, #16
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019a4:	2304      	movs	r3, #4
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4618      	mov	r0, r3
 80019ae:	f016 ff17 	bl	80187e0 <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80019c2:	f000 f9db 	bl	8001d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c6:	230f      	movs	r3, #15
 80019c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f017 f975 	bl	8018cd0 <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80019f6:	f000 f9c1 	bl	8001d7c <Error_Handler>
  }
}
 80019fa:	bf00      	nop
 80019fc:	3750      	adds	r7, #80	; 0x50
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <_ZL12MX_SPI2_Initv+0x74>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a58:	220a      	movs	r2, #10
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <_ZL12MX_SPI2_Initv+0x70>)
 8001a5e:	f017 fb2d 	bl	80190bc <HAL_SPI_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001a72:	f000 f983 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000204 	.word	0x20000204
 8001a80:	40003800 	.word	0x40003800

08001a84 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001adc:	4830      	ldr	r0, [pc, #192]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001ade:	f017 fd7d 	bl	80195dc <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001af2:	f000 f943 	bl	8001d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001af6:	482a      	ldr	r0, [pc, #168]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001af8:	f017 fdbf 	bl	801967a <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001b0c:	f000 f936 	bl	8001d7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001b10:	2307      	movs	r3, #7
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4820      	ldr	r0, [pc, #128]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001b20:	f017 ffce 	bl	8019ac0 <HAL_TIM_SlaveConfigSynchro>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001b34:	f000 f922 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001b48:	f018 fb4a 	bl	801a1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001b5c:	f000 f90e 	bl	8001d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b60:	2360      	movs	r3, #96	; 0x60
 8001b62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001b78:	f017 fee0 	bl	801993c <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001b8c:	f000 f8f6 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001b92:	f014 fd79 	bl	8016688 <HAL_TIM_MspPostInit>

}
 8001b96:	bf00      	nop
 8001b98:	3738      	adds	r7, #56	; 0x38
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000340 	.word	0x20000340

08001ba4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bc4:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <_ZL12MX_TIM3_Initv+0xb8>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be8:	481b      	ldr	r0, [pc, #108]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001bea:	f017 fcf7 	bl	80195dc <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8001bfe:	f000 f8bd 	bl	8001d7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001c02:	2307      	movs	r3, #7
 8001c04:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4811      	ldr	r0, [pc, #68]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c12:	f017 ff55 	bl	8019ac0 <HAL_TIM_SlaveConfigSynchro>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001c26:	f000 f8a9 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4808      	ldr	r0, [pc, #32]	; (8001c58 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c38:	f018 fad2 	bl	801a1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001c4c:	f000 f896 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000388 	.word	0x20000388
 8001c5c:	40000400 	.word	0x40000400

08001c60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <_ZL12MX_GPIO_Initv+0x10c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_GAIN_A0_GPIO_Port, DAC_GAIN_A0_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cec:	4820      	ldr	r0, [pc, #128]	; (8001d70 <_ZL12MX_GPIO_Initv+0x110>)
 8001cee:	f015 fae1 	bl	80172b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_GAIN_A1_Pin|SW_WRK_ELECT_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001cf8:	481e      	ldr	r0, [pc, #120]	; (8001d74 <_ZL12MX_GPIO_Initv+0x114>)
 8001cfa:	f015 fadb 	bl	80172b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CTR_ELECT_Pin|SW_REF_ELECT_Pin|TIA_GAIN_A1_Pin|REF_GAIN_A0_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001d04:	481c      	ldr	r0, [pc, #112]	; (8001d78 <_ZL12MX_GPIO_Initv+0x118>)
 8001d06:	f015 fad5 	bl	80172b4 <HAL_GPIO_WritePin>
                          |REF_GAIN_A1_Pin|TIA_GAIN_A0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DAC_GAIN_A0_Pin */
  GPIO_InitStruct.Pin = DAC_GAIN_A0_Pin;
 8001d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_GAIN_A0_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4813      	ldr	r0, [pc, #76]	; (8001d70 <_ZL12MX_GPIO_Initv+0x110>)
 8001d24:	f015 f92a 	bl	8016f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_GAIN_A1_Pin SW_WRK_ELECT_Pin */
  GPIO_InitStruct.Pin = DAC_GAIN_A1_Pin|SW_WRK_ELECT_Pin;
 8001d28:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <_ZL12MX_GPIO_Initv+0x114>)
 8001d42:	f015 f91b 	bl	8016f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_CTR_ELECT_Pin SW_REF_ELECT_Pin TIA_GAIN_A1_Pin REF_GAIN_A0_Pin
                           REF_GAIN_A1_Pin TIA_GAIN_A0_Pin */
  GPIO_InitStruct.Pin = SW_CTR_ELECT_Pin|SW_REF_ELECT_Pin|TIA_GAIN_A1_Pin|REF_GAIN_A0_Pin
 8001d46:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001d4a:	617b      	str	r3, [r7, #20]
                          |REF_GAIN_A1_Pin|TIA_GAIN_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <_ZL12MX_GPIO_Initv+0x118>)
 8001d60:	f015 f90c 	bl	8016f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <Error_Handler+0x8>

08001d86 <_ZN11ArduinoJson11JsonVariantC1IfEET_PNS_9Internals8EnableIfIXsrNS3_15IsFloatingPointIS2_EE5valueEvE4typeE>:
  JsonVariant(T value, typename Internals::EnableIf<
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d92:	6079      	str	r1, [r7, #4]
    _type = JSON_FLOAT;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2208      	movs	r2, #8
 8001d98:	701a      	strb	r2, [r3, #0]
    _content.asFloat = static_cast<JsonFloat>(value);
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7fe fb92 	bl	80004c4 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEEC1EPNS_10JsonBufferE>:
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>:
  size_t size() const {
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    size_t nodeCount = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	e005      	b.n	8001df8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv+0x20>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f6      	bne.n	8001dec <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv+0x14>
    return nodeCount;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
  }
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZN11ArduinoJson9JsonArray3addIS0_EEbRKT_>:
  bool add(const T &value) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    return add_impl<const T &>(value);
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f830 	bl	8001e7e <_ZN11ArduinoJson9JsonArray8add_implIRKS0_EEbT_>
 8001e1e:	4603      	mov	r3, r0
  }
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE7successEv>:
  bool success() const {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    return _buffer != NULL;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
  }
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_ZN11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEC1EPNS0_8ListNodeIS2_EE>:
  explicit ListIterator(ListNode<T> *node = NULL) : _node(node) {}
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_ZN11ArduinoJson9JsonArray8add_implIRKS0_EEbT_>:
  bool add_impl(TValueRef value) {
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
    iterator it = Internals::List<JsonVariant>::add();
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f858 	bl	8001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60bb      	str	r3, [r7, #8]
    if (it == end()) return false;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f836 	bl	8001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f818 	bl	8001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_ZN11ArduinoJson9JsonArray8add_implIRKS0_EEbT_+0x3c>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e00e      	b.n	8001ed8 <_ZN11ArduinoJson9JsonArray8add_implIRKS0_EEbT_+0x5a>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f82f 	bl	8001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 f868 	bl	8001fa4 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	bf00      	nop
  }
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>:
  bool operator==(const ListIterator<T> &other) const {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
    return _node == other._node;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
  }
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>:
  iterator end() {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    return iterator(NULL);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffa2 	bl	8001e60 <_ZN11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEC1EPNS0_8ListNodeIS2_EE>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  }
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>:
  T &operator*() const {
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
    return _node->content;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3308      	adds	r3, #8
  }
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>:
  iterator add() {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    node_type *newNode = new (_buffer) node_type();
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2018      	movs	r0, #24
 8001f50:	f7ff fa71 	bl	8001436 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 8001f54:	4604      	mov	r4, r0
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	d002      	beq.n	8001f60 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv+0x20>
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f000 f83a 	bl	8001fd4 <_ZN11ArduinoJson9Internals8ListNodeINS_11JsonVariantEEC1Ev>
 8001f60:	613c      	str	r4, [r7, #16]
    if (_firstNode) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv+0x48>
      node_type *lastNode = _firstNode;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	617b      	str	r3, [r7, #20]
      while (lastNode->next) lastNode = lastNode->next;
 8001f70:	e002      	b.n	8001f78 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv+0x38>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f8      	bne.n	8001f72 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv+0x32>
      lastNode->next = newNode;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e002      	b.n	8001f8e <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv+0x4e>
      _firstNode = newNode;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
    return iterator(newNode);
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff63 	bl	8001e60 <_ZN11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEC1EPNS0_8ListNodeIS2_EE>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  }
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}

08001fa4 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
    destination = source;
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fbbf 	bl	800173a <_ZN11ArduinoJson11JsonVariantC1ERKNS_9JsonArrayE>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	461c      	mov	r4, r3
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 8001fca:	2301      	movs	r3, #1
  }
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3724      	adds	r7, #36	; 0x24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd90      	pop	{r4, r7, pc}

08001fd4 <_ZN11ArduinoJson9Internals8ListNodeINS_11JsonVariantEEC1Ev>:
  ListNode() throw() : next(NULL) {}
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3308      	adds	r3, #8
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fa06 	bl	80013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_18JsonArraySubscriptEE4implEv>:
  const TImpl *impl() const {
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8001ffe:	687b      	ldr	r3, [r7, #4]
  }
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>:
  const_iterator begin() const {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    return const_iterator(_firstNode);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f881 	bl	8002126 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEC1EPKNS0_8ListNodeIS2_EE>
 8002024:	68fb      	ldr	r3, [r7, #12]
  }
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>:
  bool operator!=(const ListConstIterator<T> &other) const {
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
    return _node != other._node;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
  }
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>:
  const_iterator end() const {
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
    return const_iterator(NULL);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f85e 	bl	8002126 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEC1EPKNS0_8ListNodeIS2_EE>
 800206a:	68fb      	ldr	r3, [r7, #12]
  }
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>:
  bool operator!=(const ListConstIterator<T> &other) const {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    return _node != other._node;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
  }
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>:
  const_iterator end() const {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    return const_iterator(NULL);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f84a 	bl	8002144 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEC1EPKNS0_8ListNodeIS2_EE>
 80020b0:	68fb      	ldr	r3, [r7, #12]
  }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>:
  const T *operator->() {
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
    return &_node->content;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3308      	adds	r3, #8
  }
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>:
  ListConstIterator<T> &operator+=(size_t distance) {
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    while (_node && distance) {
 80020de:	e007      	b.n	80020f0 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj+0x1c>
      _node = _node->next;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
      --distance;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	603b      	str	r3, [r7, #0]
    while (_node && distance) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj+0x2a>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj+0xc>
    return *this;
 80020fe:	687b      	ldr	r3, [r7, #4]
  }
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>:
  const T *operator->() {
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    return &_node->content;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3308      	adds	r3, #8
  }
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEC1EPKNS0_8ListNodeIS2_EE>:
  explicit ListConstIterator(const ListNode<T> *node = NULL) : _node(node) {}
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEC1EPKNS0_8ListNodeIS2_EE>:
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZN2ps12VoltRangeDacD1Ev>:
            VoltRange(string name, float minValue, float maxValue, VoltGain voltGain, uint16_t maxInt)
                : Range<VoltGain,uint16_t>(name, minValue, maxValue, voltGain, maxInt) {};
    
    };

    class VoltRangeDac : public VoltRange 
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f90d 	bl	800138c <_ZN2ps9VoltRangeD1Ev>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN2ps9CurrRangeD1Ev>:
using namespace std;

namespace ps
{

    class CurrRange : public Range<CurrGainPath,uint16_t> 
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f90d 	bl	80013a6 <_ZN2ps5RangeINS_12CurrGainPathEtED1Ev>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZN2ps12VoltRangeAdcD1Ev>:

            VoltRangeDac(string name, float minValue, float maxValue, VoltGain voltGain, uint16_t maxInt)
                : VoltRange(name, minValue, maxValue, voltGain, maxInt) {};
    };

    class VoltRangeAdc : public VoltRange 
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f8f3 	bl	800138c <_ZN2ps9VoltRangeD1Ev>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZN2ps15AnalogSubsystemD1Ev>:
#include "exteranl_analog.h"

namespace ps
{

    class AnalogSubsystem
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3374      	adds	r3, #116	; 0x74
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ffea 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3328      	adds	r3, #40	; 0x28
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffd8 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffc6 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN2ps15KeyValueCommandINS_11SystemStateEED1Ev>:

namespace ps
{

    template<typename T>
    class KeyValueCommand
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3318      	adds	r3, #24
 80021ec:	4618      	mov	r0, r3
 80021ee:	f01c fa42 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f01c fa3e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EED1Ev>:
#include "string"
#include "stdint.h"
using namespace std;

template <typename T, size_t MAX_SIZE>
class Array
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EED1Ev+0x24>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f503 642f 	add.w	r4, r3, #2800	; 0xaf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	429c      	cmp	r4, r3
 800221c:	d004      	beq.n	8002228 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EED1Ev+0x24>
 800221e:	3c38      	subs	r4, #56	; 0x38
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff ffdd 	bl	80021e0 <_ZN2ps15KeyValueCommandINS_11SystemStateEED1Ev>
 8002226:	e7f7      	b.n	8002218 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EED1Ev+0x14>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bd90      	pop	{r4, r7, pc}

08002232 <_ZN2ps12CommandTableINS_11SystemStateELj50EED1Ev>:

namespace ps
{

    template<typename T, size_t MAX_SIZE>
    class CommandTable
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffe0 	bl	8002204 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EED1Ev>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <_ZN2ps8BaseTestD1Ev>:
using namespace std;

namespace ps
{

    class BaseTest
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <_ZN2ps8BaseTestD1Ev+0x24>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3324      	adds	r3, #36	; 0x24
 8002262:	4618      	mov	r0, r3
 8002264:	f01c fa07 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	08022258 	.word	0x08022258

08002278 <_ZN2ps12PeriodicTestD1Ev>:
#include "ps_constants.h"

namespace ps
{

    class PeriodicTest : public BaseTest
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <_ZN2ps12PeriodicTestD1Ev+0x20>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ffe1 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	0802245c 	.word	0x0802245c

0800229c <_ZN2ps10CyclicTestD1Ev>:
#include "ps_periodic_test.h"

namespace ps
{

    class CyclicTest : public PeriodicTest
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_ZN2ps10CyclicTestD1Ev+0x20>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ffe3 	bl	8002278 <_ZN2ps12PeriodicTestD1Ev>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	08022340 	.word	0x08022340

080022c0 <_ZN2ps12SinusoidTestD1Ev>:
#include "ps_lookup_table.h"

namespace ps
{

    class SinusoidTest : public PeriodicTest
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_ZN2ps12SinusoidTestD1Ev+0x20>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ffd1 	bl	8002278 <_ZN2ps12PeriodicTestD1Ev>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	080224e8 	.word	0x080224e8

080022e4 <_ZN2ps12ConstantTestD1Ev>:
#include "ps_base_test.h"

namespace ps
{

    class ConstantTest : public BaseTest
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_ZN2ps12ConstantTestD1Ev+0x20>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ffab 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	080222b8 	.word	0x080222b8

08002308 <_ZN2ps14SquareWaveTestD1Ev>:
#define PS_SQUAREWAVE_TEST_H
#include "ps_base_test.h"

namespace ps 
{
    class SquareWaveTest : public BaseTest
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_ZN2ps14SquareWaveTestD1Ev+0x20>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff99 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	08022574 	.word	0x08022574

0800232c <_ZN2ps15LinearSweepTestD1Ev>:
#include "ps_base_test.h"

namespace ps
{

    class LinearSweepTest : public BaseTest
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <_ZN2ps15LinearSweepTestD1Ev+0x20>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff87 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	080223cc 	.word	0x080223cc

08002350 <_ZN2ps13MultiStepTestILj2EED1Ev>:

namespace ps
{

    template<size_t MAX_SIZE>
    class MultiStepTest : public BaseTest
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_ZN2ps13MultiStepTestILj2EED1Ev+0x20>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff75 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	080221d4 	.word	0x080221d4

08002374 <_ZN2ps13MultiStepTestILj50EED1Ev>:
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_ZN2ps13MultiStepTestILj50EED1Ev+0x20>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff63 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	08022154 	.word	0x08022154

08002398 <_ZN2ps11VoltammetryD1Ev>:
using namespace std;

namespace ps
{

    class Voltammetry
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ffe4 	bl	8002374 <_ZN2ps13MultiStepTestILj50EED1Ev>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ffcc 	bl	8002350 <_ZN2ps13MultiStepTestILj2EED1Ev>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffb4 	bl	800232c <_ZN2ps15LinearSweepTestD1Ev>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff9c 	bl	8002308 <_ZN2ps14SquareWaveTestD1Ev>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff84 	bl	80022e4 <_ZN2ps12ConstantTestD1Ev>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	33a0      	adds	r3, #160	; 0xa0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff6d 	bl	80022c0 <_ZN2ps12SinusoidTestD1Ev>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3340      	adds	r3, #64	; 0x40
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff56 	bl	800229c <_ZN2ps10CyclicTestD1Ev>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff2c 	bl	8002250 <_ZN2ps8BaseTestD1Ev>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_ZN2ps11SystemStateD1Ev>:
#include "ArduinoJson.h"

namespace ps
{

    class SystemState
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 43e2 	add.w	r3, r3, #28928	; 0x7100
 8002410:	3370      	adds	r3, #112	; 0x70
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffc0 	bl	8002398 <_ZN2ps11VoltammetryD1Ev>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff07 	bl	8002232 <_ZN2ps12CommandTableINS_11SystemStateELj50EED1Ev>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fec1 	bl	80021b0 <_ZN2ps15AnalogSubsystemD1Ev>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 80ad 	bne.w	80025a4 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002450:	4293      	cmp	r3, r2
 8002452:	f040 80a7 	bne.w	80025a4 <_Z41__static_initialization_and_destruction_0ii+0x16c>
    {
        string("VoltGain1X"),
        string("VoltGain2X"),
        string("VoltGain5X"),
        string("VoltGain10X")
    };
 8002456:	4c64      	ldr	r4, [pc, #400]	; (80025e8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8002458:	4625      	mov	r5, r4
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4618      	mov	r0, r3
 8002460:	f01c f809 	bl	801e476 <_ZNSaIcEC1Ev>
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	461a      	mov	r2, r3
 800246a:	4960      	ldr	r1, [pc, #384]	; (80025ec <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800246c:	4628      	mov	r0, r5
 800246e:	f01c faa9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	4618      	mov	r0, r3
 8002478:	f01b fffe 	bl	801e478 <_ZNSaIcED1Ev>
 800247c:	3418      	adds	r4, #24
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f01b fff7 	bl	801e476 <_ZNSaIcEC1Ev>
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	461a      	mov	r2, r3
 800248e:	4958      	ldr	r1, [pc, #352]	; (80025f0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002490:	4620      	mov	r0, r4
 8002492:	f01c fa97 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f01b ffec 	bl	801e478 <_ZNSaIcED1Ev>
 80024a0:	3418      	adds	r4, #24
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4618      	mov	r0, r3
 80024a8:	f01b ffe5 	bl	801e476 <_ZNSaIcEC1Ev>
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	461a      	mov	r2, r3
 80024b2:	4950      	ldr	r1, [pc, #320]	; (80025f4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80024b4:	4620      	mov	r0, r4
 80024b6:	f01c fa85 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4618      	mov	r0, r3
 80024c0:	f01b ffda 	bl	801e478 <_ZNSaIcED1Ev>
 80024c4:	3418      	adds	r4, #24
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4618      	mov	r0, r3
 80024cc:	f01b ffd3 	bl	801e476 <_ZNSaIcEC1Ev>
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	461a      	mov	r2, r3
 80024d6:	4948      	ldr	r1, [pc, #288]	; (80025f8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80024d8:	4620      	mov	r0, r4
 80024da:	f01c fa73 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80024de:	f107 0318 	add.w	r3, r7, #24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f01b ffc8 	bl	801e478 <_ZNSaIcED1Ev>
        string("CurrGainPathIn1"),
        string("CurrGainPathIn2"),
        string("CurrGainPathIn3"),
        string("CurrGainPathIn4"),
        string("CurrGainPathErr")
    };
 80024e8:	4c44      	ldr	r4, [pc, #272]	; (80025fc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80024ea:	4625      	mov	r5, r4
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4618      	mov	r0, r3
 80024f2:	f01b ffc0 	bl	801e476 <_ZNSaIcEC1Ev>
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	461a      	mov	r2, r3
 80024fc:	4940      	ldr	r1, [pc, #256]	; (8002600 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80024fe:	4628      	mov	r0, r5
 8002500:	f01c fa60 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4618      	mov	r0, r3
 800250a:	f01b ffb5 	bl	801e478 <_ZNSaIcED1Ev>
 800250e:	3418      	adds	r4, #24
 8002510:	f107 0320 	add.w	r3, r7, #32
 8002514:	4618      	mov	r0, r3
 8002516:	f01b ffae 	bl	801e476 <_ZNSaIcEC1Ev>
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	461a      	mov	r2, r3
 8002520:	4938      	ldr	r1, [pc, #224]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8002522:	4620      	mov	r0, r4
 8002524:	f01c fa4e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	4618      	mov	r0, r3
 800252e:	f01b ffa3 	bl	801e478 <_ZNSaIcED1Ev>
 8002532:	3418      	adds	r4, #24
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4618      	mov	r0, r3
 800253a:	f01b ff9c 	bl	801e476 <_ZNSaIcEC1Ev>
 800253e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002542:	461a      	mov	r2, r3
 8002544:	4930      	ldr	r1, [pc, #192]	; (8002608 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8002546:	4620      	mov	r0, r4
 8002548:	f01c fa3c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	4618      	mov	r0, r3
 8002552:	f01b ff91 	bl	801e478 <_ZNSaIcED1Ev>
 8002556:	3418      	adds	r4, #24
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	4618      	mov	r0, r3
 800255e:	f01b ff8a 	bl	801e476 <_ZNSaIcEC1Ev>
 8002562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002566:	461a      	mov	r2, r3
 8002568:	4928      	ldr	r1, [pc, #160]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800256a:	4620      	mov	r0, r4
 800256c:	f01c fa2a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002574:	4618      	mov	r0, r3
 8002576:	f01b ff7f 	bl	801e478 <_ZNSaIcED1Ev>
 800257a:	3418      	adds	r4, #24
 800257c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002580:	4618      	mov	r0, r3
 8002582:	f01b ff78 	bl	801e476 <_ZNSaIcEC1Ev>
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	461a      	mov	r2, r3
 800258c:	4920      	ldr	r1, [pc, #128]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 800258e:	4620      	mov	r0, r4
 8002590:	f01c fa18 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002598:	4618      	mov	r0, r3
 800259a:	f01b ff6d 	bl	801e478 <_ZNSaIcED1Ev>
ps::SystemState systemState;
 800259e:	481d      	ldr	r0, [pc, #116]	; (8002614 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80025a0:	f00e f95e 	bl	8010860 <_ZN2ps11SystemStateC1Ev>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d119      	bne.n	80025de <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d114      	bne.n	80025de <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 80025b4:	4817      	ldr	r0, [pc, #92]	; (8002614 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80025b6:	f7ff ff24 	bl	8002402 <_ZN2ps11SystemStateD1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 80025ba:	4c17      	ldr	r4, [pc, #92]	; (8002618 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80025be:	429c      	cmp	r4, r3
 80025c0:	d004      	beq.n	80025cc <_Z41__static_initialization_and_destruction_0ii+0x194>
 80025c2:	3c18      	subs	r4, #24
 80025c4:	4620      	mov	r0, r4
 80025c6:	f01c f856 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025ca:	e7f7      	b.n	80025bc <_Z41__static_initialization_and_destruction_0ii+0x184>
    const string VoltGainStringArray[NumVoltGain] =
 80025cc:	4c13      	ldr	r4, [pc, #76]	; (800261c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80025d0:	429c      	cmp	r4, r3
 80025d2:	d004      	beq.n	80025de <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 80025d4:	3c18      	subs	r4, #24
 80025d6:	4620      	mov	r0, r4
 80025d8:	f01c f84d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025dc:	e7f7      	b.n	80025ce <_Z41__static_initialization_and_destruction_0ii+0x196>
}
 80025de:	bf00      	nop
 80025e0:	3730      	adds	r7, #48	; 0x30
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000025c 	.word	0x2000025c
 80025ec:	08020e20 	.word	0x08020e20
 80025f0:	08020e2c 	.word	0x08020e2c
 80025f4:	08020e38 	.word	0x08020e38
 80025f8:	08020e44 	.word	0x08020e44
 80025fc:	200002bc 	.word	0x200002bc
 8002600:	08020e50 	.word	0x08020e50
 8002604:	08020e60 	.word	0x08020e60
 8002608:	08020e70 	.word	0x08020e70
 800260c:	08020e80 	.word	0x08020e80
 8002610:	08020e90 	.word	0x08020e90
 8002614:	200003d0 	.word	0x200003d0
 8002618:	20000334 	.word	0x20000334
 800261c:	200002bc 	.word	0x200002bc

08002620 <_ZNK2ps13MultiStepTestILj50EE6isDoneEy>:
        return MAX_SIZE;
    }
    
    
    template<size_t MAX_SIZE>
    bool MultiStepTest<MAX_SIZE>::isDone(uint64_t t) const 
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	e9c7 2300 	strd	r2, r3, [r7]
    {
        if (t >= (getDuration() + quietTime_))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3368      	adds	r3, #104	; 0x68
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	4798      	blx	r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800263e:	1884      	adds	r4, r0, r2
 8002640:	eb41 0503 	adc.w	r5, r1, r3
 8002644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002648:	42a2      	cmp	r2, r4
 800264a:	41ab      	sbcs	r3, r5
 800264c:	bf2c      	ite	cs
 800264e:	2301      	movcs	r3, #1
 8002650:	2300      	movcc	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <_ZNK2ps13MultiStepTestILj50EE6isDoneEy+0x3c>
        {
            return true;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <_ZNK2ps13MultiStepTestILj50EE6isDoneEy+0x3e>
        }
        else
        {
            return false;
 800265c:	2300      	movs	r3, #0
        }

    }
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}

08002666 <_ZNK2ps13MultiStepTestILj50EE11getDoneTimeEv>:


    template<size_t MAX_SIZE>
    uint64_t MultiStepTest<MAX_SIZE>::getDoneTime() const 
 8002666:	b5b0      	push	{r4, r5, r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
    {
        return getDuration() + quietTime_;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3368      	adds	r3, #104	; 0x68
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002680:	1884      	adds	r4, r0, r2
 8002682:	eb41 0503 	adc.w	r5, r1, r3
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
    }
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bdb0      	pop	{r4, r5, r7, pc}

08002694 <_ZN2ps13MultiStepTestILj50EE5resetEv>:
    
    
    template<size_t MAX_SIZE>
    void MultiStepTest<MAX_SIZE>::reset() 
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    { }
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_ZNK2ps13MultiStepTestILj50EE8getValueEy>:
    
    
    template<size_t MAX_SIZE>
    float MultiStepTest<MAX_SIZE>::getValue(uint64_t t) const 
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	e9c7 2300 	strd	r2, r3, [r7]
    {
        float value = 0.0;
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24

        if (t < quietTime_)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026c4:	4290      	cmp	r0, r2
 80026c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80026ca:	d203      	bcs.n	80026d4 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x2c>
        {
            value = quietValue_;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	e02f      	b.n	8002734 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x8c>
        }
        else
        {
            uint64_t stepEndTime = quietTime_;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026da:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (size_t i=0; i<numStep_; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e021      	b.n	8002728 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x80>
            {
                stepEndTime += durationArray_[i];
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80026ea:	6979      	ldr	r1, [r7, #20]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd28 	bl	8003142 <_ZNK5ArrayIyLj50EEixEj>
 80026f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f6:	1814      	adds	r4, r2, r0
 80026f8:	eb43 0501 	adc.w	r5, r3, r1
 80026fc:	e9c7 4506 	strd	r4, r5, [r7, #24]
                if (t <= stepEndTime)
 8002700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002704:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002708:	4290      	cmp	r0, r2
 800270a:	eb71 0303 	sbcs.w	r3, r1, r3
 800270e:	d308      	bcc.n	8002722 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x7a>
                {
                    value = valueArray_[i];
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3340      	adds	r3, #64	; 0x40
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fd25 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 800271c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                    break;
 8002720:	e008      	b.n	8002734 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x8c>
            for (size_t i=0; i<numStep_; i++)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3d7      	bcc.n	80026e4 <_ZNK2ps13MultiStepTestILj50EE8getValueEy+0x3c>
                }
            }
        }
        return value;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	ee07 3a90 	vmov	s15, r3
    }
 800273a:	eeb0 0a67 	vmov.f32	s0, s15
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bdb0      	pop	{r4, r5, r7, pc}

08002744 <_ZNK2ps13MultiStepTestILj50EE11getMaxValueEv>:
    
    
    template<size_t MAX_SIZE>
    float MultiStepTest<MAX_SIZE>::getMaxValue() const 
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    {
        float maxValue = 0.0;
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e025      	b.n	80027a4 <_ZNK2ps13MultiStepTestILj50EE11getMaxValueEv+0x60>
        {
            if (i==0)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <_ZNK2ps13MultiStepTestILj50EE11getMaxValueEv+0x30>
            {
                maxValue = valueArray_[i];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3340      	adds	r3, #64	; 0x40
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fcfe 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 800276a:	eef0 7a40 	vmov.f32	s15, s0
 800276e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002772:	e014      	b.n	800279e <_ZNK2ps13MultiStepTestILj50EE11getMaxValueEv+0x5a>
            }
            else
            {
                maxValue = max(maxValue,valueArray_[i]);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3340      	adds	r3, #64	; 0x40
 8002778:	6979      	ldr	r1, [r7, #20]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fcf3 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 8002780:	eef0 7a40 	vmov.f32	s15, s0
 8002784:	edc7 7a04 	vstr	s15, [r7, #16]
 8002788:	f107 0210 	add.w	r2, r7, #16
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fcfa 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 8002798:	4603      	mov	r3, r0
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3d3      	bcc.n	8002758 <_ZNK2ps13MultiStepTestILj50EE11getMaxValueEv+0x14>
            }
        }
        return maxValue;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	ee07 3a90 	vmov	s15, r3
    }
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZNK2ps13MultiStepTestILj50EE11getMinValueEv>:
    
    
    template<size_t MAX_SIZE>
    float MultiStepTest<MAX_SIZE>::getMinValue() const 
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    {
        float minValue = 0.0;
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e025      	b.n	8002820 <_ZNK2ps13MultiStepTestILj50EE11getMinValueEv+0x60>
        {
            if (i==0)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <_ZNK2ps13MultiStepTestILj50EE11getMinValueEv+0x30>
            {
                minValue = valueArray_[i];
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3340      	adds	r3, #64	; 0x40
 80027de:	6979      	ldr	r1, [r7, #20]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fcc0 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	edc7 7a03 	vstr	s15, [r7, #12]
 80027ee:	e014      	b.n	800281a <_ZNK2ps13MultiStepTestILj50EE11getMinValueEv+0x5a>
            }
            else
            {
                minValue = min(minValue,valueArray_[i]);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3340      	adds	r3, #64	; 0x40
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fcb5 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 80027fc:	eef0 7a40 	vmov.f32	s15, s0
 8002800:	edc7 7a04 	vstr	s15, [r7, #16]
 8002804:	f107 0210 	add.w	r2, r7, #16
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fcd5 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 8002814:	4603      	mov	r3, r0
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	d3d3      	bcc.n	80027d4 <_ZNK2ps13MultiStepTestILj50EE11getMinValueEv+0x14>
            }
        }
        return minValue;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	ee07 3a90 	vmov	s15, r3
    }
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_ZN2ps12ReturnStatusD1Ev>:
    class ReturnStatus
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4618      	mov	r0, r3
 800284a:	f01b ff14 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZN2ps13MultiStepTestILj50EE8getParamERN11ArduinoJson10JsonObjectE>:


    template<size_t MAX_SIZE>
    void MultiStepTest<MAX_SIZE>::getParam(JsonObject &jsonDat)
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    {
        BaseTest::getParam(jsonDat);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fafa 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>

        ReturnStatus status;
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fda5 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f107 0208 	add.w	r2, r7, #8
 800287c:	6839      	ldr	r1, [r7, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fb68 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8002884:	6338      	str	r0, [r7, #48]	; 0x30

        if (status.success)
 8002886:	7a3b      	ldrb	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d035      	beq.n	80028f8 <_ZN2ps13MultiStepTestILj50EE8getParamERN11ArduinoJson10JsonObjectE+0xa0>
        {
            JsonArray &jsonStepArray = jsonDatPrm.createNestedArray(StepArrayKey);
 800288c:	491e      	ldr	r1, [pc, #120]	; (8002908 <_ZN2ps13MultiStepTestILj50EE8getParamERN11ArduinoJson10JsonObjectE+0xb0>)
 800288e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002890:	f000 fcae 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 8002894:	62f8      	str	r0, [r7, #44]	; 0x2c
            for (size_t i=0; i<numStep_; i++)
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
 800289a:	e027      	b.n	80028ec <_ZN2ps13MultiStepTestILj50EE8getParamERN11ArduinoJson10JsonObjectE+0x94>
            {
                JsonArray &jsonStep = jsonStepArray.createNestedArray();
 800289c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800289e:	f7fe fe39 	bl	8001514 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 80028a2:	62b8      	str	r0, [r7, #40]	; 0x28
                jsonStep.add(convertUsToMs(durationArray_[i]));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80028aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fcad 	bl	800320c <_ZN5ArrayIyLj50EEixEj>
 80028b2:	4603      	mov	r3, r0
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe ffad 	bl	800181a <_ZN2ps13convertUsToMsEy>
 80028c0:	4603      	mov	r3, r0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028cc:	f000 fcad 	bl	800322a <_ZN11ArduinoJson9JsonArray3addImEEbRKT_>
                jsonStep.add(valueArray_[i]);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3340      	adds	r3, #64	; 0x40
 80028d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fcb5 	bl	8003246 <_ZN5ArrayIfLj50EEixEj>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e2:	f000 fcbf 	bl	8003264 <_ZN11ArduinoJson9JsonArray3addIfEEbRKT_>
            for (size_t i=0; i<numStep_; i++)
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	3301      	adds	r3, #1
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80028f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3d1      	bcc.n	800289c <_ZN2ps13MultiStepTestILj50EE8getParamERN11ArduinoJson10JsonObjectE+0x44>
            }
        }
    }
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff9d 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 8002902:	3738      	adds	r7, #56	; 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	2000863c 	.word	0x2000863c

0800290c <_ZN2ps12ReturnStatusaSEOS0_>:
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	1d1a      	adds	r2, r3, #4
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3304      	adds	r3, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f01b feb0 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN2ps13MultiStepTestILj50EE8setParamERN11ArduinoJson10JsonObjectES4_>:


    template<size_t MAX_SIZE>
    ReturnStatus MultiStepTest<MAX_SIZE>::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
    {
        ReturnStatus status;
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7fe fd3a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	f107 0014 	add.w	r0, r7, #20
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f004 faaf 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ffd3 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff66 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>

        // Extract parameter JsonObjects
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f004 faec 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800297c:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d114      	bne.n	80029b6 <_ZN2ps13MultiStepTestILj50EE8setParamERN11ArduinoJson10JsonObjectES4_+0x7e>
        {
            return status;
        }

        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fade 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8002998:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <_ZN2ps13MultiStepTestILj50EE8setParamERN11ArduinoJson10JsonObjectES4_+0x82>
        {
            return status;
        }

        // Set parameters
        setValueAndDurationFromJson(jsonMsgPrm,jsonDatPrm,status);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029ae:	68b8      	ldr	r0, [r7, #8]
 80029b0:	f000 fc66 	bl	8003280 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE>

        return status;
 80029b4:	e002      	b.n	80029bc <_ZN2ps13MultiStepTestILj50EE8setParamERN11ArduinoJson10JsonObjectES4_+0x84>
            return status;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <_ZN2ps13MultiStepTestILj50EE8setParamERN11ArduinoJson10JsonObjectES4_+0x84>
            return status;
 80029ba:	bf00      	nop
    }
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	3738      	adds	r7, #56	; 0x38
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_ZN2ps13MultiStepTestILj50EE12setStepValueEjf>:
    void MultiStepTest<MAX_SIZE>::setStepValue(size_t n, float value)
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	ed87 0a01 	vstr	s0, [r7, #4]
        if (n < numStep_)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d208      	bcs.n	80029f0 <_ZN2ps13MultiStepTestILj50EE12setStepValueEjf+0x2c>
            valueArray_[n] = value;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3340      	adds	r3, #64	; 0x40
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fc2e 	bl	8003246 <_ZN5ArrayIfLj50EEixEj>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]
    }
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZNK2ps13MultiStepTestILj50EE12getStepValueEj>:
    float MultiStepTest<MAX_SIZE>::getStepValue(size_t n) const
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
        float value = 0.0;
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
        if (n < numStep_)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_ZNK2ps13MultiStepTestILj50EE12getStepValueEj+0x2c>
            value = valueArray_[n];
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3340      	adds	r3, #64	; 0x40
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fba3 	bl	8003166 <_ZNK5ArrayIfLj50EEixEj>
 8002a20:	ed87 0a03 	vstr	s0, [r7, #12]
        return value;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	ee07 3a90 	vmov	s15, r3
    }
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN2ps13MultiStepTestILj50EE15setStepDurationEjy>:
    void MultiStepTest<MAX_SIZE>::setStepDuration(size_t n, uint64_t duration)
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	e9c7 2300 	strd	r2, r3, [r7]
        if (n < numStep_)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20b      	bcs.n	8002a66 <_ZN2ps13MultiStepTestILj50EE15setStepDurationEjy+0x32>
            durationArray_[n] = duration;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fbd8 	bl	800320c <_ZN5ArrayIyLj50EEixEj>
 8002a5c:	4601      	mov	r1, r0
 8002a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a62:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_ZNK2ps13MultiStepTestILj50EE15getStepDurationEj>:
    uint64_t MultiStepTest<MAX_SIZE>::getStepDuration(size_t n) const
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
        uint64_t duration = 0;
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9c7 2302 	strd	r2, r3, [r7, #8]
        if (n < numStep_)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d208      	bcs.n	8002aa2 <_ZNK2ps13MultiStepTestILj50EE15getStepDurationEj+0x34>
            duration = durationArray_[n];
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fb52 	bl	8003142 <_ZNK5ArrayIyLj50EEixEj>
 8002a9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
        return duration;
 8002aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNK2ps13MultiStepTestILj50EE11getDurationEv>:
    uint64_t MultiStepTest<MAX_SIZE>::getDuration() const
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
        uint64_t duration = 0;
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (size_t i = 0; i<numStep_; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e010      	b.n	8002aec <_ZNK2ps13MultiStepTestILj50EE11getDurationEv+0x3c>
            duration += durationArray_[i];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fb35 	bl	8003142 <_ZNK5ArrayIyLj50EEixEj>
 8002ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002adc:	1814      	adds	r4, r2, r0
 8002ade:	eb43 0501 	adc.w	r5, r3, r1
 8002ae2:	e9c7 4504 	strd	r4, r5, [r7, #16]
        for (size_t i = 0; i<numStep_; i++)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3e8      	bcc.n	8002aca <_ZNK2ps13MultiStepTestILj50EE11getDurationEv+0x1a>
        return duration;
 8002af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    }
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b08 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj>:
    void MultiStepTest<MAX_SIZE>::setNumStep(size_t size)
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
        if (size <= MAX_SIZE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b32      	cmp	r3, #50	; 0x32
 8002b16:	d803      	bhi.n	8002b20 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0x18>
            numStep_ = size;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
        valueArray_.clear();
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3340      	adds	r3, #64	; 0x40
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 ff9f 	bl	8003a68 <_ZN5ArrayIfLj50EE5clearEv>
        durationArray_.clear();
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 ffa7 	bl	8003a84 <_ZN5ArrayIyLj50EE5clearEv>
        bool pos = true;
 8002b36:	2301      	movs	r3, #1
 8002b38:	77fb      	strb	r3, [r7, #31]
        for (size_t i=0; i< numStep_; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e02d      	b.n	8002b9c <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0x94>
            if (pos)
 8002b40:	7ffb      	ldrb	r3, [r7, #31]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0x5a>
                valueArray_.push_back(0.5);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3340      	adds	r3, #64	; 0x40
 8002b4a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	f107 0208 	add.w	r2, r7, #8
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ffa2 	bl	8003aa0 <_ZN5ArrayIfLj50EE9push_backERKf>
                pos = false;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e00c      	b.n	8002b7c <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0x74>
                valueArray_.push_back(-0.5);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3340      	adds	r3, #64	; 0x40
 8002b66:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8002b6a:	60fa      	str	r2, [r7, #12]
 8002b6c:	f107 020c 	add.w	r2, r7, #12
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 ff94 	bl	8003aa0 <_ZN5ArrayIfLj50EE9push_backERKf>
                pos = true;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	77fb      	strb	r3, [r7, #31]
            durationArray_.push_back(1000000);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f503 7088 	add.w	r0, r3, #272	; 0x110
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0xac>)
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4619      	mov	r1, r3
 8002b92:	f000 ffa2 	bl	8003ada <_ZN5ArrayIyLj50EE9push_backERKy>
        for (size_t i=0; i< numStep_; i++)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3cb      	bcc.n	8002b40 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj+0x38>
    }
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	000f4240 	.word	0x000f4240

08002bb8 <_ZNK2ps13MultiStepTestILj50EE10getNumStepEv>:
    size_t MultiStepTest<MAX_SIZE>::getNumStep() const
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
        return numStep_;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
    }
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZNK2ps13MultiStepTestILj50EE13getMaxNumStepEv>:
    size_t MultiStepTest<MAX_SIZE>::getMaxNumStep() const
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
        return MAX_SIZE;
 8002bda:	2332      	movs	r3, #50	; 0x32
    }
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_ZNK2ps13MultiStepTestILj2EE6isDoneEy>:
    bool MultiStepTest<MAX_SIZE>::isDone(uint64_t t) const 
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	e9c7 2300 	strd	r2, r3, [r7]
        if (t >= (getDuration() + quietTime_))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3368      	adds	r3, #104	; 0x68
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	4798      	blx	r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c06:	1884      	adds	r4, r0, r2
 8002c08:	eb41 0503 	adc.w	r5, r1, r3
 8002c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c10:	42a2      	cmp	r2, r4
 8002c12:	41ab      	sbcs	r3, r5
 8002c14:	bf2c      	ite	cs
 8002c16:	2301      	movcs	r3, #1
 8002c18:	2300      	movcc	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <_ZNK2ps13MultiStepTestILj2EE6isDoneEy+0x3c>
            return true;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <_ZNK2ps13MultiStepTestILj2EE6isDoneEy+0x3e>
            return false;
 8002c24:	2300      	movs	r3, #0
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}

08002c2e <_ZNK2ps13MultiStepTestILj2EE11getDoneTimeEv>:
    uint64_t MultiStepTest<MAX_SIZE>::getDoneTime() const 
 8002c2e:	b5b0      	push	{r4, r5, r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
        return getDuration() + quietTime_;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3368      	adds	r3, #104	; 0x68
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c48:	1884      	adds	r4, r0, r2
 8002c4a:	eb41 0503 	adc.w	r5, r1, r3
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
    }
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bdb0      	pop	{r4, r5, r7, pc}

08002c5c <_ZN2ps13MultiStepTestILj2EE5resetEv>:
    void MultiStepTest<MAX_SIZE>::reset() 
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    { }
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZNK2ps13MultiStepTestILj2EE8getValueEy>:
    float MultiStepTest<MAX_SIZE>::getValue(uint64_t t) const 
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	e9c7 2300 	strd	r2, r3, [r7]
        float value = 0.0;
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
        if (t < quietTime_)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c8c:	4290      	cmp	r0, r2
 8002c8e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c92:	d203      	bcs.n	8002c9c <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x2c>
            value = quietValue_;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e02d      	b.n	8002cf8 <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x88>
            uint64_t stepEndTime = quietTime_;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ca2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (size_t i=0; i<numStep_; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e020      	b.n	8002cee <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x7e>
                stepEndTime += durationArray_[i];
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3350      	adds	r3, #80	; 0x50
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 ff30 	bl	8003b18 <_ZNK5ArrayIyLj2EEixEj>
 8002cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbc:	1814      	adds	r4, r2, r0
 8002cbe:	eb43 0501 	adc.w	r5, r3, r1
 8002cc2:	e9c7 4506 	strd	r4, r5, [r7, #24]
                if (t <= stepEndTime)
 8002cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cce:	4290      	cmp	r0, r2
 8002cd0:	eb71 0303 	sbcs.w	r3, r1, r3
 8002cd4:	d308      	bcc.n	8002ce8 <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x78>
                    value = valueArray_[i];
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3340      	adds	r3, #64	; 0x40
 8002cda:	6979      	ldr	r1, [r7, #20]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 ff2d 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002ce2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                    break;
 8002ce6:	e007      	b.n	8002cf8 <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x88>
            for (size_t i=0; i<numStep_; i++)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3301      	adds	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3d9      	bcc.n	8002cac <_ZNK2ps13MultiStepTestILj2EE8getValueEy+0x3c>
        return value;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	ee07 3a90 	vmov	s15, r3
    }
 8002cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002d02:	3728      	adds	r7, #40	; 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdb0      	pop	{r4, r5, r7, pc}

08002d08 <_ZNK2ps13MultiStepTestILj2EE11getMaxValueEv>:
    float MultiStepTest<MAX_SIZE>::getMaxValue() const 
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
        float maxValue = 0.0;
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e025      	b.n	8002d68 <_ZNK2ps13MultiStepTestILj2EE11getMaxValueEv+0x60>
            if (i==0)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <_ZNK2ps13MultiStepTestILj2EE11getMaxValueEv+0x30>
                maxValue = valueArray_[i];
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3340      	adds	r3, #64	; 0x40
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 ff07 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002d2e:	eef0 7a40 	vmov.f32	s15, s0
 8002d32:	edc7 7a03 	vstr	s15, [r7, #12]
 8002d36:	e014      	b.n	8002d62 <_ZNK2ps13MultiStepTestILj2EE11getMaxValueEv+0x5a>
                maxValue = max(maxValue,valueArray_[i]);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3340      	adds	r3, #64	; 0x40
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fefc 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002d44:	eef0 7a40 	vmov.f32	s15, s0
 8002d48:	edc7 7a04 	vstr	s15, [r7, #16]
 8002d4c:	f107 0210 	add.w	r2, r7, #16
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa18 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3d4      	bcc.n	8002d1c <_ZNK2ps13MultiStepTestILj2EE11getMaxValueEv+0x14>
        return maxValue;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	ee07 3a90 	vmov	s15, r3
    }
 8002d78:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZNK2ps13MultiStepTestILj2EE11getMinValueEv>:
    float MultiStepTest<MAX_SIZE>::getMinValue() const 
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
        float minValue = 0.0;
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e025      	b.n	8002de2 <_ZNK2ps13MultiStepTestILj2EE11getMinValueEv+0x60>
            if (i==0)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <_ZNK2ps13MultiStepTestILj2EE11getMinValueEv+0x30>
                minValue = valueArray_[i];
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3340      	adds	r3, #64	; 0x40
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 feca 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002da8:	eef0 7a40 	vmov.f32	s15, s0
 8002dac:	edc7 7a03 	vstr	s15, [r7, #12]
 8002db0:	e014      	b.n	8002ddc <_ZNK2ps13MultiStepTestILj2EE11getMinValueEv+0x5a>
                minValue = min(minValue,valueArray_[i]);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3340      	adds	r3, #64	; 0x40
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 febf 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	edc7 7a04 	vstr	s15, [r7, #16]
 8002dc6:	f107 0210 	add.w	r2, r7, #16
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f9f4 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]
        for (size_t i=0; i<numStep_; i++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3d4      	bcc.n	8002d96 <_ZNK2ps13MultiStepTestILj2EE11getMinValueEv+0x14>
        return minValue;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	ee07 3a90 	vmov	s15, r3
    }
 8002df2:	eeb0 0a67 	vmov.f32	s0, s15
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_ZN2ps13MultiStepTestILj2EE8getParamERN11ArduinoJson10JsonObjectE>:
    void MultiStepTest<MAX_SIZE>::getParam(JsonObject &jsonDat)
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
        BaseTest::getParam(jsonDat);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 f828 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>
        ReturnStatus status;
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fad3 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f107 0208 	add.w	r2, r7, #8
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 f896 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8002e28:	6338      	str	r0, [r7, #48]	; 0x30
        if (status.success)
 8002e2a:	7a3b      	ldrb	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d033      	beq.n	8002e98 <_ZN2ps13MultiStepTestILj2EE8getParamERN11ArduinoJson10JsonObjectE+0x9c>
            JsonArray &jsonStepArray = jsonDatPrm.createNestedArray(StepArrayKey);
 8002e30:	491d      	ldr	r1, [pc, #116]	; (8002ea8 <_ZN2ps13MultiStepTestILj2EE8getParamERN11ArduinoJson10JsonObjectE+0xac>)
 8002e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e34:	f000 f9dc 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 8002e38:	62f8      	str	r0, [r7, #44]	; 0x2c
            for (size_t i=0; i<numStep_; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	e026      	b.n	8002e8e <_ZN2ps13MultiStepTestILj2EE8getParamERN11ArduinoJson10JsonObjectE+0x92>
                JsonArray &jsonStep = jsonStepArray.createNestedArray();
 8002e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e42:	f7fe fb67 	bl	8001514 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 8002e46:	62b8      	str	r0, [r7, #40]	; 0x28
                jsonStep.add(convertUsToMs(durationArray_[i]));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3350      	adds	r3, #80	; 0x50
 8002e4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fe87 	bl	8003b62 <_ZN5ArrayIyLj2EEixEj>
 8002e54:	4603      	mov	r3, r0
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fe fcdc 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8002e62:	4603      	mov	r3, r0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e6e:	f000 f9dc 	bl	800322a <_ZN11ArduinoJson9JsonArray3addImEEbRKT_>
                jsonStep.add(valueArray_[i]);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3340      	adds	r3, #64	; 0x40
 8002e76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fe81 	bl	8003b80 <_ZN5ArrayIfLj2EEixEj>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e84:	f000 f9ee 	bl	8003264 <_ZN11ArduinoJson9JsonArray3addIfEEbRKT_>
            for (size_t i=0; i<numStep_; i++)
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3d3      	bcc.n	8002e40 <_ZN2ps13MultiStepTestILj2EE8getParamERN11ArduinoJson10JsonObjectE+0x44>
    }
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fccd 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 8002ea2:	3738      	adds	r7, #56	; 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000863c 	.word	0x2000863c

08002eac <_ZN2ps13MultiStepTestILj2EE8setParamERN11ArduinoJson10JsonObjectES4_>:
    ReturnStatus MultiStepTest<MAX_SIZE>::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7fe fa80 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	f107 0014 	add.w	r0, r7, #20
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	f003 fff5 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fd19 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fcac 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 f832 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8002ef0:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	f083 0301 	eor.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d114      	bne.n	8002f2a <_ZN2ps13MultiStepTestILj2EE8setParamERN11ArduinoJson10JsonObjectES4_+0x7e>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 f824 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8002f0c:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d108      	bne.n	8002f2e <_ZN2ps13MultiStepTestILj2EE8setParamERN11ArduinoJson10JsonObjectES4_+0x82>
        setValueAndDurationFromJson(jsonMsgPrm,jsonDatPrm,status);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f22:	68b8      	ldr	r0, [r7, #8]
 8002f24:	f000 fe3c 	bl	8003ba0 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE>
        return status;
 8002f28:	e002      	b.n	8002f30 <_ZN2ps13MultiStepTestILj2EE8setParamERN11ArduinoJson10JsonObjectES4_+0x84>
            return status;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <_ZN2ps13MultiStepTestILj2EE8setParamERN11ArduinoJson10JsonObjectES4_+0x84>
            return status;
 8002f2e:	bf00      	nop
    }
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	3738      	adds	r7, #56	; 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZN2ps13MultiStepTestILj2EE12setStepValueEjf>:
    void MultiStepTest<MAX_SIZE>::setStepValue(size_t n, float value)
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	ed87 0a01 	vstr	s0, [r7, #4]
        if (n < numStep_)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d208      	bcs.n	8002f62 <_ZN2ps13MultiStepTestILj2EE12setStepValueEjf+0x2a>
            valueArray_[n] = value;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3340      	adds	r3, #64	; 0x40
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fe12 	bl	8003b80 <_ZN5ArrayIfLj2EEixEj>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
    }
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_ZNK2ps13MultiStepTestILj2EE12getStepValueEj>:
    float MultiStepTest<MAX_SIZE>::getStepValue(size_t n) const
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
        float value = 0.0;
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
        if (n < numStep_)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <_ZNK2ps13MultiStepTestILj2EE12getStepValueEj+0x2a>
            value = valueArray_[n];
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3340      	adds	r3, #64	; 0x40
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fdd6 	bl	8003b3c <_ZNK5ArrayIfLj2EEixEj>
 8002f90:	ed87 0a03 	vstr	s0, [r7, #12]
        return value;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	ee07 3a90 	vmov	s15, r3
    }
 8002f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZN2ps13MultiStepTestILj2EE15setStepDurationEjy>:
    void MultiStepTest<MAX_SIZE>::setStepDuration(size_t n, uint64_t duration)
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	e9c7 2300 	strd	r2, r3, [r7]
        if (n < numStep_)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d20a      	bcs.n	8002fd2 <_ZN2ps13MultiStepTestILj2EE15setStepDurationEjy+0x2e>
            durationArray_[n] = duration;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fdcd 	bl	8003b62 <_ZN5ArrayIyLj2EEixEj>
 8002fc8:	4601      	mov	r1, r0
 8002fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fce:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_ZNK2ps13MultiStepTestILj2EE15getStepDurationEj>:
    uint64_t MultiStepTest<MAX_SIZE>::getStepDuration(size_t n) const
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
        uint64_t duration = 0;
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9c7 2302 	strd	r2, r3, [r7, #8]
        if (n < numStep_)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d207      	bcs.n	800300a <_ZNK2ps13MultiStepTestILj2EE15getStepDurationEj+0x30>
            duration = durationArray_[n];
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3350      	adds	r3, #80	; 0x50
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fd89 	bl	8003b18 <_ZNK5ArrayIyLj2EEixEj>
 8003006:	e9c7 0102 	strd	r0, r1, [r7, #8]
        return duration;
 800300a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZNK2ps13MultiStepTestILj2EE11getDurationEv>:
    uint64_t MultiStepTest<MAX_SIZE>::getDuration() const
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
        uint64_t duration = 0;
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (size_t i = 0; i<numStep_; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e00f      	b.n	8003052 <_ZNK2ps13MultiStepTestILj2EE11getDurationEv+0x3a>
            duration += durationArray_[i];
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3350      	adds	r3, #80	; 0x50
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fd6d 	bl	8003b18 <_ZNK5ArrayIyLj2EEixEj>
 800303e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003042:	1814      	adds	r4, r2, r0
 8003044:	eb43 0501 	adc.w	r5, r3, r1
 8003048:	e9c7 4504 	strd	r4, r5, [r7, #16]
        for (size_t i = 0; i<numStep_; i++)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3ea      	bcc.n	8003032 <_ZNK2ps13MultiStepTestILj2EE11getDurationEv+0x1a>
        return duration;
 800305c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    }
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800306c <_ZN2ps13MultiStepTestILj2EE10setNumStepEj>:
    void MultiStepTest<MAX_SIZE>::setNumStep(size_t size)
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
        if (size <= MAX_SIZE)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d802      	bhi.n	8003082 <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0x16>
            numStep_ = size;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	669a      	str	r2, [r3, #104]	; 0x68
        valueArray_.clear();
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3340      	adds	r3, #64	; 0x40
 8003086:	4618      	mov	r0, r3
 8003088:	f001 f97c 	bl	8004384 <_ZN5ArrayIfLj2EE5clearEv>
        durationArray_.clear();
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f984 	bl	800439e <_ZN5ArrayIyLj2EE5clearEv>
        bool pos = true;
 8003096:	2301      	movs	r3, #1
 8003098:	77fb      	strb	r3, [r7, #31]
        for (size_t i=0; i< numStep_; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e02d      	b.n	80030fc <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0x90>
            if (pos)
 80030a0:	7ffb      	ldrb	r3, [r7, #31]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0x56>
                valueArray_.push_back(0.5);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80030ae:	60ba      	str	r2, [r7, #8]
 80030b0:	f107 0208 	add.w	r2, r7, #8
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f97e 	bl	80043b8 <_ZN5ArrayIfLj2EE9push_backERKf>
                pos = false;
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e00c      	b.n	80030dc <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0x70>
                valueArray_.push_back(-0.5);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3340      	adds	r3, #64	; 0x40
 80030c6:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80030ca:	60fa      	str	r2, [r7, #12]
 80030cc:	f107 020c 	add.w	r2, r7, #12
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f970 	bl	80043b8 <_ZN5ArrayIfLj2EE9push_backERKf>
                pos = true;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
            durationArray_.push_back(1000000);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0xa4>)
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	f001 f97b 	bl	80043ec <_ZN5ArrayIyLj2EE9push_backERKy>
        for (size_t i=0; i< numStep_; i++)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3cc      	bcc.n	80030a0 <_ZN2ps13MultiStepTestILj2EE10setNumStepEj+0x34>
    }
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	000f4240 	.word	0x000f4240

08003114 <_ZNK2ps13MultiStepTestILj2EE10getNumStepEv>:
    size_t MultiStepTest<MAX_SIZE>::getNumStep() const
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
        return numStep_;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    }
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_ZNK2ps13MultiStepTestILj2EE13getMaxNumStepEv>:
    size_t MultiStepTest<MAX_SIZE>::getMaxNumStep() const
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
        return MAX_SIZE;
 8003134:	2302      	movs	r3, #2
    }
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_ZNK5ArrayIyLj50EEixEj>:
{
  return values_[index];
}

template <typename T, size_t MAX_SIZE>
T Array<T, MAX_SIZE>::operator[](const size_t index) const
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
{
  return values_[index];
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_ZNK5ArrayIfLj50EEixEj>:
T Array<T, MAX_SIZE>::operator[](const size_t index) const
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	ee07 3a90 	vmov	s15, r3
}
 800317e:	eeb0 0a67 	vmov.f32	s0, s15
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	ed93 7a00 	vldr	s14, [r3]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	d501      	bpl.n	80031b0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	e000      	b.n	80031b2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80031b0:	687b      	ldr	r3, [r7, #4]
    }
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	ed93 7a00 	vldr	s14, [r3]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d501      	bpl.n	80031e2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	e000      	b.n	80031e4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80031e2:	687b      	ldr	r3, [r7, #4]
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>:
  JsonArray& createNestedArray(const TString& key) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
    return createNestedArray_impl<const TString&>(key);
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f001 f911 	bl	8004424 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayET_>
 8003202:	4603      	mov	r3, r0
  }
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZN5ArrayIyLj50EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <_ZN11ArduinoJson9JsonArray3addImEEbRKT_>:
  bool add(const T &value) {
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
    return add_impl<const T &>(value);
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 f911 	bl	800445e <_ZN11ArduinoJson9JsonArray8add_implIRKmEEbT_>
 800323c:	4603      	mov	r3, r0
  }
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_ZN5ArrayIfLj50EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <_ZN11ArduinoJson9JsonArray3addIfEEbRKT_>:
  bool add(const T &value) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
    return add_impl<const T &>(value);
 800326e:	6839      	ldr	r1, [r7, #0]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 f925 	bl	80044c0 <_ZN11ArduinoJson9JsonArray8add_implIRKfEEbT_>
 8003276:	4603      	mov	r3, r0
  }
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE>:

    // Protected methods
    // --------------------------------------------------------------------------------------------

    template<size_t MAX_SIZE>
    void MultiStepTest<MAX_SIZE>::setValueAndDurationFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	f2ad 4df4 	subw	sp, sp, #1268	; 0x4f4
 8003286:	af00      	add	r7, sp, #0
 8003288:	f507 649e 	add.w	r4, r7, #1264	; 0x4f0
 800328c:	f2a4 44e4 	subw	r4, r4, #1252	; 0x4e4
 8003290:	6020      	str	r0, [r4, #0]
 8003292:	f507 609e 	add.w	r0, r7, #1264	; 0x4f0
 8003296:	f5a0 609d 	sub.w	r0, r0, #1256	; 0x4e8
 800329a:	6001      	str	r1, [r0, #0]
 800329c:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 80032a0:	f2a1 41ec 	subw	r1, r1, #1260	; 0x4ec
 80032a4:	600a      	str	r2, [r1, #0]
 80032a6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80032aa:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80032ae:	6013      	str	r3, [r2, #0]
    {
        if (!jsonMsgPrm.containsKey(StepArrayKey))
 80032b0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80032b4:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80032b8:	499b      	ldr	r1, [pc, #620]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	f001 f931 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d044      	beq.n	8003356 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0xd6>
        {
            status.success = false;
 80032cc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80032d0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" key not found");
 80032da:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80032de:	4618      	mov	r0, r3
 80032e0:	f01b f8c9 	bl	801e476 <_ZNSaIcEC1Ev>
 80032e4:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80032e8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80032ec:	498f      	ldr	r1, [pc, #572]	; (800352c <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2ac>)
 80032ee:	4618      	mov	r0, r3
 80032f0:	f01b fb68 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80032f4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80032f8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80032fc:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8003300:	4989      	ldr	r1, [pc, #548]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f92b 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003308:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800330c:	4618      	mov	r0, r3
 800330e:	f01b f9b2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003312:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8003316:	4618      	mov	r0, r3
 8003318:	f01b f8ae 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 800331c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003320:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f01b fb18 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800332c:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8003330:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003334:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003338:	4611      	mov	r1, r2
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	f00b fc38 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003340:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003344:	4618      	mov	r0, r3
 8003346:	f01b f996 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            return;
        }
 800334a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800334e:	4618      	mov	r0, r3
 8003350:	f01b f991 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003354:	e384      	b.n	8003a60 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7e0>

        if (!jsonMsgPrm[StepArrayKey].is<JsonArray&>())
 8003356:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800335a:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 800335e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003362:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8003366:	4a70      	ldr	r2, [pc, #448]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	f001 f910 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 800336e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003372:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800337c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f001 fa20 	bl	80047ca <_ZNK11ArduinoJson10JsonObject2isIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800338a:	4603      	mov	r3, r0
 800338c:	bf00      	nop
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d044      	beq.n	8003422 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x1a2>
        {
            status.success = false;
 8003398:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800339c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" not a JsonArray");
 80033a6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80033aa:	4618      	mov	r0, r3
 80033ac:	f01b f863 	bl	801e476 <_ZNSaIcEC1Ev>
 80033b0:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80033b4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80033b8:	495d      	ldr	r1, [pc, #372]	; (8003530 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b0>)
 80033ba:	4618      	mov	r0, r3
 80033bc:	f01b fb02 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80033c0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80033c4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80033c8:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80033cc:	4956      	ldr	r1, [pc, #344]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 f8c5 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80033d4:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80033d8:	4618      	mov	r0, r3
 80033da:	f01b f94c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80033de:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80033e2:	4618      	mov	r0, r3
 80033e4:	f01b f848 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 80033e8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80033ec:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f01b fab2 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80033f8:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80033fc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003400:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003404:	4611      	mov	r1, r2
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	f00b fbd2 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800340c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8003410:	4618      	mov	r0, r3
 8003412:	f01b f930 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            return;
        }
 8003416:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800341a:	4618      	mov	r0, r3
 800341c:	f01b f92b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003420:	e31e      	b.n	8003a60 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7e0>

        JsonArray &jsonStepArray = jsonMsgPrm[StepArrayKey];
 8003422:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003426:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 800342a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800342e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8003432:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	f001 f8aa 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<JsonArray &>();
 800343a:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f9d1 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 8003444:	4603      	mov	r3, r0
 8003446:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
    return _object.get<TValue>(_key);
 800344a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f001 fbaa 	bl	8004bb2 <_ZNK11ArduinoJson10JsonObject3getIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800345e:	4603      	mov	r3, r0
 8003460:	bf00      	nop
    return impl()->template as<JsonArray &>();
 8003462:	bf00      	nop
 8003464:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4

        if (jsonStepArray.size() > MAX_SIZE)
 8003468:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fcb3 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 8003472:	4603      	mov	r3, r0
 8003474:	2b32      	cmp	r3, #50	; 0x32
 8003476:	bf8c      	ite	hi
 8003478:	2301      	movhi	r3, #1
 800347a:	2300      	movls	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x28c>
        {
            status.success = false;
 8003482:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003486:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" array too large");
 8003490:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8003494:	4618      	mov	r0, r3
 8003496:	f01a ffee 	bl	801e476 <_ZNSaIcEC1Ev>
 800349a:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800349e:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80034a2:	4924      	ldr	r1, [pc, #144]	; (8003534 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b4>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f01b fa8d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034aa:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80034ae:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034b2:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 80034b6:	491c      	ldr	r1, [pc, #112]	; (8003528 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f850 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80034be:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80034c2:	4618      	mov	r0, r3
 80034c4:	f01b f8d7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80034c8:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f01a ffd3 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 80034d2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80034d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f01b fa3d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80034e2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80034e6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80034ea:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80034ee:	4611      	mov	r1, r2
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f00b fb5d 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80034f6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80034fa:	4618      	mov	r0, r3
 80034fc:	f01b f8bb 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            return;
        }
 8003500:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003504:	4618      	mov	r0, r3
 8003506:	f01b f8b6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800350a:	e2a9      	b.n	8003a60 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7e0>

        Array<uint64_t, MAX_SIZE> durationArrayTmp;
 800350c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f853 	bl	80045bc <_ZN5ArrayIyLj50EEC1Ev>
        Array<float, MAX_SIZE> valueArrayTmp;
 8003516:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f85d 	bl	80045da <_ZN5ArrayIfLj50EEC1Ev>

        for (size_t i=0; i<jsonStepArray.size(); i++)
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8003526:	e1cc      	b.n	80038c2 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x642>
 8003528:	2000863c 	.word	0x2000863c
 800352c:	08020ea0 	.word	0x08020ea0
 8003530:	08020eb0 	.word	0x08020eb0
 8003534:	08020ec4 	.word	0x08020ec4
        {
            if (jsonStepArray[i].is<JsonArray&>())
 8003538:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800353c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003540:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8003544:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd ffcc 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return _array.is<T>(_index);
 800354e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003552:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800355c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f001 f949 	bl	80047fc <_ZNK11ArduinoJson9JsonArray2isIRS0_EEbj>
 800356a:	4603      	mov	r3, r0
 800356c:	bf00      	nop
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 815c 	beq.w	800382c <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x5ac>
            {
                JsonArray &jsonStep = jsonStepArray[i];
 8003574:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003578:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800357c:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8003580:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd ffae 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return impl()->template as<JsonArray &>();
 800358a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fd31 	bl	8001ff6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_18JsonArraySubscriptEE4implEv>
 8003594:	4603      	mov	r3, r0
 8003596:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
    return _array.get<T>(_index);
 800359a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f001 fb1c 	bl	8004be6 <_ZNK11ArduinoJson9JsonArray3getIRS0_EENS_9Internals13JsonVariantAsIT_E4typeEj>
 80035ae:	4603      	mov	r3, r0
 80035b0:	bf00      	nop
    return impl()->template as<JsonArray &>();
 80035b2:	bf00      	nop
 80035b4:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

                if (jsonStep.size() == 2)
 80035b8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fc0b 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80e6 	beq.w	80037a0 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x520>
                {
                    if (jsonStep[0].is<unsigned long>())
 80035d4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80035d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035dc:	2200      	movs	r2, #0
 80035de:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd ff7f 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return _array.is<T>(_index);
 80035e8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80035ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80035f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f001 f936 	bl	8004870 <_ZNK11ArduinoJson9JsonArray2isImEEbj>
 8003604:	4603      	mov	r3, r0
 8003606:	bf00      	nop
 8003608:	2b00      	cmp	r3, #0
 800360a:	d029      	beq.n	8003660 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x3e0>
                    { 
                        durationArrayTmp.push_back(convertMsToUs(jsonStep.get<unsigned long>(0)));
 800360c:	2100      	movs	r1, #0
 800360e:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 8003612:	f000 fff1 	bl	80045f8 <_ZNK11ArduinoJson9JsonArray3getImEENS_9Internals13JsonVariantAsIT_E4typeEj>
 8003616:	4603      	mov	r3, r0
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe f912 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8003626:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800362a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa52 	bl	8003ada <_ZN5ArrayIyLj50EE9push_backERKy>
                        string errorMsg = StepArrayKey + string(" item[0] not uint32");
                        status.appendToMessage(errorMsg);
                        break;
                    }

                    if (jsonStep[1].is<float>())
 8003636:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800363a:	2201      	movs	r2, #1
 800363c:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd ff50 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
 8003646:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800364a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f95b 	bl	800490c <_ZNK11ArduinoJson9JsonArray2isIfEEbj>
 8003656:	4603      	mov	r3, r0
 8003658:	bf00      	nop
 800365a:	2b00      	cmp	r3, #0
 800365c:	d05a      	beq.n	8003714 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x494>
 800365e:	e045      	b.n	80036ec <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x46c>
                        status.success = false;
 8003660:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003664:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
                        string errorMsg = StepArrayKey + string(" item[0] not uint32");
 800366e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8003672:	4618      	mov	r0, r3
 8003674:	f01a feff 	bl	801e476 <_ZNSaIcEC1Ev>
 8003678:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800367c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003680:	49ae      	ldr	r1, [pc, #696]	; (800393c <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 8003682:	4618      	mov	r0, r3
 8003684:	f01b f99e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003688:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800368c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8003690:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003694:	49aa      	ldr	r1, [pc, #680]	; (8003940 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 8003696:	4618      	mov	r0, r3
 8003698:	f000 ff61 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800369c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f01a ffe8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80036aa:	4618      	mov	r0, r3
 80036ac:	f01a fee4 	bl	801e478 <_ZNSaIcED1Ev>
                        status.appendToMessage(errorMsg);
 80036b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036b4:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f01b f94e 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80036c0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80036c4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80036c8:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80036cc:	4611      	mov	r1, r2
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	f00b fa6e 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036d4:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80036d8:	4618      	mov	r0, r3
 80036da:	f01a ffcc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                        break;
 80036de:	bf00      	nop
                    }
 80036e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036e4:	4618      	mov	r0, r3
 80036e6:	f01a ffc6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036ea:	e0fa      	b.n	80038e2 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x662>
                    {
                        valueArrayTmp.push_back(jsonStep.get<float>(1));
 80036ec:	2101      	movs	r1, #1
 80036ee:	f8d7 04e0 	ldr.w	r0, [r7, #1248]	; 0x4e0
 80036f2:	f000 ffb8 	bl	8004666 <_ZNK11ArduinoJson9JsonArray3getIfEENS_9Internals13JsonVariantAsIT_E4typeEj>
 80036f6:	eef0 7a40 	vmov.f32	s15, s0
 80036fa:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80036fe:	edc3 7a00 	vstr	s15, [r3]
 8003702:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 8003706:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f9c7 	bl	8003aa0 <_ZN5ArrayIfLj50EE9push_backERKf>
 8003712:	e0d1      	b.n	80038b8 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x638>
                    }
                    else
                    {
                        status.success = false;
 8003714:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003718:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
                        string errorMsg = StepArrayKey + string(" item[1] not float");
 8003722:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003726:	4618      	mov	r0, r3
 8003728:	f01a fea5 	bl	801e476 <_ZNSaIcEC1Ev>
 800372c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8003730:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003734:	4983      	ldr	r1, [pc, #524]	; (8003944 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c4>)
 8003736:	4618      	mov	r0, r3
 8003738:	f01b f944 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800373c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003740:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003744:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8003748:	497d      	ldr	r1, [pc, #500]	; (8003940 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ff07 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003750:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003754:	4618      	mov	r0, r3
 8003756:	f01a ff8e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800375a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800375e:	4618      	mov	r0, r3
 8003760:	f01a fe8a 	bl	801e478 <_ZNSaIcED1Ev>
                        status.appendToMessage(errorMsg);
 8003764:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003768:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f01b f8f4 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003774:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8003778:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800377c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003780:	4611      	mov	r1, r2
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	f00b fa14 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003788:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800378c:	4618      	mov	r0, r3
 800378e:	f01a ff72 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                        break;
 8003792:	bf00      	nop
                    }
 8003794:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003798:	4618      	mov	r0, r3
 800379a:	f01a ff6c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800379e:	e0a0      	b.n	80038e2 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x662>
                }
                else
                {
                    status.success = false;
 80037a0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80037a4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
                    string errorMsg = StepArrayKey + string(" item size!=2");
 80037ae:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f01a fe5f 	bl	801e476 <_ZNSaIcEC1Ev>
 80037b8:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 80037bc:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80037c0:	4961      	ldr	r1, [pc, #388]	; (8003948 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c8>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f01b f8fe 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037c8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80037cc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80037d0:	f207 4264 	addw	r2, r7, #1124	; 0x464
 80037d4:	495a      	ldr	r1, [pc, #360]	; (8003940 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fec1 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80037dc:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80037e0:	4618      	mov	r0, r3
 80037e2:	f01a ff48 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037e6:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80037ea:	4618      	mov	r0, r3
 80037ec:	f01a fe44 	bl	801e478 <_ZNSaIcED1Ev>
                    status.appendToMessage(errorMsg);
 80037f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80037f4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f01b f8ae 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003800:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8003804:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003808:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800380c:	4611      	mov	r1, r2
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	f00b f9ce 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003814:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003818:	4618      	mov	r0, r3
 800381a:	f01a ff2c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                    break;
 800381e:	bf00      	nop
                }
 8003820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003824:	4618      	mov	r0, r3
 8003826:	f01a ff26 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800382a:	e05a      	b.n	80038e2 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x662>

            }
            else
            {
                status.success = false;
 800382c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003830:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
                string errorMsg = StepArrayKey + string(" item not JsonArary");
 800383a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800383e:	4618      	mov	r0, r3
 8003840:	f01a fe19 	bl	801e476 <_ZNSaIcEC1Ev>
 8003844:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 8003848:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800384c:	493f      	ldr	r1, [pc, #252]	; (800394c <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6cc>)
 800384e:	4618      	mov	r0, r3
 8003850:	f01b f8b8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003854:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003858:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800385c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003860:	4937      	ldr	r1, [pc, #220]	; (8003940 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fe7b 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003868:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800386c:	4618      	mov	r0, r3
 800386e:	f01a ff02 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003872:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003876:	4618      	mov	r0, r3
 8003878:	f01a fdfe 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800387c:	f107 0214 	add.w	r2, r7, #20
 8003880:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f01b f868 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800388c:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 8003890:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003894:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003898:	4611      	mov	r1, r2
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	f00b f988 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80038a0:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f01a fee6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                break;
 80038aa:	bf00      	nop
            }
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4618      	mov	r0, r3
 80038b2:	f01a fee0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80038b6:	e014      	b.n	80038e2 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x662>
        for (size_t i=0; i<jsonStepArray.size(); i++)
 80038b8:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80038bc:	3301      	adds	r3, #1
 80038be:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80038c2:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fa86 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80038d2:	4293      	cmp	r3, r2
 80038d4:	bf34      	ite	cc
 80038d6:	2301      	movcc	r3, #1
 80038d8:	2300      	movcs	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f ae2b 	bne.w	8003538 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b8>

        } // for (size_t i=0; ... 

        if (status.success)
 80038e2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80038e6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80b6 	beq.w	8003a60 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7e0>
        {
            setNumStep(jsonStepArray.size());
 80038f4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80038f8:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	336c      	adds	r3, #108	; 0x6c
 8003902:	681c      	ldr	r4, [r3, #0]
 8003904:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fa65 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 800390e:	4602      	mov	r2, r0
 8003910:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003914:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8003918:	4611      	mov	r1, r2
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	47a0      	blx	r4
            JsonArray &jsonStepDatArray = jsonDatPrm.createNestedArray(StepArrayKey);
 800391e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003922:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8003926:	4906      	ldr	r1, [pc, #24]	; (8003940 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	f7ff fc61 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 800392e:	f8c7 04dc 	str.w	r0, [r7, #1244]	; 0x4dc
            for (size_t i=0; i<getNumStep(); i++)
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8003938:	e079      	b.n	8003a2e <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7ae>
 800393a:	bf00      	nop
 800393c:	08020ed8 	.word	0x08020ed8
 8003940:	2000863c 	.word	0x2000863c
 8003944:	08020eec 	.word	0x08020eec
 8003948:	08020f00 	.word	0x08020f00
 800394c:	08020f10 	.word	0x08020f10
            {
                setStepDuration(i,durationArrayTmp[i]);
 8003950:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003954:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	681c      	ldr	r4, [r3, #0]
 8003960:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003964:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fc4f 	bl	800320c <_ZN5ArrayIyLj50EEixEj>
 800396e:	4603      	mov	r3, r0
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8003978:	f2a1 40e4 	subw	r0, r1, #1252	; 0x4e4
 800397c:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8003980:	6800      	ldr	r0, [r0, #0]
 8003982:	47a0      	blx	r4
                setStepValue(i,valueArrayTmp[i]);
 8003984:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003988:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3358      	adds	r3, #88	; 0x58
 8003992:	681c      	ldr	r4, [r3, #0]
 8003994:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003998:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fc52 	bl	8003246 <_ZN5ArrayIfLj50EEixEj>
 80039a2:	4603      	mov	r3, r0
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80039ac:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	47a0      	blx	r4
                JsonArray &jsonStepDat = jsonStepDatArray.createNestedArray();
 80039bc:	f8d7 04dc 	ldr.w	r0, [r7, #1244]	; 0x4dc
 80039c0:	f7fd fda8 	bl	8001514 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 80039c4:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
                jsonStepDat.add(convertUsToMs(durationArray_[i]));
 80039c8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80039cc:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80039d6:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fc16 	bl	800320c <_ZN5ArrayIyLj50EEixEj>
 80039e0:	4603      	mov	r3, r0
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	f7fd ff16 	bl	800181a <_ZN2ps13convertUsToMsEy>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 80039f4:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80039f8:	4619      	mov	r1, r3
 80039fa:	f8d7 04d8 	ldr.w	r0, [r7, #1240]	; 0x4d8
 80039fe:	f7ff fc14 	bl	800322a <_ZN11ArduinoJson9JsonArray3addImEEbRKT_>
                jsonStepDat.add(valueArray_[i]);
 8003a02:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003a06:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3340      	adds	r3, #64	; 0x40
 8003a0e:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fc17 	bl	8003246 <_ZN5ArrayIfLj50EEixEj>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f8d7 04d8 	ldr.w	r0, [r7, #1240]	; 0x4d8
 8003a20:	f7ff fc20 	bl	8003264 <_ZN11ArduinoJson9JsonArray3addIfEEbRKT_>
            for (size_t i=0; i<getNumStep(); i++)
 8003a24:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8003a2e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003a32:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3370      	adds	r3, #112	; 0x70
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8003a42:	f2a2 42e4 	subw	r2, r2, #1252	; 0x4e4
 8003a46:	6810      	ldr	r0, [r2, #0]
 8003a48:	4798      	blx	r3
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf34      	ite	cc
 8003a54:	2301      	movcc	r3, #1
 8003a56:	2300      	movcs	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f47f af78 	bne.w	8003950 <_ZN2ps13MultiStepTestILj50EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6d0>
            }
        }

    }
 8003a60:	f207 47f4 	addw	r7, r7, #1268	; 0x4f4
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd90      	pop	{r4, r7, pc}

08003a68 <_ZN5ArrayIfLj50EE5clearEv>:
{
  return values_[size_-1];
}

template <typename T, size_t MAX_SIZE>
void Array<T, MAX_SIZE>::clear()
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
{
  size_ = 0;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN5ArrayIyLj50EE5clearEv>:
void Array<T, MAX_SIZE>::clear()
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  size_ = 0;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN5ArrayIfLj50EE9push_backERKf>:
    values_[i] = values[i];
  }
}

template <typename T, size_t MAX_SIZE>
void Array<T, MAX_SIZE>::push_back(const T & value)
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
{
  if (size_ < MAX_SIZE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ab0:	2b31      	cmp	r3, #49	; 0x31
 8003ab2:	d80c      	bhi.n	8003ace <_ZN5ArrayIfLj50EE9push_backERKf+0x2e>
  {
    values_[size_++] = value;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003aba:	1c59      	adds	r1, r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	601a      	str	r2, [r3, #0]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <_ZN5ArrayIyLj50EE9push_backERKy>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003aea:	2b31      	cmp	r3, #49	; 0x31
 8003aec:	d80e      	bhi.n	8003b0c <_ZN5ArrayIyLj50EE9push_backERKy+0x32>
    values_[size_++] = value;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
 8003af4:	1c4a      	adds	r2, r1, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	00c9      	lsls	r1, r1, #3
 8003b06:	4401      	add	r1, r0
 8003b08:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZNK5ArrayIyLj2EEixEj>:
T Array<T, MAX_SIZE>::operator[](const size_t index) const
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZNK5ArrayIfLj2EEixEj>:
T Array<T, MAX_SIZE>::operator[](const size_t index) const
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	ee07 3a90 	vmov	s15, r3
}
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_ZN5ArrayIyLj2EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_ZN5ArrayIfLj2EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  return values_[index];
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE>:
    void MultiStepTest<MAX_SIZE>::setValueAndDurationFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f507 742c 	add.w	r4, r7, #688	; 0x2b0
 8003bac:	f5a4 7429 	sub.w	r4, r4, #676	; 0x2a4
 8003bb0:	6020      	str	r0, [r4, #0]
 8003bb2:	f507 702c 	add.w	r0, r7, #688	; 0x2b0
 8003bb6:	f5a0 702a 	sub.w	r0, r0, #680	; 0x2a8
 8003bba:	6001      	str	r1, [r0, #0]
 8003bbc:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 8003bc0:	f5a1 712b 	sub.w	r1, r1, #684	; 0x2ac
 8003bc4:	600a      	str	r2, [r1, #0]
 8003bc6:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8003bca:	f5a2 722c 	sub.w	r2, r2, #688	; 0x2b0
 8003bce:	6013      	str	r3, [r2, #0]
        if (!jsonMsgPrm.containsKey(StepArrayKey))
 8003bd0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003bd4:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8003bd8:	499b      	ldr	r1, [pc, #620]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	f000 fca1 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d044      	beq.n	8003c76 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0xd6>
            status.success = false;
 8003bec:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003bf0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" key not found");
 8003bfa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f01a fc39 	bl	801e476 <_ZNSaIcEC1Ev>
 8003c04:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003c08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c0c:	498f      	ldr	r1, [pc, #572]	; (8003e4c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2ac>)
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f01a fed8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c14:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003c1c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8003c20:	4989      	ldr	r1, [pc, #548]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fc9b 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003c28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f01a fd22 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c36:	4618      	mov	r0, r3
 8003c38:	f01a fc1e 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 8003c3c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c40:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f01a fe88 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003c4c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003c50:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c54:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003c58:	4611      	mov	r1, r2
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f00a ffa8 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c60:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c64:	4618      	mov	r0, r3
 8003c66:	f01a fd06 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 8003c6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f01a fd01 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c74:	e381      	b.n	800437a <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7da>
        if (!jsonMsgPrm[StepArrayKey].is<JsonArray&>())
 8003c76:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c7a:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8003c7e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c82:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8003c86:	4a70      	ldr	r2, [pc, #448]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	f000 fc80 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 8003c8e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003c9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 fd90 	bl	80047ca <_ZNK11ArduinoJson10JsonObject2isIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8003caa:	4603      	mov	r3, r0
 8003cac:	bf00      	nop
 8003cae:	f083 0301 	eor.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d044      	beq.n	8003d42 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x1a2>
            status.success = false;
 8003cb8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003cbc:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" not a JsonArray");
 8003cc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f01a fbd3 	bl	801e476 <_ZNSaIcEC1Ev>
 8003cd0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003cd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003cd8:	495d      	ldr	r1, [pc, #372]	; (8003e50 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b0>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f01a fe72 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ce0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003ce4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003ce8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003cec:	4956      	ldr	r1, [pc, #344]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fc35 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003cf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f01a fcbc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003d02:	4618      	mov	r0, r3
 8003d04:	f01a fbb8 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 8003d08:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003d0c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f01a fe22 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003d18:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003d1c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003d20:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003d24:	4611      	mov	r1, r2
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	f00a ff42 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003d2c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003d30:	4618      	mov	r0, r3
 8003d32:	f01a fca0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 8003d36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f01a fc9b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d40:	e31b      	b.n	800437a <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7da>
        JsonArray &jsonStepArray = jsonMsgPrm[StepArrayKey];
 8003d42:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003d46:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 8003d4a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003d4e:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8003d52:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	f000 fc1a 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<JsonArray &>();
 8003d5a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fd41 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    return _object.get<TValue>(_key);
 8003d6a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 ff1a 	bl	8004bb2 <_ZNK11ArduinoJson10JsonObject3getIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	bf00      	nop
    return impl()->template as<JsonArray &>();
 8003d82:	bf00      	nop
 8003d84:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        if (jsonStepArray.size() > MAX_SIZE)
 8003d88:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe f823 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	bf8c      	ite	hi
 8003d98:	2301      	movhi	r3, #1
 8003d9a:	2300      	movls	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d044      	beq.n	8003e2c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x28c>
            status.success = false;
 8003da2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003da6:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
            string errorMsg = StepArrayKey + string(" array too large");
 8003db0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003db4:	4618      	mov	r0, r3
 8003db6:	f01a fb5e 	bl	801e476 <_ZNSaIcEC1Ev>
 8003dba:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8003dbe:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003dc2:	4924      	ldr	r1, [pc, #144]	; (8003e54 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b4>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f01a fdfd 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003dca:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003dce:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003dd2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8003dd6:	491c      	ldr	r1, [pc, #112]	; (8003e48 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2a8>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fbc0 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003dde:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003de2:	4618      	mov	r0, r3
 8003de4:	f01a fc47 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003de8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003dec:	4618      	mov	r0, r3
 8003dee:	f01a fb43 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 8003df2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003df6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f01a fdad 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003e02:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8003e06:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003e0a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003e0e:	4611      	mov	r1, r2
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f00a fecd 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003e16:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f01a fc2b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 8003e20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e24:	4618      	mov	r0, r3
 8003e26:	f01a fc26 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2a:	e2a6      	b.n	800437a <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7da>
        Array<uint64_t, MAX_SIZE> durationArrayTmp;
 8003e2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fc52 	bl	80046da <_ZN5ArrayIyLj2EEC1Ev>
        Array<float, MAX_SIZE> valueArrayTmp;
 8003e36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fc5b 	bl	80046f6 <_ZN5ArrayIfLj2EEC1Ev>
        for (size_t i=0; i<jsonStepArray.size(); i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8003e46:	e1ca      	b.n	80041de <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x63e>
 8003e48:	2000863c 	.word	0x2000863c
 8003e4c:	08020ea0 	.word	0x08020ea0
 8003e50:	08020eb0 	.word	0x08020eb0
 8003e54:	08020ec4 	.word	0x08020ec4
            if (jsonStepArray[i].is<JsonArray&>())
 8003e58:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003e5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e60:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8003e64:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fb3c 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return _array.is<T>(_index);
 8003e6e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003e72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003e7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f000 fcb9 	bl	80047fc <_ZNK11ArduinoJson9JsonArray2isIRS0_EEbj>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	bf00      	nop
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 815a 	beq.w	8004148 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x5a8>
                JsonArray &jsonStep = jsonStepArray[i];
 8003e94:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003e98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e9c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8003ea0:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fb1e 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return impl()->template as<JsonArray &>();
 8003eaa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe f8a1 	bl	8001ff6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_18JsonArraySubscriptEE4implEv>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    return _array.get<T>(_index);
 8003eba:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f000 fe8c 	bl	8004be6 <_ZNK11ArduinoJson9JsonArray3getIRS0_EENS_9Internals13JsonVariantAsIT_E4typeEj>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	bf00      	nop
    return impl()->template as<JsonArray &>();
 8003ed2:	bf00      	nop
 8003ed4:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
                if (jsonStep.size() == 2)
 8003ed8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd ff7b 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80e4 	beq.w	80040bc <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x51c>
                    if (jsonStep[0].is<unsigned long>())
 8003ef4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003ef8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd faef 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
    return _array.is<T>(_index);
 8003f08:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003f16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fca6 	bl	8004870 <_ZNK11ArduinoJson9JsonArray2isImEEbj>
 8003f24:	4603      	mov	r3, r0
 8003f26:	bf00      	nop
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d029      	beq.n	8003f80 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x3e0>
                        durationArrayTmp.push_back(convertMsToUs(jsonStep.get<unsigned long>(0)));
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8003f32:	f000 fb61 	bl	80045f8 <_ZNK11ArduinoJson9JsonArray3getImEENS_9Internals13JsonVariantAsIT_E4typeEj>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd fc82 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
 8003f46:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8003f4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fa4b 	bl	80043ec <_ZN5ArrayIyLj2EE9push_backERKy>
                    if (jsonStep[1].is<float>())
 8003f56:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f8d7 12a0 	ldr.w	r1, [r7, #672]	; 0x2a0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fd fac0 	bl	80014e6 <_ZN11ArduinoJson9JsonArrayixEj>
 8003f66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003f6a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fccb 	bl	800490c <_ZNK11ArduinoJson9JsonArray2isIfEEbj>
 8003f76:	4603      	mov	r3, r0
 8003f78:	bf00      	nop
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d058      	beq.n	8004030 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x490>
 8003f7e:	e045      	b.n	800400c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x46c>
                        status.success = false;
 8003f80:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003f84:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
                        string errorMsg = StepArrayKey + string(" item[0] not uint32");
 8003f8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f01a fa6f 	bl	801e476 <_ZNSaIcEC1Ev>
 8003f98:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003f9c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003fa0:	49ad      	ldr	r1, [pc, #692]	; (8004258 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6b8>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f01a fd0e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003fa8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003fac:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003fb0:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003fb4:	49a9      	ldr	r1, [pc, #676]	; (800425c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fad1 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8003fbc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f01a fb58 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f01a fa54 	bl	801e478 <_ZNSaIcED1Ev>
                        status.appendToMessage(errorMsg);
 8003fd0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fd4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f01a fcbe 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003fe0:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8003fe4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003fe8:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8003fec:	4611      	mov	r1, r2
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f00a fdde 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003ff4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f01a fb3c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                        break;
 8003ffe:	bf00      	nop
                    }
 8004000:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004004:	4618      	mov	r0, r3
 8004006:	f01a fb36 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800400a:	e0f8      	b.n	80041fe <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x65e>
                        valueArrayTmp.push_back(jsonStep.get<float>(1));
 800400c:	2101      	movs	r1, #1
 800400e:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8004012:	f000 fb28 	bl	8004666 <_ZNK11ArduinoJson9JsonArray3getIfEENS_9Internals13JsonVariantAsIT_E4typeEj>
 8004016:	eef0 7a40 	vmov.f32	s15, s0
 800401a:	edc7 7a7b 	vstr	s15, [r7, #492]	; 0x1ec
 800401e:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8004022:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f9c5 	bl	80043b8 <_ZN5ArrayIfLj2EE9push_backERKf>
 800402e:	e0d1      	b.n	80041d4 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x634>
                        status.success = false;
 8004030:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004034:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
                        string errorMsg = StepArrayKey + string(" item[1] not float");
 800403e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004042:	4618      	mov	r0, r3
 8004044:	f01a fa17 	bl	801e476 <_ZNSaIcEC1Ev>
 8004048:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800404c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004050:	4983      	ldr	r1, [pc, #524]	; (8004260 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c0>)
 8004052:	4618      	mov	r0, r3
 8004054:	f01a fcb6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004058:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800405c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004060:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004064:	497d      	ldr	r1, [pc, #500]	; (800425c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa79 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800406c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004070:	4618      	mov	r0, r3
 8004072:	f01a fb00 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407a:	4618      	mov	r0, r3
 800407c:	f01a f9fc 	bl	801e478 <_ZNSaIcED1Ev>
                        status.appendToMessage(errorMsg);
 8004080:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004084:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f01a fc66 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004090:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8004094:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004098:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800409c:	4611      	mov	r1, r2
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f00a fd86 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80040a4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80040a8:	4618      	mov	r0, r3
 80040aa:	f01a fae4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                        break;
 80040ae:	bf00      	nop
                    }
 80040b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040b4:	4618      	mov	r0, r3
 80040b6:	f01a fade 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80040ba:	e0a0      	b.n	80041fe <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x65e>
                    status.success = false;
 80040bc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80040c0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
                    string errorMsg = StepArrayKey + string(" item size!=2");
 80040ca:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f01a f9d1 	bl	801e476 <_ZNSaIcEC1Ev>
 80040d4:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80040d8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80040dc:	4961      	ldr	r1, [pc, #388]	; (8004264 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c4>)
 80040de:	4618      	mov	r0, r3
 80040e0:	f01a fc70 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80040e4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80040e8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80040ec:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80040f0:	495a      	ldr	r1, [pc, #360]	; (800425c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa33 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80040f8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80040fc:	4618      	mov	r0, r3
 80040fe:	f01a faba 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004102:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004106:	4618      	mov	r0, r3
 8004108:	f01a f9b6 	bl	801e478 <_ZNSaIcED1Ev>
                    status.appendToMessage(errorMsg);
 800410c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004110:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f01a fc20 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800411c:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8004120:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004124:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8004128:	4611      	mov	r1, r2
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	f00a fd40 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004130:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004134:	4618      	mov	r0, r3
 8004136:	f01a fa9e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                    break;
 800413a:	bf00      	nop
                }
 800413c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004140:	4618      	mov	r0, r3
 8004142:	f01a fa98 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004146:	e05a      	b.n	80041fe <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x65e>
                status.success = false;
 8004148:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800414c:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
                string errorMsg = StepArrayKey + string(" item not JsonArary");
 8004156:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800415a:	4618      	mov	r0, r3
 800415c:	f01a f98b 	bl	801e476 <_ZNSaIcEC1Ev>
 8004160:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8004164:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004168:	493f      	ldr	r1, [pc, #252]	; (8004268 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6c8>)
 800416a:	4618      	mov	r0, r3
 800416c:	f01a fc2a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004170:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004174:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004178:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800417c:	4937      	ldr	r1, [pc, #220]	; (800425c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9ed 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8004184:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004188:	4618      	mov	r0, r3
 800418a:	f01a fa74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800418e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004192:	4618      	mov	r0, r3
 8004194:	f01a f970 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 8004198:	f107 0214 	add.w	r2, r7, #20
 800419c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f01a fbda 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80041a8:	f507 721d 	add.w	r2, r7, #628	; 0x274
 80041ac:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80041b0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 80041b4:	4611      	mov	r1, r2
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	f00a fcfa 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80041bc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80041c0:	4618      	mov	r0, r3
 80041c2:	f01a fa58 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                break;
 80041c6:	bf00      	nop
            }
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4618      	mov	r0, r3
 80041ce:	f01a fa52 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041d2:	e014      	b.n	80041fe <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x65e>
        for (size_t i=0; i<jsonStepArray.size(); i++)
 80041d4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80041d8:	3301      	adds	r3, #1
 80041da:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80041de:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fdf8 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80041ee:	4293      	cmp	r3, r2
 80041f0:	bf34      	ite	cc
 80041f2:	2301      	movcc	r3, #1
 80041f4:	2300      	movcs	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f47f ae2d 	bne.w	8003e58 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x2b8>
        if (status.success)
 80041fe:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004202:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80b5 	beq.w	800437a <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7da>
            setNumStep(jsonStepArray.size());
 8004210:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004214:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	336c      	adds	r3, #108	; 0x6c
 800421e:	681c      	ldr	r4, [r3, #0]
 8004220:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd fdd7 	bl	8001dd8 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE4sizeEv>
 800422a:	4602      	mov	r2, r0
 800422c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004230:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004234:	4611      	mov	r1, r2
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	47a0      	blx	r4
            JsonArray &jsonStepDatArray = jsonDatPrm.createNestedArray(StepArrayKey);
 800423a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800423e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8004242:	4906      	ldr	r1, [pc, #24]	; (800425c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6bc>)
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	f7fe ffd3 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 800424a:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
            for (size_t i=0; i<getNumStep(); i++)
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8004254:	e078      	b.n	8004348 <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x7a8>
 8004256:	bf00      	nop
 8004258:	08020ed8 	.word	0x08020ed8
 800425c:	2000863c 	.word	0x2000863c
 8004260:	08020eec 	.word	0x08020eec
 8004264:	08020f00 	.word	0x08020f00
 8004268:	08020f10 	.word	0x08020f10
                setStepDuration(i,durationArrayTmp[i]);
 800426c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004270:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3360      	adds	r3, #96	; 0x60
 800427a:	681c      	ldr	r4, [r3, #0]
 800427c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004280:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fc6c 	bl	8003b62 <_ZN5ArrayIyLj2EEixEj>
 800428a:	4603      	mov	r3, r0
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 8004294:	f5a1 7029 	sub.w	r0, r1, #676	; 0x2a4
 8004298:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	47a0      	blx	r4
                setStepValue(i,valueArrayTmp[i]);
 80042a0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80042a4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3358      	adds	r3, #88	; 0x58
 80042ae:	681c      	ldr	r4, [r3, #0]
 80042b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042b4:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fc61 	bl	8003b80 <_ZN5ArrayIfLj2EEixEj>
 80042be:	4603      	mov	r3, r0
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80042c8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80042cc:	eeb0 0a67 	vmov.f32	s0, s15
 80042d0:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	47a0      	blx	r4
                JsonArray &jsonStepDat = jsonStepDatArray.createNestedArray();
 80042d8:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 80042dc:	f7fd f91a 	bl	8001514 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 80042e0:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
                jsonStepDat.add(convertUsToMs(durationArray_[i]));
 80042e4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80042e8:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3350      	adds	r3, #80	; 0x50
 80042f0:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fc34 	bl	8003b62 <_ZN5ArrayIyLj2EEixEj>
 80042fa:	4603      	mov	r3, r0
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fd fa89 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8004308:	4603      	mov	r3, r0
 800430a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800430e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8004312:	4619      	mov	r1, r3
 8004314:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8004318:	f7fe ff87 	bl	800322a <_ZN11ArduinoJson9JsonArray3addImEEbRKT_>
                jsonStepDat.add(valueArray_[i]);
 800431c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004320:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3340      	adds	r3, #64	; 0x40
 8004328:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fc27 	bl	8003b80 <_ZN5ArrayIfLj2EEixEj>
 8004332:	4603      	mov	r3, r0
 8004334:	4619      	mov	r1, r3
 8004336:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800433a:	f7fe ff93 	bl	8003264 <_ZN11ArduinoJson9JsonArray3addIfEEbRKT_>
            for (size_t i=0; i<getNumStep(); i++)
 800433e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8004342:	3301      	adds	r3, #1
 8004344:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8004348:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800434c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3370      	adds	r3, #112	; 0x70
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800435c:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8004360:	6810      	ldr	r0, [r2, #0]
 8004362:	4798      	blx	r3
 8004364:	4602      	mov	r2, r0
 8004366:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800436a:	4293      	cmp	r3, r2
 800436c:	bf34      	ite	cc
 800436e:	2301      	movcc	r3, #1
 8004370:	2300      	movcs	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af79 	bne.w	800426c <_ZN2ps13MultiStepTestILj2EE27setValueAndDurationFromJsonERN11ArduinoJson10JsonObjectES4_RNS_12ReturnStatusE+0x6cc>
    }
 800437a:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop

08004384 <_ZN5ArrayIfLj2EE5clearEv>:
void Array<T, MAX_SIZE>::clear()
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  size_ = 0;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <_ZN5ArrayIyLj2EE5clearEv>:
void Array<T, MAX_SIZE>::clear()
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  size_ = 0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	611a      	str	r2, [r3, #16]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <_ZN5ArrayIfLj2EE9push_backERKf>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d80a      	bhi.n	80043e0 <_ZN5ArrayIfLj2EE9push_backERKf+0x28>
    values_[size_++] = value;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6091      	str	r1, [r2, #8]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	601a      	str	r2, [r3, #0]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <_ZN5ArrayIyLj2EE9push_backERKy>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d80c      	bhi.n	8004418 <_ZN5ArrayIyLj2EE9push_backERKy+0x2c>
    values_[size_++] = value;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	1c4a      	adds	r2, r1, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	611a      	str	r2, [r3, #16]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	00c9      	lsls	r1, r1, #3
 8004412:	4401      	add	r1, r0
 8004414:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayET_>:
inline JsonArray &JsonObject::createNestedArray_impl(TStringRef key) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  if (!_buffer) return JsonArray::invalid();
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <_ZN11ArduinoJson10JsonObject22createNestedArray_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayET_+0x1a>
 8004436:	f7fd f827 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 800443a:	4603      	mov	r3, r0
 800443c:	e00b      	b.n	8004456 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayET_+0x32>
  JsonArray &array = _buffer->createArray();
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd f881 	bl	800154a <_ZN11ArduinoJson10JsonBuffer11createArrayEv>
 8004448:	60f8      	str	r0, [r7, #12]
  set(key, array);
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f95f 	bl	8004712 <_ZN11ArduinoJson10JsonObject3setINS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
  return array;
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <_ZN11ArduinoJson9JsonArray8add_implIRKmEEbT_>:
  bool add_impl(TValueRef value) {
 800445e:	b590      	push	{r4, r7, lr}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
    iterator it = Internals::List<JsonVariant>::add();
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fd68 	bl	8001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>
 8004470:	4603      	mov	r3, r0
 8004472:	60bb      	str	r3, [r7, #8]
    if (it == end()) return false;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fd46 	bl	8001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 800447c:	4603      	mov	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	f107 020c 	add.w	r2, r7, #12
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd fd28 	bl	8001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <_ZN11ArduinoJson9JsonArray8add_implIRKmEEbT_+0x3c>
 8004496:	2300      	movs	r3, #0
 8004498:	e00e      	b.n	80044b8 <_ZN11ArduinoJson9JsonArray8add_implIRKmEEbT_+0x5a>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681c      	ldr	r4, [r3, #0]
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fd3f 	bl	8001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 f93f 	bl	8004732 <_ZN11ArduinoJson9Internals10ValueSaverIRKmvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 80044b4:	4603      	mov	r3, r0
 80044b6:	bf00      	nop
  }
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}

080044c0 <_ZN11ArduinoJson9JsonArray8add_implIRKfEEbT_>:
  bool add_impl(TValueRef value) {
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
    iterator it = Internals::List<JsonVariant>::add();
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fd37 	bl	8001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>
 80044d2:	4603      	mov	r3, r0
 80044d4:	60bb      	str	r3, [r7, #8]
    if (it == end()) return false;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fd15 	bl	8001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	f107 020c 	add.w	r2, r7, #12
 80044e6:	f107 0308 	add.w	r3, r7, #8
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fd fcf7 	bl	8001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <_ZN11ArduinoJson9JsonArray8add_implIRKfEEbT_+0x3c>
 80044f8:	2300      	movs	r3, #0
 80044fa:	e00e      	b.n	800451a <_ZN11ArduinoJson9JsonArray8add_implIRKfEEbT_+0x5a>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681c      	ldr	r4, [r3, #0]
 8004500:	f107 0308 	add.w	r3, r7, #8
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd fd0e 	bl	8001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>
 800450a:	4603      	mov	r3, r0
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4620      	mov	r0, r4
 8004512:	f000 f928 	bl	8004766 <_ZN11ArduinoJson9Internals10ValueSaverIRKfvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 8004516:	4603      	mov	r3, r0
 8004518:	bf00      	nop
  }
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bd90      	pop	{r4, r7, pc}

08004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>:
  bool containsKey(const TString& key) const {
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
    return findKey<const TString&>(key) != end();
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f936 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8004534:	4603      	mov	r3, r0
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fdae 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	f107 020c 	add.w	r2, r7, #12
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd fd90 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8004554:	4603      	mov	r3, r0
  }
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>:
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f01a f96e 	bl	801e850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8004574:	4603      	mov	r3, r0
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fc67 	bl	8001e4a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800457c:	4603      	mov	r3, r0
 800457e:	4619      	mov	r1, r3
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f01a f85e 	bl	801e642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>:
  Internals::JsonObjectSubscript<const TString&> operator[](
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	613b      	str	r3, [r7, #16]
      : _object(object), _key(key) {}
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	605a      	str	r2, [r3, #4]
    return Internals::JsonObjectSubscript<const TString&>(*this, key);
 80045ae:	bf00      	nop
  }
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_ZN5ArrayIyLj50EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  size_ = 0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_ZN5ArrayIfLj50EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  size_ = 0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_ZNK11ArduinoJson9JsonArray3getImEENS_9Internals13JsonVariantAsIT_E4typeEj>:
  typename Internals::JsonVariantAs<T>::type get(size_t index) const {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd fd01 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 800460a:	4603      	mov	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	f107 0310 	add.w	r3, r7, #16
 8004612:	6839      	ldr	r1, [r7, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fd5d 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 800461a:	4603      	mov	r3, r0
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->as<T>() : Internals::JsonVariantDefault<T>::get();
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd fd17 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 8004628:	4603      	mov	r3, r0
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	f107 0214 	add.w	r2, r7, #20
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fcf9 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <_ZNK11ArduinoJson9JsonArray3getImEENS_9Internals13JsonVariantAsIT_E4typeEj+0x60>
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd fd60 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 800464c:	4603      	mov	r3, r0
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f948 	bl	80048e4 <_ZNK11ArduinoJson11JsonVariant2asImEEKNS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueES5_E4typeEv>
 8004654:	4603      	mov	r3, r0
 8004656:	e002      	b.n	800465e <_ZNK11ArduinoJson9JsonArray3getImEENS_9Internals13JsonVariantAsIT_E4typeEj+0x66>
 8004658:	f000 f950 	bl	80048fc <_ZN11ArduinoJson9Internals18JsonVariantDefaultImE3getEv>
 800465c:	4603      	mov	r3, r0
  }
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_ZNK11ArduinoJson9JsonArray3getIfEENS_9Internals13JsonVariantAsIT_E4typeEj>:
  typename Internals::JsonVariantAs<T>::type get(size_t index) const {
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fcca 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 8004678:	4603      	mov	r3, r0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	f107 0310 	add.w	r3, r7, #16
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fd26 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 8004688:	4603      	mov	r3, r0
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->as<T>() : Internals::JsonVariantDefault<T>::get();
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd fce0 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 8004696:	4603      	mov	r3, r0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	f107 0214 	add.w	r2, r7, #20
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd fcc2 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <_ZNK11ArduinoJson9JsonArray3getIfEENS_9Internals13JsonVariantAsIT_E4typeEj+0x62>
 80046b0:	f107 030c 	add.w	r3, r7, #12
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fd fd29 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f95f 	bl	8004980 <_ZNK11ArduinoJson11JsonVariant2asIfEEKNS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueES5_E4typeEv>
 80046c2:	eef0 7a40 	vmov.f32	s15, s0
 80046c6:	e003      	b.n	80046d0 <_ZNK11ArduinoJson9JsonArray3getIfEENS_9Internals13JsonVariantAsIT_E4typeEj+0x6a>
 80046c8:	f000 f968 	bl	800499c <_ZN11ArduinoJson9Internals18JsonVariantDefaultIfE3getEv>
 80046cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80046d0:	eeb0 0a67 	vmov.f32	s0, s15
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_ZN5ArrayIyLj2EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  size_ = 0;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
}
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <_ZN5ArrayIfLj2EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  size_ = 0;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_ZN11ArduinoJson10JsonObject3setINS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f946 	bl	80049b4 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_>
 8004728:	4603      	mov	r3, r0
  }
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZN11ArduinoJson9Internals10ValueSaverIRKmvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 8004732:	b590      	push	{r4, r7, lr}
 8004734:	b089      	sub	sp, #36	; 0x24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
    destination = source;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	f107 0310 	add.w	r3, r7, #16
 8004746:	2200      	movs	r2, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f99c 	bl	8004a86 <_ZN11ArduinoJson11JsonVariantC1ImEET_PNS_9Internals8EnableIfIXsrNS3_18IsUnsignedIntegralIS2_EE5valueEvE4typeE>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	461c      	mov	r4, r3
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 800475c:	2301      	movs	r3, #1
  }
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}

08004766 <_ZN11ArduinoJson9Internals10ValueSaverIRKfvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 8004766:	b590      	push	{r4, r7, lr}
 8004768:	b089      	sub	sp, #36	; 0x24
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
    destination = source;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	2100      	movs	r1, #0
 800477e:	eeb0 0a67 	vmov.f32	s0, s15
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd faff 	bl	8001d86 <_ZN11ArduinoJson11JsonVariantC1IfEET_PNS_9Internals8EnableIfIXsrNS3_15IsFloatingPointIS2_EE5valueEvE4typeE>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	461c      	mov	r4, r3
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 8004796:	2301      	movs	r3, #1
  }
 8004798:	4618      	mov	r0, r3
 800479a:	3724      	adds	r7, #36	; 0x24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd90      	pop	{r4, r7, pc}

080047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>:
  const_iterator findKey(TStringRef key) const {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
    return const_cast<JsonObject*>(this)->findKey<TStringRef>(key);
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f980 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 80047b2:	4603      	mov	r3, r0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	f107 030c 	add.w	r3, r7, #12
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f9b6 	bl	8004b2c <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEcvNS0_17ListConstIteratorIS2_EEEv>
 80047c0:	4603      	mov	r3, r0
  }
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_ZNK11ArduinoJson10JsonObject2isIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9b9 	bl	8004b4e <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEEbT_>
 80047dc:	4603      	mov	r3, r0
  }
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>:
  const TImpl *impl() const {
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80047ee:	687b      	ldr	r3, [r7, #4]
  }
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <_ZNK11ArduinoJson9JsonArray2isIRS0_EEbj>:
  bool is(size_t index) const {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fbff 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 800480e:	4603      	mov	r3, r0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	f107 0310 	add.w	r3, r7, #16
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fc5b 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 800481e:	4603      	mov	r3, r0
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->is<T>() : false;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fc15 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 800482c:	4603      	mov	r3, r0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	f107 0214 	add.w	r2, r7, #20
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fbf7 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00f      	beq.n	8004866 <_ZNK11ArduinoJson9JsonArray2isIRS0_EEbj+0x6a>
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fc5e 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 8004850:	4603      	mov	r3, r0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f9bb 	bl	8004bce <_ZNK11ArduinoJson11JsonVariant2isIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_11RemoveConstINS4_15RemoveReferenceIT_E4typeEE4typeES2_EE5valueEbE4typeEv>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	bf14      	ite	ne
 800485e:	2301      	movne	r3, #1
 8004860:	2300      	moveq	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e000      	b.n	8004868 <_ZNK11ArduinoJson9JsonArray2isIRS0_EEbj+0x6c>
 8004866:	2300      	movs	r3, #0
  }
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZNK11ArduinoJson9JsonArray2isImEEbj>:
  bool is(size_t index) const {
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fbc5 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 8004882:	4603      	mov	r3, r0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	f107 0310 	add.w	r3, r7, #16
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd fc21 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 8004892:	4603      	mov	r3, r0
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->is<T>() : false;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fbdb 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 80048a0:	4603      	mov	r3, r0
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f107 0214 	add.w	r2, r7, #20
 80048a8:	f107 030c 	add.w	r3, r7, #12
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fbbd 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00f      	beq.n	80048da <_ZNK11ArduinoJson9JsonArray2isImEEbj+0x6a>
 80048ba:	f107 030c 	add.w	r3, r7, #12
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fc24 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f9c4 	bl	8004c54 <_ZNK11ArduinoJson11JsonVariant2isImEENS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueEbE4typeEv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e000      	b.n	80048dc <_ZNK11ArduinoJson9JsonArray2isImEEbj+0x6c>
 80048da:	2300      	movs	r3, #0
  }
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZNK11ArduinoJson11JsonVariant2asImEEKNS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueES5_E4typeEv>:
  as() const {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    return variantAsInteger<T>();
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9bd 	bl	8004c6c <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v>
 80048f2:	4603      	mov	r3, r0
  }
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZN11ArduinoJson9Internals18JsonVariantDefaultImE3getEv>:
  static T get() {
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
    return T();
 8004900:	2300      	movs	r3, #0
  }
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <_ZNK11ArduinoJson9JsonArray2isIfEEbj>:
  bool is(size_t index) const {
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd fb77 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 800491e:	4603      	mov	r3, r0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	f107 0310 	add.w	r3, r7, #16
 8004926:	6839      	ldr	r1, [r7, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fbd3 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 800492e:	4603      	mov	r3, r0
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->is<T>() : false;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd fb8d 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 800493c:	4603      	mov	r3, r0
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	f107 0214 	add.w	r2, r7, #20
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fb6f 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <_ZNK11ArduinoJson9JsonArray2isIfEEbj+0x6a>
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fbd6 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 8004960:	4603      	mov	r3, r0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f9ba 	bl	8004cdc <_ZNK11ArduinoJson11JsonVariant2isIfEENS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueEbE4typeEv>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e000      	b.n	8004978 <_ZNK11ArduinoJson9JsonArray2isIfEEbj+0x6c>
 8004976:	2300      	movs	r3, #0
  }
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZNK11ArduinoJson11JsonVariant2asIfEEKNS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueES5_E4typeEv>:
  as() const {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    return variantAsFloat<T>();
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9b3 	bl	8004cf4 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v>
 800498e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8004992:	eeb0 0a67 	vmov.f32	s0, s15
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZN11ArduinoJson9Internals18JsonVariantDefaultIfE3getEv>:
  static T get() {
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
    return T();
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	ee07 3a90 	vmov	s15, r3
  }
 80049a8:	eeb0 0a67 	vmov.f32	s0, s15
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f000 f9dd 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0x1c>
 80049cc:	2300      	movs	r3, #0
 80049ce:	e056      	b.n	8004a7e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f86d 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 80049d8:	4603      	mov	r3, r0
 80049da:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f9f3 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80049e4:	4603      	mov	r3, r0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	f107 0214 	add.w	r2, r7, #20
 80049ec:	f107 0310 	add.w	r3, r7, #16
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f9d5 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d02f      	beq.n	8004a5e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f9f1 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 8004a06:	4603      	mov	r3, r0
 8004a08:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f9dc 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8004a12:	4603      	mov	r3, r0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	f107 0218 	add.w	r2, r7, #24
 8004a1a:	f107 0310 	add.w	r3, r7, #16
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f9be 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0x7c>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e026      	b.n	8004a7e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681c      	ldr	r4, [r3, #0]
 8004a34:	f107 0310 	add.w	r3, r7, #16
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa07 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fa0e 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0xaa>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e00f      	b.n	8004a7e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9JsonArrayEEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681c      	ldr	r4, [r3, #0]
 8004a62:	f107 0310 	add.w	r3, r7, #16
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f9f0 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	3308      	adds	r3, #8
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7fd fa95 	bl	8001fa4 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	bf00      	nop
  }
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3724      	adds	r7, #36	; 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <_ZN11ArduinoJson11JsonVariantC1ImEET_PNS_9Internals8EnableIfIXsrNS3_18IsUnsignedIntegralIS2_EE5valueEvE4typeE>:
  JsonVariant(T value,
 8004a86:	b4b0      	push	{r4, r5, r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
    _type = JSON_POSITIVE_INTEGER;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]
    _content.asInteger = static_cast<JsonUInt>(value);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	4615      	mov	r5, r2
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	e9c3 4502 	strd	r4, r5, [r3, #8]
  }
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bcb0      	pop	{r4, r5, r7}
 8004ab0:	4770      	bx	lr

08004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>:
  iterator findKey(TStringRef key) {
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
    iterator it;
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f9f4 	bl	8004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>
    for (it = begin(); it != end(); ++it) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9ff 	bl	8004ece <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE5beginEv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	e012      	b.n	8004afc <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x4a>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f9b6 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f000 fa2a 	bl	8004f40 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6equalsERKS7_PKc>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x6e>
    for (it = begin(); it != end(); ++it) {
 8004af2:	f107 0308 	add.w	r3, r7, #8
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fa0e 	bl	8004f18 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEppEv>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f963 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8004b04:	4603      	mov	r3, r0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	f107 020c 	add.w	r2, r7, #12
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f9ec 	bl	8004ef0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEneERKS3_>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1db      	bne.n	8004ad6 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x24>
 8004b1e:	e000      	b.n	8004b22 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x70>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
 8004b20:	bf00      	nop
    return it;
 8004b22:	68bb      	ldr	r3, [r7, #8]
  }
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEcvNS0_17ListConstIteratorIS2_EEEv>:
  operator ListConstIterator<T>() const {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    return ListConstIterator<T>(_node);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fb00 	bl	8002144 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEC1EPKNS0_8ListNodeIS2_EE>
 8004b44:	68fb      	ldr	r3, [r7, #12]
  }
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEEbT_>:
  bool is_impl(TStringRef key) const {
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fe20 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8004b60:	4603      	mov	r3, r0
 8004b62:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fa98 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	f107 020c 	add.w	r2, r7, #12
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd fa7a 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEEbT_+0x5a>
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fa95 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8004b90:	4603      	mov	r3, r0
 8004b92:	3308      	adds	r3, #8
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f81a 	bl	8004bce <_ZNK11ArduinoJson11JsonVariant2isIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_11RemoveConstINS4_15RemoveReferenceIT_E4typeEE4typeES2_EE5valueEbE4typeEv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e000      	b.n	8004baa <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEEbT_+0x5c>
 8004ba8:	2300      	movs	r3, #0
  }
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_ZNK11ArduinoJson10JsonObject3getIRNS_9JsonArrayENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9e3 	bl	8004f8a <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 8004bc4:	4603      	mov	r3, r0
  }
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <_ZNK11ArduinoJson11JsonVariant2isIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_11RemoveConstINS4_15RemoveReferenceIT_E4typeEE4typeES2_EE5valueEbE4typeEv>:
  is() const {
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
    return variantIsArray();
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fc1c 	bl	8001414 <_ZNK11ArduinoJson11JsonVariant14variantIsArrayEv>
 8004bdc:	4603      	mov	r3, r0
  }
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <_ZNK11ArduinoJson9JsonArray3getIRS0_EENS_9Internals13JsonVariantAsIT_E4typeEj>:
  typename Internals::JsonVariantAs<T>::type get(size_t index) const {
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
    const_iterator it = begin() += index;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fd fa0a 	bl	800200c <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE5beginEv>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd fa66 	bl	80020d4 <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEpLEj>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
    return it != end() ? it->as<T>() : Internals::JsonVariantDefault<T>::get();
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fa20 	bl	8002056 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 8004c16:	4603      	mov	r3, r0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	f107 0214 	add.w	r2, r7, #20
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fa02 	bl	800202e <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEneERKS3_>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <_ZNK11ArduinoJson9JsonArray3getIRS0_EENS_9Internals13JsonVariantAsIT_E4typeEj+0x60>
 8004c30:	f107 030c 	add.w	r3, r7, #12
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd fa69 	bl	800210c <_ZN11ArduinoJson9Internals17ListConstIteratorINS_11JsonVariantEEptEv>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f9d3 	bl	8004fe8 <_ZNK11ArduinoJson11JsonVariant2asIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_15RemoveReferenceIT_E4typeES2_EE5valueES3_E4typeEv>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e002      	b.n	8004c4c <_ZNK11ArduinoJson9JsonArray3getIRS0_EENS_9Internals13JsonVariantAsIT_E4typeEj+0x66>
 8004c46:	f7fc fc47 	bl	80014d8 <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_9JsonArrayEE3getEv>
 8004c4a:	4603      	mov	r3, r0
  }
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_ZNK11ArduinoJson11JsonVariant2isImEENS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueEbE4typeEv>:
  typename Internals::EnableIf<Internals::IsIntegral<T>::value, bool>::type is()
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    return variantIsInteger();
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc fd9a 	bl	8001796 <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv>
 8004c62:	4603      	mov	r3, r0
  }
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v>:
inline T JsonVariant::variantAsInteger() const {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  switch (_type) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d823      	bhi.n	8004cc4 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x58>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x18>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004c9d 	.word	0x08004c9d
 8004c88:	08004cb7 	.word	0x08004cb7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004ca1 	.word	0x08004ca1
 8004c98:	08004cab 	.word	0x08004cab
      return 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e019      	b.n	8004cd4 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x68>
      return T(_content.asInteger);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	e014      	b.n	8004cd4 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x68>
      return T(~_content.asInteger + 1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	e00e      	b.n	8004cd4 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x68>
      return parseInteger<T>(_content.asString);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f9a0 	bl	8005000 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	e007      	b.n	8004cd4 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerImEET_v+0x68>
      return T(_content.asFloat);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f7fb ff29 	bl	8000b24 <__aeabi_d2uiz>
 8004cd2:	4603      	mov	r3, r0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZNK11ArduinoJson11JsonVariant2isIfEENS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueEbE4typeEv>:
  is() const {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    return variantIsFloat();
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fc fd75 	bl	80017d4 <_ZNK11ArduinoJson11JsonVariant14variantIsFloatEv>
 8004cea:	4603      	mov	r3, r0
  }
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v>:
inline T JsonVariant::variantAsFloat() const {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  switch (_type) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d82e      	bhi.n	8004d62 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x6e>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x18>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d53 	.word	0x08004d53
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d2b 	.word	0x08004d2b
 8004d1c:	08004d2b 	.word	0x08004d2b
 8004d20:	08004d3d 	.word	0x08004d3d
      return 0;
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e023      	b.n	8004d72 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x7e>
      return static_cast<T>(_content.asInteger);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	f7fc f82e 	bl	8000d94 <__aeabi_ul2f>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	e01a      	b.n	8004d72 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x7e>
      return -static_cast<T>(_content.asInteger);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d42:	4610      	mov	r0, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7fc f825 	bl	8000d94 <__aeabi_ul2f>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d50:	e00f      	b.n	8004d72 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x7e>
      return parseFloat<T>(_content.asString);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f998 	bl	800508c <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc>
 8004d5c:	ee10 3a10 	vmov	r3, s0
 8004d60:	e007      	b.n	8004d72 <_ZNK11ArduinoJson11JsonVariant14variantAsFloatIfEET_v+0x7e>
      return static_cast<T>(_content.asFloat);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f7fb fefa 	bl	8000b64 <__aeabi_d2f>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eeb0 0a67 	vmov.f32	s0, s15
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>:
  static bool is_null(const TString& str) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
    return !str.c_str();
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f019 fdb1 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
  }
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>:
  bool operator==(const ListIterator<T> &other) const {
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
    return _node == other._node;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
  }
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>:
  iterator end() {
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
    return iterator(NULL);
 8004dd2:	f107 030c 	add.w	r3, r7, #12
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f869 	bl	8004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>
 8004dde:	68fb      	ldr	r3, [r7, #12]
  }
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>:
  iterator add() {
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    node_type *newNode = new (_buffer) node_type();
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	2020      	movs	r0, #32
 8004df8:	f7fc fb1d 	bl	8001436 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	2c00      	cmp	r4, #0
 8004e00:	d002      	beq.n	8004e08 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x20>
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 fa6a 	bl	80052dc <_ZN11ArduinoJson9Internals8ListNodeINS_8JsonPairEEC1Ev>
 8004e08:	613c      	str	r4, [r7, #16]
    if (_firstNode) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00e      	beq.n	8004e30 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x48>
      node_type *lastNode = _firstNode;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	617b      	str	r3, [r7, #20]
      while (lastNode->next) lastNode = lastNode->next;
 8004e18:	e002      	b.n	8004e20 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x38>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f8      	bne.n	8004e1a <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x32>
      lastNode->next = newNode;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x4e>
      _firstNode = newNode;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	605a      	str	r2, [r3, #4]
    return iterator(newNode);
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	6939      	ldr	r1, [r7, #16]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f837 	bl	8004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>
 8004e42:	68fb      	ldr	r3, [r7, #12]
  }
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>:
  T *operator->() {
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    return &_node->content;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
  }
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>:
  static bool save(JsonBuffer* buffer, Destination& dest, Source source) {
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
    if (!StringTraits<Source>::is_null(source)) {
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ff84 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f083 0301 	eor.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_+0x3a>
          StringTraits<Source>::duplicate(source, buffer);
 8004e84:	68f9      	ldr	r1, [r7, #12]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa39 	bl	80052fe <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_>
 8004e8c:	6178      	str	r0, [r7, #20]
      if (!dup) return false;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_+0x32>
 8004e94:	2300      	movs	r3, #0
 8004e96:	e007      	b.n	8004ea8 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_+0x42>
      dest = dup;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_+0x40>
      dest = reinterpret_cast<const char*>(0);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    return true;
 8004ea6:	2301      	movs	r3, #1
  }
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>:
  explicit ListIterator(ListNode<T> *node = NULL) : _node(node) {}
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE5beginEv>:
  iterator begin() {
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
    return iterator(_firstNode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ffe5 	bl	8004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
  }
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEneERKS3_>:
  bool operator!=(const ListIterator<T> &other) const {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
    return _node != other._node;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
  }
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEppEv>:
  ListIterator<T> &operator++() {
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
    if (_node) _node = _node->next;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEppEv+0x1a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
    return *this;
 8004f32:	687b      	ldr	r3, [r7, #4]
  }
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6equalsERKS7_PKc>:
  static bool equals(const TString& str, const char* expected) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
    const char* actual = str.c_str();
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f019 fcd0 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004f50:	60f8      	str	r0, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6equalsERKS7_PKc+0x1e>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d107      	bne.n	8004f6e <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6equalsERKS7_PKc+0x2e>
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e009      	b.n	8004f82 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6equalsERKS7_PKc+0x42>
    return 0 == strcmp(actual, expected);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fb f931 	bl	80001d8 <strcmp>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
  }
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fc02 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd f87a 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	f107 020c 	add.w	r2, r7, #12
 8004fb0:	f107 0308 	add.w	r3, r7, #8
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd f85c 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x50>
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fd f877 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	3308      	adds	r3, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f809 	bl	8004fe8 <_ZNK11ArduinoJson11JsonVariant2asIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_15RemoveReferenceIT_E4typeES2_EE5valueES3_E4typeEv>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	e002      	b.n	8004fe0 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_9JsonArrayEEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
                       : Internals::JsonVariantDefault<TValue>::get();
 8004fda:	f7fc fa7d 	bl	80014d8 <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_9JsonArrayEE3getEv>
 8004fde:	4603      	mov	r3, r0
  }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_ZNK11ArduinoJson11JsonVariant2asIRNS_9JsonArrayEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_15RemoveReferenceIT_E4typeES2_EE5valueES3_E4typeEv>:
  as() const {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    return variantAsArray();
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fc fbbd 	bl	8001770 <_ZNK11ArduinoJson11JsonVariant14variantAsArrayEv>
 8004ff6:	4603      	mov	r3, r0
  }
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc>:
T parseInteger(const char *s) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if (!s) return 0;  // NULL
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x12>
 800500e:	2300      	movs	r3, #0
 8005010:	e038      	b.n	8005084 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x84>
  if (*s == 't') return 1;  // "true"
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b74      	cmp	r3, #116	; 0x74
 8005018:	d101      	bne.n	800501e <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x1e>
 800501a:	2301      	movs	r3, #1
 800501c:	e032      	b.n	8005084 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x84>
  T result = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
  bool negative_result = false;
 8005022:	2300      	movs	r3, #0
 8005024:	72fb      	strb	r3, [r7, #11]
  switch (*s) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b2b      	cmp	r3, #43	; 0x2b
 800502c:	d007      	beq.n	800503e <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x3e>
 800502e:	2b2d      	cmp	r3, #45	; 0x2d
 8005030:	d118      	bne.n	8005064 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x64>
      negative_result = true;
 8005032:	2301      	movs	r3, #1
 8005034:	72fb      	strb	r3, [r7, #11]
      s++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3301      	adds	r3, #1
 800503a:	607b      	str	r3, [r7, #4]
      break;
 800503c:	e003      	b.n	8005046 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x46>
      s++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3301      	adds	r3, #1
 8005042:	607b      	str	r3, [r7, #4]
      break;
 8005044:	bf00      	nop
  while (isdigit(*s)) {
 8005046:	e00d      	b.n	8005064 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x64>
    result = T(result * 10 + T(*s - '0'));
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4413      	add	r3, r2
 800505a:	3b30      	subs	r3, #48	; 0x30
 800505c:	60fb      	str	r3, [r7, #12]
    s++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3301      	adds	r3, #1
 8005062:	607b      	str	r3, [r7, #4]
  while (isdigit(*s)) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fc fa8a 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e9      	bne.n	8005048 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x48>
  return negative_result ? T(~result + 1) : result;
 8005074:	7afb      	ldrb	r3, [r7, #11]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x80>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	425b      	negs	r3, r3
 800507e:	e000      	b.n	8005082 <_ZN11ArduinoJson9Internals12parseIntegerImEET_PKc+0x82>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	bf00      	nop
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc>:
inline T parseFloat(const char* s) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if (!s) return 0;  // NULL
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x14>
 800509a:	eddf 7a86 	vldr	s15, [pc, #536]	; 80052b4 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x228>
 800509e:	e104      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
  bool negative_result = false;
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
  switch (*s) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b2b      	cmp	r3, #43	; 0x2b
 80050aa:	d007      	beq.n	80050bc <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x30>
 80050ac:	2b2d      	cmp	r3, #45	; 0x2d
 80050ae:	d109      	bne.n	80050c4 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x38>
      negative_result = true;
 80050b0:	2301      	movs	r3, #1
 80050b2:	77fb      	strb	r3, [r7, #31]
      s++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]
      break;
 80050ba:	e003      	b.n	80050c4 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x38>
      s++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3301      	adds	r3, #1
 80050c0:	607b      	str	r3, [r7, #4]
      break;
 80050c2:	bf00      	nop
  if (*s == 't') return 1;  // true
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b74      	cmp	r3, #116	; 0x74
 80050ca:	d102      	bne.n	80050d2 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x46>
 80050cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80050d0:	e0eb      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
  if (*s == 'n' || *s == 'N') return traits::nan();
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b6e      	cmp	r3, #110	; 0x6e
 80050d8:	d003      	beq.n	80050e2 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x56>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b4e      	cmp	r3, #78	; 0x4e
 80050e0:	d104      	bne.n	80050ec <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x60>
 80050e2:	f000 f93d 	bl	8005360 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3nanEv>
 80050e6:	eef0 7a40 	vmov.f32	s15, s0
 80050ea:	e0de      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
  if (*s == 'i' || *s == 'I')
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b69      	cmp	r3, #105	; 0x69
 80050f2:	d003      	beq.n	80050fc <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x70>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b49      	cmp	r3, #73	; 0x49
 80050fa:	d10e      	bne.n	800511a <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x8e>
    return negative_result ? -traits::inf() : traits::inf();
 80050fc:	7ffb      	ldrb	r3, [r7, #31]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x84>
 8005102:	f000 f939 	bl	8005378 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3infEv>
 8005106:	eef0 7a40 	vmov.f32	s15, s0
 800510a:	eef1 7a67 	vneg.f32	s15, s15
 800510e:	e0cc      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
 8005110:	f000 f932 	bl	8005378 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3infEv>
 8005114:	eef0 7a40 	vmov.f32	s15, s0
 8005118:	e0c7      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
  mantissa_t mantissa = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
  exponent_t exponent_offset = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
  while (isdigit(*s)) {
 8005122:	e018      	b.n	8005156 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0xca>
    if (mantissa < traits::mantissa_max / 10)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	4a64      	ldr	r2, [pc, #400]	; (80052b8 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x22c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	dc0b      	bgt.n	8005144 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0xb8>
      mantissa = mantissa * 10 + (*s - '0');
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	3b30      	subs	r3, #48	; 0x30
 800513e:	4413      	add	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e005      	b.n	8005150 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0xc4>
      exponent_offset++;
 8005144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3301      	adds	r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	75fb      	strb	r3, [r7, #23]
    s++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3301      	adds	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
  while (isdigit(*s)) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc fa11 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1de      	bne.n	8005124 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x98>
  if (*s == '.') {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b2e      	cmp	r3, #46	; 0x2e
 800516c:	d123      	bne.n	80051b6 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x12a>
    s++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3301      	adds	r3, #1
 8005172:	607b      	str	r3, [r7, #4]
    while (isdigit(*s)) {
 8005174:	e017      	b.n	80051a6 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x11a>
      if (mantissa < traits::mantissa_max / 10) {
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	4a4f      	ldr	r2, [pc, #316]	; (80052b8 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x22c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	dc10      	bgt.n	80051a0 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x114>
        mantissa = mantissa * 10 + (*s - '0');
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	461a      	mov	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	3b30      	subs	r3, #48	; 0x30
 8005190:	4413      	add	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        exponent_offset--;
 8005194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	75fb      	strb	r3, [r7, #23]
      s++;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
    while (isdigit(*s)) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc f9e9 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1df      	bne.n	8005176 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0xea>
  int exponent = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
  if (*s == 'e' || *s == 'E') {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b65      	cmp	r3, #101	; 0x65
 80051c0:	d003      	beq.n	80051ca <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x13e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b45      	cmp	r3, #69	; 0x45
 80051c8:	d153      	bne.n	8005272 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1e6>
    s++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3301      	adds	r3, #1
 80051ce:	607b      	str	r3, [r7, #4]
    bool negative_exponent = false;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
    if (*s == '-') {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b2d      	cmp	r3, #45	; 0x2d
 80051da:	d105      	bne.n	80051e8 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x15c>
      negative_exponent = true;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      s++;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3301      	adds	r3, #1
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	e036      	b.n	8005256 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1ca>
    } else if (*s == '+') {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b2b      	cmp	r3, #43	; 0x2b
 80051ee:	d132      	bne.n	8005256 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1ca>
      s++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3301      	adds	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
    while (isdigit(*s)) {
 80051f6:	e02e      	b.n	8005256 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1ca>
      exponent = exponent * 10 + (*s - '0');
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	3b30      	subs	r3, #48	; 0x30
 800520a:	4413      	add	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
      if (exponent + exponent_offset > traits::exponent_max) {
 800520e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	2b26      	cmp	r3, #38	; 0x26
 8005218:	dd1a      	ble.n	8005250 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1c4>
        if (negative_exponent)
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1a6>
          return negative_result ? -0.0f : 0.0f;
 8005220:	7ffb      	ldrb	r3, [r7, #31]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1a0>
 8005226:	eddf 7a25 	vldr	s15, [pc, #148]	; 80052bc <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x230>
 800522a:	e03e      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
 800522c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80052b4 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x228>
 8005230:	e03b      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
          return negative_result ? -traits::inf() : traits::inf();
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1ba>
 8005238:	f000 f89e 	bl	8005378 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3infEv>
 800523c:	eef0 7a40 	vmov.f32	s15, s0
 8005240:	eef1 7a67 	vneg.f32	s15, s15
 8005244:	e031      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
 8005246:	f000 f897 	bl	8005378 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3infEv>
 800524a:	eef0 7a40 	vmov.f32	s15, s0
 800524e:	e02c      	b.n	80052aa <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21e>
      s++;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
    while (isdigit(*s)) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fc f991 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1c8      	bne.n	80051f8 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x16c>
    if (negative_exponent) exponent = -exponent;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x1e6>
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	425b      	negs	r3, r3
 8005270:	613b      	str	r3, [r7, #16]
  exponent += exponent_offset;
 8005272:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
  T result = traits::make_float(static_cast<T>(mantissa), exponent);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	eeb0 0a67 	vmov.f32	s0, s15
 800528c:	f000 f87f 	bl	800538e <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_>
 8005290:	ed87 0a02 	vstr	s0, [r7, #8]
  return negative_result ? -result : result;
 8005294:	7ffb      	ldrb	r3, [r7, #31]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x218>
 800529a:	edd7 7a02 	vldr	s15, [r7, #8]
 800529e:	eef1 7a67 	vneg.f32	s15, s15
 80052a2:	e001      	b.n	80052a8 <_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc+0x21c>
 80052a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80052a8:	bf00      	nop
}
 80052aa:	eeb0 0a67 	vmov.f32	s0, s15
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	00000000 	.word	0x00000000
 80052b8:	000ccccb 	.word	0x000ccccb
 80052bc:	80000000 	.word	0x80000000

080052c0 <_ZN11ArduinoJson8JsonPairC1Ev>:
struct JsonPair {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3308      	adds	r3, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fc f893 	bl	80013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <_ZN11ArduinoJson9Internals8ListNodeINS_8JsonPairEEC1Ev>:
  ListNode() throw() : next(NULL) {}
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3308      	adds	r3, #8
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ffe6 	bl	80052c0 <_ZN11ArduinoJson8JsonPairC1Ev>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_>:
  static duplicate_t duplicate(const TString& str, Buffer* buffer) {
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
    if (!str.c_str()) return NULL;  // <- Arduino string can return NULL
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f019 faf1 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_+0x24>
 800531e:	2300      	movs	r3, #0
 8005320:	e019      	b.n	8005356 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_+0x58>
    size_t size = str.length() + 1;
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f019 f9e0 	bl	801e6e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005328:	4603      	mov	r3, r0
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    void* dup = buffer->alloc(size);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68f9      	ldr	r1, [r7, #12]
 8005336:	6838      	ldr	r0, [r7, #0]
 8005338:	4798      	blx	r3
 800533a:	60b8      	str	r0, [r7, #8]
    if (dup != NULL) memcpy(dup, str.c_str(), size);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_+0x56>
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f019 fad4 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005348:	4603      	mov	r3, r0
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4619      	mov	r1, r3
 800534e:	68b8      	ldr	r0, [r7, #8]
 8005350:	f01b fcf8 	bl	8020d44 <memcpy>
    return static_cast<duplicate_t>(dup);
 8005354:	68bb      	ldr	r3, [r7, #8]
  }
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3nanEv>:
  static T nan() {
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
    return forge(0x7fc00000);
 8005364:	4803      	ldr	r0, [pc, #12]	; (8005374 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3nanEv+0x14>)
 8005366:	f000 f861 	bl	800542c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE5forgeEm>
 800536a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	bd80      	pop	{r7, pc}
 8005374:	7fc00000 	.word	0x7fc00000

08005378 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE3infEv>:
  static T inf() {
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
    return forge(0x7f800000);
 800537c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8005380:	f000 f854 	bl	800542c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE5forgeEm>
 8005384:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005388:	eeb0 0a67 	vmov.f32	s0, s15
 800538c:	bd80      	pop	{r7, pc}

0800538e <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_>:
  static T make_float(T m, TExponent e) {
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	ed87 0a01 	vstr	s0, [r7, #4]
 8005398:	6038      	str	r0, [r7, #0]
    if (e > 0) {
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd1d      	ble.n	80053dc <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e016      	b.n	80053d4 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x3a>
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f84a 	bl	800544c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi>
 80053b8:	eeb0 7a40 	vmov.f32	s14, s0
 80053bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80053c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053c4:	edc7 7a01 	vstr	s15, [r7, #4]
        e >>= 1;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	105b      	asrs	r3, r3, #1
 80053cc:	603b      	str	r3, [r7, #0]
      for (uint8_t index = 0; e != 0; index++) {
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	3301      	adds	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x18>
 80053da:	e01f      	b.n	800541c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x8e>
      e = -e;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	425b      	negs	r3, r3
 80053e0:	603b      	str	r3, [r7, #0]
      for (uint8_t index = 0; e != 0; index++) {
 80053e2:	2300      	movs	r3, #0
 80053e4:	73bb      	strb	r3, [r7, #14]
 80053e6:	e016      	b.n	8005416 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x7c>
 80053f2:	7bbb      	ldrb	r3, [r7, #14]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f83d 	bl	8005474 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi>
 80053fa:	eeb0 7a40 	vmov.f32	s14, s0
 80053fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005406:	edc7 7a01 	vstr	s15, [r7, #4]
        e >>= 1;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	105b      	asrs	r3, r3, #1
 800540e:	603b      	str	r3, [r7, #0]
      for (uint8_t index = 0; e != 0; index++) {
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	3301      	adds	r3, #1
 8005414:	73bb      	strb	r3, [r7, #14]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e5      	bne.n	80053e8 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_+0x5a>
    return m;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	ee07 3a90 	vmov	s15, r3
  }
 8005422:	eeb0 0a67 	vmov.f32	s0, s15
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    integerBits = bits;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]
    return floatBits;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	ee07 3a90 	vmov	s15, r3
  }
 800543e:	eeb0 0a67 	vmov.f32	s0, s15
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
    return factors[index];
 8005454:	4a06      	ldr	r2, [pc, #24]	; (8005470 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi+0x24>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	ee07 3a90 	vmov	s15, r3
  }
 8005462:	eeb0 0a67 	vmov.f32	s0, s15
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000004 	.word	0x20000004

08005474 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    return factors[index];
 800547c:	4a06      	ldr	r2, [pc, #24]	; (8005498 <_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi+0x24>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	ee07 3a90 	vmov	s15, r3
  }
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	2000001c 	.word	0x2000001c

0800549c <_GLOBAL__sub_I_htim2>:
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
 80054a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054a4:	2001      	movs	r0, #1
 80054a6:	f7fc ffc7 	bl	8002438 <_Z41__static_initialization_and_destruction_0ii>
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_GLOBAL__sub_D_htim2>:
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054b4:	2000      	movs	r0, #0
 80054b6:	f7fc ffbf 	bl	8002438 <_Z41__static_initialization_and_destruction_0ii>
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZN2ps9VoltRangeC1Ev>:
            VoltRange() : Range<VoltGain,uint16_t>()  {};
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ff9c 	bl	8006404 <_ZN2ps5RangeINS_8VoltGainEtEC1Ev>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZN2ps12VoltRangeDacC1Ev>:
            VoltRangeDac() : VoltRange()  {};
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ffeb 	bl	80054bc <_ZN2ps9VoltRangeC1Ev>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <_ZN2ps12VoltRangeAdcC1Ev>:
    {
        //using VoltRange::VoltRange;
        
        public: 
            VoltRangeAdc() : VoltRange()  {};
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ffde 	bl	80054bc <_ZN2ps9VoltRangeC1Ev>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_ZN2ps9CurrRangeC1Ev>:
    {
        public: 
            CurrRange() : Range<CurrGainPath,uint16_t>()  {};
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 ff82 	bl	800641e <_ZN2ps5RangeINS_12CurrGainPathEtEC1Ev>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	2301      	movs	r3, #1
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <_ZNK10spi_analog7getVal1Ev>:
	GPIO_TypeDef* GPIOx_rd2;
	uint16_t pin_rd2;

public:
	spi_analog();
	uint16_t getVal1() const
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
	{ return value1; }
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <_ZNK10spi_analog7getVal2Ev>:
	uint16_t getVal2() const
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
	{ return value2; }
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	885b      	ldrh	r3, [r3, #2]
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_ZN2ps15AnalogSubsystemC1Ev>:
//static const uint16_t MaxValueAin = 1489;
//static const uint16_t MaxValueDac = 1489;
// ----------------------------------------------------------------------------------------------
const uint16_t AnalogSubsystem::MidValueDac = MaxValueDac/2;

    AnalogSubsystem::AnalogSubsystem() {}
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3304      	adds	r3, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ffad 	bl	80054d6 <_ZN2ps12VoltRangeDacC1Ev>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3328      	adds	r3, #40	; 0x28
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff ffc2 	bl	800550a <_ZN2ps9CurrRangeC1Ev>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	334c      	adds	r3, #76	; 0x4c
 800558a:	4618      	mov	r0, r3
 800558c:	f7fb fe04 	bl	8001198 <_ZN10spi_analogC1Ev>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3374      	adds	r3, #116	; 0x74
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ffab 	bl	80054f0 <_ZN2ps12VoltRangeAdcC1Ev>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <_ZN2ps5RangeINS_8VoltGainEtEC1ERKS2_>:
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f019 f9d1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	619a      	str	r2, [r3, #24]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	61da      	str	r2, [r3, #28]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f883 2020 	strb.w	r2, [r3, #32]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	845a      	strh	r2, [r3, #34]	; 0x22
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZN2ps9VoltRangeC1ERKS0_>:
    class VoltRange : public Range<VoltGain,uint16_t> 
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ffd3 	bl	80055a4 <_ZN2ps5RangeINS_8VoltGainEtEC1ERKS2_>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_ZN2ps12VoltRangeDacC1ERKS0_>:
    class VoltRangeDac : public VoltRange 
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff ffe5 	bl	80055e8 <_ZN2ps9VoltRangeC1ERKS0_>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>:
    class VoltRangeAdc : public VoltRange 
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ffd5 	bl	80055e8 <_ZN2ps9VoltRangeC1ERKS0_>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_ZN2ps5RangeINS_12CurrGainPathEtEC1ERKS2_>:
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f019 f97f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	61da      	str	r2, [r3, #28]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f883 2020 	strb.w	r2, [r3, #32]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	845a      	strh	r2, [r3, #34]	; 0x22
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <_ZN2ps9CurrRangeC1ERKS0_>:
    class CurrRange : public Range<CurrGainPath,uint16_t> 
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ffd3 	bl	8005648 <_ZN2ps5RangeINS_12CurrGainPathEtEC1ERKS2_>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZN2ps15AnalogSubsystem10initializeEv>:

    void AnalogSubsystem::initialize()
    {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b09e      	sub	sp, #120	; 0x78
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
#else
#   error "HARDWARE_VERSION must be specified"
#endif

        // Set to voltage and current range to defaults
        setVoltRange(VoltRangeDac1V);
 80056b4:	f107 030c 	add.w	r3, r7, #12
 80056b8:	491c      	ldr	r1, [pc, #112]	; (800572c <_ZN2ps15AnalogSubsystem10initializeEv+0x80>)
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff ffa4 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8ee 	bl	80058a8 <_ZN2ps15AnalogSubsystem12setVoltRangeENS_12VoltRangeDacE>
 80056cc:	f107 030c 	add.w	r3, r7, #12
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fc fd46 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
#if defined HARDWARE_VERSION_0P1   
        refElectVoltRange_ = VoltRangeAdc10V;
#elif defined HARDWARE_VERSION_0P2
        setRefElectVoltRange(VoltRangeAdc1V);
 80056d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056da:	4915      	ldr	r1, [pc, #84]	; (8005730 <_ZN2ps15AnalogSubsystem10initializeEv+0x84>)
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ffa3 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 80056e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fbbb 	bl	8005e64 <_ZN2ps15AnalogSubsystem20setRefElectVoltRangeENS_12VoltRangeAdcE>
 80056ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fc fd4f 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
#endif

#if defined CURRENT_VARIANT_NANO_AMP
        setCurrRange(CurrRange10uA);
#elif defined CURRENT_VARIANT_MICRO_AMP
        setCurrRange(CurrRange10uA);
 80056f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056fc:	490d      	ldr	r1, [pc, #52]	; (8005734 <_ZN2ps15AnalogSubsystem10initializeEv+0x88>)
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ffc4 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
 8005704:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9da 	bl	8005ac4 <_ZN2ps15AnalogSubsystem12setCurrRangeENS_9CurrRangeE>
 8005710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc fd31 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
        analogReadAveraging(DefaultAnalogReadAveraging);
#endif
        //analogReference(DefaultAnalogReference);

        // Set output voltage to zero
        setValueDac(MidValueDac); 
 800571a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fdee 	bl	8006300 <_ZN2ps15AnalogSubsystem11setValueDacEt>
    }
 8005724:	bf00      	nop
 8005726:	3778      	adds	r7, #120	; 0x78
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20008b4c 	.word	0x20008b4c
 8005730:	20008d00 	.word	0x20008d00
 8005734:	20008ef0 	.word	0x20008ef0

08005738 <_ZN2ps15AnalogSubsystem7setVoltEf>:


    void AnalogSubsystem::setVolt(float value) 
    {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	ed87 0a00 	vstr	s0, [r7]
        // Set working to reference electrode (output) voltage
        setValueDac(voltRange_.valueToInt(SignDac*value));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <_ZN2ps15AnalogSubsystem7setVoltEf+0x3c>)
 800574a:	ed92 7a00 	vldr	s14, [r2]
 800574e:	edd7 7a00 	vldr	s15, [r7]
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	eeb0 0a67 	vmov.f32	s0, s15
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fe6c 	bl	8006438 <_ZNK2ps5RangeINS_8VoltGainEtE10valueToIntEf>
 8005760:	4603      	mov	r3, r0
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fdcb 	bl	8006300 <_ZN2ps15AnalogSubsystem11setValueDacEt>
    }
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	08022310 	.word	0x08022310

08005778 <_ZNK2ps15AnalogSubsystem7getVoltEv>:


    float AnalogSubsystem::getVolt() const     
    {
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
        // Get working to reference electrode (output) voltage setting
        return SignDac*voltRange_.intToValue(valueDac_);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f000 fe8a 	bl	80064a4 <_ZNK2ps5RangeINS_8VoltGainEtE10intToValueEt>
 8005790:	eeb0 7a40 	vmov.f32	s14, s0
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <_ZNK2ps15AnalogSubsystem7getVoltEv+0x30>)
 8005796:	edd3 7a00 	vldr	s15, [r3]
 800579a:	ee67 7a27 	vmul.f32	s15, s14, s15
    }
 800579e:	eeb0 0a67 	vmov.f32	s0, s15
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08022310 	.word	0x08022310

080057ac <_ZNK2ps15AnalogSubsystem7getCurrEv>:


    float AnalogSubsystem::getCurr() const           
    {
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
        // Get current measurement from working electrode
        return SignCurr*currRange_.intToValue(getTransAmpAin());
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fdba 	bl	8006334 <_ZNK2ps15AnalogSubsystem14getTransAmpAinEv>
 80057c0:	4603      	mov	r3, r0
 80057c2:	4619      	mov	r1, r3
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fe96 	bl	80064f6 <_ZNK2ps5RangeINS_12CurrGainPathEtE10intToValueEt>
 80057ca:	eeb0 7a40 	vmov.f32	s14, s0
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <_ZNK2ps15AnalogSubsystem7getCurrEv+0x38>)
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
    }
 80057d8:	eeb0 0a67 	vmov.f32	s0, s15
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	08022318 	.word	0x08022318

080057e8 <_ZNK2ps15AnalogSubsystem15getRefElectVoltEv>:


    float AnalogSubsystem::getRefElectVolt() const   
    {
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
        // Get measurement of reference electrode voltage 
        return SignAdc*refElectVoltRange_.intToValue(getRefElectAin());
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fdaa 	bl	8006350 <_ZNK2ps15AnalogSubsystem14getRefElectAinEv>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4619      	mov	r1, r3
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fe4f 	bl	80064a4 <_ZNK2ps5RangeINS_8VoltGainEtE10intToValueEt>
 8005806:	eeb0 7a40 	vmov.f32	s14, s0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <_ZNK2ps15AnalogSubsystem15getRefElectVoltEv+0x38>)
 800580c:	edd3 7a00 	vldr	s15, [r3]
 8005810:	ee67 7a27 	vmul.f32	s15, s14, s15
    }
 8005814:	eeb0 0a67 	vmov.f32	s0, s15
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	bf00      	nop
 8005820:	08022314 	.word	0x08022314

08005824 <_ZN2ps5RangeINS_8VoltGainEtEaSERKS2_>:
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f018 ff24 	bl	801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	619a      	str	r2, [r3, #24]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	61da      	str	r2, [r3, #28]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f883 2020 	strb.w	r2, [r3, #32]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	845a      	strh	r2, [r3, #34]	; 0x22
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZN2ps9VoltRangeaSERKS0_>:
    class VoltRange : public Range<VoltGain,uint16_t> 
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff ffd3 	bl	8005824 <_ZN2ps5RangeINS_8VoltGainEtEaSERKS2_>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <_ZN2ps12VoltRangeDacaSERKS0_>:
    class VoltRangeDac : public VoltRange 
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ffe5 	bl	8005868 <_ZN2ps9VoltRangeaSERKS0_>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <_ZN2ps15AnalogSubsystem12setVoltRangeENS_12VoltRangeDacE>:


    void AnalogSubsystem::setVoltRange(VoltRangeDac range)
    {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
        // Set the output voltage range - for working to reference electrode voltage
        // Note, this command will change the VoltGain setting. 
        voltRange_ = range;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ffe5 	bl	8005888 <_ZN2ps12VoltRangeDacaSERKS0_>
        setVoltGain(voltRange_.gain());
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fe40 	bl	8006548 <_ZNK2ps5RangeINS_8VoltGainEtE4gainEv>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fc79 	bl	80061c4 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE>
    }
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <_ZN2ps15AnalogSubsystem13autoVoltRangeEff>:

    
    bool AnalogSubsystem::autoVoltRange(float minVolt, float maxVolt)
    {
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b0a9      	sub	sp, #164	; 0xa4
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80058e8:	edc7 0a01 	vstr	s1, [r7, #4]
        bool success = false;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        VoltRangeDac bestRange;
 80058f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fded 	bl	80054d6 <_ZN2ps12VoltRangeDacC1Ev>
        float bestDelta;

        for (size_t i=0; i<VoltRangeDacArray.size(); i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005902:	e07a      	b.n	80059fa <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x11e>
        {
            VoltRangeDac range = VoltRangeDacArray[i];
 8005904:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005908:	4854      	ldr	r0, [pc, #336]	; (8005a5c <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x180>)
 800590a:	f000 fe37 	bl	800657c <_ZN5ArrayIN2ps12VoltRangeDacELj4EEixEj>
 800590e:	4602      	mov	r2, r0
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fe76 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
            float minRange = range.minValue();
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fe3d 	bl	80065a0 <_ZNK2ps5RangeINS_8VoltGainEtE8minValueEv>
 8005926:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
            float maxRange = range.maxValue();
 800592a:	f107 0314 	add.w	r3, r7, #20
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fe45 	bl	80065be <_ZNK2ps5RangeINS_8VoltGainEtE8maxValueEv>
 8005934:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            if ((minVolt >= minRange) && (maxVolt <= maxRange))
 8005938:	ed97 7a02 	vldr	s14, [r7, #8]
 800593c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005948:	db4d      	blt.n	80059e6 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x10a>
 800594a:	ed97 7a01 	vldr	s14, [r7, #4]
 800594e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595a:	d844      	bhi.n	80059e6 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x10a>
            {
                float delta = max(minVolt - minRange, maxRange - maxVolt);
 800595c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005960:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005968:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800596c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8005970:	edd7 7a01 	vldr	s15, [r7, #4]
 8005974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005978:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800597c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005980:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7fd fc00 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800598c:	4603      	mov	r3, r0
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                if (success)
 8005994:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005998:	2b00      	cmp	r3, #0
 800599a:	d015      	beq.n	80059c8 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0xec>
                {
                    if (delta < bestDelta)
 800599c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80059a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80059a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	d51b      	bpl.n	80059e6 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x10a>
                    {
                        bestRange = range;
 80059ae:	f107 0214 	add.w	r2, r7, #20
 80059b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff ff65 	bl	8005888 <_ZN2ps12VoltRangeDacaSERKS0_>
                        bestDelta = delta;
 80059be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059c6:	e00e      	b.n	80059e6 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x10a>
                    }
                }
                else
                {
                    bestRange = range;
 80059c8:	f107 0214 	add.w	r2, r7, #20
 80059cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff ff58 	bl	8005888 <_ZN2ps12VoltRangeDacaSERKS0_>
                    bestDelta = delta;
 80059d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                    success = true;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                }
            }
        }
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc fbb9 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
        for (size_t i=0; i<VoltRangeDacArray.size(); i++)
 80059f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059f4:	3301      	adds	r3, #1
 80059f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059fa:	4818      	ldr	r0, [pc, #96]	; (8005a5c <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x180>)
 80059fc:	f000 fdb1 	bl	8006562 <_ZNK5ArrayIN2ps12VoltRangeDacELj4EE4sizeEv>
 8005a00:	4602      	mov	r2, r0
 8005a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bf34      	ite	cc
 8005a0a:	2301      	movcc	r3, #1
 8005a0c:	2300      	movcs	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f af77 	bne.w	8005904 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x28>
        if (success)
 8005a16:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d012      	beq.n	8005a44 <_ZN2ps15AnalogSubsystem13autoVoltRangeEff+0x168>
        {
            setVoltRange(bestRange);
 8005a1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005a22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fded 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 8005a2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a32:	4619      	mov	r1, r3
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff ff37 	bl	80058a8 <_ZN2ps15AnalogSubsystem12setVoltRangeENS_12VoltRangeDacE>
 8005a3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc fb8f 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
        }
        return success;
 8005a44:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
    }
 8005a48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fc fb88 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
        return success;
 8005a52:	4623      	mov	r3, r4
    }
 8005a54:	4618      	mov	r0, r3
 8005a56:	37a4      	adds	r7, #164	; 0xa4
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}
 8005a5c:	20008c6c 	.word	0x20008c6c

08005a60 <_ZN2ps5RangeINS_12CurrGainPathEtEaSERKS2_>:
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f018 fe06 	bl	801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	619a      	str	r2, [r3, #24]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	61da      	str	r2, [r3, #28]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f883 2020 	strb.w	r2, [r3, #32]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	845a      	strh	r2, [r3, #34]	; 0x22
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_ZN2ps9CurrRangeaSERKS0_>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ffd3 	bl	8005a60 <_ZN2ps5RangeINS_12CurrGainPathEtEaSERKS2_>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_ZN2ps15AnalogSubsystem12setCurrRangeENS_9CurrRangeE>:
        return voltRange_;
    }


    void AnalogSubsystem::setCurrRange(CurrRange range)
    {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
        // Set current transimpedance amplifiers current range
        currRange_ = range;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3328      	adds	r3, #40	; 0x28
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ffe5 	bl	8005aa4 <_ZN2ps9CurrRangeaSERKS0_>
        setCurrGainPath(currRange_.gain());
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3328      	adds	r3, #40	; 0x28
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd7c 	bl	80065dc <_ZNK2ps5RangeINS_12CurrGainPathEtE4gainEv>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fbbd 	bl	8006268 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE>
    }
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
        return currRange_;
    }


    ReturnStatus AnalogSubsystem::setVoltRangeByName(string voltRangeName)
    {
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b0b1      	sub	sp, #196	; 0xc4
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
        ReturnStatus status;
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7fb fc5b 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        bool found = false;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        for (size_t i=0; i<VoltRangeDacArray.size(); i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b16:	e03e      	b.n	8005b96 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
        {
            if (voltRangeName.compare(VoltRangeDacArray[i].name()))
 8005b18:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005b1c:	4854      	ldr	r0, [pc, #336]	; (8005c70 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005b1e:	f000 fd2d 	bl	800657c <_ZN5ArrayIN2ps12VoltRangeDacELj4EEixEj>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	f107 0314 	add.w	r3, r7, #20
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fd62 	bl	80065f6 <_ZNK2ps5RangeINS_8VoltGainEtE4nameB5cxx11Ev>
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f018 fedc 	bl	801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2dc      	uxtb	r4, r3
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f018 fd91 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b54:	2c00      	cmp	r4, #0
 8005b56:	d019      	beq.n	8005b8c <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
            {
                found = true;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                setVoltRange(VoltRangeDacArray[i]);
 8005b5e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005b62:	4843      	ldr	r0, [pc, #268]	; (8005c70 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005b64:	f000 fd0a 	bl	800657c <_ZN5ArrayIN2ps12VoltRangeDacELj4EEixEj>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fd49 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 8005b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f7ff fe93 	bl	80058a8 <_ZN2ps15AnalogSubsystem12setVoltRangeENS_12VoltRangeDacE>
 8005b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fc faeb 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
        for (size_t i=0; i<VoltRangeDacArray.size(); i++)
 8005b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b90:	3301      	adds	r3, #1
 8005b92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b96:	4836      	ldr	r0, [pc, #216]	; (8005c70 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005b98:	f000 fce3 	bl	8006562 <_ZNK5ArrayIN2ps12VoltRangeDacELj4EE4sizeEv>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bf34      	ite	cc
 8005ba6:	2301      	movcc	r3, #1
 8005ba8:	2300      	movcs	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1b3      	bne.n	8005b18 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
            }
        }
        if (!found)
 8005bb0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d053      	beq.n	8005c66 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
        {
            status.success = false;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
            status.message = string("voltRange, ") + voltRangeName + string(", not found");
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1d1c      	adds	r4, r3, #4
 8005bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f018 fc52 	bl	801e476 <_ZNSaIcEC1Ev>
 8005bd2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005bd6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bda:	4926      	ldr	r1, [pc, #152]	; (8005c74 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>)
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f018 fef1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005be2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005be6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fd10 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8005bf2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f018 fc3d 	bl	801e476 <_ZNSaIcEC1Ev>
 8005bfc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c04:	491c      	ldr	r1, [pc, #112]	; (8005c78 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f018 fedc 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c10:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005c14:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fd11 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8005c1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c22:	4619      	mov	r1, r3
 8005c24:	4620      	mov	r0, r4
 8005c26:	f018 fd32 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005c2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f018 fd21 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f018 fd1c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c3e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c42:	4618      	mov	r0, r3
 8005c44:	f018 fc18 	bl	801e478 <_ZNSaIcED1Ev>
 8005c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f018 fd12 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005c56:	4618      	mov	r0, r3
 8005c58:	f018 fd0d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005c60:	4618      	mov	r0, r3
 8005c62:	f018 fc09 	bl	801e478 <_ZNSaIcED1Ev>
        }
        return status;
 8005c66:	bf00      	nop
    }
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	37c4      	adds	r7, #196	; 0xc4
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd90      	pop	{r4, r7, pc}
 8005c70:	20008c6c 	.word	0x20008c6c
 8005c74:	08020f24 	.word	0x08020f24
 8005c78:	08020f30 	.word	0x08020f30

08005c7c <_ZNK2ps15AnalogSubsystem16getVoltRangeNameB5cxx11Ev>:


    string AnalogSubsystem::getVoltRangeName() const
    { 
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
        // Returns a string representation of the voltage range setting
        return voltRange_.name();
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fcb1 	bl	80065f6 <_ZNK2ps5RangeINS_8VoltGainEtE4nameB5cxx11Ev>
    }
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <_ZNK2ps15AnalogSubsystem16getCurrRangeNameB5cxx11Ev>:


    string AnalogSubsystem::getCurrRangeName() const
    {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
        // Returns a string representation of the current range
        return currRange_.name();
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fd40 	bl	8006736 <_ZNK2ps5RangeINS_12CurrGainPathEtE4nameB5cxx11Ev>
    }
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

    ReturnStatus AnalogSubsystem::setCurrRangeByName(string currRangeName)
    {
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b0b1      	sub	sp, #196	; 0xc4
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
        ReturnStatus status;
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7fb fb77 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        bool found = false;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

        for (size_t i=0; i<CurrRangeArray.size(); i++)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cde:	e03e      	b.n	8005d5e <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
        {
            if (currRangeName.compare(CurrRangeArray[i].name()))
 8005ce0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005ce4:	4854      	ldr	r0, [pc, #336]	; (8005e38 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005ce6:	f000 fd41 	bl	800676c <_ZN5ArrayIN2ps9CurrRangeELj4EEixEj>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	f107 0314 	add.w	r3, r7, #20
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fd1e 	bl	8006736 <_ZNK2ps5RangeINS_12CurrGainPathEtE4nameB5cxx11Ev>
 8005cfa:	f107 0314 	add.w	r3, r7, #20
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f018 fdf8 	bl	801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf14      	ite	ne
 8005d0c:	2301      	movne	r3, #1
 8005d0e:	2300      	moveq	r3, #0
 8005d10:	b2dc      	uxtb	r4, r3
 8005d12:	f107 0314 	add.w	r3, r7, #20
 8005d16:	4618      	mov	r0, r3
 8005d18:	f018 fcad 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	d019      	beq.n	8005d54 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
            {
                found = true;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                setCurrRange(CurrRangeArray[i]);
 8005d26:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005d2a:	4843      	ldr	r0, [pc, #268]	; (8005e38 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005d2c:	f000 fd1e 	bl	800676c <_ZN5ArrayIN2ps9CurrRangeELj4EEixEj>
 8005d30:	4602      	mov	r2, r0
 8005d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fca7 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
 8005d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d42:	4619      	mov	r1, r3
 8005d44:	68b8      	ldr	r0, [r7, #8]
 8005d46:	f7ff febd 	bl	8005ac4 <_ZN2ps15AnalogSubsystem12setCurrRangeENS_9CurrRangeE>
 8005d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fc fa14 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
        for (size_t i=0; i<CurrRangeArray.size(); i++)
 8005d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d5e:	4836      	ldr	r0, [pc, #216]	; (8005e38 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005d60:	f000 fcf7 	bl	8006752 <_ZNK5ArrayIN2ps9CurrRangeELj4EE4sizeEv>
 8005d64:	4602      	mov	r2, r0
 8005d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bf34      	ite	cc
 8005d6e:	2301      	movcc	r3, #1
 8005d70:	2300      	movcs	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1b3      	bne.n	8005ce0 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
            }
        }
        
        if (!found)
 8005d78:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8005d7c:	f083 0301 	eor.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d053      	beq.n	8005e2e <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
        {
            status.success = false;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
            status.message = string("currRange, ") + currRangeName + string(", not found");
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1d1c      	adds	r4, r3, #4
 8005d90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d94:	4618      	mov	r0, r3
 8005d96:	f018 fb6e 	bl	801e476 <_ZNSaIcEC1Ev>
 8005d9a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005d9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005da2:	4926      	ldr	r1, [pc, #152]	; (8005e3c <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>)
 8005da4:	4618      	mov	r0, r3
 8005da6:	f018 fe0d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005daa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005dae:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fc2c 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8005dba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f018 fb59 	bl	801e476 <_ZNSaIcEC1Ev>
 8005dc4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005dc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005dcc:	491c      	ldr	r1, [pc, #112]	; (8005e40 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f018 fdf8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005dd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dd8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005ddc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fc2d 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8005de6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dea:	4619      	mov	r1, r3
 8005dec:	4620      	mov	r0, r4
 8005dee:	f018 fc4e 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005df2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005df6:	4618      	mov	r0, r3
 8005df8:	f018 fc3d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005dfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e00:	4618      	mov	r0, r3
 8005e02:	f018 fc38 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f018 fb34 	bl	801e478 <_ZNSaIcED1Ev>
 8005e10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e14:	4618      	mov	r0, r3
 8005e16:	f018 fc2e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f018 fc29 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f018 fb25 	bl	801e478 <_ZNSaIcED1Ev>
        }
        return status;
 8005e2e:	bf00      	nop
    }
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	37c4      	adds	r7, #196	; 0xc4
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}
 8005e38:	20009004 	.word	0x20009004
 8005e3c:	08020f3c 	.word	0x08020f3c
 8005e40:	08020f30 	.word	0x08020f30

08005e44 <_ZN2ps12VoltRangeAdcaSERKS0_>:
    class VoltRangeAdc : public VoltRange 
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fd07 	bl	8005868 <_ZN2ps9VoltRangeaSERKS0_>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <_ZN2ps15AnalogSubsystem20setRefElectVoltRangeENS_12VoltRangeAdcE>:

#if defined HARDWARE_VERSION_0P2 
    void AnalogSubsystem::setRefElectVoltRange(VoltRangeAdc range)
    {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
        // Set the voltage range for working to reference electrode analog input 
        refElectVoltRange_ = range;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3374      	adds	r3, #116	; 0x74
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ffe5 	bl	8005e44 <_ZN2ps12VoltRangeAdcaSERKS0_>
        setRefElectVoltGain(refElectVoltRange_.gain());
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3374      	adds	r3, #116	; 0x74
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fb62 	bl	8006548 <_ZNK2ps5RangeINS_8VoltGainEtE4gainEv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa6f 	bl	800636c <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE>
    }
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
    }
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus AnalogSubsystem::setRefElectVoltRangeByName(string voltRangeName)
    {
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b0b1      	sub	sp, #196	; 0xc4
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
        ReturnStatus status;
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7fb fa8b 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        bool found = false;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        for (size_t i=0; i<VoltRangeAdcArray.size(); i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb6:	e03e      	b.n	8005f36 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
        {
            if (voltRangeName.compare(VoltRangeAdcArray[i].name()))
 8005eb8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005ebc:	4854      	ldr	r0, [pc, #336]	; (8006010 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005ebe:	f000 fc74 	bl	80067aa <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEixEj>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f107 0314 	add.w	r3, r7, #20
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fb92 	bl	80065f6 <_ZNK2ps5RangeINS_8VoltGainEtE4nameB5cxx11Ev>
 8005ed2:	f107 0314 	add.w	r3, r7, #20
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f018 fd0c 	bl	801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2dc      	uxtb	r4, r3
 8005eea:	f107 0314 	add.w	r3, r7, #20
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f018 fbc1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005ef4:	2c00      	cmp	r4, #0
 8005ef6:	d019      	beq.n	8005f2c <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
            {
                found = true;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
                setRefElectVoltRange(VoltRangeAdcArray[i]);
 8005efe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005f02:	4843      	ldr	r0, [pc, #268]	; (8006010 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005f04:	f000 fc51 	bl	80067aa <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEixEj>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fb89 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 8005f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68b8      	ldr	r0, [r7, #8]
 8005f1e:	f7ff ffa1 	bl	8005e64 <_ZN2ps15AnalogSubsystem20setRefElectVoltRangeENS_12VoltRangeAdcE>
 8005f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc f935 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
        for (size_t i=0; i<VoltRangeAdcArray.size(); i++)
 8005f2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f30:	3301      	adds	r3, #1
 8005f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f36:	4836      	ldr	r0, [pc, #216]	; (8006010 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>)
 8005f38:	f000 fc2a 	bl	8006790 <_ZNK5ArrayIN2ps12VoltRangeAdcELj4EE4sizeEv>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f42:	4293      	cmp	r3, r2
 8005f44:	bf34      	ite	cc
 8005f46:	2301      	movcc	r3, #1
 8005f48:	2300      	movcs	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1b3      	bne.n	8005eb8 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20>
            }
        }
        if (!found)
 8005f50:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8005f54:	f083 0301 	eor.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d053      	beq.n	8006006 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
        {
            status.success = false;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
            status.message = string("voltRange, ") + voltRangeName + string(", not found");
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1d1c      	adds	r4, r3, #4
 8005f68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f018 fa82 	bl	801e476 <_ZNSaIcEC1Ev>
 8005f72:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005f76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f7a:	4926      	ldr	r1, [pc, #152]	; (8006014 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f018 fd21 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f86:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fb40 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8005f92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f018 fa6d 	bl	801e476 <_ZNSaIcEC1Ev>
 8005f9c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005fa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fa4:	491c      	ldr	r1, [pc, #112]	; (8006018 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f018 fd0c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005fac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005fb0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005fb4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fb41 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8005fbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f018 fb62 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f018 fb51 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f018 fb4c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005fde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f018 fa48 	bl	801e478 <_ZNSaIcED1Ev>
 8005fe8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005fec:	4618      	mov	r0, r3
 8005fee:	f018 fb42 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005ff2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f018 fb3d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005ffc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006000:	4618      	mov	r0, r3
 8006002:	f018 fa39 	bl	801e478 <_ZNSaIcED1Ev>
        }
        return status;
 8006006:	bf00      	nop
    }
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	37c4      	adds	r7, #196	; 0xc4
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}
 8006010:	20008e20 	.word	0x20008e20
 8006014:	08020f24 	.word	0x08020f24
 8006018:	08020f30 	.word	0x08020f30

0800601c <_ZNK2ps15AnalogSubsystem24getRefElectVoltRangeNameB5cxx11Ev>:
#endif

#if defined HARDWARE_VERSION_0P2 
    string AnalogSubsystem::getRefElectVoltRangeName() const
    {
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
        // Returns a string representation of the reference electrode voltage range setting
        return refElectVoltRange_.name();
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fae0 	bl	80065f6 <_ZNK2ps5RangeINS_8VoltGainEtE4nameB5cxx11Ev>
    }
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff>:
#endif

#if defined HARDWARE_VERSION_0P2
    bool AnalogSubsystem::autoRefElectVoltRange(float minVolt, float maxVolt)
    {
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b0a9      	sub	sp, #164	; 0xa4
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	ed87 0a02 	vstr	s0, [r7, #8]
 800604c:	edc7 0a01 	vstr	s1, [r7, #4]
        bool success = false;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        VoltRangeAdc bestRange;
 8006056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fa48 	bl	80054f0 <_ZN2ps12VoltRangeAdcC1Ev>
        float bestDelta;

        for (size_t i=0; i<VoltRangeAdcArray.size(); i++)
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006066:	e07a      	b.n	800615e <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x11e>
        {
            VoltRangeAdc range = VoltRangeAdcArray[i];
 8006068:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800606c:	4854      	ldr	r0, [pc, #336]	; (80061c0 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x180>)
 800606e:	f000 fb9c 	bl	80067aa <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEixEj>
 8006072:	4602      	mov	r2, r0
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fad4 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
            float minRange = range.minValue();
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fa8b 	bl	80065a0 <_ZNK2ps5RangeINS_8VoltGainEtE8minValueEv>
 800608a:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
            float maxRange = range.maxValue();
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fa93 	bl	80065be <_ZNK2ps5RangeINS_8VoltGainEtE8maxValueEv>
 8006098:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            if ((minVolt >= minRange) && (maxVolt <= maxRange))
 800609c:	ed97 7a02 	vldr	s14, [r7, #8]
 80060a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80060a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ac:	db4d      	blt.n	800614a <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x10a>
 80060ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80060b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80060b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	d844      	bhi.n	800614a <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x10a>
            {
                float delta = max(minVolt - minRange, maxRange - maxVolt);
 80060c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80060c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80060c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80060d0:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80060d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060dc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80060e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fd f84e 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 80060f0:	4603      	mov	r3, r0
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                if (success)
 80060f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0xec>
                {
                    if (delta < bestDelta)
 8006100:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8006104:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	d51b      	bpl.n	800614a <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x10a>
                    {
                        bestRange = range;
 8006112:	f107 0214 	add.w	r2, r7, #20
 8006116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fe91 	bl	8005e44 <_ZN2ps12VoltRangeAdcaSERKS0_>
                        bestDelta = delta;
 8006122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006126:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800612a:	e00e      	b.n	800614a <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x10a>
                    }
                }
                else
                {
                    bestRange = range;
 800612c:	f107 0214 	add.w	r2, r7, #20
 8006130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fe84 	bl	8005e44 <_ZN2ps12VoltRangeAdcaSERKS0_>
                    bestDelta = delta;
 800613c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                    success = true;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                }
            }
        }
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc f821 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
        for (size_t i=0; i<VoltRangeAdcArray.size(); i++)
 8006154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800615e:	4818      	ldr	r0, [pc, #96]	; (80061c0 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x180>)
 8006160:	f000 fb16 	bl	8006790 <_ZNK5ArrayIN2ps12VoltRangeAdcELj4EE4sizeEv>
 8006164:	4602      	mov	r2, r0
 8006166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800616a:	4293      	cmp	r3, r2
 800616c:	bf34      	ite	cc
 800616e:	2301      	movcc	r3, #1
 8006170:	2300      	movcs	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af77 	bne.w	8006068 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x28>
        if (success)
 800617a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800617e:	2b00      	cmp	r3, #0
 8006180:	d012      	beq.n	80061a8 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff+0x168>
        {
            setRefElectVoltRange(bestRange);
 8006182:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006186:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fa4b 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 8006192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006196:	4619      	mov	r1, r3
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fe63 	bl	8005e64 <_ZN2ps15AnalogSubsystem20setRefElectVoltRangeENS_12VoltRangeAdcE>
 800619e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fb fff7 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
        }
        return success;
 80061a8:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
    }
 80061ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fb fff0 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
        return success;
 80061b6:	4623      	mov	r3, r4
    }
 80061b8:	4618      	mov	r0, r3
 80061ba:	37a4      	adds	r7, #164	; 0xa4
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	20008e20 	.word	0x20008e20

080061c4 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE>:

    // AnalogSubsystem protected methods
    // --------------------------------------------------------------------------------------------

    void AnalogSubsystem::setVoltGain(VoltGain value)
    {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
        // Sets the amplifier gain for the working to reference electrode voltage output

        switch (value) 
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d83e      	bhi.n	8006254 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x90>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x18>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006207 	.word	0x08006207
 80061e4:	08006221 	.word	0x08006221
 80061e8:	0800623b 	.word	0x0800623b
#endif // #if defined VOLTAGE_VARIANT 

#elif defined HARDWARE_VERSION_0P2
#if defined VOLTAGE_VARIANT_10V
            case VoltGain1X:
            	HAL_GPIO_WritePin(DAC_GAIN_A0_GPIO_Port, DAC_GAIN_A0_Pin, GPIO_PIN_RESET);
 80061ec:	2200      	movs	r2, #0
 80061ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061f2:	481b      	ldr	r0, [pc, #108]	; (8006260 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x9c>)
 80061f4:	f011 f85e 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(DAC_GAIN_A1_GPIO_Port, DAC_GAIN_A1_Pin, GPIO_PIN_RESET);
 80061f8:	2200      	movs	r2, #0
 80061fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061fe:	4819      	ldr	r0, [pc, #100]	; (8006264 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0xa0>)
 8006200:	f011 f858 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 8006204:	e027      	b.n	8006256 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x92>

            case VoltGain2X:
            	HAL_GPIO_WritePin(DAC_GAIN_A0_GPIO_Port, DAC_GAIN_A0_Pin, GPIO_PIN_SET);
 8006206:	2201      	movs	r2, #1
 8006208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800620c:	4814      	ldr	r0, [pc, #80]	; (8006260 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x9c>)
 800620e:	f011 f851 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(DAC_GAIN_A1_GPIO_Port, DAC_GAIN_A1_Pin, GPIO_PIN_RESET);
 8006212:	2200      	movs	r2, #0
 8006214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006218:	4812      	ldr	r0, [pc, #72]	; (8006264 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0xa0>)
 800621a:	f011 f84b 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 800621e:	e01a      	b.n	8006256 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x92>

            case VoltGain5X:
            	HAL_GPIO_WritePin(DAC_GAIN_A0_GPIO_Port, DAC_GAIN_A0_Pin, GPIO_PIN_RESET);
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006226:	480e      	ldr	r0, [pc, #56]	; (8006260 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x9c>)
 8006228:	f011 f844 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(DAC_GAIN_A1_GPIO_Port, DAC_GAIN_A1_Pin, GPIO_PIN_SET);
 800622c:	2201      	movs	r2, #1
 800622e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006232:	480c      	ldr	r0, [pc, #48]	; (8006264 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0xa0>)
 8006234:	f011 f83e 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 8006238:	e00d      	b.n	8006256 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x92>

            case VoltGain10X:
            	HAL_GPIO_WritePin(DAC_GAIN_A0_GPIO_Port, DAC_GAIN_A0_Pin, GPIO_PIN_SET);
 800623a:	2201      	movs	r2, #1
 800623c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006240:	4807      	ldr	r0, [pc, #28]	; (8006260 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x9c>)
 8006242:	f011 f837 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(DAC_GAIN_A1_GPIO_Port, DAC_GAIN_A1_Pin, GPIO_PIN_SET);
 8006246:	2201      	movs	r2, #1
 8006248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800624c:	4805      	ldr	r0, [pc, #20]	; (8006264 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0xa0>)
 800624e:	f011 f831 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 8006252:	e000      	b.n	8006256 <_ZN2ps15AnalogSubsystem11setVoltGainENS_8VoltGainE+0x92>

#else
#   error "HARDWARE_VERSION must be specified"
#endif // #if defined HARDWARE_VERSION
            default:
                break;
 8006254:	bf00      	nop

        } // switch (value)

    }  // void AnalogSubsystem::setVoltGain
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40020800 	.word	0x40020800
 8006264:	40020000 	.word	0x40020000

08006268 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE>:
        return voltGain;
    }


    void AnalogSubsystem::setCurrGainPath(CurrGainPath value)
    {
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
        // Sets the gain path (In1,In2,In3,In4) used for transimpedence amplifier
       
        switch (value)
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d83a      	bhi.n	80062f0 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x88>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x18>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006291 	.word	0x08006291
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062d9 	.word	0x080062d9
                digitalWrite(TIA_SW2_IN3,HIGH);
                digitalWrite(TIA_SW2_IN4,LOW);
                break;
#elif defined HARDWARE_VERSION_0P2
            case CurrGainPathIn1:
            	HAL_GPIO_WritePin(TIA_GAIN_A0_GPIO_Port, TIA_GAIN_A0_Pin, GPIO_PIN_RESET);
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006296:	4819      	ldr	r0, [pc, #100]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 8006298:	f011 f80c 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TIA_GAIN_A1_GPIO_Port, TIA_GAIN_A1_Pin, GPIO_PIN_RESET);
 800629c:	2200      	movs	r2, #0
 800629e:	2140      	movs	r1, #64	; 0x40
 80062a0:	4816      	ldr	r0, [pc, #88]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062a2:	f011 f807 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80062a6:	e024      	b.n	80062f2 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x8a>

            case CurrGainPathIn2:
            	HAL_GPIO_WritePin(TIA_GAIN_A0_GPIO_Port, TIA_GAIN_A0_Pin, GPIO_PIN_SET);
 80062a8:	2201      	movs	r2, #1
 80062aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ae:	4813      	ldr	r0, [pc, #76]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062b0:	f011 f800 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TIA_GAIN_A1_GPIO_Port, TIA_GAIN_A1_Pin, GPIO_PIN_RESET);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2140      	movs	r1, #64	; 0x40
 80062b8:	4810      	ldr	r0, [pc, #64]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062ba:	f010 fffb 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80062be:	e018      	b.n	80062f2 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x8a>

            case CurrGainPathIn3:
            	HAL_GPIO_WritePin(TIA_GAIN_A0_GPIO_Port, TIA_GAIN_A0_Pin, GPIO_PIN_RESET);
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062c6:	480d      	ldr	r0, [pc, #52]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062c8:	f010 fff4 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TIA_GAIN_A1_GPIO_Port, TIA_GAIN_A1_Pin, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2140      	movs	r1, #64	; 0x40
 80062d0:	480a      	ldr	r0, [pc, #40]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062d2:	f010 ffef 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80062d6:	e00c      	b.n	80062f2 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x8a>

            case CurrGainPathIn4:
            	HAL_GPIO_WritePin(TIA_GAIN_A0_GPIO_Port, TIA_GAIN_A0_Pin, GPIO_PIN_SET);
 80062d8:	2201      	movs	r2, #1
 80062da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062de:	4807      	ldr	r0, [pc, #28]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062e0:	f010 ffe8 	bl	80172b4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(TIA_GAIN_A1_GPIO_Port, TIA_GAIN_A1_Pin, GPIO_PIN_SET);
 80062e4:	2201      	movs	r2, #1
 80062e6:	2140      	movs	r1, #64	; 0x40
 80062e8:	4804      	ldr	r0, [pc, #16]	; (80062fc <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x94>)
 80062ea:	f010 ffe3 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80062ee:	e000      	b.n	80062f2 <_ZN2ps15AnalogSubsystem15setCurrGainPathENS_12CurrGainPathE+0x8a>
#else
#   error "HARDWARE_VERSION must be specified"
#endif 
            default:
                break;
 80062f0:	bf00      	nop

        }
    }
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40020400 	.word	0x40020400

08006300 <_ZN2ps15AnalogSubsystem11setValueDacEt>:
        return currGainPathToString(currGainPath);
    }


    void AnalogSubsystem::setValueDac(uint16_t value)
    {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
        // The value of the output voltage Dac
        valueDac_ = min(value,AnalogSubsystem::MaxValueDac);
 800630c:	1cbb      	adds	r3, r7, #2
 800630e:	4908      	ldr	r1, [pc, #32]	; (8006330 <_ZN2ps15AnalogSubsystem11setValueDacEt+0x30>)
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fa5c 	bl	80067ce <_ZSt3minItERKT_S2_S2_>
 8006316:	4603      	mov	r3, r0
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	801a      	strh	r2, [r3, #0]
        PWM_timer->CCR1 = valueDac_;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006326:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	0802224e 	.word	0x0802224e

08006334 <_ZNK2ps15AnalogSubsystem14getTransAmpAinEv>:
        return valueDac_;
    }


    uint16_t AnalogSubsystem::getTransAmpAin() const  
    {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
        // Read analog input associated with the transimpedance amplifier 
       return analog.getVal1();//analogRead(TIA_OUT_UNI_PIN);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	334c      	adds	r3, #76	; 0x4c
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff f8fa 	bl	800553a <_ZNK10spi_analog7getVal1Ev>
 8006346:	4603      	mov	r3, r0
    }
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <_ZNK2ps15AnalogSubsystem14getRefElectAinEv>:


    uint16_t AnalogSubsystem::getRefElectAin() const
    {
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
        // Read analog input associated with the refernce electrode
        return analog.getVal2();//analogRead(REF_ELECT_UNI_PIN);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	334c      	adds	r3, #76	; 0x4c
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff f8f8 	bl	8005552 <_ZNK10spi_analog7getVal2Ev>
 8006362:	4603      	mov	r3, r0
    }
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE>:

#if defined HARDWARE_VERSION_0P2
    void AnalogSubsystem::setRefElectVoltGain(VoltGain value)
    {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
        // Sets the amplifier gain for the reference electrode voltage 
        // analog input 
        switch (value) 
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d83a      	bhi.n	80063f4 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x88>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x18>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	08006395 	.word	0x08006395
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063c5 	.word	0x080063c5
 8006390:	080063dd 	.word	0x080063dd
        {
            case VoltGain1X:
            	HAL_GPIO_WritePin(REF_GAIN_A0_GPIO_Port, REF_GAIN_A0_Pin, GPIO_PIN_RESET);
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	4819      	ldr	r0, [pc, #100]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 800639a:	f010 ff8b 	bl	80172b4 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(REF_GAIN_A1_GPIO_Port, REF_GAIN_A1_Pin, GPIO_PIN_RESET);
 800639e:	2200      	movs	r2, #0
 80063a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a4:	4816      	ldr	r0, [pc, #88]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063a6:	f010 ff85 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80063aa:	e024      	b.n	80063f6 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x8a>

            case VoltGain2X:
            	HAL_GPIO_WritePin(REF_GAIN_A0_GPIO_Port, REF_GAIN_A0_Pin, GPIO_PIN_SET);
 80063ac:	2201      	movs	r2, #1
 80063ae:	2180      	movs	r1, #128	; 0x80
 80063b0:	4813      	ldr	r0, [pc, #76]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063b2:	f010 ff7f 	bl	80172b4 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(REF_GAIN_A1_GPIO_Port, REF_GAIN_A1_Pin, GPIO_PIN_RESET);
 80063b6:	2200      	movs	r2, #0
 80063b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063bc:	4810      	ldr	r0, [pc, #64]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063be:	f010 ff79 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80063c2:	e018      	b.n	80063f6 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x8a>

            case VoltGain5X:
            	HAL_GPIO_WritePin(REF_GAIN_A0_GPIO_Port, REF_GAIN_A0_Pin, GPIO_PIN_RESET);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	480d      	ldr	r0, [pc, #52]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063ca:	f010 ff73 	bl	80172b4 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(REF_GAIN_A1_GPIO_Port, REF_GAIN_A1_Pin, GPIO_PIN_SET);
 80063ce:	2201      	movs	r2, #1
 80063d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063d4:	480a      	ldr	r0, [pc, #40]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063d6:	f010 ff6d 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80063da:	e00c      	b.n	80063f6 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x8a>

            case VoltGain10X:
            	HAL_GPIO_WritePin(REF_GAIN_A0_GPIO_Port, REF_GAIN_A0_Pin, GPIO_PIN_SET);
 80063dc:	2201      	movs	r2, #1
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	4807      	ldr	r0, [pc, #28]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063e2:	f010 ff67 	bl	80172b4 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(REF_GAIN_A1_GPIO_Port, REF_GAIN_A1_Pin, GPIO_PIN_SET);
 80063e6:	2201      	movs	r2, #1
 80063e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ec:	4804      	ldr	r0, [pc, #16]	; (8006400 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x94>)
 80063ee:	f010 ff61 	bl	80172b4 <HAL_GPIO_WritePin>
                break;
 80063f2:	e000      	b.n	80063f6 <_ZN2ps15AnalogSubsystem19setRefElectVoltGainENS_8VoltGainE+0x8a>

            default:
                break;
 80063f4:	bf00      	nop
        }
    }
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40020400 	.word	0x40020400

08006404 <_ZN2ps5RangeINS_8VoltGainEtEC1Ev>:
    {
        public:

            Range() {};
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f018 f910 	bl	801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <_ZN2ps5RangeINS_12CurrGainPathEtEC1Ev>:
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f018 f903 	bl	801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <_ZNK2ps5RangeINS_8VoltGainEtE10valueToIntEf>:
    {
        return maxInt_;
    }

    template<typename GainType, typename IntType>
    inline IntType Range<GainType,IntType>::valueToInt(float volt) const
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	ed87 0a00 	vstr	s0, [r7]
    {
        IntType value = IntType(float(maxInt_)/(maxValue_ - minValue_)*(maxValue_ - volt));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	ed93 7a07 	vldr	s14, [r3, #28]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	edd3 7a06 	vldr	s15, [r3, #24]
 800645c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	edd3 6a07 	vldr	s13, [r3, #28]
 800646a:	edd7 7a00 	vldr	s15, [r7]
 800646e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647a:	ee17 3a90 	vmov	r3, s15
 800647e:	b29b      	uxth	r3, r3
 8006480:	81fb      	strh	r3, [r7, #14]
        return constrain(value,0,maxInt_);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8006486:	89fb      	ldrh	r3, [r7, #14]
 8006488:	429a      	cmp	r2, r3
 800648a:	d202      	bcs.n	8006492 <_ZNK2ps5RangeINS_8VoltGainEtE10valueToIntEf+0x5a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006490:	e002      	b.n	8006498 <_ZNK2ps5RangeINS_8VoltGainEtE10valueToIntEf+0x60>
 8006492:	f107 030e 	add.w	r3, r7, #14
 8006496:	881b      	ldrh	r3, [r3, #0]
    }
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_ZNK2ps5RangeINS_8VoltGainEtE10intToValueEt>:

    template<typename GainType, typename IntType>
    inline float Range<GainType,IntType>::intToValue(IntType value) const
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	807b      	strh	r3, [r7, #2]
    {
        return maxValue_ - (float(value)/float(maxInt_))*(maxValue_ - minValue_);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064cc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	ed93 6a07 	vldr	s12, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80064dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80064e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
 80064e8:	eeb0 0a67 	vmov.f32	s0, s15
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <_ZNK2ps5RangeINS_12CurrGainPathEtE10intToValueEt>:
    inline float Range<GainType,IntType>::intToValue(IntType value) const
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	807b      	strh	r3, [r7, #2]
        return maxValue_ - (float(value)/float(maxInt_))*(maxValue_ - minValue_);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	ed93 7a07 	vldr	s14, [r3, #28]
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	ed93 6a07 	vldr	s12, [r3, #28]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	edd3 7a06 	vldr	s15, [r3, #24]
 800652e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006536:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
 800653a:	eeb0 0a67 	vmov.f32	s0, s15
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <_ZNK2ps5RangeINS_8VoltGainEtE4gainEv>:
    GainType Range<GainType,IntType>::gain() const
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
        return gain_;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3020 	ldrb.w	r3, [r3, #32]
    }
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <_ZNK5ArrayIN2ps12VoltRangeDacELj4EE4sizeEv>:
    --size_;
  }
}

template <typename T, size_t MAX_SIZE>
size_t Array<T, MAX_SIZE>::size() const
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
{
  return size_;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <_ZN5ArrayIN2ps12VoltRangeDacELj4EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  return values_[index];
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <_ZNK2ps5RangeINS_8VoltGainEtE8minValueEv>:
    float Range<GainType,IntType>::minValue() const
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
        return minValue_;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	ee07 3a90 	vmov	s15, r3
    }
 80065b0:	eeb0 0a67 	vmov.f32	s0, s15
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <_ZNK2ps5RangeINS_8VoltGainEtE8maxValueEv>:
    float Range<GainType,IntType>::maxValue() const
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
        return maxValue_;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	ee07 3a90 	vmov	s15, r3
    }
 80065ce:	eeb0 0a67 	vmov.f32	s0, s15
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <_ZNK2ps5RangeINS_12CurrGainPathEtE4gainEv>:
    GainType Range<GainType,IntType>::gain() const
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
        return gain_;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3020 	ldrb.w	r3, [r3, #32]
    }
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <_ZNK2ps5RangeINS_8VoltGainEtE4nameB5cxx11Ev>:
    string Range<GainType,IntType>::name() const
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
        return name_;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f018 f9a9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f018 f941 	bl	801e8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8006626:	4603      	mov	r3, r0
 8006628:	4618      	mov	r0, r3
 800662a:	f7fb fc0e 	bl	8001e4a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800662e:	4603      	mov	r3, r0
 8006630:	4619      	mov	r1, r3
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f018 f805 	bl	801e642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b08b      	sub	sp, #44	; 0x2c
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
#if _GLIBCXX_USE_CXX11_ABI
      using _Alloc_traits = allocator_traits<_Alloc>;
      bool __use_rhs = false;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8006652:	f107 0314 	add.w	r3, r7, #20
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe ff64 	bl	8005524 <_ZNKSt17integral_constantIbLb1EEcvbEv>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006668:	e024      	b.n	80066b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 800666a:	f107 0318 	add.w	r3, r7, #24
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	4618      	mov	r0, r3
 8006672:	f018 f93f 	bl	801e8f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8006676:	f107 031c 	add.w	r3, r7, #28
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4618      	mov	r0, r3
 800667e:	f018 f939 	bl	801e8f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8006682:	f107 021c 	add.w	r2, r7, #28
 8006686:	f107 0318 	add.w	r3, r7, #24
 800668a:	4611      	mov	r1, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f8b2 	bl	80067f6 <_ZSteqRKSaIcES1_>
 8006692:	4603      	mov	r3, r0
 8006694:	461c      	mov	r4, r3
 8006696:	f107 031c 	add.w	r3, r7, #28
 800669a:	4618      	mov	r0, r3
 800669c:	f017 feec 	bl	801e478 <_ZNSaIcED1Ev>
 80066a0:	f107 0318 	add.w	r3, r7, #24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f017 fee7 	bl	801e478 <_ZNSaIcED1Ev>
 80066aa:	2c00      	cmp	r4, #0
 80066ac:	d002      	beq.n	80066b4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 80066b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d02b      	beq.n	8006714 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
#endif
	{
	  const auto __size = __lhs.size() + __rhs.size();
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f018 f811 	bl	801e6e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80066c2:	4604      	mov	r4, r0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f018 f80d 	bl	801e6e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4423      	add	r3, r4
 80066ce:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 80066d0:	68b8      	ldr	r0, [r7, #8]
 80066d2:	f018 f80b 	bl	801e6ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80066d6:	4602      	mov	r2, r0
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	4293      	cmp	r3, r2
 80066dc:	d908      	bls.n	80066f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f018 f804 	bl	801e6ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d801      	bhi.n	80066f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	2100      	movs	r1, #0
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f018 f8a8 	bl	801e850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8006700:	4603      	mov	r3, r0
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fba1 	bl	8001e4a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8006708:	4603      	mov	r3, r0
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f017 ff98 	bl	801e642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8006712:	e00c      	b.n	800672e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
	}
      return std::move(__lhs.append(__rhs));
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	68b8      	ldr	r0, [r7, #8]
 8006718:	f018 f8c6 	bl	801e8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800671c:	4603      	mov	r3, r0
 800671e:	4618      	mov	r0, r3
 8006720:	f7fb fb93 	bl	8001e4a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8006724:	4603      	mov	r3, r0
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f017 ff8a 	bl	801e642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	372c      	adds	r7, #44	; 0x2c
 8006732:	46bd      	mov	sp, r7
 8006734:	bd90      	pop	{r4, r7, pc}

08006736 <_ZNK2ps5RangeINS_12CurrGainPathEtE4nameB5cxx11Ev>:
    string Range<GainType,IntType>::name() const
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
        return name_;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f018 f909 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <_ZNK5ArrayIN2ps9CurrRangeELj4EE4sizeEv>:
size_t Array<T, MAX_SIZE>::size() const
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  return size_;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <_ZN5ArrayIN2ps9CurrRangeELj4EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  return values_[index];
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4413      	add	r3, r2
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <_ZNK5ArrayIN2ps12VoltRangeAdcELj4EE4sizeEv>:
size_t Array<T, MAX_SIZE>::size() const
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  return size_;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  return values_[index];
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <_ZSt3minItERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d201      	bcs.n	80067e8 <_ZSt3minItERKT_S2_S2_+0x1a>
	return __b;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	e000      	b.n	80067ea <_ZSt3minItERKT_S2_S2_+0x1c>
      return __a;
 80067e8:	687b      	ldr	r3, [r7, #4]
    }
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <_ZSteqRKSaIcES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
      { return true; }
 8006800:	2301      	movs	r3, #1
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <_Z41__static_initialization_and_destruction_0ii>:
        return voltGain;
    }
#endif


} // namespace ps
 8006810:	b5b0      	push	{r4, r5, r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b01      	cmp	r3, #1
 800681e:	f040 80aa 	bne.w	8006976 <_Z41__static_initialization_and_destruction_0ii+0x166>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006828:	4293      	cmp	r3, r2
 800682a:	f040 80a4 	bne.w	8006976 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800682e:	4c61      	ldr	r4, [pc, #388]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8006830:	4625      	mov	r5, r4
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	4618      	mov	r0, r3
 8006838:	f017 fe1d 	bl	801e476 <_ZNSaIcEC1Ev>
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	461a      	mov	r2, r3
 8006842:	495d      	ldr	r1, [pc, #372]	; (80069b8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8006844:	4628      	mov	r0, r5
 8006846:	f018 f8bd 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	4618      	mov	r0, r3
 8006850:	f017 fe12 	bl	801e478 <_ZNSaIcED1Ev>
 8006854:	3418      	adds	r4, #24
 8006856:	f107 0310 	add.w	r3, r7, #16
 800685a:	4618      	mov	r0, r3
 800685c:	f017 fe0b 	bl	801e476 <_ZNSaIcEC1Ev>
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	461a      	mov	r2, r3
 8006866:	4955      	ldr	r1, [pc, #340]	; (80069bc <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8006868:	4620      	mov	r0, r4
 800686a:	f018 f8ab 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800686e:	f107 0310 	add.w	r3, r7, #16
 8006872:	4618      	mov	r0, r3
 8006874:	f017 fe00 	bl	801e478 <_ZNSaIcED1Ev>
 8006878:	3418      	adds	r4, #24
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	4618      	mov	r0, r3
 8006880:	f017 fdf9 	bl	801e476 <_ZNSaIcEC1Ev>
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	461a      	mov	r2, r3
 800688a:	494d      	ldr	r1, [pc, #308]	; (80069c0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800688c:	4620      	mov	r0, r4
 800688e:	f018 f899 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006892:	f107 0314 	add.w	r3, r7, #20
 8006896:	4618      	mov	r0, r3
 8006898:	f017 fdee 	bl	801e478 <_ZNSaIcED1Ev>
 800689c:	3418      	adds	r4, #24
 800689e:	f107 0318 	add.w	r3, r7, #24
 80068a2:	4618      	mov	r0, r3
 80068a4:	f017 fde7 	bl	801e476 <_ZNSaIcEC1Ev>
 80068a8:	f107 0318 	add.w	r3, r7, #24
 80068ac:	461a      	mov	r2, r3
 80068ae:	4945      	ldr	r1, [pc, #276]	; (80069c4 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80068b0:	4620      	mov	r0, r4
 80068b2:	f018 f887 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80068b6:	f107 0318 	add.w	r3, r7, #24
 80068ba:	4618      	mov	r0, r3
 80068bc:	f017 fddc 	bl	801e478 <_ZNSaIcED1Ev>
    };
 80068c0:	4c41      	ldr	r4, [pc, #260]	; (80069c8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80068c2:	4625      	mov	r5, r4
 80068c4:	f107 031c 	add.w	r3, r7, #28
 80068c8:	4618      	mov	r0, r3
 80068ca:	f017 fdd4 	bl	801e476 <_ZNSaIcEC1Ev>
 80068ce:	f107 031c 	add.w	r3, r7, #28
 80068d2:	461a      	mov	r2, r3
 80068d4:	493d      	ldr	r1, [pc, #244]	; (80069cc <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80068d6:	4628      	mov	r0, r5
 80068d8:	f018 f874 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80068dc:	f107 031c 	add.w	r3, r7, #28
 80068e0:	4618      	mov	r0, r3
 80068e2:	f017 fdc9 	bl	801e478 <_ZNSaIcED1Ev>
 80068e6:	3418      	adds	r4, #24
 80068e8:	f107 0320 	add.w	r3, r7, #32
 80068ec:	4618      	mov	r0, r3
 80068ee:	f017 fdc2 	bl	801e476 <_ZNSaIcEC1Ev>
 80068f2:	f107 0320 	add.w	r3, r7, #32
 80068f6:	461a      	mov	r2, r3
 80068f8:	4935      	ldr	r1, [pc, #212]	; (80069d0 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80068fa:	4620      	mov	r0, r4
 80068fc:	f018 f862 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006900:	f107 0320 	add.w	r3, r7, #32
 8006904:	4618      	mov	r0, r3
 8006906:	f017 fdb7 	bl	801e478 <_ZNSaIcED1Ev>
 800690a:	3418      	adds	r4, #24
 800690c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f017 fdb0 	bl	801e476 <_ZNSaIcEC1Ev>
 8006916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800691a:	461a      	mov	r2, r3
 800691c:	492d      	ldr	r1, [pc, #180]	; (80069d4 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800691e:	4620      	mov	r0, r4
 8006920:	f018 f850 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f017 fda5 	bl	801e478 <_ZNSaIcED1Ev>
 800692e:	3418      	adds	r4, #24
 8006930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006934:	4618      	mov	r0, r3
 8006936:	f017 fd9e 	bl	801e476 <_ZNSaIcEC1Ev>
 800693a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800693e:	461a      	mov	r2, r3
 8006940:	4925      	ldr	r1, [pc, #148]	; (80069d8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8006942:	4620      	mov	r0, r4
 8006944:	f018 f83e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800694c:	4618      	mov	r0, r3
 800694e:	f017 fd93 	bl	801e478 <_ZNSaIcED1Ev>
 8006952:	3418      	adds	r4, #24
 8006954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006958:	4618      	mov	r0, r3
 800695a:	f017 fd8c 	bl	801e476 <_ZNSaIcEC1Ev>
 800695e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006962:	461a      	mov	r2, r3
 8006964:	491d      	ldr	r1, [pc, #116]	; (80069dc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8006966:	4620      	mov	r0, r4
 8006968:	f018 f82c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800696c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006970:	4618      	mov	r0, r3
 8006972:	f017 fd81 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d116      	bne.n	80069aa <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006982:	4293      	cmp	r3, r2
 8006984:	d111      	bne.n	80069aa <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8006986:	4c16      	ldr	r4, [pc, #88]	; (80069e0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800698a:	429c      	cmp	r4, r3
 800698c:	d004      	beq.n	8006998 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800698e:	3c18      	subs	r4, #24
 8006990:	4620      	mov	r0, r4
 8006992:	f017 fe70 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006996:	e7f7      	b.n	8006988 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 8006998:	4c12      	ldr	r4, [pc, #72]	; (80069e4 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800699c:	429c      	cmp	r4, r3
 800699e:	d004      	beq.n	80069aa <_Z41__static_initialization_and_destruction_0ii+0x19a>
 80069a0:	3c18      	subs	r4, #24
 80069a2:	4620      	mov	r0, r4
 80069a4:	f017 fe67 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80069a8:	e7f7      	b.n	800699a <_Z41__static_initialization_and_destruction_0ii+0x18a>
 80069aa:	bf00      	nop
 80069ac:	3730      	adds	r7, #48	; 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20008000 	.word	0x20008000
 80069b8:	08020f48 	.word	0x08020f48
 80069bc:	08020f54 	.word	0x08020f54
 80069c0:	08020f60 	.word	0x08020f60
 80069c4:	08020f6c 	.word	0x08020f6c
 80069c8:	20008060 	.word	0x20008060
 80069cc:	08020f78 	.word	0x08020f78
 80069d0:	08020f88 	.word	0x08020f88
 80069d4:	08020f98 	.word	0x08020f98
 80069d8:	08020fa8 	.word	0x08020fa8
 80069dc:	08020fb8 	.word	0x08020fb8
 80069e0:	200080d8 	.word	0x200080d8
 80069e4:	20008060 	.word	0x20008060

080069e8 <_GLOBAL__sub_I__ZN2ps15AnalogSubsystem28DefaultAnalogWriteResolutionE>:
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7ff ff0d 	bl	8006810 <_Z41__static_initialization_and_destruction_0ii>
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <_GLOBAL__sub_D__ZN2ps15AnalogSubsystem28DefaultAnalogWriteResolutionE>:
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7ff ff05 	bl	8006810 <_Z41__static_initialization_and_destruction_0ii>
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <_ZNK11ArduinoJson11JsonVariant15variantIsObjectEv>:
  bool variantIsObject() const {
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    return _type == Internals::JSON_OBJECT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
  }
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <_ZN11ArduinoJson10JsonObjectC1EPNS_10JsonBufferE>:
  explicit JsonObject(JsonBuffer* buffer) throw()
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
      : Internals::List<JsonPair>(buffer) {}
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fa fcd4 	bl	80013e2 <_ZN11ArduinoJson9Internals11NonCopyableC1Ev>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fcb2 	bl	80073a8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEEC1EPNS_10JsonBufferE>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>:
  static JsonObject& invalid() {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
    static JsonObject instance(NULL);
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <_ZN11ArduinoJson10JsonObject7invalidEv+0x48>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f3bf 8f5b 	dmb	ish
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d011      	beq.n	8006a92 <_ZN11ArduinoJson10JsonObject7invalidEv+0x42>
 8006a6e:	480a      	ldr	r0, [pc, #40]	; (8006a98 <_ZN11ArduinoJson10JsonObject7invalidEv+0x48>)
 8006a70:	f017 fcf2 	bl	801e458 <__cxa_guard_acquire>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bf14      	ite	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	2300      	moveq	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <_ZN11ArduinoJson10JsonObject7invalidEv+0x42>
 8006a84:	2100      	movs	r1, #0
 8006a86:	4805      	ldr	r0, [pc, #20]	; (8006a9c <_ZN11ArduinoJson10JsonObject7invalidEv+0x4c>)
 8006a88:	f7ff ffcf 	bl	8006a2a <_ZN11ArduinoJson10JsonObjectC1EPNS_10JsonBufferE>
 8006a8c:	4802      	ldr	r0, [pc, #8]	; (8006a98 <_ZN11ArduinoJson10JsonObject7invalidEv+0x48>)
 8006a8e:	f017 fcef 	bl	801e470 <__cxa_guard_release>
    return instance;
 8006a92:	4b02      	ldr	r3, [pc, #8]	; (8006a9c <_ZN11ArduinoJson10JsonObject7invalidEv+0x4c>)
  }
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200081b8 	.word	0x200081b8
 8006a9c:	200081b0 	.word	0x200081b0

08006aa0 <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_10JsonObjectEE3getEv>:
  static JsonObject& get() {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
    return JsonObject::invalid();
 8006aa4:	f7ff ffd4 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 8006aa8:	4603      	mov	r3, r0
  }
 8006aaa:	4618      	mov	r0, r3
 8006aac:	bd80      	pop	{r7, pc}

08006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>:
inline ArduinoJson::JsonObject &ArduinoJson::JsonBuffer::createObject() {
 8006aae:	b590      	push	{r4, r7, lr}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  JsonObject *ptr = new (this) JsonObject(this);
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	2008      	movs	r0, #8
 8006aba:	f7fa fcbc 	bl	8001436 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	d003      	beq.n	8006acc <_ZN11ArduinoJson10JsonBuffer12createObjectEv+0x1e>
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff ffaf 	bl	8006a2a <_ZN11ArduinoJson10JsonObjectC1EPNS_10JsonBufferE>
 8006acc:	60fc      	str	r4, [r7, #12]
  return ptr ? *ptr : JsonObject::invalid();
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <_ZN11ArduinoJson10JsonBuffer12createObjectEv+0x2e>
 8006ad4:	f7ff ffbc 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	e000      	b.n	8006ade <_ZN11ArduinoJson10JsonBuffer12createObjectEv+0x30>
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}

08006ae6 <_ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE>:
inline JsonVariant::JsonVariant(const JsonObject &object) {
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  if (object.success()) {
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fc6a 	bl	80073cc <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE7successEv>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <_ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE+0x26>
    _type = Internals::JSON_OBJECT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2207      	movs	r2, #7
 8006b02:	701a      	strb	r2, [r3, #0]
    _content.asObject = const_cast<JsonObject *>(&object);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	e002      	b.n	8006b12 <_ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE+0x2c>
    _type = Internals::JSON_UNDEFINED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
}
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <_ZNK11ArduinoJson11JsonVariant15variantAsObjectEv>:
inline JsonObject &JsonVariant::variantAsObject() const {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  if (_type == Internals::JSON_OBJECT) return *_content.asObject;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b07      	cmp	r3, #7
 8006b2a:	d102      	bne.n	8006b32 <_ZNK11ArduinoJson11JsonVariant15variantAsObjectEv+0x16>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	e003      	b.n	8006b3a <_ZNK11ArduinoJson11JsonVariant15variantAsObjectEv+0x1e>
  return JsonObject::invalid();
 8006b32:	f7ff ff8d 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 8006b36:	4603      	mov	r3, r0
 8006b38:	bf00      	nop
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <_ZN2ps8BaseTestC1Ev>:
using namespace std;

namespace ps
{

    BaseTest::BaseTest() 
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <_ZN2ps8BaseTestC1Ev+0x7c>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	611a      	str	r2, [r3, #16]
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	621a      	str	r2, [r3, #32]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	4618      	mov	r0, r3
 8006b88:	f017 fc75 	bl	801e476 <_ZNSaIcEC1Ev>
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	461a      	mov	r2, r3
 8006b92:	490c      	ldr	r1, [pc, #48]	; (8006bc4 <_ZN2ps8BaseTestC1Ev+0x80>)
 8006b94:	4620      	mov	r0, r4
 8006b96:	f017 ff15 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f017 fc6a 	bl	801e478 <_ZNSaIcED1Ev>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    { }
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd90      	pop	{r4, r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08022258 	.word	0x08022258
 8006bc4:	08020fd8 	.word	0x08020fd8

08006bc8 <_ZNK2ps8BaseTest6isDoneEy>:


    bool BaseTest::isDone(uint64_t t) const 
    { 
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	e9c7 2300 	strd	r2, r3, [r7]
        if (t < quietTime_)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bde:	4290      	cmp	r0, r2
 8006be0:	eb71 0303 	sbcs.w	r3, r1, r3
 8006be4:	d201      	bcs.n	8006bea <_ZNK2ps8BaseTest6isDoneEy+0x22>
        {
            return false;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e000      	b.n	8006bec <_ZNK2ps8BaseTest6isDoneEy+0x24>
        }
        else
        {
            return true;
 8006bea:	2301      	movs	r3, #1
        }
    }
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <_ZNK2ps8BaseTest11getDoneTimeEv>:


    uint64_t BaseTest::getDoneTime() const
    {
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
        return quietTime_;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    }
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <_ZN2ps8BaseTest5resetEv>:


    void BaseTest::reset() 
    { }
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <_ZNK2ps8BaseTest8getValueEy>:


    float BaseTest::getValue(uint64_t t) const 
    { 
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	e9c7 2300 	strd	r2, r3, [r7]
        if (t < quietTime_)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3e:	4290      	cmp	r0, r2
 8006c40:	eb71 0303 	sbcs.w	r3, r1, r3
 8006c44:	d202      	bcs.n	8006c4c <_ZNK2ps8BaseTest8getValueEy+0x24>
        {
            return quietValue_;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	e001      	b.n	8006c50 <_ZNK2ps8BaseTest8getValueEy+0x28>
        }
        else
        {
            return 0.0;
 8006c4c:	f04f 0300 	mov.w	r3, #0
        }
    }
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eeb0 0a67 	vmov.f32	s0, s15
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <_ZNK2ps8BaseTest11getMaxValueEv>:


    float BaseTest::getMaxValue() const 
    { 
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
        return max(quietValue_,0.0f);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	60fa      	str	r2, [r7, #12]
 8006c74:	f107 020c 	add.w	r2, r7, #12
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fc fa86 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 8006c80:	4603      	mov	r3, r0
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	ee07 3a90 	vmov	s15, r3
    }
 8006c88:	eeb0 0a67 	vmov.f32	s0, s15
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <_ZNK2ps8BaseTest11getMinValueEv>:


    float BaseTest::getMinValue() const 
    { 
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
        return min(quietValue_,0.0f);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3310      	adds	r3, #16
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	60fa      	str	r2, [r7, #12]
 8006ca4:	f107 020c 	add.w	r2, r7, #12
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fc fa87 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	ee07 3a90 	vmov	s15, r3
    }
 8006cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZN2ps8BaseTest12setQuietTimeEy>:

    void BaseTest::setQuietTime(uint64_t quietTime)
    {
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	e9c7 2300 	strd	r2, r3, [r7]
        quietTime_ = quietTime;
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <_ZNK2ps8BaseTest12getQuietTimeEv>:


    uint64_t BaseTest::getQuietTime() const
    {
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
        return quietTime_;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    }
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <_ZN2ps8BaseTest13setQuietValueEf>:


    void BaseTest::setQuietValue(float quietValue)
    {
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	ed87 0a00 	vstr	s0, [r7]
        quietValue_ = quietValue;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	611a      	str	r2, [r3, #16]
    }
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <_ZN2ps8BaseTest20setQuietValueToStartEv>:


    void BaseTest::setQuietValueToStart()
    {
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
        quietValue_ = getValue(quietTime_);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4788      	blx	r1
 8006d38:	eef0 7a40 	vmov.f32	s15, s0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	edc3 7a04 	vstr	s15, [r3, #16]
    }
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <_ZNK2ps8BaseTest13getQuietValueEv>:


    float BaseTest::getQuietValue() const
    {
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
        return quietValue_;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	ee07 3a90 	vmov	s15, r3
    }
 8006d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <_ZN2ps8BaseTest15setSamplePeriodEy>:

    void BaseTest::setSamplePeriod(uint64_t samplePeriod)
    {
 8006d68:	b5b0      	push	{r4, r5, r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	e9c7 2300 	strd	r2, r3, [r7]
        samplePeriod_ = samplePeriod;
 8006d74:	68f9      	ldr	r1, [r7, #12]
 8006d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        sampleModulus_ = samplePeriod_/TestTimerPeriod;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006d84:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <_ZN2ps8BaseTest15setSamplePeriodEy+0x40>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	461c      	mov	r4, r3
 8006d8c:	4615      	mov	r5, r2
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7fa f845 	bl	8000e20 <__aeabi_uldivmod>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
    }
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bdb0      	pop	{r4, r5, r7, pc}
 8006da6:	bf00      	nop
 8006da8:	0802231c 	.word	0x0802231c

08006dac <_ZNK2ps8BaseTest15getSamplePeriodEv>:


    uint64_t BaseTest::getSamplePeriod() const
    {
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
        return samplePeriod_;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    }
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


    void BaseTest::setName(string name)
    {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
        name_ = name;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f017 fc52 	bl	801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    }
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <_ZN2ps8BaseTest7getNameB5cxx11Ev>:

    
    string BaseTest::getName()
    {
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
        return name_;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f017 fdb0 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <_ZN2ps8BaseTest15setSampleMethodENS_12SampleMethodE>:


    void BaseTest::setSampleMethod(SampleMethod sampleMethod) 
    {
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
        sampleMethod_ = sampleMethod;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <_ZNK2ps8BaseTest15getSampleMethodEv>:


    SampleMethod BaseTest::getSampleMethod() const
    {
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
        return sampleMethod_;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    }
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <_ZN2ps8BaseTest12updateSampleENS_6SampleERS1_>:


    bool BaseTest::updateSample(Sample sampleRaw, Sample &sampleTest)
    {
 8006e3e:	b082      	sub	sp, #8
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	f107 0110 	add.w	r1, r7, #16
 8006e4c:	e881 000c 	stmia.w	r1, {r2, r3}
        // Only for tests with custom sampling 
        return false;
 8006e50:	2300      	movs	r3, #0
    }
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	b002      	add	sp, #8
 8006e5e:	4770      	bx	lr

08006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>:


    void BaseTest::getParam(JsonObject &jsonDat)
    {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
        JsonObject &jsonDatPrm = jsonDat.createNestedObject(ParamKey);
 8006e6a:	4910      	ldr	r1, [pc, #64]	; (8006eac <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE+0x4c>)
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f000 fabe 	bl	80073ee <_ZN11ArduinoJson10JsonObject18createNestedObjectINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_>
 8006e72:	60f8      	str	r0, [r7, #12]
        jsonDatPrm.set(QuietValueKey, quietValue_);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3310      	adds	r3, #16
 8006e78:	461a      	mov	r2, r3
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE+0x50>)
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fac4 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        jsonDatPrm.set(QuietTimeKey, convertUsToMs(quietTime_));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7fa fcc5 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8006e90:	4603      	mov	r3, r0
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4906      	ldr	r1, [pc, #24]	; (8006eb4 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE+0x54>)
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fac4 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20008474 	.word	0x20008474
 8006eb0:	200084bc 	.word	0x200084bc
 8006eb4:	200084d4 	.word	0x200084d4

08006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus BaseTest::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7fa fa7a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>

        // Extract JsonObject containing parameters
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	68b8      	ldr	r0, [r7, #8]
 8006ed2:	f000 f83f 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8006ed6:	6178      	str	r0, [r7, #20]
        if (!status.success)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f083 0301 	eor.w	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d111      	bne.n	8006f0a <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_+0x52>
        {
            return status;
        }

        // Set Parameters_ 
        JsonObject &jsonDatPrm = jsonDat.createNestedObject(ParamKey);
 8006ee6:	490b      	ldr	r1, [pc, #44]	; (8006f14 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_+0x5c>)
 8006ee8:	6838      	ldr	r0, [r7, #0]
 8006eea:	f000 fa80 	bl	80073ee <_ZN11ArduinoJson10JsonObject18createNestedObjectINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_>
 8006eee:	6138      	str	r0, [r7, #16]

        setQuietValueFromJson(jsonMsgPrm, jsonDatPrm, status);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	6979      	ldr	r1, [r7, #20]
 8006ef6:	68b8      	ldr	r0, [r7, #8]
 8006ef8:	f000 f918 	bl	800712c <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setQuietTimeFromJson(jsonMsgPrm, jsonDatPrm, status);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	6979      	ldr	r1, [r7, #20]
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 f9c8 	bl	8007298 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>

        return status;
 8006f08:	e000      	b.n	8006f0c <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_+0x54>
            return status;
 8006f0a:	bf00      	nop
    }
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20008474 	.word	0x20008474

08006f18 <_ZN2ps8BaseTest15isMuxCompatibleEv>:

    bool BaseTest::isMuxCompatible()
    {
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
        return muxCompatible_;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    }
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>:

    void BaseTest::setMuxCompatible(bool value)
    {
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
        muxCompatible_ = value;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>:

    // Protected Methods
    // ----------------------------------------------------------------------------------

    JsonObject &BaseTest::getParamJsonObject(JsonObject &json, ReturnStatus &status)
    {
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b0bd      	sub	sp, #244	; 0xf4
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
        // Extract JsonObject containing parameters
        if (!json.containsKey(ParamKey))
 8006f60:	496e      	ldr	r1, [pc, #440]	; (800711c <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1c8>)
 8006f62:	68b8      	ldr	r0, [r7, #8]
 8006f64:	f7fd fadd 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f083 0301 	eor.w	r3, r3, #1
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d060      	beq.n	8007036 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0xe2>
        {
            status.success = false;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
            string errorMsg = string("key ") + ParamKey + string(" missing");
 8006f7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f017 fa79 	bl	801e476 <_ZNSaIcEC1Ev>
 8006f84:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f8c:	4964      	ldr	r1, [pc, #400]	; (8007120 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1cc>)
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f017 fd18 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006f9c:	4a5f      	ldr	r2, [pc, #380]	; (800711c <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1c8>)
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fb37 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8006fa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f017 fa64 	bl	801e476 <_ZNSaIcEC1Ev>
 8006fae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006fb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006fb6:	495b      	ldr	r1, [pc, #364]	; (8007124 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1d0>)
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f017 fd03 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fc2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006fc6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fb38 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8006fd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f017 fb4e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f017 fa4a 	bl	801e478 <_ZNSaIcED1Ev>
 8006fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f017 fb44 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f017 fb3f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ff8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f017 fa3b 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 8007002:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f017 fca5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007012:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f007 fdc9 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800701e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007022:	4618      	mov	r0, r3
 8007024:	f017 fb27 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            return json;
 8007028:	68bc      	ldr	r4, [r7, #8]
        }
 800702a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800702e:	4618      	mov	r0, r3
 8007030:	f017 fb21 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007034:	e06d      	b.n	8007112 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1be>
        if (!json[ParamKey].is<JsonObject>())
 8007036:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800703a:	4a38      	ldr	r2, [pc, #224]	; (800711c <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1c8>)
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fd faa5 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 8007044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007048:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fb16 	bl	8007680 <_ZNK11ArduinoJson10JsonObject2isIS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8007054:	4603      	mov	r3, r0
 8007056:	bf00      	nop
 8007058:	f083 0301 	eor.w	r3, r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d03b      	beq.n	80070da <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x186>
        {
            status.success = false;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
            string errorMsg = ParamKey + string(" not JsonObject");
 8007068:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800706c:	4618      	mov	r0, r3
 800706e:	f017 fa02 	bl	801e476 <_ZNSaIcEC1Ev>
 8007072:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8007076:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800707a:	492b      	ldr	r1, [pc, #172]	; (8007128 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1d4>)
 800707c:	4618      	mov	r0, r3
 800707e:	f017 fca1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800708a:	4924      	ldr	r1, [pc, #144]	; (800711c <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1c8>)
 800708c:	4618      	mov	r0, r3
 800708e:	f7fd fa66 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8007092:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007096:	4618      	mov	r0, r3
 8007098:	f017 faed 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800709c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80070a0:	4618      	mov	r0, r3
 80070a2:	f017 f9e9 	bl	801e478 <_ZNSaIcED1Ev>
            status.appendToMessage(errorMsg);
 80070a6:	f107 0210 	add.w	r2, r7, #16
 80070aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f017 fc53 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80070b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f007 fd77 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80070c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80070c6:	4618      	mov	r0, r3
 80070c8:	f017 fad5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            return json;
 80070cc:	68bc      	ldr	r4, [r7, #8]
        }
 80070ce:	f107 0310 	add.w	r3, r7, #16
 80070d2:	4618      	mov	r0, r3
 80070d4:	f017 facf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80070d8:	e01b      	b.n	8007112 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1be>
        return json[ParamKey];
 80070da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80070de:	4a0f      	ldr	r2, [pc, #60]	; (800711c <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE+0x1c8>)
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd fa53 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<JsonObject &>();
 80070e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd fb7a 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 80070f2:	4603      	mov	r3, r0
 80070f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    return _object.get<TValue>(_key);
 80070f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4619      	mov	r1, r3
 8007106:	4610      	mov	r0, r2
 8007108:	f000 fbdc 	bl	80078c4 <_ZNK11ArduinoJson10JsonObject3getIRS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800710c:	4604      	mov	r4, r0
 800710e:	bf00      	nop
    return impl()->template as<JsonObject &>();
 8007110:	bf00      	nop
    }
 8007112:	4623      	mov	r3, r4
 8007114:	4618      	mov	r0, r3
 8007116:	37f4      	adds	r7, #244	; 0xf4
 8007118:	46bd      	mov	sp, r7
 800711a:	bd90      	pop	{r4, r7, pc}
 800711c:	20008474 	.word	0x20008474
 8007120:	08020fe0 	.word	0x08020fe0
 8007124:	08020fe8 	.word	0x08020fe8
 8007128:	08020ff4 	.word	0x08020ff4

0800712c <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    void BaseTest::setQuietValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800712c:	b590      	push	{r4, r7, lr}
 800712e:	b09f      	sub	sp, #124	; 0x7c
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(QuietValueKey))
 800713a:	4955      	ldr	r1, [pc, #340]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800713c:	68b8      	ldr	r0, [r7, #8]
 800713e:	f7fd f9f0 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 809e 	beq.w	8007286 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
        {
            if (jsonMsgPrm[QuietValueKey].is<float>())
 800714a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800714e:	4a50      	ldr	r2, [pc, #320]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f7fd fa1b 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fa9c 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8007164:	4603      	mov	r3, r0
 8007166:	bf00      	nop
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01f      	beq.n	80071ac <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x80>
            {
                setQuietValue(jsonMsgPrm.get<float>(QuietValueKey));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3320      	adds	r3, #32
 8007172:	681c      	ldr	r4, [r3, #0]
 8007174:	4946      	ldr	r1, [pc, #280]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 8007176:	68b8      	ldr	r0, [r7, #8]
 8007178:	f000 f967 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800717c:	eef0 7a40 	vmov.f32	s15, s0
 8007180:	eeb0 0a67 	vmov.f32	s0, s15
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	47a0      	blx	r4
                jsonDatPrm.set(QuietValueKey,getQuietValue());
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3328      	adds	r3, #40	; 0x28
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	4798      	blx	r3
 8007194:	eef0 7a40 	vmov.f32	s15, s0
 8007198:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800719c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071a0:	461a      	mov	r2, r3
 80071a2:	493b      	ldr	r1, [pc, #236]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f930 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = QuietValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 80071aa:	e06c      	b.n	8007286 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
            else if (jsonMsgPrm[QuietValueKey].is<long>())
 80071ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071b0:	4a37      	ldr	r2, [pc, #220]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd f9ea 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 faab 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80071c6:	4603      	mov	r3, r0
 80071c8:	bf00      	nop
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d021      	beq.n	8007212 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xe6>
                setQuietValue(float(jsonMsgPrm.get<long>(QuietValueKey)));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3320      	adds	r3, #32
 80071d4:	681c      	ldr	r4, [r3, #0]
 80071d6:	492e      	ldr	r1, [pc, #184]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 80071d8:	68b8      	ldr	r0, [r7, #8]
 80071da:	f000 f946 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80071de:	ee07 0a90 	vmov	s15, r0
 80071e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071e6:	eeb0 0a67 	vmov.f32	s0, s15
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	47a0      	blx	r4
                jsonDatPrm.set(QuietValueKey,getQuietValue());
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3328      	adds	r3, #40	; 0x28
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	4798      	blx	r3
 80071fa:	eef0 7a40 	vmov.f32	s15, s0
 80071fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8007202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007206:	461a      	mov	r2, r3
 8007208:	4921      	ldr	r1, [pc, #132]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f8fd 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 8007210:	e039      	b.n	8007286 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
                status.success = false;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
                string errorMsg = QuietValueKey + string(" not a float");
 8007218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800721c:	4618      	mov	r0, r3
 800721e:	f017 f92a 	bl	801e476 <_ZNSaIcEC1Ev>
 8007222:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007226:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800722a:	491a      	ldr	r1, [pc, #104]	; (8007294 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x168>)
 800722c:	4618      	mov	r0, r3
 800722e:	f017 fbc9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007232:	f107 0314 	add.w	r3, r7, #20
 8007236:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800723a:	4915      	ldr	r1, [pc, #84]	; (8007290 <_ZN2ps8BaseTest21setQuietValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800723c:	4618      	mov	r0, r3
 800723e:	f7fd f98e 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8007242:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007246:	4618      	mov	r0, r3
 8007248:	f017 fa15 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800724c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007250:	4618      	mov	r0, r3
 8007252:	f017 f911 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 8007256:	f107 0214 	add.w	r2, r7, #20
 800725a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800725e:	4611      	mov	r1, r2
 8007260:	4618      	mov	r0, r3
 8007262:	f017 fb7b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007266:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800726a:	4619      	mov	r1, r3
 800726c:	6838      	ldr	r0, [r7, #0]
 800726e:	f007 fc9f 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007272:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007276:	4618      	mov	r0, r3
 8007278:	f017 f9fd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800727c:	f107 0314 	add.w	r3, r7, #20
 8007280:	4618      	mov	r0, r3
 8007282:	f017 f9f8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8007286:	bf00      	nop
 8007288:	377c      	adds	r7, #124	; 0x7c
 800728a:	46bd      	mov	sp, r7
 800728c:	bd90      	pop	{r4, r7, pc}
 800728e:	bf00      	nop
 8007290:	200084bc 	.word	0x200084bc
 8007294:	08021004 	.word	0x08021004

08007298 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void BaseTest::setQuietTimeFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b09b      	sub	sp, #108	; 0x6c
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(QuietTimeKey))
 80072a6:	493e      	ldr	r1, [pc, #248]	; (80073a0 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 80072a8:	68b8      	ldr	r0, [r7, #8]
 80072aa:	f7fd f93a 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d070      	beq.n	8007396 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfe>
        {
            if (jsonMsgPrm[QuietTimeKey].is<unsigned long>())
 80072b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072b8:	4a39      	ldr	r2, [pc, #228]	; (80073a0 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fd f966 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fa64 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80072ce:	4603      	mov	r3, r0
 80072d0:	bf00      	nop
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d025      	beq.n	8007322 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x8a>
            {
                setQuietTime(convertMsToUs(jsonMsgPrm.get<unsigned long>(QuietTimeKey)));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3318      	adds	r3, #24
 80072dc:	681c      	ldr	r4, [r3, #0]
 80072de:	4930      	ldr	r1, [pc, #192]	; (80073a0 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 80072e0:	68b8      	ldr	r0, [r7, #8]
 80072e2:	f000 f8d0 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fa faaa 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	47a0      	blx	r4
                jsonDatPrm.set(QuietTimeKey,convertUsToMs(getQuietTime()));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	331c      	adds	r3, #28
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	4798      	blx	r3
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f7fa fa86 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800730e:	4603      	mov	r3, r0
 8007310:	633b      	str	r3, [r7, #48]	; 0x30
 8007312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007316:	461a      	mov	r2, r3
 8007318:	4921      	ldr	r1, [pc, #132]	; (80073a0 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f885 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = QuietTimeKey + string(" not uint32");
                status.appendToMessage(errorMsg);
            }
        }
    }
 8007320:	e039      	b.n	8007396 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfe>
                status.success = false;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
                string errorMsg = QuietTimeKey + string(" not uint32");
 8007328:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800732c:	4618      	mov	r0, r3
 800732e:	f017 f8a2 	bl	801e476 <_ZNSaIcEC1Ev>
 8007332:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800733a:	491a      	ldr	r1, [pc, #104]	; (80073a4 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x10c>)
 800733c:	4618      	mov	r0, r3
 800733e:	f017 fb41 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007342:	f107 0310 	add.w	r3, r7, #16
 8007346:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800734a:	4915      	ldr	r1, [pc, #84]	; (80073a0 <_ZN2ps8BaseTest20setQuietTimeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800734c:	4618      	mov	r0, r3
 800734e:	f7fd f906 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8007352:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007356:	4618      	mov	r0, r3
 8007358:	f017 f98d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800735c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007360:	4618      	mov	r0, r3
 8007362:	f017 f889 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 8007366:	f107 0210 	add.w	r2, r7, #16
 800736a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f017 faf3 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800737a:	4619      	mov	r1, r3
 800737c:	6838      	ldr	r0, [r7, #0]
 800737e:	f007 fc17 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007386:	4618      	mov	r0, r3
 8007388:	f017 f975 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800738c:	f107 0310 	add.w	r3, r7, #16
 8007390:	4618      	mov	r0, r3
 8007392:	f017 f970 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8007396:	bf00      	nop
 8007398:	376c      	adds	r7, #108	; 0x6c
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}
 800739e:	bf00      	nop
 80073a0:	200084d4 	.word	0x200084d4
 80073a4:	08021014 	.word	0x08021014

080073a8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEEC1EPNS_10JsonBufferE>:
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE7successEv>:
  bool success() const {
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
    return _buffer != NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
  }
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <_ZN11ArduinoJson10JsonObject18createNestedObjectINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_RKT_>:
  JsonObject& createNestedObject(const TString& key) {
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
    return createNestedObject_impl<const TString&>(key);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f851 	bl	80074a2 <_ZN11ArduinoJson10JsonObject23createNestedObject_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_T_>
 8007400:	4603      	mov	r3, r0
  }
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f85e 	bl	80074dc <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_>
 8007420:	4603      	mov	r3, r0
  }
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f8b7 	bl	80075ae <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_>
 8007440:	4603      	mov	r3, r0
  }
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f92e 	bl	80076b8 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 800745c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007460:	eeb0 0a67 	vmov.f32	s0, s15
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f95e 	bl	8007738 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 800747c:	4603      	mov	r3, r0
  }
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f98d 	bl	80077b2 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 8007498:	4603      	mov	r3, r0
  }
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZN11ArduinoJson10JsonObject23createNestedObject_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_T_>:
inline JsonObject &JsonObject::createNestedObject_impl(TStringRef key) {
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  if (!_buffer) return JsonObject::invalid();
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <_ZN11ArduinoJson10JsonObject23createNestedObject_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_T_+0x1a>
 80074b4:	f7ff facc 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	e00b      	b.n	80074d4 <_ZN11ArduinoJson10JsonObject23createNestedObject_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS0_T_+0x32>
  JsonObject &object = _buffer->createObject();
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff faf4 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 80074c6:	60f8      	str	r0, [r7, #12]
  set(key, object);
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f9b7 	bl	8007840 <_ZN11ArduinoJson10JsonObject3setIS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
  return object;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f7fd fc49 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0x1c>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e056      	b.n	80075a6 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7fd fad9 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 8007500:	4603      	mov	r3, r0
 8007502:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd fc5f 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800750c:	4603      	mov	r3, r0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	f107 0214 	add.w	r2, r7, #20
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fc41 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d02f      	beq.n	8007586 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fd fc5d 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 800752e:	4603      	mov	r3, r0
 8007530:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fd fc48 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800753a:	4603      	mov	r3, r0
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	f107 0218 	add.w	r2, r7, #24
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f7fd fc2a 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0x7c>
 8007554:	2300      	movs	r3, #0
 8007556:	e026      	b.n	80075a6 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681c      	ldr	r4, [r3, #0]
 800755c:	f107 0310 	add.w	r3, r7, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fc73 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007566:	4603      	mov	r3, r0
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	4619      	mov	r1, r3
 800756c:	4620      	mov	r0, r4
 800756e:	f7fd fc7a 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 8007572:	4603      	mov	r3, r0
 8007574:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	f083 0301 	eor.w	r3, r3, #1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0xaa>
 8007582:	2300      	movs	r3, #0
 8007584:	e00f      	b.n	80075a6 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKfEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681c      	ldr	r4, [r3, #0]
 800758a:	f107 0310 	add.w	r3, r7, #16
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd fc5c 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007594:	4603      	mov	r3, r0
 8007596:	3308      	adds	r3, #8
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4619      	mov	r1, r3
 800759c:	4620      	mov	r0, r4
 800759e:	f7fd f8e2 	bl	8004766 <_ZN11ArduinoJson9Internals10ValueSaverIRKfvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 80075a2:	4603      	mov	r3, r0
 80075a4:	bf00      	nop
  }
 80075a6:	4618      	mov	r0, r3
 80075a8:	3724      	adds	r7, #36	; 0x24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd90      	pop	{r4, r7, pc}

080075ae <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 80075ae:	b590      	push	{r4, r7, lr}
 80075b0:	b089      	sub	sp, #36	; 0x24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 80075ba:	68b8      	ldr	r0, [r7, #8]
 80075bc:	f7fd fbe0 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0x1c>
 80075c6:	2300      	movs	r3, #0
 80075c8:	e056      	b.n	8007678 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7fd fa70 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 80075d2:	4603      	mov	r3, r0
 80075d4:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd fbf6 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80075de:	4603      	mov	r3, r0
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	f107 0214 	add.w	r2, r7, #20
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fbd8 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02f      	beq.n	8007658 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fd fbf4 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 8007600:	4603      	mov	r3, r0
 8007602:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fd fbdf 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800760c:	4603      	mov	r3, r0
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	f107 0218 	add.w	r2, r7, #24
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7fd fbc1 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0x7c>
 8007626:	2300      	movs	r3, #0
 8007628:	e026      	b.n	8007678 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681c      	ldr	r4, [r3, #0]
 800762e:	f107 0310 	add.w	r3, r7, #16
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd fc0a 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007638:	4603      	mov	r3, r0
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4619      	mov	r1, r3
 800763e:	4620      	mov	r0, r4
 8007640:	f7fd fc11 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 8007644:	4603      	mov	r3, r0
 8007646:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	f083 0301 	eor.w	r3, r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0xaa>
 8007654:	2300      	movs	r3, #0
 8007656:	e00f      	b.n	8007678 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKmEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681c      	ldr	r4, [r3, #0]
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd fbf3 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007666:	4603      	mov	r3, r0
 8007668:	3308      	adds	r3, #8
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	4619      	mov	r1, r3
 800766e:	4620      	mov	r0, r4
 8007670:	f7fd f85f 	bl	8004732 <_ZN11ArduinoJson9Internals10ValueSaverIRKmvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 8007674:	4603      	mov	r3, r0
 8007676:	bf00      	nop
  }
 8007678:	4618      	mov	r0, r3
 800767a:	3724      	adds	r7, #36	; 0x24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}

08007680 <_ZNK11ArduinoJson10JsonObject2isIS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f8e7 	bl	8007860 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_EEbT_>
 8007692:	4603      	mov	r3, r0
  }
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f919 	bl	80078e0 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEEbT_>
 80076ae:	4603      	mov	r3, r0
  }
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7fd f86b 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 80076ca:	4603      	mov	r3, r0
 80076cc:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fa fce3 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	f107 020c 	add.w	r2, r7, #12
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fa fcc5 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00c      	beq.n	800770a <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x52>
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fa fce0 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	3308      	adds	r3, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd f93e 	bl	8004980 <_ZNK11ArduinoJson11JsonVariant2asIfEEKNS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueES5_E4typeEv>
 8007704:	eef0 7a40 	vmov.f32	s15, s0
 8007708:	e003      	b.n	8007712 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x5a>
                       : Internals::JsonVariantDefault<TValue>::get();
 800770a:	f7fd f947 	bl	800499c <_ZN11ArduinoJson9Internals18JsonVariantDefaultIfE3getEv>
 800770e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007712:	eeb0 0a67 	vmov.f32	s0, s15
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f90b 	bl	8007944 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEEbT_>
 800772e:	4603      	mov	r3, r0
  }
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fd f82b 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 800774a:	4603      	mov	r3, r0
 800774c:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f7fa fca3 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8007756:	4603      	mov	r3, r0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	f107 020c 	add.w	r2, r7, #12
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7fa fc85 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x50>
 8007770:	f107 0308 	add.w	r3, r7, #8
 8007774:	4618      	mov	r0, r3
 8007776:	f7fa fca0 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 800777a:	4603      	mov	r3, r0
 800777c:	3308      	adds	r3, #8
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f912 	bl	80079a8 <_ZNK11ArduinoJson11JsonVariant2asIlEEKNS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueES5_E4typeEv>
 8007784:	4603      	mov	r3, r0
 8007786:	e002      	b.n	800778e <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
                       : Internals::JsonVariantDefault<TValue>::get();
 8007788:	f000 f91a 	bl	80079c0 <_ZN11ArduinoJson9Internals18JsonVariantDefaultIlE3getEv>
 800778c:	4603      	mov	r3, r0
  }
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f914 	bl	80079d0 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEbT_>
 80077a8:	4603      	mov	r3, r0
  }
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fc ffee 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 80077c4:	4603      	mov	r3, r0
 80077c6:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa fc66 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80077d0:	4603      	mov	r3, r0
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	f107 020c 	add.w	r2, r7, #12
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fa fc48 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x50>
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fa fc63 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 80077f4:	4603      	mov	r3, r0
 80077f6:	3308      	adds	r3, #8
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fd f873 	bl	80048e4 <_ZNK11ArduinoJson11JsonVariant2asImEEKNS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueES5_E4typeEv>
 80077fe:	4603      	mov	r3, r0
 8007800:	e002      	b.n	8007808 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
                       : Internals::JsonVariantDefault<TValue>::get();
 8007802:	f7fd f87b 	bl	80048fc <_ZN11ArduinoJson9Internals18JsonVariantDefaultImE3getEv>
 8007806:	4603      	mov	r3, r0
  }
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_10JsonObjectEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b089      	sub	sp, #36	; 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
    destination = source;
 800781c:	f107 0310 	add.w	r3, r7, #16
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff f95f 	bl	8006ae6 <_ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	461c      	mov	r4, r3
 800782c:	f107 0310 	add.w	r3, r7, #16
 8007830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 8007836:	2301      	movs	r3, #1
  }
 8007838:	4618      	mov	r0, r3
 800783a:	3724      	adds	r7, #36	; 0x24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd90      	pop	{r4, r7, pc}

08007840 <_ZN11ArduinoJson10JsonObject3setIS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f8ef 	bl	8007a34 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_>
 8007856:	4603      	mov	r3, r0
  }
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_EEbT_>:
  bool is_impl(TStringRef key) const {
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fc ff97 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8007872:	4603      	mov	r3, r0
 8007874:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	f7fa fc0f 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800787e:	4603      	mov	r3, r0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	f107 020c 	add.w	r2, r7, #12
 8007886:	f107 0308 	add.w	r3, r7, #8
 800788a:	4611      	mov	r1, r2
 800788c:	4618      	mov	r0, r3
 800788e:	f7fa fbf1 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_EEbT_+0x5a>
 8007898:	f107 0308 	add.w	r3, r7, #8
 800789c:	4618      	mov	r0, r3
 800789e:	f7fa fc0c 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 80078a2:	4603      	mov	r3, r0
 80078a4:	3308      	adds	r3, #8
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f92d 	bl	8007b06 <_ZNK11ArduinoJson11JsonVariant2isINS_10JsonObjectEEENS_9Internals8EnableIfIXsrNS3_6IsSameINS3_11RemoveConstINS3_15RemoveReferenceIT_E4typeEE4typeES2_EE5valueEbE4typeEv>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e000      	b.n	80078bc <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_EEbT_+0x5c>
 80078ba:	2300      	movs	r3, #0
  }
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZNK11ArduinoJson10JsonObject3getIRS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f924 	bl	8007b1e <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS0_EENS_9Internals13JsonVariantAsIT0_E4typeET_>
 80078d6:	4603      	mov	r3, r0
  }
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEEbT_>:
  bool is_impl(TStringRef key) const {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fc ff57 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 80078f2:	4603      	mov	r3, r0
 80078f4:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fa fbcf 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80078fe:	4603      	mov	r3, r0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	f107 020c 	add.w	r2, r7, #12
 8007906:	f107 0308 	add.w	r3, r7, #8
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7fa fbb1 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d010      	beq.n	800793a <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEEbT_+0x5a>
 8007918:	f107 0308 	add.w	r3, r7, #8
 800791c:	4618      	mov	r0, r3
 800791e:	f7fa fbcc 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8007922:	4603      	mov	r3, r0
 8007924:	3308      	adds	r3, #8
 8007926:	4618      	mov	r0, r3
 8007928:	f7fd f9d8 	bl	8004cdc <_ZNK11ArduinoJson11JsonVariant2isIfEENS_9Internals8EnableIfIXsrNS2_15IsFloatingPointIT_EE5valueEbE4typeEv>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	bf14      	ite	ne
 8007932:	2301      	movne	r3, #1
 8007934:	2300      	moveq	r3, #0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	e000      	b.n	800793c <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfEEbT_+0x5c>
 800793a:	2300      	movs	r3, #0
  }
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEEbT_>:
  bool is_impl(TStringRef key) const {
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fc ff25 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8007956:	4603      	mov	r3, r0
 8007958:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fa fb9d 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8007962:	4603      	mov	r3, r0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	f107 020c 	add.w	r2, r7, #12
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f7fa fb7f 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEEbT_+0x5a>
 800797c:	f107 0308 	add.w	r3, r7, #8
 8007980:	4618      	mov	r0, r3
 8007982:	f7fa fb9a 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8007986:	4603      	mov	r3, r0
 8007988:	3308      	adds	r3, #8
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f8f6 	bl	8007b7c <_ZNK11ArduinoJson11JsonVariant2isIlEENS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueEbE4typeEv>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e000      	b.n	80079a0 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEElEEbT_+0x5c>
 800799e:	2300      	movs	r3, #0
  }
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNK11ArduinoJson11JsonVariant2asIlEEKNS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueES5_E4typeEv>:
  as() const {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
    return variantAsInteger<T>();
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8ef 	bl	8007b94 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v>
 80079b6:	4603      	mov	r3, r0
  }
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <_ZN11ArduinoJson9Internals18JsonVariantDefaultIlE3getEv>:
  static T get() {
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
    return T();
 80079c4:	2300      	movs	r3, #0
  }
 80079c6:	4618      	mov	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEbT_>:
  bool is_impl(TStringRef key) const {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fc fedf 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 80079e2:	4603      	mov	r3, r0
 80079e4:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fa fb57 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 80079ee:	4603      	mov	r3, r0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	f107 020c 	add.w	r2, r7, #12
 80079f6:	f107 0308 	add.w	r3, r7, #8
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fa fb39 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d010      	beq.n	8007a2a <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEbT_+0x5a>
 8007a08:	f107 0308 	add.w	r3, r7, #8
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fa fb54 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8007a12:	4603      	mov	r3, r0
 8007a14:	3308      	adds	r3, #8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd f91c 	bl	8004c54 <_ZNK11ArduinoJson11JsonVariant2isImEENS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueEbE4typeEv>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	e000      	b.n	8007a2c <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEbT_+0x5c>
 8007a2a:	2300      	movs	r3, #0
  }
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b089      	sub	sp, #36	; 0x24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 8007a40:	68b8      	ldr	r0, [r7, #8]
 8007a42:	f7fd f99d 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0x1c>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e056      	b.n	8007afe <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7fd f82d 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd f9b3 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8007a64:	4603      	mov	r3, r0
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	f107 0214 	add.w	r2, r7, #20
 8007a6c:	f107 0310 	add.w	r3, r7, #16
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd f995 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02f      	beq.n	8007ade <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fd f9b1 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 8007a86:	4603      	mov	r3, r0
 8007a88:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd f99c 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8007a92:	4603      	mov	r3, r0
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	f107 0218 	add.w	r2, r7, #24
 8007a9a:	f107 0310 	add.w	r3, r7, #16
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd f97e 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0x7c>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e026      	b.n	8007afe <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681c      	ldr	r4, [r3, #0]
 8007ab4:	f107 0310 	add.w	r3, r7, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd f9c7 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f7fd f9ce 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 8007aca:	4603      	mov	r3, r0
 8007acc:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
 8007ad0:	f083 0301 	eor.w	r3, r3, #1
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0xaa>
 8007ada:	2300      	movs	r3, #0
 8007adc:	e00f      	b.n	8007afe <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_EEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681c      	ldr	r4, [r3, #0]
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd f9b0 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 8007aec:	4603      	mov	r3, r0
 8007aee:	3308      	adds	r3, #8
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7ff fe8b 	bl	8007810 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_10JsonObjectEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_>
 8007afa:	4603      	mov	r3, r0
 8007afc:	bf00      	nop
  }
 8007afe:	4618      	mov	r0, r3
 8007b00:	3724      	adds	r7, #36	; 0x24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd90      	pop	{r4, r7, pc}

08007b06 <_ZNK11ArduinoJson11JsonVariant2isINS_10JsonObjectEEENS_9Internals8EnableIfIXsrNS3_6IsSameINS3_11RemoveConstINS3_15RemoveReferenceIT_E4typeEE4typeES2_EE5valueEbE4typeEv>:
  is() const {
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
    return variantIsObject();
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fe ff7a 	bl	8006a08 <_ZNK11ArduinoJson11JsonVariant15variantIsObjectEv>
 8007b14:	4603      	mov	r3, r0
  }
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS0_EENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fc fe38 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8007b30:	4603      	mov	r3, r0
 8007b32:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fa fab0 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	f107 020c 	add.w	r2, r7, #12
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	4611      	mov	r1, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fa fa92 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS0_EENS_9Internals13JsonVariantAsIT0_E4typeET_+0x50>
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fa faad 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8007b60:	4603      	mov	r3, r0
 8007b62:	3308      	adds	r3, #8
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f84d 	bl	8007c04 <_ZNK11ArduinoJson11JsonVariant2asIRNS_10JsonObjectEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_15RemoveReferenceIT_E4typeES2_EE5valueES3_E4typeEv>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	e002      	b.n	8007b74 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS0_EENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
                       : Internals::JsonVariantDefault<TValue>::get();
 8007b6e:	f7fe ff97 	bl	8006aa0 <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_10JsonObjectEE3getEv>
 8007b72:	4603      	mov	r3, r0
  }
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <_ZNK11ArduinoJson11JsonVariant2isIlEENS_9Internals8EnableIfIXsrNS2_10IsIntegralIT_EE5valueEbE4typeEv>:
  typename Internals::EnableIf<Internals::IsIntegral<T>::value, bool>::type is()
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
    return variantIsInteger();
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7f9 fe06 	bl	8001796 <_ZNK11ArduinoJson11JsonVariant16variantIsIntegerEv>
 8007b8a:	4603      	mov	r3, r0
  }
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v>:
inline T JsonVariant::variantAsInteger() const {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  switch (_type) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	d823      	bhi.n	8007bec <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x58>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x18>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bdf 	.word	0x08007bdf
 8007bb4:	08007bdf 	.word	0x08007bdf
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bc9 	.word	0x08007bc9
 8007bc0:	08007bd3 	.word	0x08007bd3
      return 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e019      	b.n	8007bfc <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x68>
      return T(_content.asInteger);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	e014      	b.n	8007bfc <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x68>
      return T(~_content.asInteger + 1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	425b      	negs	r3, r3
 8007bdc:	e00e      	b.n	8007bfc <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x68>
      return parseInteger<T>(_content.asString);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f81a 	bl	8007c1c <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc>
 8007be8:	4603      	mov	r3, r0
 8007bea:	e007      	b.n	8007bfc <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIlEET_v+0x68>
      return T(_content.asFloat);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f7f8 ff6d 	bl	8000ad4 <__aeabi_d2iz>
 8007bfa:	4603      	mov	r3, r0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <_ZNK11ArduinoJson11JsonVariant2asIRNS_10JsonObjectEEENS_9Internals8EnableIfIXsrNS4_6IsSameINS4_15RemoveReferenceIT_E4typeES2_EE5valueES3_E4typeEv>:
  as() const {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
    return variantAsObject();
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7fe ff85 	bl	8006b1c <_ZNK11ArduinoJson11JsonVariant15variantAsObjectEv>
 8007c12:	4603      	mov	r3, r0
  }
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc>:
T parseInteger(const char *s) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  if (!s) return 0;  // NULL
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x12>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e038      	b.n	8007ca0 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x84>
  if (*s == 't') return 1;  // "true"
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b74      	cmp	r3, #116	; 0x74
 8007c34:	d101      	bne.n	8007c3a <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x1e>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e032      	b.n	8007ca0 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x84>
  T result = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  bool negative_result = false;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	72fb      	strb	r3, [r7, #11]
  switch (*s) {
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b2b      	cmp	r3, #43	; 0x2b
 8007c48:	d007      	beq.n	8007c5a <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x3e>
 8007c4a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c4c:	d118      	bne.n	8007c80 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x64>
      negative_result = true;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
      s++;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3301      	adds	r3, #1
 8007c56:	607b      	str	r3, [r7, #4]
      break;
 8007c58:	e003      	b.n	8007c62 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x46>
      s++;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	607b      	str	r3, [r7, #4]
      break;
 8007c60:	bf00      	nop
  while (isdigit(*s)) {
 8007c62:	e00d      	b.n	8007c80 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x64>
    result = T(result * 10 + T(*s - '0'));
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	3b30      	subs	r3, #48	; 0x30
 8007c76:	4413      	add	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
    s++;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	607b      	str	r3, [r7, #4]
  while (isdigit(*s)) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f9 fc7c 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e9      	bne.n	8007c64 <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x48>
  return negative_result ? T(~result + 1) : result;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x80>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	425b      	negs	r3, r3
 8007c9a:	e000      	b.n	8007c9e <_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc+0x82>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	bf00      	nop
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <_Z41__static_initialization_and_destruction_0ii>:



} // namespace ps
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b08c      	sub	sp, #48	; 0x30
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	f040 80aa 	bne.w	8007e0e <_Z41__static_initialization_and_destruction_0ii+0x166>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	f040 80a4 	bne.w	8007e0e <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 8007cc6:	4c61      	ldr	r4, [pc, #388]	; (8007e4c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8007cc8:	4625      	mov	r5, r4
 8007cca:	f107 030c 	add.w	r3, r7, #12
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f016 fbd1 	bl	801e476 <_ZNSaIcEC1Ev>
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	461a      	mov	r2, r3
 8007cda:	495d      	ldr	r1, [pc, #372]	; (8007e50 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f016 fe71 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f016 fbc6 	bl	801e478 <_ZNSaIcED1Ev>
 8007cec:	3418      	adds	r4, #24
 8007cee:	f107 0310 	add.w	r3, r7, #16
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f016 fbbf 	bl	801e476 <_ZNSaIcEC1Ev>
 8007cf8:	f107 0310 	add.w	r3, r7, #16
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4955      	ldr	r1, [pc, #340]	; (8007e54 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8007d00:	4620      	mov	r0, r4
 8007d02:	f016 fe5f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f016 fbb4 	bl	801e478 <_ZNSaIcED1Ev>
 8007d10:	3418      	adds	r4, #24
 8007d12:	f107 0314 	add.w	r3, r7, #20
 8007d16:	4618      	mov	r0, r3
 8007d18:	f016 fbad 	bl	801e476 <_ZNSaIcEC1Ev>
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	461a      	mov	r2, r3
 8007d22:	494d      	ldr	r1, [pc, #308]	; (8007e58 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8007d24:	4620      	mov	r0, r4
 8007d26:	f016 fe4d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f016 fba2 	bl	801e478 <_ZNSaIcED1Ev>
 8007d34:	3418      	adds	r4, #24
 8007d36:	f107 0318 	add.w	r3, r7, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f016 fb9b 	bl	801e476 <_ZNSaIcEC1Ev>
 8007d40:	f107 0318 	add.w	r3, r7, #24
 8007d44:	461a      	mov	r2, r3
 8007d46:	4945      	ldr	r1, [pc, #276]	; (8007e5c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f016 fe3b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d4e:	f107 0318 	add.w	r3, r7, #24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f016 fb90 	bl	801e478 <_ZNSaIcED1Ev>
    };
 8007d58:	4c41      	ldr	r4, [pc, #260]	; (8007e60 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8007d5a:	4625      	mov	r5, r4
 8007d5c:	f107 031c 	add.w	r3, r7, #28
 8007d60:	4618      	mov	r0, r3
 8007d62:	f016 fb88 	bl	801e476 <_ZNSaIcEC1Ev>
 8007d66:	f107 031c 	add.w	r3, r7, #28
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	493d      	ldr	r1, [pc, #244]	; (8007e64 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f016 fe28 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f016 fb7d 	bl	801e478 <_ZNSaIcED1Ev>
 8007d7e:	3418      	adds	r4, #24
 8007d80:	f107 0320 	add.w	r3, r7, #32
 8007d84:	4618      	mov	r0, r3
 8007d86:	f016 fb76 	bl	801e476 <_ZNSaIcEC1Ev>
 8007d8a:	f107 0320 	add.w	r3, r7, #32
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4935      	ldr	r1, [pc, #212]	; (8007e68 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8007d92:	4620      	mov	r0, r4
 8007d94:	f016 fe16 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007d98:	f107 0320 	add.w	r3, r7, #32
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f016 fb6b 	bl	801e478 <_ZNSaIcED1Ev>
 8007da2:	3418      	adds	r4, #24
 8007da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da8:	4618      	mov	r0, r3
 8007daa:	f016 fb64 	bl	801e476 <_ZNSaIcEC1Ev>
 8007dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db2:	461a      	mov	r2, r3
 8007db4:	492d      	ldr	r1, [pc, #180]	; (8007e6c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8007db6:	4620      	mov	r0, r4
 8007db8:	f016 fe04 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f016 fb59 	bl	801e478 <_ZNSaIcED1Ev>
 8007dc6:	3418      	adds	r4, #24
 8007dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f016 fb52 	bl	801e476 <_ZNSaIcEC1Ev>
 8007dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4925      	ldr	r1, [pc, #148]	; (8007e70 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f016 fdf2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007de4:	4618      	mov	r0, r3
 8007de6:	f016 fb47 	bl	801e478 <_ZNSaIcED1Ev>
 8007dea:	3418      	adds	r4, #24
 8007dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007df0:	4618      	mov	r0, r3
 8007df2:	f016 fb40 	bl	801e476 <_ZNSaIcEC1Ev>
 8007df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	491d      	ldr	r1, [pc, #116]	; (8007e74 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f016 fde0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f016 fb35 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d116      	bne.n	8007e42 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d111      	bne.n	8007e42 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8007e1e:	4c16      	ldr	r4, [pc, #88]	; (8007e78 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8007e22:	429c      	cmp	r4, r3
 8007e24:	d004      	beq.n	8007e30 <_Z41__static_initialization_and_destruction_0ii+0x188>
 8007e26:	3c18      	subs	r4, #24
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f016 fc24 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e2e:	e7f7      	b.n	8007e20 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 8007e30:	4c12      	ldr	r4, [pc, #72]	; (8007e7c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	d004      	beq.n	8007e42 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8007e38:	3c18      	subs	r4, #24
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f016 fc1b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e40:	e7f7      	b.n	8007e32 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8007e42:	bf00      	nop
 8007e44:	3730      	adds	r7, #48	; 0x30
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200080d8 	.word	0x200080d8
 8007e50:	08021020 	.word	0x08021020
 8007e54:	0802102c 	.word	0x0802102c
 8007e58:	08021038 	.word	0x08021038
 8007e5c:	08021044 	.word	0x08021044
 8007e60:	20008138 	.word	0x20008138
 8007e64:	08021050 	.word	0x08021050
 8007e68:	08021060 	.word	0x08021060
 8007e6c:	08021070 	.word	0x08021070
 8007e70:	08021080 	.word	0x08021080
 8007e74:	08021090 	.word	0x08021090
 8007e78:	200081b0 	.word	0x200081b0
 8007e7c:	20008138 	.word	0x20008138

08007e80 <_GLOBAL__sub_I__ZN2ps8BaseTestC2Ev>:
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f7ff ff0d 	bl	8007ca8 <_Z41__static_initialization_and_destruction_0ii>
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <_GLOBAL__sub_D__ZN2ps8BaseTestC2Ev>:
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f7ff ff05 	bl	8007ca8 <_Z41__static_initialization_and_destruction_0ii>
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_ZN2ps12ConstantTestC1Ev>:
using namespace std;

namespace ps
{

    ConstantTest::ConstantTest() 
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b08b      	sub	sp, #44	; 0x2c
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fe4a 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <_ZN2ps12ConstantTestC1Ev+0x88>)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	a319      	add	r3, pc, #100	; (adr r3, 8007f20 <_ZN2ps12ConstantTestC1Ev+0x80>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
    { 
        setName("constant");
 8007eca:	687c      	ldr	r4, [r7, #4]
 8007ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f016 fad0 	bl	801e476 <_ZNSaIcEC1Ev>
 8007ed6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007eda:	f107 030c 	add.w	r3, r7, #12
 8007ede:	4913      	ldr	r1, [pc, #76]	; (8007f2c <_ZN2ps12ConstantTestC1Ev+0x8c>)
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f016 fd6f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4619      	mov	r1, r3
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7fe ff6b 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007ef2:	f107 030c 	add.w	r3, r7, #12
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f016 fbbd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f00:	4618      	mov	r0, r3
 8007f02:	f016 fab9 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff f811 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    } 
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4618      	mov	r0, r3
 8007f14:	372c      	adds	r7, #44	; 0x2c
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd90      	pop	{r4, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w
 8007f20:	004c4b40 	.word	0x004c4b40
 8007f24:	00000000 	.word	0x00000000
 8007f28:	080222b8 	.word	0x080222b8
 8007f2c:	080210b0 	.word	0x080210b0

08007f30 <_ZN2ps12ConstantTest11setDurationEy>:


    void ConstantTest::setDuration(uint64_t duration)
    {
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	e9c7 2300 	strd	r2, r3, [r7]
        duration_ = duration;
 8007f3c:	68f9      	ldr	r1, [r7, #12]
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    }
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <_ZNK2ps12ConstantTest11getDurationEv>:


    uint64_t ConstantTest::getDuration() const
    {
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
        return duration_;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    }
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <_ZN2ps12ConstantTest8setValueEf>:


    void ConstantTest::setValue(float value)
    {
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	ed87 0a00 	vstr	s0, [r7]
        value_ = value;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <_ZN2ps12ConstantTest8getValueEv>:


    float ConstantTest::getValue()
    {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
        return value_;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f98:	ee07 3a90 	vmov	s15, r3
    }
 8007f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <_ZNK2ps12ConstantTest8getValueEy>:


    float ConstantTest::getValue(uint64_t t) const 
    {
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	e9c7 2300 	strd	r2, r3, [r7]
        if (t < quietTime_)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc0:	4290      	cmp	r0, r2
 8007fc2:	eb71 0303 	sbcs.w	r3, r1, r3
 8007fc6:	d202      	bcs.n	8007fce <_ZNK2ps12ConstantTest8getValueEy+0x24>
        {
            return quietValue_;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	e001      	b.n	8007fd2 <_ZNK2ps12ConstantTest8getValueEy+0x28>
        }
        else
        {
            return value_;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        }
    }
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <_ZNK2ps12ConstantTest6isDoneEy>:


    bool ConstantTest::isDone(uint64_t t) const 
    {
 8007fe4:	b4b0      	push	{r4, r5, r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	e9c7 2300 	strd	r2, r3, [r7]
        return (t >= (duration_ + quietTime_));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007ffc:	1884      	adds	r4, r0, r2
 8007ffe:	eb41 0503 	adc.w	r5, r1, r3
 8008002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008006:	42a2      	cmp	r2, r4
 8008008:	41ab      	sbcs	r3, r5
 800800a:	bf2c      	ite	cs
 800800c:	2301      	movcs	r3, #1
 800800e:	2300      	movcc	r3, #0
 8008010:	b2db      	uxtb	r3, r3
    }
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	bcb0      	pop	{r4, r5, r7}
 800801a:	4770      	bx	lr

0800801c <_ZNK2ps12ConstantTest11getDoneTimeEv>:


    uint64_t ConstantTest::getDoneTime() const
    {
 800801c:	b4b0      	push	{r4, r5, r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
        return duration_ + quietTime_;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008030:	1884      	adds	r4, r0, r2
 8008032:	eb41 0503 	adc.w	r5, r1, r3
 8008036:	4622      	mov	r2, r4
 8008038:	462b      	mov	r3, r5
    }
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bcb0      	pop	{r4, r5, r7}
 8008044:	4770      	bx	lr

08008046 <_ZNK2ps12ConstantTest11getMaxValueEv>:


    float ConstantTest::getMaxValue() const 
    {
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
        return max(value_,quietValue_);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3310      	adds	r3, #16
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7fb f896 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 8008060:	4603      	mov	r3, r0
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	ee07 3a90 	vmov	s15, r3
    }
 8008068:	eeb0 0a67 	vmov.f32	s0, s15
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <_ZNK2ps12ConstantTest11getMinValueEv>:


    float ConstantTest::getMinValue() const 
    {
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
        return min(value_,quietValue_);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3310      	adds	r3, #16
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7fb f899 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800808c:	4603      	mov	r3, r0
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	ee07 3a90 	vmov	s15, r3
    }
 8008094:	eeb0 0a67 	vmov.f32	s0, s15
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <_ZN2ps12ConstantTest8getParamERN11ArduinoJson10JsonObjectE>:


    void ConstantTest::getParam(JsonObject &jsonDat)
    {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08c      	sub	sp, #48	; 0x30
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
        BaseTest::getParam(jsonDat);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fed6 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>

        ReturnStatus status;
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f9 f981 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f107 020c 	add.w	r2, r7, #12
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe ff44 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 80080cc:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (status.success)
 80080ce:	7b3b      	ldrb	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d016      	beq.n	8008102 <_ZN2ps12ConstantTest8getParamERN11ArduinoJson10JsonObjectE+0x62>
        {
            jsonDatPrm.set(ValueKey, value_);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3348      	adds	r3, #72	; 0x48
 80080d8:	461a      	mov	r2, r3
 80080da:	490e      	ldr	r1, [pc, #56]	; (8008114 <_ZN2ps12ConstantTest8getParamERN11ArduinoJson10JsonObjectE+0x74>)
 80080dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080de:	f7ff f994 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(DurationKey, convertUsToMs(duration_));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80080e8:	4610      	mov	r0, r2
 80080ea:	4619      	mov	r1, r3
 80080ec:	f7f9 fb95 	bl	800181a <_ZN2ps13convertUsToMsEy>
 80080f0:	4603      	mov	r3, r0
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080f8:	461a      	mov	r2, r3
 80080fa:	4907      	ldr	r1, [pc, #28]	; (8008118 <_ZN2ps12ConstantTest8getParamERN11ArduinoJson10JsonObjectE+0x78>)
 80080fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080fe:	f7ff f994 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        }
    }
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4618      	mov	r0, r3
 8008108:	f7fa fb98 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 800810c:	3730      	adds	r7, #48	; 0x30
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20008504 	.word	0x20008504
 8008118:	200084ec 	.word	0x200084ec

0800811c <_ZN2ps12ConstantTest8setParamERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus ConstantTest::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7f9 f948 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	f107 0014 	add.w	r0, r7, #20
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f7fe febd 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 800813e:	f107 0314 	add.w	r3, r7, #20
 8008142:	4619      	mov	r1, r3
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7fa fbe1 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 800814a:	f107 0314 	add.w	r3, r7, #20
 800814e:	4618      	mov	r0, r3
 8008150:	f7fa fb74 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>

        // Extract parameter JsonObjects
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fefa 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 8008160:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f083 0301 	eor.w	r3, r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11a      	bne.n	80081a6 <_ZN2ps12ConstantTest8setParamERN11ArduinoJson10JsonObjectES3_+0x8a>
        {
            return status;
        }

        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe feec 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800817c:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f083 0301 	eor.w	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10e      	bne.n	80081aa <_ZN2ps12ConstantTest8setParamERN11ArduinoJson10JsonObjectES3_+0x8e>
        {
            return status;
        }

        // Set parameters
        setDurationFromJson(jsonMsgPrm,jsonDatPrm,status);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008190:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008192:	68b8      	ldr	r0, [r7, #8]
 8008194:	f000 f80e 	bl	80081b4 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800819e:	68b8      	ldr	r0, [r7, #8]
 80081a0:	f000 f8b2 	bl	8008308 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>

        return status;
 80081a4:	e002      	b.n	80081ac <_ZN2ps12ConstantTest8setParamERN11ArduinoJson10JsonObjectES3_+0x90>
            return status;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <_ZN2ps12ConstantTest8setParamERN11ArduinoJson10JsonObjectES3_+0x90>
            return status;
 80081aa:	bf00      	nop
    }
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	3738      	adds	r7, #56	; 0x38
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    // Protected Methods
    // ----------------------------------------------------------------------------------

    void ConstantTest::setDurationFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b09e      	sub	sp, #120	; 0x78
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(ValueKey))
 80081c2:	494f      	ldr	r1, [pc, #316]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f7fc f9ac 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8092 	beq.w	80082f6 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[ValueKey].is<float>())
 80081d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081d6:	4a4a      	ldr	r2, [pc, #296]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fc f9d7 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fa58 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80081ec:	4603      	mov	r3, r0
 80081ee:	bf00      	nop
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d019      	beq.n	8008228 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setValue(jsonMsgPrm.get<float>(ValueKey));
 80081f4:	4942      	ldr	r1, [pc, #264]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80081f6:	68b8      	ldr	r0, [r7, #8]
 80081f8:	f7ff f927 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80081fc:	eef0 7a40 	vmov.f32	s15, s0
 8008200:	eeb0 0a67 	vmov.f32	s0, s15
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff feb2 	bl	8007f6e <_ZN2ps12ConstantTest8setValueEf>
                jsonDatPrm.set(ValueKey,getValue());
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff febe 	bl	8007f8c <_ZN2ps12ConstantTest8getValueEv>
 8008210:	eef0 7a40 	vmov.f32	s15, s0
 8008214:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800821c:	461a      	mov	r2, r3
 800821e:	4938      	ldr	r1, [pc, #224]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff f8f2 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = ValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 8008226:	e066      	b.n	80082f6 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[ValueKey].is<long>())
 8008228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800822c:	4a34      	ldr	r2, [pc, #208]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fc f9ac 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fa6d 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8008242:	4603      	mov	r3, r0
 8008244:	bf00      	nop
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01b      	beq.n	8008282 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setValue(float(jsonMsgPrm.get<long>(ValueKey)));
 800824a:	492d      	ldr	r1, [pc, #180]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800824c:	68b8      	ldr	r0, [r7, #8]
 800824e:	f7ff f90c 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8008252:	ee07 0a90 	vmov	s15, r0
 8008256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800825a:	eeb0 0a67 	vmov.f32	s0, s15
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fe85 	bl	8007f6e <_ZN2ps12ConstantTest8setValueEf>
                jsonDatPrm.set(ValueKey,getValue());
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fe91 	bl	8007f8c <_ZN2ps12ConstantTest8getValueEv>
 800826a:	eef0 7a40 	vmov.f32	s15, s0
 800826e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8008272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008276:	461a      	mov	r2, r3
 8008278:	4921      	ldr	r1, [pc, #132]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff f8c5 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 8008280:	e039      	b.n	80082f6 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]
                string errorMsg = ValueKey + string(" not a float");
 8008288:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800828c:	4618      	mov	r0, r3
 800828e:	f016 f8f2 	bl	801e476 <_ZNSaIcEC1Ev>
 8008292:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800829a:	491a      	ldr	r1, [pc, #104]	; (8008304 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 800829c:	4618      	mov	r0, r3
 800829e:	f016 fb91 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082a2:	f107 0314 	add.w	r3, r7, #20
 80082a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80082aa:	4915      	ldr	r1, [pc, #84]	; (8008300 <_ZN2ps12ConstantTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fc f956 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80082b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082b6:	4618      	mov	r0, r3
 80082b8:	f016 f9dd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80082c0:	4618      	mov	r0, r3
 80082c2:	f016 f8d9 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 80082c6:	f107 0214 	add.w	r2, r7, #20
 80082ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f016 fb43 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80082d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80082da:	4619      	mov	r1, r3
 80082dc:	6838      	ldr	r0, [r7, #0]
 80082de:	f006 fc67 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80082e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80082e6:	4618      	mov	r0, r3
 80082e8:	f016 f9c5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4618      	mov	r0, r3
 80082f2:	f016 f9c0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80082f6:	bf00      	nop
 80082f8:	3778      	adds	r7, #120	; 0x78
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20008504 	.word	0x20008504
 8008304:	080210bc 	.word	0x080210bc

08008308 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void ConstantTest::setValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 8008308:	b580      	push	{r7, lr}
 800830a:	b09a      	sub	sp, #104	; 0x68
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(DurationKey))
 8008316:	493b      	ldr	r1, [pc, #236]	; (8008404 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f7fc f902 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d06a      	beq.n	80083fa <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf2>
        {
            if (jsonMsgPrm[DurationKey].is<unsigned long>())
 8008324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008328:	4a36      	ldr	r2, [pc, #216]	; (8008404 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800832a:	68b9      	ldr	r1, [r7, #8]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc f92e 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fa2c 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800833e:	4603      	mov	r3, r0
 8008340:	bf00      	nop
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01f      	beq.n	8008386 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x7e>
            {
                setDuration(convertMsToUs(jsonMsgPrm.get<unsigned long>(DurationKey)));
 8008346:	492f      	ldr	r1, [pc, #188]	; (8008404 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	f7ff f89c 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800834e:	4603      	mov	r3, r0
 8008350:	4618      	mov	r0, r3
 8008352:	f7f9 fa76 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fde8 	bl	8007f30 <_ZN2ps12ConstantTest11setDurationEy>
                jsonDatPrm.set(DurationKey,convertUsToMs(getDuration()));
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fdf6 	bl	8007f52 <_ZNK2ps12ConstantTest11getDurationEv>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f7f9 fa54 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8008372:	4603      	mov	r3, r0
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
 8008376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800837a:	461a      	mov	r2, r3
 800837c:	4921      	ldr	r1, [pc, #132]	; (8008404 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff f853 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = DurationKey + string(" not uint32");
                status.appendToMessage(errorMsg);
            }
        }
    }
 8008384:	e039      	b.n	80083fa <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf2>
                status.success = false;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
                string errorMsg = DurationKey + string(" not uint32");
 800838c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008390:	4618      	mov	r0, r3
 8008392:	f016 f870 	bl	801e476 <_ZNSaIcEC1Ev>
 8008396:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800839a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800839e:	491a      	ldr	r1, [pc, #104]	; (8008408 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x100>)
 80083a0:	4618      	mov	r0, r3
 80083a2:	f016 fb0f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80083a6:	f107 0310 	add.w	r3, r7, #16
 80083aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80083ae:	4915      	ldr	r1, [pc, #84]	; (8008404 <_ZN2ps12ConstantTest16setValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fc f8d4 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80083b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083ba:	4618      	mov	r0, r3
 80083bc:	f016 f95b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083c4:	4618      	mov	r0, r3
 80083c6:	f016 f857 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 80083ca:	f107 0210 	add.w	r2, r7, #16
 80083ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f016 fac1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80083da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083de:	4619      	mov	r1, r3
 80083e0:	6838      	ldr	r0, [r7, #0]
 80083e2:	f006 fbe5 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80083e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083ea:	4618      	mov	r0, r3
 80083ec:	f016 f943 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	4618      	mov	r0, r3
 80083f6:	f016 f93e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80083fa:	bf00      	nop
 80083fc:	3768      	adds	r7, #104	; 0x68
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200084ec 	.word	0x200084ec
 8008408:	080210cc 	.word	0x080210cc

0800840c <_Z41__static_initialization_and_destruction_0ii>:


} // namespace ps
 800840c:	b5b0      	push	{r4, r5, r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b01      	cmp	r3, #1
 800841a:	f040 80aa 	bne.w	8008572 <_Z41__static_initialization_and_destruction_0ii+0x166>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008424:	4293      	cmp	r3, r2
 8008426:	f040 80a4 	bne.w	8008572 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800842a:	4c61      	ldr	r4, [pc, #388]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800842c:	4625      	mov	r5, r4
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	4618      	mov	r0, r3
 8008434:	f016 f81f 	bl	801e476 <_ZNSaIcEC1Ev>
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	461a      	mov	r2, r3
 800843e:	495d      	ldr	r1, [pc, #372]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8008440:	4628      	mov	r0, r5
 8008442:	f016 fabf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008446:	f107 030c 	add.w	r3, r7, #12
 800844a:	4618      	mov	r0, r3
 800844c:	f016 f814 	bl	801e478 <_ZNSaIcED1Ev>
 8008450:	3418      	adds	r4, #24
 8008452:	f107 0310 	add.w	r3, r7, #16
 8008456:	4618      	mov	r0, r3
 8008458:	f016 f80d 	bl	801e476 <_ZNSaIcEC1Ev>
 800845c:	f107 0310 	add.w	r3, r7, #16
 8008460:	461a      	mov	r2, r3
 8008462:	4955      	ldr	r1, [pc, #340]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8008464:	4620      	mov	r0, r4
 8008466:	f016 faad 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800846a:	f107 0310 	add.w	r3, r7, #16
 800846e:	4618      	mov	r0, r3
 8008470:	f016 f802 	bl	801e478 <_ZNSaIcED1Ev>
 8008474:	3418      	adds	r4, #24
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	4618      	mov	r0, r3
 800847c:	f015 fffb 	bl	801e476 <_ZNSaIcEC1Ev>
 8008480:	f107 0314 	add.w	r3, r7, #20
 8008484:	461a      	mov	r2, r3
 8008486:	494d      	ldr	r1, [pc, #308]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8008488:	4620      	mov	r0, r4
 800848a:	f016 fa9b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800848e:	f107 0314 	add.w	r3, r7, #20
 8008492:	4618      	mov	r0, r3
 8008494:	f015 fff0 	bl	801e478 <_ZNSaIcED1Ev>
 8008498:	3418      	adds	r4, #24
 800849a:	f107 0318 	add.w	r3, r7, #24
 800849e:	4618      	mov	r0, r3
 80084a0:	f015 ffe9 	bl	801e476 <_ZNSaIcEC1Ev>
 80084a4:	f107 0318 	add.w	r3, r7, #24
 80084a8:	461a      	mov	r2, r3
 80084aa:	4945      	ldr	r1, [pc, #276]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80084ac:	4620      	mov	r0, r4
 80084ae:	f016 fa89 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084b2:	f107 0318 	add.w	r3, r7, #24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f015 ffde 	bl	801e478 <_ZNSaIcED1Ev>
    };
 80084bc:	4c41      	ldr	r4, [pc, #260]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80084be:	4625      	mov	r5, r4
 80084c0:	f107 031c 	add.w	r3, r7, #28
 80084c4:	4618      	mov	r0, r3
 80084c6:	f015 ffd6 	bl	801e476 <_ZNSaIcEC1Ev>
 80084ca:	f107 031c 	add.w	r3, r7, #28
 80084ce:	461a      	mov	r2, r3
 80084d0:	493d      	ldr	r1, [pc, #244]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80084d2:	4628      	mov	r0, r5
 80084d4:	f016 fa76 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084d8:	f107 031c 	add.w	r3, r7, #28
 80084dc:	4618      	mov	r0, r3
 80084de:	f015 ffcb 	bl	801e478 <_ZNSaIcED1Ev>
 80084e2:	3418      	adds	r4, #24
 80084e4:	f107 0320 	add.w	r3, r7, #32
 80084e8:	4618      	mov	r0, r3
 80084ea:	f015 ffc4 	bl	801e476 <_ZNSaIcEC1Ev>
 80084ee:	f107 0320 	add.w	r3, r7, #32
 80084f2:	461a      	mov	r2, r3
 80084f4:	4935      	ldr	r1, [pc, #212]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80084f6:	4620      	mov	r0, r4
 80084f8:	f016 fa64 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084fc:	f107 0320 	add.w	r3, r7, #32
 8008500:	4618      	mov	r0, r3
 8008502:	f015 ffb9 	bl	801e478 <_ZNSaIcED1Ev>
 8008506:	3418      	adds	r4, #24
 8008508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800850c:	4618      	mov	r0, r3
 800850e:	f015 ffb2 	bl	801e476 <_ZNSaIcEC1Ev>
 8008512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008516:	461a      	mov	r2, r3
 8008518:	492d      	ldr	r1, [pc, #180]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800851a:	4620      	mov	r0, r4
 800851c:	f016 fa52 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008524:	4618      	mov	r0, r3
 8008526:	f015 ffa7 	bl	801e478 <_ZNSaIcED1Ev>
 800852a:	3418      	adds	r4, #24
 800852c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008530:	4618      	mov	r0, r3
 8008532:	f015 ffa0 	bl	801e476 <_ZNSaIcEC1Ev>
 8008536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800853a:	461a      	mov	r2, r3
 800853c:	4925      	ldr	r1, [pc, #148]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800853e:	4620      	mov	r0, r4
 8008540:	f016 fa40 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008548:	4618      	mov	r0, r3
 800854a:	f015 ff95 	bl	801e478 <_ZNSaIcED1Ev>
 800854e:	3418      	adds	r4, #24
 8008550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008554:	4618      	mov	r0, r3
 8008556:	f015 ff8e 	bl	801e476 <_ZNSaIcEC1Ev>
 800855a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800855e:	461a      	mov	r2, r3
 8008560:	491d      	ldr	r1, [pc, #116]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8008562:	4620      	mov	r0, r4
 8008564:	f016 fa2e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800856c:	4618      	mov	r0, r3
 800856e:	f015 ff83 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d116      	bne.n	80085a6 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800857e:	4293      	cmp	r3, r2
 8008580:	d111      	bne.n	80085a6 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8008582:	4c16      	ldr	r4, [pc, #88]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8008584:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8008586:	429c      	cmp	r4, r3
 8008588:	d004      	beq.n	8008594 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800858a:	3c18      	subs	r4, #24
 800858c:	4620      	mov	r0, r4
 800858e:	f016 f872 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008592:	e7f7      	b.n	8008584 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 8008594:	4c12      	ldr	r4, [pc, #72]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8008598:	429c      	cmp	r4, r3
 800859a:	d004      	beq.n	80085a6 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800859c:	3c18      	subs	r4, #24
 800859e:	4620      	mov	r0, r4
 80085a0:	f016 f869 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80085a4:	e7f7      	b.n	8008596 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 80085a6:	bf00      	nop
 80085a8:	3730      	adds	r7, #48	; 0x30
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bdb0      	pop	{r4, r5, r7, pc}
 80085ae:	bf00      	nop
 80085b0:	200081bc 	.word	0x200081bc
 80085b4:	080210d8 	.word	0x080210d8
 80085b8:	080210e4 	.word	0x080210e4
 80085bc:	080210f0 	.word	0x080210f0
 80085c0:	080210fc 	.word	0x080210fc
 80085c4:	2000821c 	.word	0x2000821c
 80085c8:	08021108 	.word	0x08021108
 80085cc:	08021118 	.word	0x08021118
 80085d0:	08021128 	.word	0x08021128
 80085d4:	08021138 	.word	0x08021138
 80085d8:	08021148 	.word	0x08021148
 80085dc:	20008294 	.word	0x20008294
 80085e0:	2000821c 	.word	0x2000821c

080085e4 <_GLOBAL__sub_I__ZN2ps12ConstantTestC2Ev>:
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80085ec:	2001      	movs	r0, #1
 80085ee:	f7ff ff0d 	bl	800840c <_Z41__static_initialization_and_destruction_0ii>
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <_GLOBAL__sub_D__ZN2ps12ConstantTestC2Ev>:
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80085fc:	2000      	movs	r0, #0
 80085fe:	f7ff ff05 	bl	800840c <_Z41__static_initialization_and_destruction_0ii>
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZN2ps9VoltRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>:
            VoltRange(string name, float minValue, float maxValue, VoltGain voltGain, uint16_t maxInt)
 8008604:	b590      	push	{r4, r7, lr}
 8008606:	b08d      	sub	sp, #52	; 0x34
 8008608:	af00      	add	r7, sp, #0
 800860a:	6178      	str	r0, [r7, #20]
 800860c:	6139      	str	r1, [r7, #16]
 800860e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008612:	edc7 0a02 	vstr	s1, [r7, #8]
 8008616:	4611      	mov	r1, r2
 8008618:	461a      	mov	r2, r3
 800861a:	460b      	mov	r3, r1
 800861c:	71fb      	strb	r3, [r7, #7]
 800861e:	4613      	mov	r3, r2
 8008620:	80bb      	strh	r3, [r7, #4]
                : Range<VoltGain,uint16_t>(name, minValue, maxValue, voltGain, maxInt) {};
 8008622:	697c      	ldr	r4, [r7, #20]
 8008624:	f107 0318 	add.w	r3, r7, #24
 8008628:	6939      	ldr	r1, [r7, #16]
 800862a:	4618      	mov	r0, r3
 800862c:	f016 f996 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008630:	88bb      	ldrh	r3, [r7, #4]
 8008632:	79fa      	ldrb	r2, [r7, #7]
 8008634:	f107 0118 	add.w	r1, r7, #24
 8008638:	edd7 0a02 	vldr	s1, [r7, #8]
 800863c:	ed97 0a03 	vldr	s0, [r7, #12]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 f88b 	bl	800875c <_ZN2ps5RangeINS_8VoltGainEtEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffS1_t>
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	4618      	mov	r0, r3
 800864c:	f016 f813 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	4618      	mov	r0, r3
 8008654:	3734      	adds	r7, #52	; 0x34
 8008656:	46bd      	mov	sp, r7
 8008658:	bd90      	pop	{r4, r7, pc}

0800865a <_ZN2ps12VoltRangeDacC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>:
            VoltRangeDac(string name, float minValue, float maxValue, VoltGain voltGain, uint16_t maxInt)
 800865a:	b590      	push	{r4, r7, lr}
 800865c:	b08d      	sub	sp, #52	; 0x34
 800865e:	af00      	add	r7, sp, #0
 8008660:	6178      	str	r0, [r7, #20]
 8008662:	6139      	str	r1, [r7, #16]
 8008664:	ed87 0a03 	vstr	s0, [r7, #12]
 8008668:	edc7 0a02 	vstr	s1, [r7, #8]
 800866c:	4611      	mov	r1, r2
 800866e:	461a      	mov	r2, r3
 8008670:	460b      	mov	r3, r1
 8008672:	71fb      	strb	r3, [r7, #7]
 8008674:	4613      	mov	r3, r2
 8008676:	80bb      	strh	r3, [r7, #4]
                : VoltRange(name, minValue, maxValue, voltGain, maxInt) {};
 8008678:	697c      	ldr	r4, [r7, #20]
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	6939      	ldr	r1, [r7, #16]
 8008680:	4618      	mov	r0, r3
 8008682:	f016 f96b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008686:	88bb      	ldrh	r3, [r7, #4]
 8008688:	79fa      	ldrb	r2, [r7, #7]
 800868a:	f107 0118 	add.w	r1, r7, #24
 800868e:	edd7 0a02 	vldr	s1, [r7, #8]
 8008692:	ed97 0a03 	vldr	s0, [r7, #12]
 8008696:	4620      	mov	r0, r4
 8008698:	f7ff ffb4 	bl	8008604 <_ZN2ps9VoltRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 800869c:	f107 0318 	add.w	r3, r7, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f015 ffe8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	4618      	mov	r0, r3
 80086aa:	3734      	adds	r7, #52	; 0x34
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}

080086b0 <_ZN2ps12VoltRangeAdcC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>:

            VoltRangeAdc(string name, float minValue, float maxValue, VoltGain voltGain, uint16_t maxInt)
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b08d      	sub	sp, #52	; 0x34
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6178      	str	r0, [r7, #20]
 80086b8:	6139      	str	r1, [r7, #16]
 80086ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80086be:	edc7 0a02 	vstr	s1, [r7, #8]
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	460b      	mov	r3, r1
 80086c8:	71fb      	strb	r3, [r7, #7]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80bb      	strh	r3, [r7, #4]
                : VoltRange(name, minValue, maxValue, voltGain, maxInt) {};
 80086ce:	697c      	ldr	r4, [r7, #20]
 80086d0:	f107 0318 	add.w	r3, r7, #24
 80086d4:	6939      	ldr	r1, [r7, #16]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f016 f940 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80086dc:	88bb      	ldrh	r3, [r7, #4]
 80086de:	79fa      	ldrb	r2, [r7, #7]
 80086e0:	f107 0118 	add.w	r1, r7, #24
 80086e4:	edd7 0a02 	vldr	s1, [r7, #8]
 80086e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7ff ff89 	bl	8008604 <_ZN2ps9VoltRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 80086f2:	f107 0318 	add.w	r3, r7, #24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f015 ffbd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	4618      	mov	r0, r3
 8008700:	3734      	adds	r7, #52	; 0x34
 8008702:	46bd      	mov	sp, r7
 8008704:	bd90      	pop	{r4, r7, pc}

08008706 <_ZN2ps9CurrRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_12CurrGainPathEt>:

            CurrRange(string name, float minValue, float maxValue, CurrGainPath currGainPath, uint16_t maxInt)
 8008706:	b590      	push	{r4, r7, lr}
 8008708:	b08d      	sub	sp, #52	; 0x34
 800870a:	af00      	add	r7, sp, #0
 800870c:	6178      	str	r0, [r7, #20]
 800870e:	6139      	str	r1, [r7, #16]
 8008710:	ed87 0a03 	vstr	s0, [r7, #12]
 8008714:	edc7 0a02 	vstr	s1, [r7, #8]
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	460b      	mov	r3, r1
 800871e:	71fb      	strb	r3, [r7, #7]
 8008720:	4613      	mov	r3, r2
 8008722:	80bb      	strh	r3, [r7, #4]
                : Range<CurrGainPath,uint16_t>(name, minValue, maxValue, currGainPath, maxInt) {};
 8008724:	697c      	ldr	r4, [r7, #20]
 8008726:	f107 0318 	add.w	r3, r7, #24
 800872a:	6939      	ldr	r1, [r7, #16]
 800872c:	4618      	mov	r0, r3
 800872e:	f016 f915 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008732:	88bb      	ldrh	r3, [r7, #4]
 8008734:	79fa      	ldrb	r2, [r7, #7]
 8008736:	f107 0118 	add.w	r1, r7, #24
 800873a:	edd7 0a02 	vldr	s1, [r7, #8]
 800873e:	ed97 0a03 	vldr	s0, [r7, #12]
 8008742:	4620      	mov	r0, r4
 8008744:	f000 f830 	bl	80087a8 <_ZN2ps5RangeINS_12CurrGainPathEtEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffS1_t>
 8008748:	f107 0318 	add.w	r3, r7, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f015 ff92 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4618      	mov	r0, r3
 8008756:	3734      	adds	r7, #52	; 0x34
 8008758:	46bd      	mov	sp, r7
 800875a:	bd90      	pop	{r4, r7, pc}

0800875c <_ZN2ps5RangeINS_8VoltGainEtEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffS1_t>:
    Range<GainType,IntType>::Range(string name, float minValue, float maxValue, GainType gain, IntType maxInt)
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	6178      	str	r0, [r7, #20]
 8008764:	6139      	str	r1, [r7, #16]
 8008766:	ed87 0a03 	vstr	s0, [r7, #12]
 800876a:	edc7 0a02 	vstr	s1, [r7, #8]
 800876e:	4611      	mov	r1, r2
 8008770:	461a      	mov	r2, r3
 8008772:	460b      	mov	r3, r1
 8008774:	71fb      	strb	r3, [r7, #7]
 8008776:	4613      	mov	r3, r2
 8008778:	80bb      	strh	r3, [r7, #4]
        : name_(name), minValue_(minValue), maxValue_(maxValue), gain_(gain), maxInt_(maxInt)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	6939      	ldr	r1, [r7, #16]
 800877e:	4618      	mov	r0, r3
 8008780:	f016 f8ec 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	619a      	str	r2, [r3, #24]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	61da      	str	r2, [r3, #28]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	79fa      	ldrb	r2, [r7, #7]
 8008794:	f883 2020 	strb.w	r2, [r3, #32]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	88ba      	ldrh	r2, [r7, #4]
 800879c:	845a      	strh	r2, [r3, #34]	; 0x22
    {}
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN2ps5RangeINS_12CurrGainPathEtEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffS1_t>:
    Range<GainType,IntType>::Range(string name, float minValue, float maxValue, GainType gain, IntType maxInt)
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6178      	str	r0, [r7, #20]
 80087b0:	6139      	str	r1, [r7, #16]
 80087b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80087b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	460b      	mov	r3, r1
 80087c0:	71fb      	strb	r3, [r7, #7]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80bb      	strh	r3, [r7, #4]
        : name_(name), minValue_(minValue), maxValue_(maxValue), gain_(gain), maxInt_(maxInt)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	6939      	ldr	r1, [r7, #16]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f016 f8c6 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	619a      	str	r2, [r3, #24]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	61da      	str	r2, [r3, #28]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	79fa      	ldrb	r2, [r7, #7]
 80087e0:	f883 2020 	strb.w	r2, [r3, #32]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	88ba      	ldrh	r2, [r7, #4]
 80087e8:	845a      	strh	r2, [r3, #34]	; 0x22
    {}
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <_ZN5ArrayIN2ps12VoltRangeDacELj4EEC1IS1_Lj4EEERAT0__KT_>:
Array<T, MAX_SIZE>::Array(const U (&values)[N])
 80087f4:	b5b0      	push	{r4, r5, r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2403      	movs	r4, #3
 8008802:	461d      	mov	r5, r3
 8008804:	e004      	b.n	8008810 <_ZN5ArrayIN2ps12VoltRangeDacELj4EEC1IS1_Lj4EEERAT0__KT_+0x1c>
 8008806:	4628      	mov	r0, r5
 8008808:	f7fc fe65 	bl	80054d6 <_ZN2ps12VoltRangeDacC1Ev>
 800880c:	3524      	adds	r5, #36	; 0x24
 800880e:	3c01      	subs	r4, #1
 8008810:	2c00      	cmp	r4, #0
 8008812:	daf8      	bge.n	8008806 <_ZN5ArrayIN2ps12VoltRangeDacELj4EEC1IS1_Lj4EEERAT0__KT_+0x12>
  size_ = 0;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  fill(values);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f83f 	bl	80088a2 <_ZN5ArrayIN2ps12VoltRangeDacELj4EE4fillIS1_Lj4EEEvRAT0__KT_>
}
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bdb0      	pop	{r4, r5, r7, pc}

0800882e <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEC1IS1_Lj4EEERAT0__KT_>:
Array<T, MAX_SIZE>::Array(const U (&values)[N])
 800882e:	b5b0      	push	{r4, r5, r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2403      	movs	r4, #3
 800883c:	461d      	mov	r5, r3
 800883e:	e004      	b.n	800884a <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEC1IS1_Lj4EEERAT0__KT_+0x1c>
 8008840:	4628      	mov	r0, r5
 8008842:	f7fc fe55 	bl	80054f0 <_ZN2ps12VoltRangeAdcC1Ev>
 8008846:	3524      	adds	r5, #36	; 0x24
 8008848:	3c01      	subs	r4, #1
 800884a:	2c00      	cmp	r4, #0
 800884c:	daf8      	bge.n	8008840 <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEC1IS1_Lj4EEERAT0__KT_+0x12>
  size_ = 0;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  fill(values);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f830 	bl	80088be <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE4fillIS1_Lj4EEEvRAT0__KT_>
}
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bdb0      	pop	{r4, r5, r7, pc}

08008868 <_ZN5ArrayIN2ps9CurrRangeELj4EEC1IS1_Lj4EEERAT0__KT_>:
Array<T, MAX_SIZE>::Array(const U (&values)[N])
 8008868:	b5b0      	push	{r4, r5, r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2403      	movs	r4, #3
 8008876:	461d      	mov	r5, r3
 8008878:	e004      	b.n	8008884 <_ZN5ArrayIN2ps9CurrRangeELj4EEC1IS1_Lj4EEERAT0__KT_+0x1c>
 800887a:	4628      	mov	r0, r5
 800887c:	f7fc fe45 	bl	800550a <_ZN2ps9CurrRangeC1Ev>
 8008880:	3524      	adds	r5, #36	; 0x24
 8008882:	3c01      	subs	r4, #1
 8008884:	2c00      	cmp	r4, #0
 8008886:	daf8      	bge.n	800887a <_ZN5ArrayIN2ps9CurrRangeELj4EEC1IS1_Lj4EEERAT0__KT_+0x12>
  size_ = 0;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  fill(values);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f821 	bl	80088da <_ZN5ArrayIN2ps9CurrRangeELj4EE4fillIS1_Lj4EEEvRAT0__KT_>
}
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bdb0      	pop	{r4, r5, r7, pc}

080088a2 <_ZN5ArrayIN2ps12VoltRangeDacELj4EE4fillIS1_Lj4EEEvRAT0__KT_>:
void Array<T, MAX_SIZE>::fill(const U (&values)[N])
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  assign(N,values);
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	2104      	movs	r1, #4
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f820 	bl	80088f6 <_ZN5ArrayIN2ps12VoltRangeDacELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE4fillIS1_Lj4EEEvRAT0__KT_>:
void Array<T, MAX_SIZE>::fill(const U (&values)[N])
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  assign(N,values);
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	2104      	movs	r1, #4
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f846 	bl	800895e <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <_ZN5ArrayIN2ps9CurrRangeELj4EE4fillIS1_Lj4EEEvRAT0__KT_>:
void Array<T, MAX_SIZE>::fill(const U (&values)[N])
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  assign(N,values);
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	2104      	movs	r1, #4
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f86c 	bl	80089c6 <_ZN5ArrayIN2ps9CurrRangeELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <_ZN5ArrayIN2ps12VoltRangeDacELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U (&values)[N])
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b088      	sub	sp, #32
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
  size_t n_smallest = ((n < N) ? n : N);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b04      	cmp	r3, #4
 8008906:	bf28      	it	cs
 8008908:	2304      	movcs	r3, #4
 800890a:	61bb      	str	r3, [r7, #24]
  size_t assign_size = ((n_smallest < MAX_SIZE) ? n_smallest : MAX_SIZE);
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b04      	cmp	r3, #4
 8008910:	bf28      	it	cs
 8008912:	2304      	movcs	r3, #4
 8008914:	617b      	str	r3, [r7, #20]
  size_ = assign_size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  for (size_t i=0; i<assign_size; ++i)
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	e013      	b.n	800894c <_ZN5ArrayIN2ps12VoltRangeDacELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x56>
    values_[i] = values[i];
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	4613      	mov	r3, r2
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	18d0      	adds	r0, r2, r3
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	4619      	mov	r1, r3
 8008942:	f7fc ffa1 	bl	8005888 <_ZN2ps12VoltRangeDacaSERKS0_>
  for (size_t i=0; i<assign_size; ++i)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3301      	adds	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3e7      	bcc.n	8008924 <_ZN5ArrayIN2ps12VoltRangeDacELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x2e>
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U (&values)[N])
 800895e:	b580      	push	{r7, lr}
 8008960:	b088      	sub	sp, #32
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
  size_t n_smallest = ((n < N) ? n : N);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b04      	cmp	r3, #4
 800896e:	bf28      	it	cs
 8008970:	2304      	movcs	r3, #4
 8008972:	61bb      	str	r3, [r7, #24]
  size_t assign_size = ((n_smallest < MAX_SIZE) ? n_smallest : MAX_SIZE);
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2b04      	cmp	r3, #4
 8008978:	bf28      	it	cs
 800897a:	2304      	movcs	r3, #4
 800897c:	617b      	str	r3, [r7, #20]
  size_ = assign_size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  for (size_t i=0; i<assign_size; ++i)
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e013      	b.n	80089b4 <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x56>
    values_[i] = values[i];
 800898c:	69fa      	ldr	r2, [r7, #28]
 800898e:	4613      	mov	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	18d0      	adds	r0, r2, r3
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	4619      	mov	r1, r3
 80089aa:	f7fd fa4b 	bl	8005e44 <_ZN2ps12VoltRangeAdcaSERKS0_>
  for (size_t i=0; i<assign_size; ++i)
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	3301      	adds	r3, #1
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3e7      	bcc.n	800898c <_ZN5ArrayIN2ps12VoltRangeAdcELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x2e>
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	3720      	adds	r7, #32
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_ZN5ArrayIN2ps9CurrRangeELj4EE6assignIS1_Lj4EEEvjRAT0__KT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U (&values)[N])
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
  size_t n_smallest = ((n < N) ? n : N);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	bf28      	it	cs
 80089d8:	2304      	movcs	r3, #4
 80089da:	61bb      	str	r3, [r7, #24]
  size_t assign_size = ((n_smallest < MAX_SIZE) ? n_smallest : MAX_SIZE);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	bf28      	it	cs
 80089e2:	2304      	movcs	r3, #4
 80089e4:	617b      	str	r3, [r7, #20]
  size_ = assign_size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  for (size_t i=0; i<assign_size; ++i)
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	e013      	b.n	8008a1c <_ZN5ArrayIN2ps9CurrRangeELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x56>
    values_[i] = values[i];
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	4613      	mov	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	18d0      	adds	r0, r2, r3
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	4613      	mov	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7fd f847 	bl	8005aa4 <_ZN2ps9CurrRangeaSERKS0_>
  for (size_t i=0; i<assign_size; ++i)
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	61fb      	str	r3, [r7, #28]
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d3e7      	bcc.n	80089f4 <_ZN5ArrayIN2ps9CurrRangeELj4EE6assignIS1_Lj4EEEvjRAT0__KT_+0x2e>
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <_ZN5ArrayIN2ps9CurrRangeELj4EED1Ev>:
 8008a2e:	b590      	push	{r4, r7, lr}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <_ZN5ArrayIN2ps9CurrRangeELj4EED1Ev+0x24>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d004      	beq.n	8008a52 <_ZN5ArrayIN2ps9CurrRangeELj4EED1Ev+0x24>
 8008a48:	3c24      	subs	r4, #36	; 0x24
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7f9 fb96 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
 8008a50:	e7f7      	b.n	8008a42 <_ZN5ArrayIN2ps9CurrRangeELj4EED1Ev+0x14>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}

08008a5c <_ZN5ArrayIN2ps12VoltRangeAdcELj4EED1Ev>:
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <_ZN5ArrayIN2ps12VoltRangeAdcELj4EED1Ev+0x24>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d004      	beq.n	8008a80 <_ZN5ArrayIN2ps12VoltRangeAdcELj4EED1Ev+0x24>
 8008a76:	3c24      	subs	r4, #36	; 0x24
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7f9 fb8c 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
 8008a7e:	e7f7      	b.n	8008a70 <_ZN5ArrayIN2ps12VoltRangeAdcELj4EED1Ev+0x14>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}

08008a8a <_ZN5ArrayIN2ps12VoltRangeDacELj4EED1Ev>:
 8008a8a:	b590      	push	{r4, r7, lr}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <_ZN5ArrayIN2ps12VoltRangeDacELj4EED1Ev+0x24>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	d004      	beq.n	8008aae <_ZN5ArrayIN2ps12VoltRangeDacELj4EED1Ev+0x24>
 8008aa4:	3c24      	subs	r4, #36	; 0x24
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7f9 fb5b 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
 8008aac:	e7f7      	b.n	8008a9e <_ZN5ArrayIN2ps12VoltRangeDacELj4EED1Ev+0x14>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd90      	pop	{r4, r7, pc}

08008ab8 <_Z41__static_initialization_and_destruction_0ii>:
    extern const uint32_t MaximumSamplePeriod = 1000000; // us

    // Low pass filter params for current samples
    const LowPassParam CurrLowPassParam = {200.0, 0.0, 2}; // cutoff freq (Hz), initial value, order

} // namespace ps
 8008ab8:	b5b0      	push	{r4, r5, r7, lr}
 8008aba:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008ac4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008ac8:	6018      	str	r0, [r3, #0]
 8008aca:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008ace:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008ad2:	6019      	str	r1, [r3, #0]
 8008ad4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008ad8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	f041 8200 	bne.w	8009ee4 <_Z41__static_initialization_and_destruction_0ii+0x142c>
 8008ae4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8008ae8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008af2:	4293      	cmp	r3, r2
 8008af4:	f041 81f6 	bne.w	8009ee4 <_Z41__static_initialization_and_destruction_0ii+0x142c>
    };
 8008af8:	4ce6      	ldr	r4, [pc, #920]	; (8008e94 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8008afa:	4625      	mov	r5, r4
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	4618      	mov	r0, r3
 8008b02:	f015 fcb8 	bl	801e476 <_ZNSaIcEC1Ev>
 8008b06:	f107 030c 	add.w	r3, r7, #12
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	49e2      	ldr	r1, [pc, #904]	; (8008e98 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f015 ff58 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b14:	f107 030c 	add.w	r3, r7, #12
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f015 fcad 	bl	801e478 <_ZNSaIcED1Ev>
 8008b1e:	3418      	adds	r4, #24
 8008b20:	f107 0310 	add.w	r3, r7, #16
 8008b24:	4618      	mov	r0, r3
 8008b26:	f015 fca6 	bl	801e476 <_ZNSaIcEC1Ev>
 8008b2a:	f107 0310 	add.w	r3, r7, #16
 8008b2e:	461a      	mov	r2, r3
 8008b30:	49da      	ldr	r1, [pc, #872]	; (8008e9c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8008b32:	4620      	mov	r0, r4
 8008b34:	f015 ff46 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b38:	f107 0310 	add.w	r3, r7, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f015 fc9b 	bl	801e478 <_ZNSaIcED1Ev>
 8008b42:	3418      	adds	r4, #24
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f015 fc94 	bl	801e476 <_ZNSaIcEC1Ev>
 8008b4e:	f107 0314 	add.w	r3, r7, #20
 8008b52:	461a      	mov	r2, r3
 8008b54:	49d2      	ldr	r1, [pc, #840]	; (8008ea0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8008b56:	4620      	mov	r0, r4
 8008b58:	f015 ff34 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b5c:	f107 0314 	add.w	r3, r7, #20
 8008b60:	4618      	mov	r0, r3
 8008b62:	f015 fc89 	bl	801e478 <_ZNSaIcED1Ev>
 8008b66:	3418      	adds	r4, #24
 8008b68:	f107 0318 	add.w	r3, r7, #24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f015 fc82 	bl	801e476 <_ZNSaIcEC1Ev>
 8008b72:	f107 0318 	add.w	r3, r7, #24
 8008b76:	461a      	mov	r2, r3
 8008b78:	49ca      	ldr	r1, [pc, #808]	; (8008ea4 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f015 ff22 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b80:	f107 0318 	add.w	r3, r7, #24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f015 fc77 	bl	801e478 <_ZNSaIcED1Ev>
    };
 8008b8a:	4cc7      	ldr	r4, [pc, #796]	; (8008ea8 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8008b8c:	4625      	mov	r5, r4
 8008b8e:	f107 031c 	add.w	r3, r7, #28
 8008b92:	4618      	mov	r0, r3
 8008b94:	f015 fc6f 	bl	801e476 <_ZNSaIcEC1Ev>
 8008b98:	f107 031c 	add.w	r3, r7, #28
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	49c3      	ldr	r1, [pc, #780]	; (8008eac <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f015 ff0f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008ba6:	f107 031c 	add.w	r3, r7, #28
 8008baa:	4618      	mov	r0, r3
 8008bac:	f015 fc64 	bl	801e478 <_ZNSaIcED1Ev>
 8008bb0:	3418      	adds	r4, #24
 8008bb2:	f107 0320 	add.w	r3, r7, #32
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f015 fc5d 	bl	801e476 <_ZNSaIcEC1Ev>
 8008bbc:	f107 0320 	add.w	r3, r7, #32
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	49bb      	ldr	r1, [pc, #748]	; (8008eb0 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f015 fefd 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008bca:	f107 0320 	add.w	r3, r7, #32
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f015 fc52 	bl	801e478 <_ZNSaIcED1Ev>
 8008bd4:	3418      	adds	r4, #24
 8008bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f015 fc4b 	bl	801e476 <_ZNSaIcEC1Ev>
 8008be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008be4:	461a      	mov	r2, r3
 8008be6:	49b3      	ldr	r1, [pc, #716]	; (8008eb4 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8008be8:	4620      	mov	r0, r4
 8008bea:	f015 feeb 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f015 fc40 	bl	801e478 <_ZNSaIcED1Ev>
 8008bf8:	3418      	adds	r4, #24
 8008bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f015 fc39 	bl	801e476 <_ZNSaIcEC1Ev>
 8008c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c08:	461a      	mov	r2, r3
 8008c0a:	49ab      	ldr	r1, [pc, #684]	; (8008eb8 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f015 fed9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c16:	4618      	mov	r0, r3
 8008c18:	f015 fc2e 	bl	801e478 <_ZNSaIcED1Ev>
 8008c1c:	3418      	adds	r4, #24
 8008c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c22:	4618      	mov	r0, r3
 8008c24:	f015 fc27 	bl	801e476 <_ZNSaIcEC1Ev>
 8008c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	49a3      	ldr	r1, [pc, #652]	; (8008ebc <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8008c30:	4620      	mov	r0, r4
 8008c32:	f015 fec7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f015 fc1c 	bl	801e478 <_ZNSaIcED1Ev>
    const string FirmwareVersion = string("FW0.0.9");
 8008c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c44:	4618      	mov	r0, r3
 8008c46:	f015 fc16 	bl	801e476 <_ZNSaIcEC1Ev>
 8008c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c4e:	461a      	mov	r2, r3
 8008c50:	499b      	ldr	r1, [pc, #620]	; (8008ec0 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8008c52:	489c      	ldr	r0, [pc, #624]	; (8008ec4 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8008c54:	f015 feb6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f015 fc0b 	bl	801e478 <_ZNSaIcED1Ev>
    const string HardwareVersion = string("V0.2");
 8008c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c66:	4618      	mov	r0, r3
 8008c68:	f015 fc05 	bl	801e476 <_ZNSaIcEC1Ev>
 8008c6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c70:	461a      	mov	r2, r3
 8008c72:	4995      	ldr	r1, [pc, #596]	; (8008ec8 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8008c74:	4895      	ldr	r0, [pc, #596]	; (8008ecc <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8008c76:	f015 fea5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f015 fbfa 	bl	801e478 <_ZNSaIcED1Ev>
    const string CommandKey = string("command");
 8008c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f015 fbf4 	bl	801e476 <_ZNSaIcEC1Ev>
 8008c8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c92:	461a      	mov	r2, r3
 8008c94:	498e      	ldr	r1, [pc, #568]	; (8008ed0 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8008c96:	488f      	ldr	r0, [pc, #572]	; (8008ed4 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8008c98:	f015 fe94 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f015 fbe9 	bl	801e478 <_ZNSaIcED1Ev>
    const string ResponseKey = string("response");
 8008ca6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008caa:	4618      	mov	r0, r3
 8008cac:	f015 fbe3 	bl	801e476 <_ZNSaIcEC1Ev>
 8008cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4988      	ldr	r1, [pc, #544]	; (8008ed8 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8008cb8:	4888      	ldr	r0, [pc, #544]	; (8008edc <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8008cba:	f015 fe83 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f015 fbd8 	bl	801e478 <_ZNSaIcED1Ev>
    const string MessageKey = string("message");
 8008cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f015 fbd2 	bl	801e476 <_ZNSaIcEC1Ev>
 8008cd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4981      	ldr	r1, [pc, #516]	; (8008ee0 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8008cda:	4882      	ldr	r0, [pc, #520]	; (8008ee4 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8008cdc:	f015 fe72 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f015 fbc7 	bl	801e478 <_ZNSaIcED1Ev>
    const string SuccessKey = string("success");
 8008cea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f015 fbc1 	bl	801e476 <_ZNSaIcEC1Ev>
 8008cf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	497b      	ldr	r1, [pc, #492]	; (8008ee8 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8008cfc:	487b      	ldr	r0, [pc, #492]	; (8008eec <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8008cfe:	f015 fe61 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d06:	4618      	mov	r0, r3
 8008d08:	f015 fbb6 	bl	801e478 <_ZNSaIcED1Ev>
    const string TimeKey = string("t");
 8008d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d10:	4618      	mov	r0, r3
 8008d12:	f015 fbb0 	bl	801e476 <_ZNSaIcEC1Ev>
 8008d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4974      	ldr	r1, [pc, #464]	; (8008ef0 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8008d1e:	4875      	ldr	r0, [pc, #468]	; (8008ef4 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8008d20:	f015 fe50 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f015 fba5 	bl	801e478 <_ZNSaIcED1Ev>
    const string VoltKey = string("v");
 8008d2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d32:	4618      	mov	r0, r3
 8008d34:	f015 fb9f 	bl	801e476 <_ZNSaIcEC1Ev>
 8008d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	496e      	ldr	r1, [pc, #440]	; (8008ef8 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8008d40:	486e      	ldr	r0, [pc, #440]	; (8008efc <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8008d42:	f015 fe3f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f015 fb94 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrKey = string("i");
 8008d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d54:	4618      	mov	r0, r3
 8008d56:	f015 fb8e 	bl	801e476 <_ZNSaIcEC1Ev>
 8008d5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4967      	ldr	r1, [pc, #412]	; (8008f00 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8008d62:	4868      	ldr	r0, [pc, #416]	; (8008f04 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8008d64:	f015 fe2e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f015 fb83 	bl	801e478 <_ZNSaIcED1Ev>
    const string ChanKey = string("n");
 8008d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d76:	4618      	mov	r0, r3
 8008d78:	f015 fb7d 	bl	801e476 <_ZNSaIcEC1Ev>
 8008d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d80:	461a      	mov	r2, r3
 8008d82:	4961      	ldr	r1, [pc, #388]	; (8008f08 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8008d84:	4861      	ldr	r0, [pc, #388]	; (8008f0c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8008d86:	f015 fe1d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008d8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f015 fb72 	bl	801e478 <_ZNSaIcED1Ev>
    const string RefVoltKey = string("r");
 8008d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f015 fb6c 	bl	801e476 <_ZNSaIcEC1Ev>
 8008d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008da2:	461a      	mov	r2, r3
 8008da4:	495a      	ldr	r1, [pc, #360]	; (8008f10 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8008da6:	485b      	ldr	r0, [pc, #364]	; (8008f14 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8008da8:	f015 fe0c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008db0:	4618      	mov	r0, r3
 8008db2:	f015 fb61 	bl	801e478 <_ZNSaIcED1Ev>
    const string ParamKey = string("param");
 8008db6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f015 fb5b 	bl	801e476 <_ZNSaIcEC1Ev>
 8008dc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4954      	ldr	r1, [pc, #336]	; (8008f18 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8008dc8:	4854      	ldr	r0, [pc, #336]	; (8008f1c <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8008dca:	f015 fdfb 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f015 fb50 	bl	801e478 <_ZNSaIcED1Ev>
    const string VoltRangeKey = string("voltRange");
 8008dd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f015 fb4a 	bl	801e476 <_ZNSaIcEC1Ev>
 8008de2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008de6:	461a      	mov	r2, r3
 8008de8:	494d      	ldr	r1, [pc, #308]	; (8008f20 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8008dea:	484e      	ldr	r0, [pc, #312]	; (8008f24 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8008dec:	f015 fdea 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008df0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008df4:	4618      	mov	r0, r3
 8008df6:	f015 fb3f 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrRangeKey = string("currRange");
 8008dfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f015 fb39 	bl	801e476 <_ZNSaIcEC1Ev>
 8008e04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4947      	ldr	r1, [pc, #284]	; (8008f28 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8008e0c:	4847      	ldr	r0, [pc, #284]	; (8008f2c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8008e0e:	f015 fdd9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e16:	4618      	mov	r0, r3
 8008e18:	f015 fb2e 	bl	801e478 <_ZNSaIcED1Ev>
    const string QuietValueKey = string("quietValue");
 8008e1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008e20:	4618      	mov	r0, r3
 8008e22:	f015 fb28 	bl	801e476 <_ZNSaIcEC1Ev>
 8008e26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4940      	ldr	r1, [pc, #256]	; (8008f30 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8008e2e:	4841      	ldr	r0, [pc, #260]	; (8008f34 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8008e30:	f015 fdc8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f015 fb1d 	bl	801e478 <_ZNSaIcED1Ev>
    const string QuietTimeKey = string("quietTime");
 8008e3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008e42:	4618      	mov	r0, r3
 8008e44:	f015 fb17 	bl	801e476 <_ZNSaIcEC1Ev>
 8008e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	493a      	ldr	r1, [pc, #232]	; (8008f38 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8008e50:	483a      	ldr	r0, [pc, #232]	; (8008f3c <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8008e52:	f015 fdb7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f015 fb0c 	bl	801e478 <_ZNSaIcED1Ev>
    const string DurationKey = string("duration");
 8008e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e64:	4618      	mov	r0, r3
 8008e66:	f015 fb06 	bl	801e476 <_ZNSaIcEC1Ev>
 8008e6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e6e:	461a      	mov	r2, r3
 8008e70:	4933      	ldr	r1, [pc, #204]	; (8008f40 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8008e72:	4834      	ldr	r0, [pc, #208]	; (8008f44 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8008e74:	f015 fda6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f015 fafb 	bl	801e478 <_ZNSaIcED1Ev>
    const string ValueKey = string("value");
 8008e82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008e86:	4618      	mov	r0, r3
 8008e88:	f015 faf5 	bl	801e476 <_ZNSaIcEC1Ev>
 8008e8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008e90:	461a      	mov	r2, r3
 8008e92:	e059      	b.n	8008f48 <_Z41__static_initialization_and_destruction_0ii+0x490>
 8008e94:	20008294 	.word	0x20008294
 8008e98:	08021158 	.word	0x08021158
 8008e9c:	08021164 	.word	0x08021164
 8008ea0:	08021170 	.word	0x08021170
 8008ea4:	0802117c 	.word	0x0802117c
 8008ea8:	200082f4 	.word	0x200082f4
 8008eac:	08021188 	.word	0x08021188
 8008eb0:	08021198 	.word	0x08021198
 8008eb4:	080211a8 	.word	0x080211a8
 8008eb8:	080211b8 	.word	0x080211b8
 8008ebc:	080211c8 	.word	0x080211c8
 8008ec0:	080211d8 	.word	0x080211d8
 8008ec4:	2000836c 	.word	0x2000836c
 8008ec8:	080211e0 	.word	0x080211e0
 8008ecc:	20008384 	.word	0x20008384
 8008ed0:	080211e8 	.word	0x080211e8
 8008ed4:	2000839c 	.word	0x2000839c
 8008ed8:	080211f0 	.word	0x080211f0
 8008edc:	200083b4 	.word	0x200083b4
 8008ee0:	080211fc 	.word	0x080211fc
 8008ee4:	200083cc 	.word	0x200083cc
 8008ee8:	08021204 	.word	0x08021204
 8008eec:	200083e4 	.word	0x200083e4
 8008ef0:	0802120c 	.word	0x0802120c
 8008ef4:	200083fc 	.word	0x200083fc
 8008ef8:	08021210 	.word	0x08021210
 8008efc:	20008414 	.word	0x20008414
 8008f00:	08021214 	.word	0x08021214
 8008f04:	2000842c 	.word	0x2000842c
 8008f08:	08021218 	.word	0x08021218
 8008f0c:	20008444 	.word	0x20008444
 8008f10:	0802121c 	.word	0x0802121c
 8008f14:	2000845c 	.word	0x2000845c
 8008f18:	08021220 	.word	0x08021220
 8008f1c:	20008474 	.word	0x20008474
 8008f20:	08021228 	.word	0x08021228
 8008f24:	2000848c 	.word	0x2000848c
 8008f28:	08021234 	.word	0x08021234
 8008f2c:	200084a4 	.word	0x200084a4
 8008f30:	08021240 	.word	0x08021240
 8008f34:	200084bc 	.word	0x200084bc
 8008f38:	0802124c 	.word	0x0802124c
 8008f3c:	200084d4 	.word	0x200084d4
 8008f40:	08021258 	.word	0x08021258
 8008f44:	200084ec 	.word	0x200084ec
 8008f48:	49e3      	ldr	r1, [pc, #908]	; (80092d8 <_Z41__static_initialization_and_destruction_0ii+0x820>)
 8008f4a:	48e4      	ldr	r0, [pc, #912]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x824>)
 8008f4c:	f015 fd3a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f54:	4618      	mov	r0, r3
 8008f56:	f015 fa8f 	bl	801e478 <_ZNSaIcED1Ev>
    const string StartValueKey = string("startValue");
 8008f5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f015 fa89 	bl	801e476 <_ZNSaIcEC1Ev>
 8008f64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f68:	461a      	mov	r2, r3
 8008f6a:	49dd      	ldr	r1, [pc, #884]	; (80092e0 <_Z41__static_initialization_and_destruction_0ii+0x828>)
 8008f6c:	48dd      	ldr	r0, [pc, #884]	; (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x82c>)
 8008f6e:	f015 fd29 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008f76:	4618      	mov	r0, r3
 8008f78:	f015 fa7e 	bl	801e478 <_ZNSaIcED1Ev>
    const string FinalValueKey = string("finalValue");
 8008f7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f80:	4618      	mov	r0, r3
 8008f82:	f015 fa78 	bl	801e476 <_ZNSaIcEC1Ev>
 8008f86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	49d6      	ldr	r1, [pc, #856]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x830>)
 8008f8e:	48d7      	ldr	r0, [pc, #860]	; (80092ec <_Z41__static_initialization_and_destruction_0ii+0x834>)
 8008f90:	f015 fd18 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008f94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f015 fa6d 	bl	801e478 <_ZNSaIcED1Ev>
    const string StepValueKey = string("stepValue");
 8008f9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f015 fa67 	bl	801e476 <_ZNSaIcEC1Ev>
 8008fa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fac:	461a      	mov	r2, r3
 8008fae:	49d0      	ldr	r1, [pc, #832]	; (80092f0 <_Z41__static_initialization_and_destruction_0ii+0x838>)
 8008fb0:	48d0      	ldr	r0, [pc, #832]	; (80092f4 <_Z41__static_initialization_and_destruction_0ii+0x83c>)
 8008fb2:	f015 fd07 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008fb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f015 fa5c 	bl	801e478 <_ZNSaIcED1Ev>
    const string AmplitudeKey = string("amplitude");
 8008fc0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f015 fa56 	bl	801e476 <_ZNSaIcEC1Ev>
 8008fca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008fce:	461a      	mov	r2, r3
 8008fd0:	49c9      	ldr	r1, [pc, #804]	; (80092f8 <_Z41__static_initialization_and_destruction_0ii+0x840>)
 8008fd2:	48ca      	ldr	r0, [pc, #808]	; (80092fc <_Z41__static_initialization_and_destruction_0ii+0x844>)
 8008fd4:	f015 fcf6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008fd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f015 fa4b 	bl	801e478 <_ZNSaIcED1Ev>
    const string OffsetKey = string("offset");
 8008fe2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f015 fa45 	bl	801e476 <_ZNSaIcEC1Ev>
 8008fec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	49c3      	ldr	r1, [pc, #780]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0x848>)
 8008ff4:	48c3      	ldr	r0, [pc, #780]	; (8009304 <_Z41__static_initialization_and_destruction_0ii+0x84c>)
 8008ff6:	f015 fce5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008ffa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008ffe:	4618      	mov	r0, r3
 8009000:	f015 fa3a 	bl	801e478 <_ZNSaIcED1Ev>
    const string PeriodKey = string("period");
 8009004:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009008:	4618      	mov	r0, r3
 800900a:	f015 fa34 	bl	801e476 <_ZNSaIcEC1Ev>
 800900e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009012:	461a      	mov	r2, r3
 8009014:	49bc      	ldr	r1, [pc, #752]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x850>)
 8009016:	48bd      	ldr	r0, [pc, #756]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x854>)
 8009018:	f015 fcd4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800901c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009020:	4618      	mov	r0, r3
 8009022:	f015 fa29 	bl	801e478 <_ZNSaIcED1Ev>
    const string NumCyclesKey = string("numCycles");
 8009026:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800902a:	4618      	mov	r0, r3
 800902c:	f015 fa23 	bl	801e476 <_ZNSaIcEC1Ev>
 8009030:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009034:	461a      	mov	r2, r3
 8009036:	49b6      	ldr	r1, [pc, #728]	; (8009310 <_Z41__static_initialization_and_destruction_0ii+0x858>)
 8009038:	48b6      	ldr	r0, [pc, #728]	; (8009314 <_Z41__static_initialization_and_destruction_0ii+0x85c>)
 800903a:	f015 fcc3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800903e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009042:	4618      	mov	r0, r3
 8009044:	f015 fa18 	bl	801e478 <_ZNSaIcED1Ev>
    const string ShiftKey = string("shift");
 8009048:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800904c:	4618      	mov	r0, r3
 800904e:	f015 fa12 	bl	801e476 <_ZNSaIcEC1Ev>
 8009052:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009056:	461a      	mov	r2, r3
 8009058:	49af      	ldr	r1, [pc, #700]	; (8009318 <_Z41__static_initialization_and_destruction_0ii+0x860>)
 800905a:	48b0      	ldr	r0, [pc, #704]	; (800931c <_Z41__static_initialization_and_destruction_0ii+0x864>)
 800905c:	f015 fcb2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009060:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009064:	4618      	mov	r0, r3
 8009066:	f015 fa07 	bl	801e478 <_ZNSaIcED1Ev>
    const string WindowKey = string("window");
 800906a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800906e:	4618      	mov	r0, r3
 8009070:	f015 fa01 	bl	801e476 <_ZNSaIcEC1Ev>
 8009074:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009078:	461a      	mov	r2, r3
 800907a:	49a9      	ldr	r1, [pc, #676]	; (8009320 <_Z41__static_initialization_and_destruction_0ii+0x868>)
 800907c:	48a9      	ldr	r0, [pc, #676]	; (8009324 <_Z41__static_initialization_and_destruction_0ii+0x86c>)
 800907e:	f015 fca1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009086:	4618      	mov	r0, r3
 8009088:	f015 f9f6 	bl	801e478 <_ZNSaIcED1Ev>
    const string DeviceIdKey = string("deviceId");
 800908c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009090:	4618      	mov	r0, r3
 8009092:	f015 f9f0 	bl	801e476 <_ZNSaIcEC1Ev>
 8009096:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800909a:	461a      	mov	r2, r3
 800909c:	49a2      	ldr	r1, [pc, #648]	; (8009328 <_Z41__static_initialization_and_destruction_0ii+0x870>)
 800909e:	48a3      	ldr	r0, [pc, #652]	; (800932c <_Z41__static_initialization_and_destruction_0ii+0x874>)
 80090a0:	f015 fc90 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80090a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80090a8:	4618      	mov	r0, r3
 80090aa:	f015 f9e5 	bl	801e478 <_ZNSaIcED1Ev>
    const string SamplePeriodKey = string("samplePeriod");
 80090ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f015 f9df 	bl	801e476 <_ZNSaIcEC1Ev>
 80090b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80090bc:	461a      	mov	r2, r3
 80090be:	499c      	ldr	r1, [pc, #624]	; (8009330 <_Z41__static_initialization_and_destruction_0ii+0x878>)
 80090c0:	489c      	ldr	r0, [pc, #624]	; (8009334 <_Z41__static_initialization_and_destruction_0ii+0x87c>)
 80090c2:	f015 fc7f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80090c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f015 f9d4 	bl	801e478 <_ZNSaIcED1Ev>
    const string TestDoneTimeKey = string("testDoneTime");
 80090d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80090d4:	4618      	mov	r0, r3
 80090d6:	f015 f9ce 	bl	801e476 <_ZNSaIcEC1Ev>
 80090da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80090de:	461a      	mov	r2, r3
 80090e0:	4995      	ldr	r1, [pc, #596]	; (8009338 <_Z41__static_initialization_and_destruction_0ii+0x880>)
 80090e2:	4896      	ldr	r0, [pc, #600]	; (800933c <_Z41__static_initialization_and_destruction_0ii+0x884>)
 80090e4:	f015 fc6e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80090e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80090ec:	4618      	mov	r0, r3
 80090ee:	f015 f9c3 	bl	801e478 <_ZNSaIcED1Ev>
    const string StepArrayKey = string("step");
 80090f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80090f6:	4618      	mov	r0, r3
 80090f8:	f015 f9bd 	bl	801e476 <_ZNSaIcEC1Ev>
 80090fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009100:	461a      	mov	r2, r3
 8009102:	498f      	ldr	r1, [pc, #572]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x888>)
 8009104:	488f      	ldr	r0, [pc, #572]	; (8009344 <_Z41__static_initialization_and_destruction_0ii+0x88c>)
 8009106:	f015 fc5d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800910a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800910e:	4618      	mov	r0, r3
 8009110:	f015 f9b2 	bl	801e478 <_ZNSaIcED1Ev>
    const string TestNameArrayKey = string("testNames");
 8009114:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009118:	4618      	mov	r0, r3
 800911a:	f015 f9ac 	bl	801e476 <_ZNSaIcEC1Ev>
 800911e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009122:	461a      	mov	r2, r3
 8009124:	4988      	ldr	r1, [pc, #544]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x890>)
 8009126:	4889      	ldr	r0, [pc, #548]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x894>)
 8009128:	f015 fc4c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800912c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009130:	4618      	mov	r0, r3
 8009132:	f015 f9a1 	bl	801e478 <_ZNSaIcED1Ev>
    const string VersionKey = string("version");
 8009136:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800913a:	4618      	mov	r0, r3
 800913c:	f015 f99b 	bl	801e476 <_ZNSaIcEC1Ev>
 8009140:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009144:	461a      	mov	r2, r3
 8009146:	4982      	ldr	r1, [pc, #520]	; (8009350 <_Z41__static_initialization_and_destruction_0ii+0x898>)
 8009148:	4882      	ldr	r0, [pc, #520]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0x89c>)
 800914a:	f015 fc3b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800914e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009152:	4618      	mov	r0, r3
 8009154:	f015 f990 	bl	801e478 <_ZNSaIcED1Ev>
    const string VariantKey = string("variant");
 8009158:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800915c:	4618      	mov	r0, r3
 800915e:	f015 f98a 	bl	801e476 <_ZNSaIcEC1Ev>
 8009162:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009166:	461a      	mov	r2, r3
 8009168:	497b      	ldr	r1, [pc, #492]	; (8009358 <_Z41__static_initialization_and_destruction_0ii+0x8a0>)
 800916a:	487c      	ldr	r0, [pc, #496]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0x8a4>)
 800916c:	f015 fc2a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009170:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009174:	4618      	mov	r0, r3
 8009176:	f015 f97f 	bl	801e478 <_ZNSaIcED1Ev>
    const string MuxEnabledKey = string("muxEnabled");
 800917a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800917e:	4618      	mov	r0, r3
 8009180:	f015 f979 	bl	801e476 <_ZNSaIcEC1Ev>
 8009184:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009188:	461a      	mov	r2, r3
 800918a:	4975      	ldr	r1, [pc, #468]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0x8a8>)
 800918c:	4875      	ldr	r0, [pc, #468]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0x8ac>)
 800918e:	f015 fc19 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009192:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009196:	4618      	mov	r0, r3
 8009198:	f015 f96e 	bl	801e478 <_ZNSaIcED1Ev>
    const string MuxChannelKey = string("muxChannel");
 800919c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80091a0:	4618      	mov	r0, r3
 80091a2:	f015 f968 	bl	801e476 <_ZNSaIcEC1Ev>
 80091a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80091aa:	461a      	mov	r2, r3
 80091ac:	496e      	ldr	r1, [pc, #440]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0x8b0>)
 80091ae:	486f      	ldr	r0, [pc, #444]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x8b4>)
 80091b0:	f015 fc08 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80091b8:	4618      	mov	r0, r3
 80091ba:	f015 f95d 	bl	801e478 <_ZNSaIcED1Ev>
    const string ConnectedKey = string("connected");
 80091be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f015 f957 	bl	801e476 <_ZNSaIcEC1Ev>
 80091c8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80091cc:	461a      	mov	r2, r3
 80091ce:	4968      	ldr	r1, [pc, #416]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x8b8>)
 80091d0:	4868      	ldr	r0, [pc, #416]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0x8bc>)
 80091d2:	f015 fbf7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80091da:	4618      	mov	r0, r3
 80091dc:	f015 f94c 	bl	801e478 <_ZNSaIcED1Ev>
    const string ElectAutoConnectKey = string("autoConnect");
 80091e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80091e4:	4618      	mov	r0, r3
 80091e6:	f015 f946 	bl	801e476 <_ZNSaIcEC1Ev>
 80091ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80091ee:	461a      	mov	r2, r3
 80091f0:	4961      	ldr	r1, [pc, #388]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x8c0>)
 80091f2:	4862      	ldr	r0, [pc, #392]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x8c4>)
 80091f4:	f015 fbe6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80091fc:	4618      	mov	r0, r3
 80091fe:	f015 f93b 	bl	801e478 <_ZNSaIcED1Ev>
    const string RunTestCmd = string("runTest");
 8009202:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009206:	4618      	mov	r0, r3
 8009208:	f015 f935 	bl	801e476 <_ZNSaIcEC1Ev>
 800920c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009210:	461a      	mov	r2, r3
 8009212:	495b      	ldr	r1, [pc, #364]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x8c8>)
 8009214:	485b      	ldr	r0, [pc, #364]	; (8009384 <_Z41__static_initialization_and_destruction_0ii+0x8cc>)
 8009216:	f015 fbd5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800921a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800921e:	4618      	mov	r0, r3
 8009220:	f015 f92a 	bl	801e478 <_ZNSaIcED1Ev>
    const string StopTestCmd = string("stopTest");
 8009224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009228:	4618      	mov	r0, r3
 800922a:	f015 f924 	bl	801e476 <_ZNSaIcEC1Ev>
 800922e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009232:	461a      	mov	r2, r3
 8009234:	4954      	ldr	r1, [pc, #336]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x8d0>)
 8009236:	4855      	ldr	r0, [pc, #340]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x8d4>)
 8009238:	f015 fbc4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800923c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009240:	4618      	mov	r0, r3
 8009242:	f015 f919 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetVoltCmd = string("getVolt");
 8009246:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800924a:	4618      	mov	r0, r3
 800924c:	f015 f913 	bl	801e476 <_ZNSaIcEC1Ev>
 8009250:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009254:	461a      	mov	r2, r3
 8009256:	494e      	ldr	r1, [pc, #312]	; (8009390 <_Z41__static_initialization_and_destruction_0ii+0x8d8>)
 8009258:	484e      	ldr	r0, [pc, #312]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x8dc>)
 800925a:	f015 fbb3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800925e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009262:	4618      	mov	r0, r3
 8009264:	f015 f908 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetVoltCmd = string("setVolt");
 8009268:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800926c:	4618      	mov	r0, r3
 800926e:	f015 f902 	bl	801e476 <_ZNSaIcEC1Ev>
 8009272:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009276:	461a      	mov	r2, r3
 8009278:	4947      	ldr	r1, [pc, #284]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x8e0>)
 800927a:	4848      	ldr	r0, [pc, #288]	; (800939c <_Z41__static_initialization_and_destruction_0ii+0x8e4>)
 800927c:	f015 fba2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009280:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009284:	4618      	mov	r0, r3
 8009286:	f015 f8f7 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetCurrCmd = string("getCurr");
 800928a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800928e:	4618      	mov	r0, r3
 8009290:	f015 f8f1 	bl	801e476 <_ZNSaIcEC1Ev>
 8009294:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009298:	461a      	mov	r2, r3
 800929a:	4941      	ldr	r1, [pc, #260]	; (80093a0 <_Z41__static_initialization_and_destruction_0ii+0x8e8>)
 800929c:	4841      	ldr	r0, [pc, #260]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x8ec>)
 800929e:	f015 fb91 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f015 f8e6 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetRefVoltCmd = string("getRefVolt");
 80092ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092b0:	4618      	mov	r0, r3
 80092b2:	f015 f8e0 	bl	801e476 <_ZNSaIcEC1Ev>
 80092b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092ba:	461a      	mov	r2, r3
 80092bc:	493a      	ldr	r1, [pc, #232]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x8f0>)
 80092be:	483b      	ldr	r0, [pc, #236]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0x8f4>)
 80092c0:	f015 fb80 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80092c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092c8:	4618      	mov	r0, r3
 80092ca:	f015 f8d5 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetParamCmd = string("setParam");
 80092ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80092d2:	4618      	mov	r0, r3
 80092d4:	e06c      	b.n	80093b0 <_Z41__static_initialization_and_destruction_0ii+0x8f8>
 80092d6:	bf00      	nop
 80092d8:	08021264 	.word	0x08021264
 80092dc:	20008504 	.word	0x20008504
 80092e0:	0802126c 	.word	0x0802126c
 80092e4:	2000851c 	.word	0x2000851c
 80092e8:	08021278 	.word	0x08021278
 80092ec:	20008534 	.word	0x20008534
 80092f0:	08021284 	.word	0x08021284
 80092f4:	2000854c 	.word	0x2000854c
 80092f8:	08021290 	.word	0x08021290
 80092fc:	20008564 	.word	0x20008564
 8009300:	0802129c 	.word	0x0802129c
 8009304:	2000857c 	.word	0x2000857c
 8009308:	080212a4 	.word	0x080212a4
 800930c:	20008594 	.word	0x20008594
 8009310:	080212ac 	.word	0x080212ac
 8009314:	200085ac 	.word	0x200085ac
 8009318:	080212b8 	.word	0x080212b8
 800931c:	200085c4 	.word	0x200085c4
 8009320:	080212c0 	.word	0x080212c0
 8009324:	200085dc 	.word	0x200085dc
 8009328:	080212c8 	.word	0x080212c8
 800932c:	200085f4 	.word	0x200085f4
 8009330:	080212d4 	.word	0x080212d4
 8009334:	2000860c 	.word	0x2000860c
 8009338:	080212e4 	.word	0x080212e4
 800933c:	20008624 	.word	0x20008624
 8009340:	080212f4 	.word	0x080212f4
 8009344:	2000863c 	.word	0x2000863c
 8009348:	080212fc 	.word	0x080212fc
 800934c:	20008654 	.word	0x20008654
 8009350:	08021308 	.word	0x08021308
 8009354:	2000866c 	.word	0x2000866c
 8009358:	08021310 	.word	0x08021310
 800935c:	20008684 	.word	0x20008684
 8009360:	08021318 	.word	0x08021318
 8009364:	2000869c 	.word	0x2000869c
 8009368:	08021324 	.word	0x08021324
 800936c:	200086b4 	.word	0x200086b4
 8009370:	08021330 	.word	0x08021330
 8009374:	200086cc 	.word	0x200086cc
 8009378:	0802133c 	.word	0x0802133c
 800937c:	200086e4 	.word	0x200086e4
 8009380:	08021348 	.word	0x08021348
 8009384:	200086fc 	.word	0x200086fc
 8009388:	08021350 	.word	0x08021350
 800938c:	20008714 	.word	0x20008714
 8009390:	0802135c 	.word	0x0802135c
 8009394:	2000872c 	.word	0x2000872c
 8009398:	08021364 	.word	0x08021364
 800939c:	20008744 	.word	0x20008744
 80093a0:	0802136c 	.word	0x0802136c
 80093a4:	2000875c 	.word	0x2000875c
 80093a8:	08021374 	.word	0x08021374
 80093ac:	20008774 	.word	0x20008774
 80093b0:	f015 f861 	bl	801e476 <_ZNSaIcEC1Ev>
 80093b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80093b8:	461a      	mov	r2, r3
 80093ba:	49e3      	ldr	r1, [pc, #908]	; (8009748 <_Z41__static_initialization_and_destruction_0ii+0xc90>)
 80093bc:	48e3      	ldr	r0, [pc, #908]	; (800974c <_Z41__static_initialization_and_destruction_0ii+0xc94>)
 80093be:	f015 fb01 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80093c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f015 f856 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetParamCmd = string("getParam");
 80093cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f015 f850 	bl	801e476 <_ZNSaIcEC1Ev>
 80093d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80093da:	461a      	mov	r2, r3
 80093dc:	49dc      	ldr	r1, [pc, #880]	; (8009750 <_Z41__static_initialization_and_destruction_0ii+0xc98>)
 80093de:	48dd      	ldr	r0, [pc, #884]	; (8009754 <_Z41__static_initialization_and_destruction_0ii+0xc9c>)
 80093e0:	f015 faf0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80093e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80093e8:	4618      	mov	r0, r3
 80093ea:	f015 f845 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetVoltRangeCmd = string("setVoltRange");
 80093ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f015 f83f 	bl	801e476 <_ZNSaIcEC1Ev>
 80093f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80093fc:	461a      	mov	r2, r3
 80093fe:	49d6      	ldr	r1, [pc, #856]	; (8009758 <_Z41__static_initialization_and_destruction_0ii+0xca0>)
 8009400:	48d6      	ldr	r0, [pc, #856]	; (800975c <_Z41__static_initialization_and_destruction_0ii+0xca4>)
 8009402:	f015 fadf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009406:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800940a:	4618      	mov	r0, r3
 800940c:	f015 f834 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetVoltRangeCmd = string("getVoltRange");
 8009410:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009414:	4618      	mov	r0, r3
 8009416:	f015 f82e 	bl	801e476 <_ZNSaIcEC1Ev>
 800941a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800941e:	461a      	mov	r2, r3
 8009420:	49cf      	ldr	r1, [pc, #828]	; (8009760 <_Z41__static_initialization_and_destruction_0ii+0xca8>)
 8009422:	48d0      	ldr	r0, [pc, #832]	; (8009764 <_Z41__static_initialization_and_destruction_0ii+0xcac>)
 8009424:	f015 face 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009428:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800942c:	4618      	mov	r0, r3
 800942e:	f015 f823 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetCurrRangeCmd = string("setCurrRange");
 8009432:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009436:	4618      	mov	r0, r3
 8009438:	f015 f81d 	bl	801e476 <_ZNSaIcEC1Ev>
 800943c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009440:	461a      	mov	r2, r3
 8009442:	49c9      	ldr	r1, [pc, #804]	; (8009768 <_Z41__static_initialization_and_destruction_0ii+0xcb0>)
 8009444:	48c9      	ldr	r0, [pc, #804]	; (800976c <_Z41__static_initialization_and_destruction_0ii+0xcb4>)
 8009446:	f015 fabd 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800944a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800944e:	4618      	mov	r0, r3
 8009450:	f015 f812 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetCurrRangeCmd = string("getCurrRange");
 8009454:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009458:	4618      	mov	r0, r3
 800945a:	f015 f80c 	bl	801e476 <_ZNSaIcEC1Ev>
 800945e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009462:	461a      	mov	r2, r3
 8009464:	49c2      	ldr	r1, [pc, #776]	; (8009770 <_Z41__static_initialization_and_destruction_0ii+0xcb8>)
 8009466:	48c3      	ldr	r0, [pc, #780]	; (8009774 <_Z41__static_initialization_and_destruction_0ii+0xcbc>)
 8009468:	f015 faac 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800946c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009470:	4618      	mov	r0, r3
 8009472:	f015 f801 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetDeviceIdCmd = string("setDeviceId");
 8009476:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800947a:	4618      	mov	r0, r3
 800947c:	f014 fffb 	bl	801e476 <_ZNSaIcEC1Ev>
 8009480:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009484:	461a      	mov	r2, r3
 8009486:	49bc      	ldr	r1, [pc, #752]	; (8009778 <_Z41__static_initialization_and_destruction_0ii+0xcc0>)
 8009488:	48bc      	ldr	r0, [pc, #752]	; (800977c <_Z41__static_initialization_and_destruction_0ii+0xcc4>)
 800948a:	f015 fa9b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800948e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009492:	4618      	mov	r0, r3
 8009494:	f014 fff0 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetDeviceIdCmd = string("getDeviceId");
 8009498:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800949c:	4618      	mov	r0, r3
 800949e:	f014 ffea 	bl	801e476 <_ZNSaIcEC1Ev>
 80094a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80094a6:	461a      	mov	r2, r3
 80094a8:	49b5      	ldr	r1, [pc, #724]	; (8009780 <_Z41__static_initialization_and_destruction_0ii+0xcc8>)
 80094aa:	48b6      	ldr	r0, [pc, #728]	; (8009784 <_Z41__static_initialization_and_destruction_0ii+0xccc>)
 80094ac:	f015 fa8a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80094b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80094b4:	4618      	mov	r0, r3
 80094b6:	f014 ffdf 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetSamplePeriodCmd = string("setSamplePeriod");
 80094ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80094be:	4618      	mov	r0, r3
 80094c0:	f014 ffd9 	bl	801e476 <_ZNSaIcEC1Ev>
 80094c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80094c8:	461a      	mov	r2, r3
 80094ca:	49af      	ldr	r1, [pc, #700]	; (8009788 <_Z41__static_initialization_and_destruction_0ii+0xcd0>)
 80094cc:	48af      	ldr	r0, [pc, #700]	; (800978c <_Z41__static_initialization_and_destruction_0ii+0xcd4>)
 80094ce:	f015 fa79 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80094d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80094d6:	4618      	mov	r0, r3
 80094d8:	f014 ffce 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetSamplePeriodCmd = string("getSamplePeriod");
 80094dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80094e0:	4618      	mov	r0, r3
 80094e2:	f014 ffc8 	bl	801e476 <_ZNSaIcEC1Ev>
 80094e6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80094ea:	461a      	mov	r2, r3
 80094ec:	49a8      	ldr	r1, [pc, #672]	; (8009790 <_Z41__static_initialization_and_destruction_0ii+0xcd8>)
 80094ee:	48a9      	ldr	r0, [pc, #676]	; (8009794 <_Z41__static_initialization_and_destruction_0ii+0xcdc>)
 80094f0:	f015 fa68 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80094f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80094f8:	4618      	mov	r0, r3
 80094fa:	f014 ffbd 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetTestDoneTimeCmd = string("getTestDoneTime");
 80094fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009502:	4618      	mov	r0, r3
 8009504:	f014 ffb7 	bl	801e476 <_ZNSaIcEC1Ev>
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	461a      	mov	r2, r3
 800950e:	49a2      	ldr	r1, [pc, #648]	; (8009798 <_Z41__static_initialization_and_destruction_0ii+0xce0>)
 8009510:	48a2      	ldr	r0, [pc, #648]	; (800979c <_Z41__static_initialization_and_destruction_0ii+0xce4>)
 8009512:	f015 fa57 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951a:	4618      	mov	r0, r3
 800951c:	f014 ffac 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetTestNamesCmd = string("getTestNames");
 8009520:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009524:	4618      	mov	r0, r3
 8009526:	f014 ffa6 	bl	801e476 <_ZNSaIcEC1Ev>
 800952a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800952e:	461a      	mov	r2, r3
 8009530:	499b      	ldr	r1, [pc, #620]	; (80097a0 <_Z41__static_initialization_and_destruction_0ii+0xce8>)
 8009532:	489c      	ldr	r0, [pc, #624]	; (80097a4 <_Z41__static_initialization_and_destruction_0ii+0xcec>)
 8009534:	f015 fa46 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009538:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800953c:	4618      	mov	r0, r3
 800953e:	f014 ff9b 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetVersionCmd = string("getVersion");
 8009542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009546:	4618      	mov	r0, r3
 8009548:	f014 ff95 	bl	801e476 <_ZNSaIcEC1Ev>
 800954c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009550:	461a      	mov	r2, r3
 8009552:	4995      	ldr	r1, [pc, #596]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0xcf0>)
 8009554:	4895      	ldr	r0, [pc, #596]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0xcf4>)
 8009556:	f015 fa35 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800955a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800955e:	4618      	mov	r0, r3
 8009560:	f014 ff8a 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetVariantCmd = string("getVariant");
 8009564:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009568:	4618      	mov	r0, r3
 800956a:	f014 ff84 	bl	801e476 <_ZNSaIcEC1Ev>
 800956e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009572:	461a      	mov	r2, r3
 8009574:	498e      	ldr	r1, [pc, #568]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0xcf8>)
 8009576:	488f      	ldr	r0, [pc, #572]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0xcfc>)
 8009578:	f015 fa24 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800957c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009580:	4618      	mov	r0, r3
 8009582:	f014 ff79 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetMuxEnabledCmd = string("setMuxEnabled");
 8009586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800958a:	4618      	mov	r0, r3
 800958c:	f014 ff73 	bl	801e476 <_ZNSaIcEC1Ev>
 8009590:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009594:	461a      	mov	r2, r3
 8009596:	4988      	ldr	r1, [pc, #544]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xd00>)
 8009598:	4888      	ldr	r0, [pc, #544]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xd04>)
 800959a:	f015 fa13 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800959e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095a2:	4618      	mov	r0, r3
 80095a4:	f014 ff68 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetMuxEnabledCmd = string("getMuxEnabled");
 80095a8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80095ac:	4618      	mov	r0, r3
 80095ae:	f014 ff62 	bl	801e476 <_ZNSaIcEC1Ev>
 80095b2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80095b6:	461a      	mov	r2, r3
 80095b8:	4981      	ldr	r1, [pc, #516]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0xd08>)
 80095ba:	4882      	ldr	r0, [pc, #520]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xd0c>)
 80095bc:	f015 fa02 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80095c4:	4618      	mov	r0, r3
 80095c6:	f014 ff57 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetEnabledMuxChanCmd = string("setEnabledMuxChannels");
 80095ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095ce:	4618      	mov	r0, r3
 80095d0:	f014 ff51 	bl	801e476 <_ZNSaIcEC1Ev>
 80095d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095d8:	461a      	mov	r2, r3
 80095da:	497b      	ldr	r1, [pc, #492]	; (80097c8 <_Z41__static_initialization_and_destruction_0ii+0xd10>)
 80095dc:	487b      	ldr	r0, [pc, #492]	; (80097cc <_Z41__static_initialization_and_destruction_0ii+0xd14>)
 80095de:	f015 f9f1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80095e6:	4618      	mov	r0, r3
 80095e8:	f014 ff46 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetEnabledMuxChanCmd = string("getEnabledMuxChannels");
 80095ec:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80095f0:	4618      	mov	r0, r3
 80095f2:	f014 ff40 	bl	801e476 <_ZNSaIcEC1Ev>
 80095f6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80095fa:	461a      	mov	r2, r3
 80095fc:	4974      	ldr	r1, [pc, #464]	; (80097d0 <_Z41__static_initialization_and_destruction_0ii+0xd18>)
 80095fe:	4875      	ldr	r0, [pc, #468]	; (80097d4 <_Z41__static_initialization_and_destruction_0ii+0xd1c>)
 8009600:	f015 f9e0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009604:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009608:	4618      	mov	r0, r3
 800960a:	f014 ff35 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetMuxTestNamesCmd = string("getMuxTestNames");
 800960e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8009612:	4618      	mov	r0, r3
 8009614:	f014 ff2f 	bl	801e476 <_ZNSaIcEC1Ev>
 8009618:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800961c:	461a      	mov	r2, r3
 800961e:	496e      	ldr	r1, [pc, #440]	; (80097d8 <_Z41__static_initialization_and_destruction_0ii+0xd20>)
 8009620:	486e      	ldr	r0, [pc, #440]	; (80097dc <_Z41__static_initialization_and_destruction_0ii+0xd24>)
 8009622:	f015 f9cf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009626:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800962a:	4618      	mov	r0, r3
 800962c:	f014 ff24 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetMuxRefElectConnCmd = string("setMuxRefElectConnected");
 8009630:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8009634:	4618      	mov	r0, r3
 8009636:	f014 ff1e 	bl	801e476 <_ZNSaIcEC1Ev>
 800963a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800963e:	461a      	mov	r2, r3
 8009640:	4967      	ldr	r1, [pc, #412]	; (80097e0 <_Z41__static_initialization_and_destruction_0ii+0xd28>)
 8009642:	4868      	ldr	r0, [pc, #416]	; (80097e4 <_Z41__static_initialization_and_destruction_0ii+0xd2c>)
 8009644:	f015 f9be 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009648:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800964c:	4618      	mov	r0, r3
 800964e:	f014 ff13 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetMuxRefElectConnCmd = string("getMuxRefElectConnected");
 8009652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009656:	4618      	mov	r0, r3
 8009658:	f014 ff0d 	bl	801e476 <_ZNSaIcEC1Ev>
 800965c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009660:	461a      	mov	r2, r3
 8009662:	4961      	ldr	r1, [pc, #388]	; (80097e8 <_Z41__static_initialization_and_destruction_0ii+0xd30>)
 8009664:	4861      	ldr	r0, [pc, #388]	; (80097ec <_Z41__static_initialization_and_destruction_0ii+0xd34>)
 8009666:	f015 f9ad 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800966a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966e:	4618      	mov	r0, r3
 8009670:	f014 ff02 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetMuxCtrElectConnCmd = string("setMuxCtrElectConnected");
 8009674:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009678:	4618      	mov	r0, r3
 800967a:	f014 fefc 	bl	801e476 <_ZNSaIcEC1Ev>
 800967e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009682:	461a      	mov	r2, r3
 8009684:	495a      	ldr	r1, [pc, #360]	; (80097f0 <_Z41__static_initialization_and_destruction_0ii+0xd38>)
 8009686:	485b      	ldr	r0, [pc, #364]	; (80097f4 <_Z41__static_initialization_and_destruction_0ii+0xd3c>)
 8009688:	f015 f99c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800968c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009690:	4618      	mov	r0, r3
 8009692:	f014 fef1 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetMuxCtrElectConnCmd = string("getMuxCtrElectConnected");
 8009696:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800969a:	4618      	mov	r0, r3
 800969c:	f014 feeb 	bl	801e476 <_ZNSaIcEC1Ev>
 80096a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096a4:	461a      	mov	r2, r3
 80096a6:	4954      	ldr	r1, [pc, #336]	; (80097f8 <_Z41__static_initialization_and_destruction_0ii+0xd40>)
 80096a8:	4854      	ldr	r0, [pc, #336]	; (80097fc <_Z41__static_initialization_and_destruction_0ii+0xd44>)
 80096aa:	f015 f98b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096b2:	4618      	mov	r0, r3
 80096b4:	f014 fee0 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetMuxWrkElectConnCmd = string("setMuxWrkElectConnected");
 80096b8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096bc:	4618      	mov	r0, r3
 80096be:	f014 feda 	bl	801e476 <_ZNSaIcEC1Ev>
 80096c2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096c6:	461a      	mov	r2, r3
 80096c8:	494d      	ldr	r1, [pc, #308]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0xd48>)
 80096ca:	484e      	ldr	r0, [pc, #312]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0xd4c>)
 80096cc:	f015 f97a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096d0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096d4:	4618      	mov	r0, r3
 80096d6:	f014 fecf 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetMuxWrkElectConnCmd = string("getMuxWrkElectConnected");
 80096da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096de:	4618      	mov	r0, r3
 80096e0:	f014 fec9 	bl	801e476 <_ZNSaIcEC1Ev>
 80096e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096e8:	461a      	mov	r2, r3
 80096ea:	4947      	ldr	r1, [pc, #284]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xd50>)
 80096ec:	4847      	ldr	r0, [pc, #284]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xd54>)
 80096ee:	f015 f969 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80096f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096f6:	4618      	mov	r0, r3
 80096f8:	f014 febe 	bl	801e478 <_ZNSaIcED1Ev>
    const string DisconnAllMuxElectCmd = string("disconnectAllMuxElect");
 80096fc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009700:	4618      	mov	r0, r3
 8009702:	f014 feb8 	bl	801e476 <_ZNSaIcEC1Ev>
 8009706:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800970a:	461a      	mov	r2, r3
 800970c:	4940      	ldr	r1, [pc, #256]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xd58>)
 800970e:	4841      	ldr	r0, [pc, #260]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xd5c>)
 8009710:	f015 f958 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009714:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8009718:	4618      	mov	r0, r3
 800971a:	f014 fead 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetRefElectConnCmd = string("setRefElectConnected");
 800971e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009722:	4618      	mov	r0, r3
 8009724:	f014 fea7 	bl	801e476 <_ZNSaIcEC1Ev>
 8009728:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800972c:	461a      	mov	r2, r3
 800972e:	493a      	ldr	r1, [pc, #232]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xd60>)
 8009730:	483a      	ldr	r0, [pc, #232]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0xd64>)
 8009732:	f015 f947 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009736:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800973a:	4618      	mov	r0, r3
 800973c:	f014 fe9c 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetRefElectConnCmd = string("getRefElectConnected");
 8009740:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009744:	4618      	mov	r0, r3
 8009746:	e06b      	b.n	8009820 <_Z41__static_initialization_and_destruction_0ii+0xd68>
 8009748:	08021380 	.word	0x08021380
 800974c:	2000878c 	.word	0x2000878c
 8009750:	0802138c 	.word	0x0802138c
 8009754:	200087a4 	.word	0x200087a4
 8009758:	08021398 	.word	0x08021398
 800975c:	200087bc 	.word	0x200087bc
 8009760:	080213a8 	.word	0x080213a8
 8009764:	200087d4 	.word	0x200087d4
 8009768:	080213b8 	.word	0x080213b8
 800976c:	200087ec 	.word	0x200087ec
 8009770:	080213c8 	.word	0x080213c8
 8009774:	20008804 	.word	0x20008804
 8009778:	080213d8 	.word	0x080213d8
 800977c:	2000881c 	.word	0x2000881c
 8009780:	080213e4 	.word	0x080213e4
 8009784:	20008834 	.word	0x20008834
 8009788:	080213f0 	.word	0x080213f0
 800978c:	2000884c 	.word	0x2000884c
 8009790:	08021400 	.word	0x08021400
 8009794:	20008864 	.word	0x20008864
 8009798:	08021410 	.word	0x08021410
 800979c:	2000887c 	.word	0x2000887c
 80097a0:	08021420 	.word	0x08021420
 80097a4:	20008894 	.word	0x20008894
 80097a8:	08021430 	.word	0x08021430
 80097ac:	200088ac 	.word	0x200088ac
 80097b0:	0802143c 	.word	0x0802143c
 80097b4:	200088c4 	.word	0x200088c4
 80097b8:	08021448 	.word	0x08021448
 80097bc:	200088dc 	.word	0x200088dc
 80097c0:	08021458 	.word	0x08021458
 80097c4:	200088f4 	.word	0x200088f4
 80097c8:	08021468 	.word	0x08021468
 80097cc:	2000890c 	.word	0x2000890c
 80097d0:	08021480 	.word	0x08021480
 80097d4:	20008924 	.word	0x20008924
 80097d8:	08021498 	.word	0x08021498
 80097dc:	2000893c 	.word	0x2000893c
 80097e0:	080214a8 	.word	0x080214a8
 80097e4:	20008954 	.word	0x20008954
 80097e8:	080214c0 	.word	0x080214c0
 80097ec:	2000896c 	.word	0x2000896c
 80097f0:	080214d8 	.word	0x080214d8
 80097f4:	20008984 	.word	0x20008984
 80097f8:	080214f0 	.word	0x080214f0
 80097fc:	2000899c 	.word	0x2000899c
 8009800:	08021508 	.word	0x08021508
 8009804:	200089b4 	.word	0x200089b4
 8009808:	08021520 	.word	0x08021520
 800980c:	200089cc 	.word	0x200089cc
 8009810:	08021538 	.word	0x08021538
 8009814:	200089e4 	.word	0x200089e4
 8009818:	08021550 	.word	0x08021550
 800981c:	200089fc 	.word	0x200089fc
 8009820:	f014 fe29 	bl	801e476 <_ZNSaIcEC1Ev>
 8009824:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009828:	461a      	mov	r2, r3
 800982a:	49e2      	ldr	r1, [pc, #904]	; (8009bb4 <_Z41__static_initialization_and_destruction_0ii+0x10fc>)
 800982c:	48e2      	ldr	r0, [pc, #904]	; (8009bb8 <_Z41__static_initialization_and_destruction_0ii+0x1100>)
 800982e:	f015 f8c9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009832:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009836:	4618      	mov	r0, r3
 8009838:	f014 fe1e 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetCtrElectConnCmd = string("setCtrElectConnected");
 800983c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009840:	4618      	mov	r0, r3
 8009842:	f014 fe18 	bl	801e476 <_ZNSaIcEC1Ev>
 8009846:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800984a:	461a      	mov	r2, r3
 800984c:	49db      	ldr	r1, [pc, #876]	; (8009bbc <_Z41__static_initialization_and_destruction_0ii+0x1104>)
 800984e:	48dc      	ldr	r0, [pc, #880]	; (8009bc0 <_Z41__static_initialization_and_destruction_0ii+0x1108>)
 8009850:	f015 f8b8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009854:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009858:	4618      	mov	r0, r3
 800985a:	f014 fe0d 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetCtrElectConnCmd = string("getCtrElectConnected");
 800985e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009862:	4618      	mov	r0, r3
 8009864:	f014 fe07 	bl	801e476 <_ZNSaIcEC1Ev>
 8009868:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800986c:	461a      	mov	r2, r3
 800986e:	49d5      	ldr	r1, [pc, #852]	; (8009bc4 <_Z41__static_initialization_and_destruction_0ii+0x110c>)
 8009870:	48d5      	ldr	r0, [pc, #852]	; (8009bc8 <_Z41__static_initialization_and_destruction_0ii+0x1110>)
 8009872:	f015 f8a7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009876:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800987a:	4618      	mov	r0, r3
 800987c:	f014 fdfc 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetWrkElectConnCmd = string("setWrkElectConnected");
 8009880:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009884:	4618      	mov	r0, r3
 8009886:	f014 fdf6 	bl	801e476 <_ZNSaIcEC1Ev>
 800988a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800988e:	461a      	mov	r2, r3
 8009890:	49ce      	ldr	r1, [pc, #824]	; (8009bcc <_Z41__static_initialization_and_destruction_0ii+0x1114>)
 8009892:	48cf      	ldr	r0, [pc, #828]	; (8009bd0 <_Z41__static_initialization_and_destruction_0ii+0x1118>)
 8009894:	f015 f896 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009898:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800989c:	4618      	mov	r0, r3
 800989e:	f014 fdeb 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetWrkElectConnCmd = string("getWrkElectConnected");
 80098a2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80098a6:	4618      	mov	r0, r3
 80098a8:	f014 fde5 	bl	801e476 <_ZNSaIcEC1Ev>
 80098ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80098b0:	461a      	mov	r2, r3
 80098b2:	49c8      	ldr	r1, [pc, #800]	; (8009bd4 <_Z41__static_initialization_and_destruction_0ii+0x111c>)
 80098b4:	48c8      	ldr	r0, [pc, #800]	; (8009bd8 <_Z41__static_initialization_and_destruction_0ii+0x1120>)
 80098b6:	f015 f885 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098ba:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80098be:	4618      	mov	r0, r3
 80098c0:	f014 fdda 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetAllElectConnCmd = string("setAllElectConnected");
 80098c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80098c8:	4618      	mov	r0, r3
 80098ca:	f014 fdd4 	bl	801e476 <_ZNSaIcEC1Ev>
 80098ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80098d2:	461a      	mov	r2, r3
 80098d4:	49c1      	ldr	r1, [pc, #772]	; (8009bdc <_Z41__static_initialization_and_destruction_0ii+0x1124>)
 80098d6:	48c2      	ldr	r0, [pc, #776]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0x1128>)
 80098d8:	f015 f874 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80098e0:	4618      	mov	r0, r3
 80098e2:	f014 fdc9 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetAllElectConnCmd = string("getAllElectConnected");
 80098e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80098ea:	4618      	mov	r0, r3
 80098ec:	f014 fdc3 	bl	801e476 <_ZNSaIcEC1Ev>
 80098f0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80098f4:	461a      	mov	r2, r3
 80098f6:	49bb      	ldr	r1, [pc, #748]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0x112c>)
 80098f8:	48bb      	ldr	r0, [pc, #748]	; (8009be8 <_Z41__static_initialization_and_destruction_0ii+0x1130>)
 80098fa:	f015 f863 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098fe:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8009902:	4618      	mov	r0, r3
 8009904:	f014 fdb8 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetElectAutoConnCmd = string("setElectAutoConnect");
 8009908:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800990c:	4618      	mov	r0, r3
 800990e:	f014 fdb2 	bl	801e476 <_ZNSaIcEC1Ev>
 8009912:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009916:	461a      	mov	r2, r3
 8009918:	49b4      	ldr	r1, [pc, #720]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0x1134>)
 800991a:	48b5      	ldr	r0, [pc, #724]	; (8009bf0 <_Z41__static_initialization_and_destruction_0ii+0x1138>)
 800991c:	f015 f852 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009920:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009924:	4618      	mov	r0, r3
 8009926:	f014 fda7 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetElectAutoConnCmd = string("getElectAutoConnect");
 800992a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800992e:	4618      	mov	r0, r3
 8009930:	f014 fda1 	bl	801e476 <_ZNSaIcEC1Ev>
 8009934:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009938:	461a      	mov	r2, r3
 800993a:	49ae      	ldr	r1, [pc, #696]	; (8009bf4 <_Z41__static_initialization_and_destruction_0ii+0x113c>)
 800993c:	48ae      	ldr	r0, [pc, #696]	; (8009bf8 <_Z41__static_initialization_and_destruction_0ii+0x1140>)
 800993e:	f015 f841 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009942:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009946:	4618      	mov	r0, r3
 8009948:	f014 fd96 	bl	801e478 <_ZNSaIcED1Ev>
    const string SetRefElectVoltRangeCmd = string("setRefElectVoltRange");
 800994c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009950:	4618      	mov	r0, r3
 8009952:	f014 fd90 	bl	801e476 <_ZNSaIcEC1Ev>
 8009956:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800995a:	461a      	mov	r2, r3
 800995c:	49a7      	ldr	r1, [pc, #668]	; (8009bfc <_Z41__static_initialization_and_destruction_0ii+0x1144>)
 800995e:	48a8      	ldr	r0, [pc, #672]	; (8009c00 <_Z41__static_initialization_and_destruction_0ii+0x1148>)
 8009960:	f015 f830 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009964:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009968:	4618      	mov	r0, r3
 800996a:	f014 fd85 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetRefElectVoltRangeCmd = string("getRefElectVoltRange");
 800996e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8009972:	4618      	mov	r0, r3
 8009974:	f014 fd7f 	bl	801e476 <_ZNSaIcEC1Ev>
 8009978:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800997c:	461a      	mov	r2, r3
 800997e:	49a1      	ldr	r1, [pc, #644]	; (8009c04 <_Z41__static_initialization_and_destruction_0ii+0x114c>)
 8009980:	48a1      	ldr	r0, [pc, #644]	; (8009c08 <_Z41__static_initialization_and_destruction_0ii+0x1150>)
 8009982:	f015 f81f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009986:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800998a:	4618      	mov	r0, r3
 800998c:	f014 fd74 	bl	801e478 <_ZNSaIcED1Ev>
    const string GetHardwareVersionCmd = string("getHardwareVersion");
 8009990:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009994:	4618      	mov	r0, r3
 8009996:	f014 fd6e 	bl	801e476 <_ZNSaIcEC1Ev>
 800999a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800999e:	461a      	mov	r2, r3
 80099a0:	499a      	ldr	r1, [pc, #616]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0x1154>)
 80099a2:	489b      	ldr	r0, [pc, #620]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0x1158>)
 80099a4:	f015 f80e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099a8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80099ac:	4618      	mov	r0, r3
 80099ae:	f014 fd63 	bl	801e478 <_ZNSaIcED1Ev>
    const string VoltageVariant = string("10V");
 80099b2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80099b6:	4618      	mov	r0, r3
 80099b8:	f014 fd5d 	bl	801e476 <_ZNSaIcEC1Ev>
 80099bc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80099c0:	461a      	mov	r2, r3
 80099c2:	4994      	ldr	r1, [pc, #592]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0x115c>)
 80099c4:	4894      	ldr	r0, [pc, #592]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0x1160>)
 80099c6:	f014 fffd 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099ca:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80099ce:	4618      	mov	r0, r3
 80099d0:	f014 fd52 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeDac VoltRangeDac1V(string("1V"), -1.0, 1.0, VoltGain1X, AnalogSubsystem::MaxValueDac);
 80099d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80099d8:	4618      	mov	r0, r3
 80099da:	f014 fd4c 	bl	801e476 <_ZNSaIcEC1Ev>
 80099de:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80099e2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80099e6:	498d      	ldr	r1, [pc, #564]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0x1164>)
 80099e8:	4618      	mov	r0, r3
 80099ea:	f014 ffeb 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099ee:	4b8c      	ldr	r3, [pc, #560]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0x1168>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80099f6:	2200      	movs	r2, #0
 80099f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80099fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009a00:	4888      	ldr	r0, [pc, #544]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0x116c>)
 8009a02:	f7fe fe2a 	bl	800865a <_ZN2ps12VoltRangeDacC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009a06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f014 fe33 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a10:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009a14:	4618      	mov	r0, r3
 8009a16:	f014 fd2f 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeDac VoltRangeDac2V(string("2V"), -2.0, 2.0, VoltGain2X, AnalogSubsystem::MaxValueDac);
 8009a1a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f014 fd29 	bl	801e476 <_ZNSaIcEC1Ev>
 8009a24:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8009a28:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009a2c:	497e      	ldr	r1, [pc, #504]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0x1170>)
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f014 ffc8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a34:	4b7a      	ldr	r3, [pc, #488]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0x1168>)
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009a42:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 8009a46:	4879      	ldr	r0, [pc, #484]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0x1174>)
 8009a48:	f7fe fe07 	bl	800865a <_ZN2ps12VoltRangeDacC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009a4c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8009a50:	4618      	mov	r0, r3
 8009a52:	f014 fe10 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a56:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f014 fd0c 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeDac VoltRangeDac5V(string("5V"), -5.0, 5.0, VoltGain5X, AnalogSubsystem::MaxValueDac);
 8009a60:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f014 fd06 	bl	801e476 <_ZNSaIcEC1Ev>
 8009a6a:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8009a6e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009a72:	496f      	ldr	r1, [pc, #444]	; (8009c30 <_Z41__static_initialization_and_destruction_0ii+0x1178>)
 8009a74:	4618      	mov	r0, r3
 8009a76:	f014 ffa5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a7a:	4b69      	ldr	r3, [pc, #420]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0x1168>)
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8009a82:	2202      	movs	r2, #2
 8009a84:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8009a88:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8009a8c:	4869      	ldr	r0, [pc, #420]	; (8009c34 <_Z41__static_initialization_and_destruction_0ii+0x117c>)
 8009a8e:	f7fe fde4 	bl	800865a <_ZN2ps12VoltRangeDacC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009a92:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f014 fded 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a9c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f014 fce9 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeDac VoltRangeDac10V(string("10V"), -10.0, 10.0, VoltGain10X, AnalogSubsystem::MaxValueDac);
 8009aa6:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f014 fce3 	bl	801e476 <_ZNSaIcEC1Ev>
 8009ab0:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8009ab4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8009ab8:	4956      	ldr	r1, [pc, #344]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0x115c>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f014 ff82 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ac0:	4b57      	ldr	r3, [pc, #348]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0x1168>)
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8009ac8:	2203      	movs	r2, #3
 8009aca:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8009ace:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8009ad2:	4859      	ldr	r0, [pc, #356]	; (8009c38 <_Z41__static_initialization_and_destruction_0ii+0x1180>)
 8009ad4:	f7fe fdc1 	bl	800865a <_ZN2ps12VoltRangeDacC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009ad8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f014 fdca 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ae2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f014 fcc6 	bl	801e478 <_ZNSaIcED1Ev>
    VoltRangeDac DacArrayTmp[NumVoltRangeDac] = {VoltRangeDac1V, VoltRangeDac2V, VoltRangeDac5V, VoltRangeDac10V};
 8009aec:	4c53      	ldr	r4, [pc, #332]	; (8009c3c <_Z41__static_initialization_and_destruction_0ii+0x1184>)
 8009aee:	494d      	ldr	r1, [pc, #308]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0x116c>)
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7fb fd89 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 8009af6:	3424      	adds	r4, #36	; 0x24
 8009af8:	494c      	ldr	r1, [pc, #304]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0x1174>)
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7fb fd84 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 8009b00:	3424      	adds	r4, #36	; 0x24
 8009b02:	494c      	ldr	r1, [pc, #304]	; (8009c34 <_Z41__static_initialization_and_destruction_0ii+0x117c>)
 8009b04:	4620      	mov	r0, r4
 8009b06:	f7fb fd7f 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
 8009b0a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8009b0e:	494a      	ldr	r1, [pc, #296]	; (8009c38 <_Z41__static_initialization_and_destruction_0ii+0x1180>)
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fb fd79 	bl	8005608 <_ZN2ps12VoltRangeDacC1ERKS0_>
    Array<VoltRangeDac,NumVoltRangeDac> VoltRangeDacArray(DacArrayTmp);
 8009b16:	4949      	ldr	r1, [pc, #292]	; (8009c3c <_Z41__static_initialization_and_destruction_0ii+0x1184>)
 8009b18:	4849      	ldr	r0, [pc, #292]	; (8009c40 <_Z41__static_initialization_and_destruction_0ii+0x1188>)
 8009b1a:	f7fe fe6b 	bl	80087f4 <_ZN5ArrayIN2ps12VoltRangeDacELj4EEC1IS1_Lj4EEERAT0__KT_>
    const VoltRangeAdc VoltRangeAdc1V(string("1V"), -1.0, 1.0, VoltGain1X, AnalogSubsystem::MaxValueAin);
 8009b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b22:	4618      	mov	r0, r3
 8009b24:	f014 fca7 	bl	801e476 <_ZNSaIcEC1Ev>
 8009b28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009b2c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009b30:	493a      	ldr	r1, [pc, #232]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0x1164>)
 8009b32:	4618      	mov	r0, r3
 8009b34:	f014 ff46 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b38:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <_Z41__static_initialization_and_destruction_0ii+0x118c>)
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8009b40:	2200      	movs	r2, #0
 8009b42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009b46:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009b4a:	483f      	ldr	r0, [pc, #252]	; (8009c48 <_Z41__static_initialization_and_destruction_0ii+0x1190>)
 8009b4c:	f7fe fdb0 	bl	80086b0 <_ZN2ps12VoltRangeAdcC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009b50:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f014 fd8e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f014 fc8a 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeAdc VoltRangeAdc2V(string("2V"), -2.0, 2.0, VoltGain2X, AnalogSubsystem::MaxValueAin);
 8009b64:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f014 fc84 	bl	801e476 <_ZNSaIcEC1Ev>
 8009b6e:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8009b72:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8009b76:	492c      	ldr	r1, [pc, #176]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0x1170>)
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f014 ff23 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b7e:	4b31      	ldr	r3, [pc, #196]	; (8009c44 <_Z41__static_initialization_and_destruction_0ii+0x118c>)
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8009b86:	2201      	movs	r2, #1
 8009b88:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8009b8c:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 8009b90:	482e      	ldr	r0, [pc, #184]	; (8009c4c <_Z41__static_initialization_and_destruction_0ii+0x1194>)
 8009b92:	f7fe fd8d 	bl	80086b0 <_ZN2ps12VoltRangeAdcC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009b96:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f014 fd6b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ba0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f014 fc67 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeAdc VoltRangeAdc5V(string("5V"), -5.0, 5.0, VoltGain5X, AnalogSubsystem::MaxValueAin);
 8009baa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8009bae:	4618      	mov	r0, r3
 8009bb0:	e04e      	b.n	8009c50 <_Z41__static_initialization_and_destruction_0ii+0x1198>
 8009bb2:	bf00      	nop
 8009bb4:	08021568 	.word	0x08021568
 8009bb8:	20008a14 	.word	0x20008a14
 8009bbc:	08021580 	.word	0x08021580
 8009bc0:	20008a2c 	.word	0x20008a2c
 8009bc4:	08021598 	.word	0x08021598
 8009bc8:	20008a44 	.word	0x20008a44
 8009bcc:	080215b0 	.word	0x080215b0
 8009bd0:	20008a5c 	.word	0x20008a5c
 8009bd4:	080215c8 	.word	0x080215c8
 8009bd8:	20008a74 	.word	0x20008a74
 8009bdc:	080215e0 	.word	0x080215e0
 8009be0:	20008a8c 	.word	0x20008a8c
 8009be4:	080215f8 	.word	0x080215f8
 8009be8:	20008aa4 	.word	0x20008aa4
 8009bec:	08021610 	.word	0x08021610
 8009bf0:	20008abc 	.word	0x20008abc
 8009bf4:	08021624 	.word	0x08021624
 8009bf8:	20008ad4 	.word	0x20008ad4
 8009bfc:	08021638 	.word	0x08021638
 8009c00:	20008aec 	.word	0x20008aec
 8009c04:	08021650 	.word	0x08021650
 8009c08:	20008b04 	.word	0x20008b04
 8009c0c:	08021668 	.word	0x08021668
 8009c10:	20008b1c 	.word	0x20008b1c
 8009c14:	0802167c 	.word	0x0802167c
 8009c18:	20008b34 	.word	0x20008b34
 8009c1c:	08021680 	.word	0x08021680
 8009c20:	0802224e 	.word	0x0802224e
 8009c24:	20008b4c 	.word	0x20008b4c
 8009c28:	08021684 	.word	0x08021684
 8009c2c:	20008b70 	.word	0x20008b70
 8009c30:	08021688 	.word	0x08021688
 8009c34:	20008b94 	.word	0x20008b94
 8009c38:	20008bb8 	.word	0x20008bb8
 8009c3c:	20008bdc 	.word	0x20008bdc
 8009c40:	20008c6c 	.word	0x20008c6c
 8009c44:	0802224c 	.word	0x0802224c
 8009c48:	20008d00 	.word	0x20008d00
 8009c4c:	20008d24 	.word	0x20008d24
 8009c50:	f014 fc11 	bl	801e476 <_ZNSaIcEC1Ev>
 8009c54:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8009c58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8009c5c:	49cb      	ldr	r1, [pc, #812]	; (8009f8c <_Z41__static_initialization_and_destruction_0ii+0x14d4>)
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f014 feb0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009c64:	4bca      	ldr	r3, [pc, #808]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8009c72:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8009c76:	48c7      	ldr	r0, [pc, #796]	; (8009f94 <_Z41__static_initialization_and_destruction_0ii+0x14dc>)
 8009c78:	f7fe fd1a 	bl	80086b0 <_ZN2ps12VoltRangeAdcC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009c7c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8009c80:	4618      	mov	r0, r3
 8009c82:	f014 fcf8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009c86:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f014 fbf4 	bl	801e478 <_ZNSaIcED1Ev>
    const VoltRangeAdc VoltRangeAdc10V(string("10V"), -10.0, 10.0, VoltGain10X, AnalogSubsystem::MaxValueAin);
 8009c90:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8009c94:	4618      	mov	r0, r3
 8009c96:	f014 fbee 	bl	801e476 <_ZNSaIcEC1Ev>
 8009c9a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8009c9e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8009ca2:	49bd      	ldr	r1, [pc, #756]	; (8009f98 <_Z41__static_initialization_and_destruction_0ii+0x14e0>)
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f014 fe8d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009caa:	4bb9      	ldr	r3, [pc, #740]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8009cb8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8009cbc:	48b7      	ldr	r0, [pc, #732]	; (8009f9c <_Z41__static_initialization_and_destruction_0ii+0x14e4>)
 8009cbe:	f7fe fcf7 	bl	80086b0 <_ZN2ps12VoltRangeAdcC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_8VoltGainEt>
 8009cc2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f014 fcd5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ccc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f014 fbd1 	bl	801e478 <_ZNSaIcED1Ev>
    VoltRangeAdc AdcArrayTmp[NumVoltRangeAdc] = {VoltRangeAdc1V, VoltRangeAdc2V, VoltRangeAdc5V, VoltRangeAdc10V};
 8009cd6:	4cb2      	ldr	r4, [pc, #712]	; (8009fa0 <_Z41__static_initialization_and_destruction_0ii+0x14e8>)
 8009cd8:	49b2      	ldr	r1, [pc, #712]	; (8009fa4 <_Z41__static_initialization_and_destruction_0ii+0x14ec>)
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7fb fca4 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 8009ce0:	3424      	adds	r4, #36	; 0x24
 8009ce2:	49b1      	ldr	r1, [pc, #708]	; (8009fa8 <_Z41__static_initialization_and_destruction_0ii+0x14f0>)
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f7fb fc9f 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 8009cea:	3424      	adds	r4, #36	; 0x24
 8009cec:	49a9      	ldr	r1, [pc, #676]	; (8009f94 <_Z41__static_initialization_and_destruction_0ii+0x14dc>)
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f7fb fc9a 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
 8009cf4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8009cf8:	49a8      	ldr	r1, [pc, #672]	; (8009f9c <_Z41__static_initialization_and_destruction_0ii+0x14e4>)
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fb fc94 	bl	8005628 <_ZN2ps12VoltRangeAdcC1ERKS0_>
    Array<VoltRangeAdc,NumVoltRangeAdc> VoltRangeAdcArray(AdcArrayTmp);
 8009d00:	49a7      	ldr	r1, [pc, #668]	; (8009fa0 <_Z41__static_initialization_and_destruction_0ii+0x14e8>)
 8009d02:	48aa      	ldr	r0, [pc, #680]	; (8009fac <_Z41__static_initialization_and_destruction_0ii+0x14f4>)
 8009d04:	f7fe fd93 	bl	800882e <_ZN5ArrayIN2ps12VoltRangeAdcELj4EEC1IS1_Lj4EEERAT0__KT_>
    const string CurrentVariant = string("microAmp");
 8009d08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f014 fbb2 	bl	801e476 <_ZNSaIcEC1Ev>
 8009d12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009d16:	461a      	mov	r2, r3
 8009d18:	49a5      	ldr	r1, [pc, #660]	; (8009fb0 <_Z41__static_initialization_and_destruction_0ii+0x14f8>)
 8009d1a:	48a6      	ldr	r0, [pc, #664]	; (8009fb4 <_Z41__static_initialization_and_destruction_0ii+0x14fc>)
 8009d1c:	f014 fe52 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8009d24:	4618      	mov	r0, r3
 8009d26:	f014 fba7 	bl	801e478 <_ZNSaIcED1Ev>
    const CurrRange CurrRange1uA("1uA", -1.0, 1.0, CurrGainPathIn1, AnalogSubsystem::MaxValueAin); 
 8009d2a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f014 fba1 	bl	801e476 <_ZNSaIcEC1Ev>
 8009d34:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8009d38:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8009d3c:	499e      	ldr	r1, [pc, #632]	; (8009fb8 <_Z41__static_initialization_and_destruction_0ii+0x1500>)
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f014 fe40 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d44:	4b92      	ldr	r3, [pc, #584]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	f507 7119 	add.w	r1, r7, #612	; 0x264
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009d52:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009d56:	4899      	ldr	r0, [pc, #612]	; (8009fbc <_Z41__static_initialization_and_destruction_0ii+0x1504>)
 8009d58:	f7fe fcd5 	bl	8008706 <_ZN2ps9CurrRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_12CurrGainPathEt>
 8009d5c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8009d60:	4618      	mov	r0, r3
 8009d62:	f014 fc88 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009d66:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f014 fb84 	bl	801e478 <_ZNSaIcED1Ev>
    const CurrRange CurrRange10uA("10uA", -10.0, 10.0, CurrGainPathIn2, AnalogSubsystem::MaxValueAin); 
 8009d70:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8009d74:	4618      	mov	r0, r3
 8009d76:	f014 fb7e 	bl	801e476 <_ZNSaIcEC1Ev>
 8009d7a:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8009d7e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8009d82:	498f      	ldr	r1, [pc, #572]	; (8009fc0 <_Z41__static_initialization_and_destruction_0ii+0x1508>)
 8009d84:	4618      	mov	r0, r3
 8009d86:	f014 fe1d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d8a:	4b81      	ldr	r3, [pc, #516]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8009d92:	2201      	movs	r2, #1
 8009d94:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8009d98:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8009d9c:	4889      	ldr	r0, [pc, #548]	; (8009fc4 <_Z41__static_initialization_and_destruction_0ii+0x150c>)
 8009d9e:	f7fe fcb2 	bl	8008706 <_ZN2ps9CurrRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_12CurrGainPathEt>
 8009da2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8009da6:	4618      	mov	r0, r3
 8009da8:	f014 fc65 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009dac:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8009db0:	4618      	mov	r0, r3
 8009db2:	f014 fb61 	bl	801e478 <_ZNSaIcED1Ev>
    const CurrRange CurrRange100uA("100uA", -100.0, 100.0, CurrGainPathIn3, AnalogSubsystem::MaxValueAin); 
 8009db6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f014 fb5b 	bl	801e476 <_ZNSaIcEC1Ev>
 8009dc0:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8009dc4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8009dc8:	497f      	ldr	r1, [pc, #508]	; (8009fc8 <_Z41__static_initialization_and_destruction_0ii+0x1510>)
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f014 fdfa 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009dd0:	4b6f      	ldr	r3, [pc, #444]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8009dd8:	2202      	movs	r2, #2
 8009dda:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8009fcc <_Z41__static_initialization_and_destruction_0ii+0x1514>
 8009dde:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8009fd0 <_Z41__static_initialization_and_destruction_0ii+0x1518>
 8009de2:	487c      	ldr	r0, [pc, #496]	; (8009fd4 <_Z41__static_initialization_and_destruction_0ii+0x151c>)
 8009de4:	f7fe fc8f 	bl	8008706 <_ZN2ps9CurrRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_12CurrGainPathEt>
 8009de8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8009dec:	4618      	mov	r0, r3
 8009dee:	f014 fc42 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009df2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f014 fb3e 	bl	801e478 <_ZNSaIcED1Ev>
    const CurrRange CurrRange1000uA("1000uA", -1000.0, 1000.0, CurrGainPathIn4, AnalogSubsystem::MaxValueAin); 
 8009dfc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f014 fb38 	bl	801e476 <_ZNSaIcEC1Ev>
 8009e06:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8009e0a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8009e0e:	4972      	ldr	r1, [pc, #456]	; (8009fd8 <_Z41__static_initialization_and_destruction_0ii+0x1520>)
 8009e10:	4618      	mov	r0, r3
 8009e12:	f014 fdd7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e16:	4b5e      	ldr	r3, [pc, #376]	; (8009f90 <_Z41__static_initialization_and_destruction_0ii+0x14d8>)
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8009e1e:	2203      	movs	r2, #3
 8009e20:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8009fdc <_Z41__static_initialization_and_destruction_0ii+0x1524>
 8009e24:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8009fe0 <_Z41__static_initialization_and_destruction_0ii+0x1528>
 8009e28:	486e      	ldr	r0, [pc, #440]	; (8009fe4 <_Z41__static_initialization_and_destruction_0ii+0x152c>)
 8009e2a:	f7fe fc6c 	bl	8008706 <_ZN2ps9CurrRangeC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEffNS_12CurrGainPathEt>
 8009e2e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f014 fc1f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e38:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f014 fb1b 	bl	801e478 <_ZNSaIcED1Ev>
    CurrRange currRangeArrayTmp[NumCurrRange] = {CurrRange1uA, CurrRange10uA, CurrRange100uA, CurrRange1000uA};
 8009e42:	4c69      	ldr	r4, [pc, #420]	; (8009fe8 <_Z41__static_initialization_and_destruction_0ii+0x1530>)
 8009e44:	495d      	ldr	r1, [pc, #372]	; (8009fbc <_Z41__static_initialization_and_destruction_0ii+0x1504>)
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7fb fc20 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
 8009e4c:	3424      	adds	r4, #36	; 0x24
 8009e4e:	495d      	ldr	r1, [pc, #372]	; (8009fc4 <_Z41__static_initialization_and_destruction_0ii+0x150c>)
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7fb fc1b 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
 8009e56:	3424      	adds	r4, #36	; 0x24
 8009e58:	495e      	ldr	r1, [pc, #376]	; (8009fd4 <_Z41__static_initialization_and_destruction_0ii+0x151c>)
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f7fb fc16 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
 8009e60:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8009e64:	495f      	ldr	r1, [pc, #380]	; (8009fe4 <_Z41__static_initialization_and_destruction_0ii+0x152c>)
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fb fc10 	bl	800568c <_ZN2ps9CurrRangeC1ERKS0_>
    const string HardwareVariant = VoltageVariant + string("_") + CurrentVariant + HardwareVersion;
 8009e6c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009e70:	4618      	mov	r0, r3
 8009e72:	f014 fb00 	bl	801e476 <_ZNSaIcEC1Ev>
 8009e76:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8009e7a:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8009e7e:	495b      	ldr	r1, [pc, #364]	; (8009fec <_Z41__static_initialization_and_destruction_0ii+0x1534>)
 8009e80:	4618      	mov	r0, r3
 8009e82:	f014 fd9f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009e86:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009e8a:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8009e8e:	4958      	ldr	r1, [pc, #352]	; (8009ff0 <_Z41__static_initialization_and_destruction_0ii+0x1538>)
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fa fb64 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8009e96:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8009e9a:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8009e9e:	4a45      	ldr	r2, [pc, #276]	; (8009fb4 <_Z41__static_initialization_and_destruction_0ii+0x14fc>)
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fc fbb6 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009ea6:	4853      	ldr	r0, [pc, #332]	; (8009ff4 <_Z41__static_initialization_and_destruction_0ii+0x153c>)
 8009ea8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8009eac:	4a52      	ldr	r2, [pc, #328]	; (8009ff8 <_Z41__static_initialization_and_destruction_0ii+0x1540>)
 8009eae:	4619      	mov	r1, r3
 8009eb0:	f7fc fbaf 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009eb4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f014 fbdc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ebe:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f014 fbd7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ec8:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f014 fbd2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ed2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f014 face 	bl	801e478 <_ZNSaIcED1Ev>
    Array<CurrRange,NumCurrRange>  CurrRangeArray(currRangeArrayTmp);
 8009edc:	4942      	ldr	r1, [pc, #264]	; (8009fe8 <_Z41__static_initialization_and_destruction_0ii+0x1530>)
 8009ede:	4847      	ldr	r0, [pc, #284]	; (8009ffc <_Z41__static_initialization_and_destruction_0ii+0x1544>)
 8009ee0:	f7fe fcc2 	bl	8008868 <_ZN5ArrayIN2ps9CurrRangeELj4EEC1IS1_Lj4EEERAT0__KT_>
 8009ee4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009ee8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f040 81aa 	bne.w	800a248 <_Z41__static_initialization_and_destruction_0ii+0x1790>
 8009ef4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8009ef8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f02:	4293      	cmp	r3, r2
 8009f04:	f040 81a0 	bne.w	800a248 <_Z41__static_initialization_and_destruction_0ii+0x1790>
 8009f08:	483c      	ldr	r0, [pc, #240]	; (8009ffc <_Z41__static_initialization_and_destruction_0ii+0x1544>)
 8009f0a:	f7fe fd90 	bl	8008a2e <_ZN5ArrayIN2ps9CurrRangeELj4EED1Ev>
    const string HardwareVariant = VoltageVariant + string("_") + CurrentVariant + HardwareVersion;
 8009f0e:	4839      	ldr	r0, [pc, #228]	; (8009ff4 <_Z41__static_initialization_and_destruction_0ii+0x153c>)
 8009f10:	f014 fbb1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    CurrRange currRangeArrayTmp[NumCurrRange] = {CurrRange1uA, CurrRange10uA, CurrRange100uA, CurrRange1000uA};
 8009f14:	4c3a      	ldr	r4, [pc, #232]	; (800a000 <_Z41__static_initialization_and_destruction_0ii+0x1548>)
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <_Z41__static_initialization_and_destruction_0ii+0x1530>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	d004      	beq.n	8009f26 <_Z41__static_initialization_and_destruction_0ii+0x146e>
 8009f1c:	3c24      	subs	r4, #36	; 0x24
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7f8 f92c 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
 8009f24:	e7f7      	b.n	8009f16 <_Z41__static_initialization_and_destruction_0ii+0x145e>
    const CurrRange CurrRange1000uA("1000uA", -1000.0, 1000.0, CurrGainPathIn4, AnalogSubsystem::MaxValueAin); 
 8009f26:	482f      	ldr	r0, [pc, #188]	; (8009fe4 <_Z41__static_initialization_and_destruction_0ii+0x152c>)
 8009f28:	f7f8 f928 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
    const CurrRange CurrRange100uA("100uA", -100.0, 100.0, CurrGainPathIn3, AnalogSubsystem::MaxValueAin); 
 8009f2c:	4829      	ldr	r0, [pc, #164]	; (8009fd4 <_Z41__static_initialization_and_destruction_0ii+0x151c>)
 8009f2e:	f7f8 f925 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
    const CurrRange CurrRange10uA("10uA", -10.0, 10.0, CurrGainPathIn2, AnalogSubsystem::MaxValueAin); 
 8009f32:	4824      	ldr	r0, [pc, #144]	; (8009fc4 <_Z41__static_initialization_and_destruction_0ii+0x150c>)
 8009f34:	f7f8 f922 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
    const CurrRange CurrRange1uA("1uA", -1.0, 1.0, CurrGainPathIn1, AnalogSubsystem::MaxValueAin); 
 8009f38:	4820      	ldr	r0, [pc, #128]	; (8009fbc <_Z41__static_initialization_and_destruction_0ii+0x1504>)
 8009f3a:	f7f8 f91f 	bl	800217c <_ZN2ps9CurrRangeD1Ev>
    const string CurrentVariant = string("microAmp");
 8009f3e:	481d      	ldr	r0, [pc, #116]	; (8009fb4 <_Z41__static_initialization_and_destruction_0ii+0x14fc>)
 8009f40:	f014 fb99 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    Array<VoltRangeAdc,NumVoltRangeAdc> VoltRangeAdcArray(AdcArrayTmp);
 8009f44:	4819      	ldr	r0, [pc, #100]	; (8009fac <_Z41__static_initialization_and_destruction_0ii+0x14f4>)
 8009f46:	f7fe fd89 	bl	8008a5c <_ZN5ArrayIN2ps12VoltRangeAdcELj4EED1Ev>
    VoltRangeAdc AdcArrayTmp[NumVoltRangeAdc] = {VoltRangeAdc1V, VoltRangeAdc2V, VoltRangeAdc5V, VoltRangeAdc10V};
 8009f4a:	4c2e      	ldr	r4, [pc, #184]	; (800a004 <_Z41__static_initialization_and_destruction_0ii+0x154c>)
 8009f4c:	4b14      	ldr	r3, [pc, #80]	; (8009fa0 <_Z41__static_initialization_and_destruction_0ii+0x14e8>)
 8009f4e:	429c      	cmp	r4, r3
 8009f50:	d004      	beq.n	8009f5c <_Z41__static_initialization_and_destruction_0ii+0x14a4>
 8009f52:	3c24      	subs	r4, #36	; 0x24
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7f8 f91e 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
 8009f5a:	e7f7      	b.n	8009f4c <_Z41__static_initialization_and_destruction_0ii+0x1494>
    const VoltRangeAdc VoltRangeAdc10V(string("10V"), -10.0, 10.0, VoltGain10X, AnalogSubsystem::MaxValueAin);
 8009f5c:	480f      	ldr	r0, [pc, #60]	; (8009f9c <_Z41__static_initialization_and_destruction_0ii+0x14e4>)
 8009f5e:	f7f8 f91a 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
    const VoltRangeAdc VoltRangeAdc5V(string("5V"), -5.0, 5.0, VoltGain5X, AnalogSubsystem::MaxValueAin);
 8009f62:	480c      	ldr	r0, [pc, #48]	; (8009f94 <_Z41__static_initialization_and_destruction_0ii+0x14dc>)
 8009f64:	f7f8 f917 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
    const VoltRangeAdc VoltRangeAdc2V(string("2V"), -2.0, 2.0, VoltGain2X, AnalogSubsystem::MaxValueAin);
 8009f68:	480f      	ldr	r0, [pc, #60]	; (8009fa8 <_Z41__static_initialization_and_destruction_0ii+0x14f0>)
 8009f6a:	f7f8 f914 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
    const VoltRangeAdc VoltRangeAdc1V(string("1V"), -1.0, 1.0, VoltGain1X, AnalogSubsystem::MaxValueAin);
 8009f6e:	480d      	ldr	r0, [pc, #52]	; (8009fa4 <_Z41__static_initialization_and_destruction_0ii+0x14ec>)
 8009f70:	f7f8 f911 	bl	8002196 <_ZN2ps12VoltRangeAdcD1Ev>
    Array<VoltRangeDac,NumVoltRangeDac> VoltRangeDacArray(DacArrayTmp);
 8009f74:	4824      	ldr	r0, [pc, #144]	; (800a008 <_Z41__static_initialization_and_destruction_0ii+0x1550>)
 8009f76:	f7fe fd88 	bl	8008a8a <_ZN5ArrayIN2ps12VoltRangeDacELj4EED1Ev>
    VoltRangeDac DacArrayTmp[NumVoltRangeDac] = {VoltRangeDac1V, VoltRangeDac2V, VoltRangeDac5V, VoltRangeDac10V};
 8009f7a:	4c24      	ldr	r4, [pc, #144]	; (800a00c <_Z41__static_initialization_and_destruction_0ii+0x1554>)
 8009f7c:	4b24      	ldr	r3, [pc, #144]	; (800a010 <_Z41__static_initialization_and_destruction_0ii+0x1558>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d048      	beq.n	800a014 <_Z41__static_initialization_and_destruction_0ii+0x155c>
 8009f82:	3c24      	subs	r4, #36	; 0x24
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7f8 f8ec 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
 8009f8a:	e7f7      	b.n	8009f7c <_Z41__static_initialization_and_destruction_0ii+0x14c4>
 8009f8c:	08021688 	.word	0x08021688
 8009f90:	0802224c 	.word	0x0802224c
 8009f94:	20008d48 	.word	0x20008d48
 8009f98:	0802167c 	.word	0x0802167c
 8009f9c:	20008d6c 	.word	0x20008d6c
 8009fa0:	20008d90 	.word	0x20008d90
 8009fa4:	20008d00 	.word	0x20008d00
 8009fa8:	20008d24 	.word	0x20008d24
 8009fac:	20008e20 	.word	0x20008e20
 8009fb0:	0802168c 	.word	0x0802168c
 8009fb4:	20008eb4 	.word	0x20008eb4
 8009fb8:	08021698 	.word	0x08021698
 8009fbc:	20008ecc 	.word	0x20008ecc
 8009fc0:	0802169c 	.word	0x0802169c
 8009fc4:	20008ef0 	.word	0x20008ef0
 8009fc8:	080216a4 	.word	0x080216a4
 8009fcc:	42c80000 	.word	0x42c80000
 8009fd0:	c2c80000 	.word	0xc2c80000
 8009fd4:	20008f14 	.word	0x20008f14
 8009fd8:	080216ac 	.word	0x080216ac
 8009fdc:	447a0000 	.word	0x447a0000
 8009fe0:	c47a0000 	.word	0xc47a0000
 8009fe4:	20008f38 	.word	0x20008f38
 8009fe8:	20008f5c 	.word	0x20008f5c
 8009fec:	080216b4 	.word	0x080216b4
 8009ff0:	20008b34 	.word	0x20008b34
 8009ff4:	20008fec 	.word	0x20008fec
 8009ff8:	20008384 	.word	0x20008384
 8009ffc:	20009004 	.word	0x20009004
 800a000:	20008fec 	.word	0x20008fec
 800a004:	20008e20 	.word	0x20008e20
 800a008:	20008c6c 	.word	0x20008c6c
 800a00c:	20008c6c 	.word	0x20008c6c
 800a010:	20008bdc 	.word	0x20008bdc
    const VoltRangeDac VoltRangeDac10V(string("10V"), -10.0, 10.0, VoltGain10X, AnalogSubsystem::MaxValueDac);
 800a014:	488f      	ldr	r0, [pc, #572]	; (800a254 <_Z41__static_initialization_and_destruction_0ii+0x179c>)
 800a016:	f7f8 f8a4 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
    const VoltRangeDac VoltRangeDac5V(string("5V"), -5.0, 5.0, VoltGain5X, AnalogSubsystem::MaxValueDac);
 800a01a:	488f      	ldr	r0, [pc, #572]	; (800a258 <_Z41__static_initialization_and_destruction_0ii+0x17a0>)
 800a01c:	f7f8 f8a1 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
    const VoltRangeDac VoltRangeDac2V(string("2V"), -2.0, 2.0, VoltGain2X, AnalogSubsystem::MaxValueDac);
 800a020:	488e      	ldr	r0, [pc, #568]	; (800a25c <_Z41__static_initialization_and_destruction_0ii+0x17a4>)
 800a022:	f7f8 f89e 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
    const VoltRangeDac VoltRangeDac1V(string("1V"), -1.0, 1.0, VoltGain1X, AnalogSubsystem::MaxValueDac);
 800a026:	488e      	ldr	r0, [pc, #568]	; (800a260 <_Z41__static_initialization_and_destruction_0ii+0x17a8>)
 800a028:	f7f8 f89b 	bl	8002162 <_ZN2ps12VoltRangeDacD1Ev>
    const string VoltageVariant = string("10V");
 800a02c:	488d      	ldr	r0, [pc, #564]	; (800a264 <_Z41__static_initialization_and_destruction_0ii+0x17ac>)
 800a02e:	f014 fb22 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetHardwareVersionCmd = string("getHardwareVersion");
 800a032:	488d      	ldr	r0, [pc, #564]	; (800a268 <_Z41__static_initialization_and_destruction_0ii+0x17b0>)
 800a034:	f014 fb1f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetRefElectVoltRangeCmd = string("getRefElectVoltRange");
 800a038:	488c      	ldr	r0, [pc, #560]	; (800a26c <_Z41__static_initialization_and_destruction_0ii+0x17b4>)
 800a03a:	f014 fb1c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetRefElectVoltRangeCmd = string("setRefElectVoltRange");
 800a03e:	488c      	ldr	r0, [pc, #560]	; (800a270 <_Z41__static_initialization_and_destruction_0ii+0x17b8>)
 800a040:	f014 fb19 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetElectAutoConnCmd = string("getElectAutoConnect");
 800a044:	488b      	ldr	r0, [pc, #556]	; (800a274 <_Z41__static_initialization_and_destruction_0ii+0x17bc>)
 800a046:	f014 fb16 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetElectAutoConnCmd = string("setElectAutoConnect");
 800a04a:	488b      	ldr	r0, [pc, #556]	; (800a278 <_Z41__static_initialization_and_destruction_0ii+0x17c0>)
 800a04c:	f014 fb13 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetAllElectConnCmd = string("getAllElectConnected");
 800a050:	488a      	ldr	r0, [pc, #552]	; (800a27c <_Z41__static_initialization_and_destruction_0ii+0x17c4>)
 800a052:	f014 fb10 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetAllElectConnCmd = string("setAllElectConnected");
 800a056:	488a      	ldr	r0, [pc, #552]	; (800a280 <_Z41__static_initialization_and_destruction_0ii+0x17c8>)
 800a058:	f014 fb0d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetWrkElectConnCmd = string("getWrkElectConnected");
 800a05c:	4889      	ldr	r0, [pc, #548]	; (800a284 <_Z41__static_initialization_and_destruction_0ii+0x17cc>)
 800a05e:	f014 fb0a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetWrkElectConnCmd = string("setWrkElectConnected");
 800a062:	4889      	ldr	r0, [pc, #548]	; (800a288 <_Z41__static_initialization_and_destruction_0ii+0x17d0>)
 800a064:	f014 fb07 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetCtrElectConnCmd = string("getCtrElectConnected");
 800a068:	4888      	ldr	r0, [pc, #544]	; (800a28c <_Z41__static_initialization_and_destruction_0ii+0x17d4>)
 800a06a:	f014 fb04 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetCtrElectConnCmd = string("setCtrElectConnected");
 800a06e:	4888      	ldr	r0, [pc, #544]	; (800a290 <_Z41__static_initialization_and_destruction_0ii+0x17d8>)
 800a070:	f014 fb01 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetRefElectConnCmd = string("getRefElectConnected");
 800a074:	4887      	ldr	r0, [pc, #540]	; (800a294 <_Z41__static_initialization_and_destruction_0ii+0x17dc>)
 800a076:	f014 fafe 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetRefElectConnCmd = string("setRefElectConnected");
 800a07a:	4887      	ldr	r0, [pc, #540]	; (800a298 <_Z41__static_initialization_and_destruction_0ii+0x17e0>)
 800a07c:	f014 fafb 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string DisconnAllMuxElectCmd = string("disconnectAllMuxElect");
 800a080:	4886      	ldr	r0, [pc, #536]	; (800a29c <_Z41__static_initialization_and_destruction_0ii+0x17e4>)
 800a082:	f014 faf8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetMuxWrkElectConnCmd = string("getMuxWrkElectConnected");
 800a086:	4886      	ldr	r0, [pc, #536]	; (800a2a0 <_Z41__static_initialization_and_destruction_0ii+0x17e8>)
 800a088:	f014 faf5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetMuxWrkElectConnCmd = string("setMuxWrkElectConnected");
 800a08c:	4885      	ldr	r0, [pc, #532]	; (800a2a4 <_Z41__static_initialization_and_destruction_0ii+0x17ec>)
 800a08e:	f014 faf2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetMuxCtrElectConnCmd = string("getMuxCtrElectConnected");
 800a092:	4885      	ldr	r0, [pc, #532]	; (800a2a8 <_Z41__static_initialization_and_destruction_0ii+0x17f0>)
 800a094:	f014 faef 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetMuxCtrElectConnCmd = string("setMuxCtrElectConnected");
 800a098:	4884      	ldr	r0, [pc, #528]	; (800a2ac <_Z41__static_initialization_and_destruction_0ii+0x17f4>)
 800a09a:	f014 faec 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetMuxRefElectConnCmd = string("getMuxRefElectConnected");
 800a09e:	4884      	ldr	r0, [pc, #528]	; (800a2b0 <_Z41__static_initialization_and_destruction_0ii+0x17f8>)
 800a0a0:	f014 fae9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetMuxRefElectConnCmd = string("setMuxRefElectConnected");
 800a0a4:	4883      	ldr	r0, [pc, #524]	; (800a2b4 <_Z41__static_initialization_and_destruction_0ii+0x17fc>)
 800a0a6:	f014 fae6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetMuxTestNamesCmd = string("getMuxTestNames");
 800a0aa:	4883      	ldr	r0, [pc, #524]	; (800a2b8 <_Z41__static_initialization_and_destruction_0ii+0x1800>)
 800a0ac:	f014 fae3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetEnabledMuxChanCmd = string("getEnabledMuxChannels");
 800a0b0:	4882      	ldr	r0, [pc, #520]	; (800a2bc <_Z41__static_initialization_and_destruction_0ii+0x1804>)
 800a0b2:	f014 fae0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetEnabledMuxChanCmd = string("setEnabledMuxChannels");
 800a0b6:	4882      	ldr	r0, [pc, #520]	; (800a2c0 <_Z41__static_initialization_and_destruction_0ii+0x1808>)
 800a0b8:	f014 fadd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetMuxEnabledCmd = string("getMuxEnabled");
 800a0bc:	4881      	ldr	r0, [pc, #516]	; (800a2c4 <_Z41__static_initialization_and_destruction_0ii+0x180c>)
 800a0be:	f014 fada 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetMuxEnabledCmd = string("setMuxEnabled");
 800a0c2:	4881      	ldr	r0, [pc, #516]	; (800a2c8 <_Z41__static_initialization_and_destruction_0ii+0x1810>)
 800a0c4:	f014 fad7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetVariantCmd = string("getVariant");
 800a0c8:	4880      	ldr	r0, [pc, #512]	; (800a2cc <_Z41__static_initialization_and_destruction_0ii+0x1814>)
 800a0ca:	f014 fad4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetVersionCmd = string("getVersion");
 800a0ce:	4880      	ldr	r0, [pc, #512]	; (800a2d0 <_Z41__static_initialization_and_destruction_0ii+0x1818>)
 800a0d0:	f014 fad1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetTestNamesCmd = string("getTestNames");
 800a0d4:	487f      	ldr	r0, [pc, #508]	; (800a2d4 <_Z41__static_initialization_and_destruction_0ii+0x181c>)
 800a0d6:	f014 face 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetTestDoneTimeCmd = string("getTestDoneTime");
 800a0da:	487f      	ldr	r0, [pc, #508]	; (800a2d8 <_Z41__static_initialization_and_destruction_0ii+0x1820>)
 800a0dc:	f014 facb 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetSamplePeriodCmd = string("getSamplePeriod");
 800a0e0:	487e      	ldr	r0, [pc, #504]	; (800a2dc <_Z41__static_initialization_and_destruction_0ii+0x1824>)
 800a0e2:	f014 fac8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetSamplePeriodCmd = string("setSamplePeriod");
 800a0e6:	487e      	ldr	r0, [pc, #504]	; (800a2e0 <_Z41__static_initialization_and_destruction_0ii+0x1828>)
 800a0e8:	f014 fac5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetDeviceIdCmd = string("getDeviceId");
 800a0ec:	487d      	ldr	r0, [pc, #500]	; (800a2e4 <_Z41__static_initialization_and_destruction_0ii+0x182c>)
 800a0ee:	f014 fac2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetDeviceIdCmd = string("setDeviceId");
 800a0f2:	487d      	ldr	r0, [pc, #500]	; (800a2e8 <_Z41__static_initialization_and_destruction_0ii+0x1830>)
 800a0f4:	f014 fabf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetCurrRangeCmd = string("getCurrRange");
 800a0f8:	487c      	ldr	r0, [pc, #496]	; (800a2ec <_Z41__static_initialization_and_destruction_0ii+0x1834>)
 800a0fa:	f014 fabc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetCurrRangeCmd = string("setCurrRange");
 800a0fe:	487c      	ldr	r0, [pc, #496]	; (800a2f0 <_Z41__static_initialization_and_destruction_0ii+0x1838>)
 800a100:	f014 fab9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetVoltRangeCmd = string("getVoltRange");
 800a104:	487b      	ldr	r0, [pc, #492]	; (800a2f4 <_Z41__static_initialization_and_destruction_0ii+0x183c>)
 800a106:	f014 fab6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetVoltRangeCmd = string("setVoltRange");
 800a10a:	487b      	ldr	r0, [pc, #492]	; (800a2f8 <_Z41__static_initialization_and_destruction_0ii+0x1840>)
 800a10c:	f014 fab3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetParamCmd = string("getParam");
 800a110:	487a      	ldr	r0, [pc, #488]	; (800a2fc <_Z41__static_initialization_and_destruction_0ii+0x1844>)
 800a112:	f014 fab0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetParamCmd = string("setParam");
 800a116:	487a      	ldr	r0, [pc, #488]	; (800a300 <_Z41__static_initialization_and_destruction_0ii+0x1848>)
 800a118:	f014 faad 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetRefVoltCmd = string("getRefVolt");
 800a11c:	4879      	ldr	r0, [pc, #484]	; (800a304 <_Z41__static_initialization_and_destruction_0ii+0x184c>)
 800a11e:	f014 faaa 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetCurrCmd = string("getCurr");
 800a122:	4879      	ldr	r0, [pc, #484]	; (800a308 <_Z41__static_initialization_and_destruction_0ii+0x1850>)
 800a124:	f014 faa7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SetVoltCmd = string("setVolt");
 800a128:	4878      	ldr	r0, [pc, #480]	; (800a30c <_Z41__static_initialization_and_destruction_0ii+0x1854>)
 800a12a:	f014 faa4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string GetVoltCmd = string("getVolt");
 800a12e:	4878      	ldr	r0, [pc, #480]	; (800a310 <_Z41__static_initialization_and_destruction_0ii+0x1858>)
 800a130:	f014 faa1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string StopTestCmd = string("stopTest");
 800a134:	4877      	ldr	r0, [pc, #476]	; (800a314 <_Z41__static_initialization_and_destruction_0ii+0x185c>)
 800a136:	f014 fa9e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string RunTestCmd = string("runTest");
 800a13a:	4877      	ldr	r0, [pc, #476]	; (800a318 <_Z41__static_initialization_and_destruction_0ii+0x1860>)
 800a13c:	f014 fa9b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ElectAutoConnectKey = string("autoConnect");
 800a140:	4876      	ldr	r0, [pc, #472]	; (800a31c <_Z41__static_initialization_and_destruction_0ii+0x1864>)
 800a142:	f014 fa98 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ConnectedKey = string("connected");
 800a146:	4876      	ldr	r0, [pc, #472]	; (800a320 <_Z41__static_initialization_and_destruction_0ii+0x1868>)
 800a148:	f014 fa95 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string MuxChannelKey = string("muxChannel");
 800a14c:	4875      	ldr	r0, [pc, #468]	; (800a324 <_Z41__static_initialization_and_destruction_0ii+0x186c>)
 800a14e:	f014 fa92 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string MuxEnabledKey = string("muxEnabled");
 800a152:	4875      	ldr	r0, [pc, #468]	; (800a328 <_Z41__static_initialization_and_destruction_0ii+0x1870>)
 800a154:	f014 fa8f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string VariantKey = string("variant");
 800a158:	4874      	ldr	r0, [pc, #464]	; (800a32c <_Z41__static_initialization_and_destruction_0ii+0x1874>)
 800a15a:	f014 fa8c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string VersionKey = string("version");
 800a15e:	4874      	ldr	r0, [pc, #464]	; (800a330 <_Z41__static_initialization_and_destruction_0ii+0x1878>)
 800a160:	f014 fa89 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string TestNameArrayKey = string("testNames");
 800a164:	4873      	ldr	r0, [pc, #460]	; (800a334 <_Z41__static_initialization_and_destruction_0ii+0x187c>)
 800a166:	f014 fa86 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string StepArrayKey = string("step");
 800a16a:	4873      	ldr	r0, [pc, #460]	; (800a338 <_Z41__static_initialization_and_destruction_0ii+0x1880>)
 800a16c:	f014 fa83 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string TestDoneTimeKey = string("testDoneTime");
 800a170:	4872      	ldr	r0, [pc, #456]	; (800a33c <_Z41__static_initialization_and_destruction_0ii+0x1884>)
 800a172:	f014 fa80 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SamplePeriodKey = string("samplePeriod");
 800a176:	4872      	ldr	r0, [pc, #456]	; (800a340 <_Z41__static_initialization_and_destruction_0ii+0x1888>)
 800a178:	f014 fa7d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string DeviceIdKey = string("deviceId");
 800a17c:	4871      	ldr	r0, [pc, #452]	; (800a344 <_Z41__static_initialization_and_destruction_0ii+0x188c>)
 800a17e:	f014 fa7a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string WindowKey = string("window");
 800a182:	4871      	ldr	r0, [pc, #452]	; (800a348 <_Z41__static_initialization_and_destruction_0ii+0x1890>)
 800a184:	f014 fa77 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ShiftKey = string("shift");
 800a188:	4870      	ldr	r0, [pc, #448]	; (800a34c <_Z41__static_initialization_and_destruction_0ii+0x1894>)
 800a18a:	f014 fa74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string NumCyclesKey = string("numCycles");
 800a18e:	4870      	ldr	r0, [pc, #448]	; (800a350 <_Z41__static_initialization_and_destruction_0ii+0x1898>)
 800a190:	f014 fa71 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string PeriodKey = string("period");
 800a194:	486f      	ldr	r0, [pc, #444]	; (800a354 <_Z41__static_initialization_and_destruction_0ii+0x189c>)
 800a196:	f014 fa6e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string OffsetKey = string("offset");
 800a19a:	486f      	ldr	r0, [pc, #444]	; (800a358 <_Z41__static_initialization_and_destruction_0ii+0x18a0>)
 800a19c:	f014 fa6b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string AmplitudeKey = string("amplitude");
 800a1a0:	486e      	ldr	r0, [pc, #440]	; (800a35c <_Z41__static_initialization_and_destruction_0ii+0x18a4>)
 800a1a2:	f014 fa68 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string StepValueKey = string("stepValue");
 800a1a6:	486e      	ldr	r0, [pc, #440]	; (800a360 <_Z41__static_initialization_and_destruction_0ii+0x18a8>)
 800a1a8:	f014 fa65 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string FinalValueKey = string("finalValue");
 800a1ac:	486d      	ldr	r0, [pc, #436]	; (800a364 <_Z41__static_initialization_and_destruction_0ii+0x18ac>)
 800a1ae:	f014 fa62 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string StartValueKey = string("startValue");
 800a1b2:	486d      	ldr	r0, [pc, #436]	; (800a368 <_Z41__static_initialization_and_destruction_0ii+0x18b0>)
 800a1b4:	f014 fa5f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ValueKey = string("value");
 800a1b8:	486c      	ldr	r0, [pc, #432]	; (800a36c <_Z41__static_initialization_and_destruction_0ii+0x18b4>)
 800a1ba:	f014 fa5c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string DurationKey = string("duration");
 800a1be:	486c      	ldr	r0, [pc, #432]	; (800a370 <_Z41__static_initialization_and_destruction_0ii+0x18b8>)
 800a1c0:	f014 fa59 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string QuietTimeKey = string("quietTime");
 800a1c4:	486b      	ldr	r0, [pc, #428]	; (800a374 <_Z41__static_initialization_and_destruction_0ii+0x18bc>)
 800a1c6:	f014 fa56 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string QuietValueKey = string("quietValue");
 800a1ca:	486b      	ldr	r0, [pc, #428]	; (800a378 <_Z41__static_initialization_and_destruction_0ii+0x18c0>)
 800a1cc:	f014 fa53 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string CurrRangeKey = string("currRange");
 800a1d0:	486a      	ldr	r0, [pc, #424]	; (800a37c <_Z41__static_initialization_and_destruction_0ii+0x18c4>)
 800a1d2:	f014 fa50 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string VoltRangeKey = string("voltRange");
 800a1d6:	486a      	ldr	r0, [pc, #424]	; (800a380 <_Z41__static_initialization_and_destruction_0ii+0x18c8>)
 800a1d8:	f014 fa4d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ParamKey = string("param");
 800a1dc:	4869      	ldr	r0, [pc, #420]	; (800a384 <_Z41__static_initialization_and_destruction_0ii+0x18cc>)
 800a1de:	f014 fa4a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string RefVoltKey = string("r");
 800a1e2:	4869      	ldr	r0, [pc, #420]	; (800a388 <_Z41__static_initialization_and_destruction_0ii+0x18d0>)
 800a1e4:	f014 fa47 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ChanKey = string("n");
 800a1e8:	4868      	ldr	r0, [pc, #416]	; (800a38c <_Z41__static_initialization_and_destruction_0ii+0x18d4>)
 800a1ea:	f014 fa44 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string CurrKey = string("i");
 800a1ee:	4868      	ldr	r0, [pc, #416]	; (800a390 <_Z41__static_initialization_and_destruction_0ii+0x18d8>)
 800a1f0:	f014 fa41 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string VoltKey = string("v");
 800a1f4:	4867      	ldr	r0, [pc, #412]	; (800a394 <_Z41__static_initialization_and_destruction_0ii+0x18dc>)
 800a1f6:	f014 fa3e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string TimeKey = string("t");
 800a1fa:	4867      	ldr	r0, [pc, #412]	; (800a398 <_Z41__static_initialization_and_destruction_0ii+0x18e0>)
 800a1fc:	f014 fa3b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string SuccessKey = string("success");
 800a200:	4866      	ldr	r0, [pc, #408]	; (800a39c <_Z41__static_initialization_and_destruction_0ii+0x18e4>)
 800a202:	f014 fa38 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string MessageKey = string("message");
 800a206:	4866      	ldr	r0, [pc, #408]	; (800a3a0 <_Z41__static_initialization_and_destruction_0ii+0x18e8>)
 800a208:	f014 fa35 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string ResponseKey = string("response");
 800a20c:	4865      	ldr	r0, [pc, #404]	; (800a3a4 <_Z41__static_initialization_and_destruction_0ii+0x18ec>)
 800a20e:	f014 fa32 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string CommandKey = string("command");
 800a212:	4865      	ldr	r0, [pc, #404]	; (800a3a8 <_Z41__static_initialization_and_destruction_0ii+0x18f0>)
 800a214:	f014 fa2f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string HardwareVersion = string("V0.2");
 800a218:	4864      	ldr	r0, [pc, #400]	; (800a3ac <_Z41__static_initialization_and_destruction_0ii+0x18f4>)
 800a21a:	f014 fa2c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string FirmwareVersion = string("FW0.0.9");
 800a21e:	4864      	ldr	r0, [pc, #400]	; (800a3b0 <_Z41__static_initialization_and_destruction_0ii+0x18f8>)
 800a220:	f014 fa29 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800a224:	4c63      	ldr	r4, [pc, #396]	; (800a3b4 <_Z41__static_initialization_and_destruction_0ii+0x18fc>)
 800a226:	4b64      	ldr	r3, [pc, #400]	; (800a3b8 <_Z41__static_initialization_and_destruction_0ii+0x1900>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d004      	beq.n	800a236 <_Z41__static_initialization_and_destruction_0ii+0x177e>
 800a22c:	3c18      	subs	r4, #24
 800a22e:	4620      	mov	r0, r4
 800a230:	f014 fa21 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a234:	e7f7      	b.n	800a226 <_Z41__static_initialization_and_destruction_0ii+0x176e>
    const string VoltGainStringArray[NumVoltGain] =
 800a236:	4c61      	ldr	r4, [pc, #388]	; (800a3bc <_Z41__static_initialization_and_destruction_0ii+0x1904>)
 800a238:	4b61      	ldr	r3, [pc, #388]	; (800a3c0 <_Z41__static_initialization_and_destruction_0ii+0x1908>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d004      	beq.n	800a248 <_Z41__static_initialization_and_destruction_0ii+0x1790>
 800a23e:	3c18      	subs	r4, #24
 800a240:	4620      	mov	r0, r4
 800a242:	f014 fa18 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a246:	e7f7      	b.n	800a238 <_Z41__static_initialization_and_destruction_0ii+0x1780>
} // namespace ps
 800a248:	bf00      	nop
 800a24a:	f507 7748 	add.w	r7, r7, #800	; 0x320
 800a24e:	46bd      	mov	sp, r7
 800a250:	bdb0      	pop	{r4, r5, r7, pc}
 800a252:	bf00      	nop
 800a254:	20008bb8 	.word	0x20008bb8
 800a258:	20008b94 	.word	0x20008b94
 800a25c:	20008b70 	.word	0x20008b70
 800a260:	20008b4c 	.word	0x20008b4c
 800a264:	20008b34 	.word	0x20008b34
 800a268:	20008b1c 	.word	0x20008b1c
 800a26c:	20008b04 	.word	0x20008b04
 800a270:	20008aec 	.word	0x20008aec
 800a274:	20008ad4 	.word	0x20008ad4
 800a278:	20008abc 	.word	0x20008abc
 800a27c:	20008aa4 	.word	0x20008aa4
 800a280:	20008a8c 	.word	0x20008a8c
 800a284:	20008a74 	.word	0x20008a74
 800a288:	20008a5c 	.word	0x20008a5c
 800a28c:	20008a44 	.word	0x20008a44
 800a290:	20008a2c 	.word	0x20008a2c
 800a294:	20008a14 	.word	0x20008a14
 800a298:	200089fc 	.word	0x200089fc
 800a29c:	200089e4 	.word	0x200089e4
 800a2a0:	200089cc 	.word	0x200089cc
 800a2a4:	200089b4 	.word	0x200089b4
 800a2a8:	2000899c 	.word	0x2000899c
 800a2ac:	20008984 	.word	0x20008984
 800a2b0:	2000896c 	.word	0x2000896c
 800a2b4:	20008954 	.word	0x20008954
 800a2b8:	2000893c 	.word	0x2000893c
 800a2bc:	20008924 	.word	0x20008924
 800a2c0:	2000890c 	.word	0x2000890c
 800a2c4:	200088f4 	.word	0x200088f4
 800a2c8:	200088dc 	.word	0x200088dc
 800a2cc:	200088c4 	.word	0x200088c4
 800a2d0:	200088ac 	.word	0x200088ac
 800a2d4:	20008894 	.word	0x20008894
 800a2d8:	2000887c 	.word	0x2000887c
 800a2dc:	20008864 	.word	0x20008864
 800a2e0:	2000884c 	.word	0x2000884c
 800a2e4:	20008834 	.word	0x20008834
 800a2e8:	2000881c 	.word	0x2000881c
 800a2ec:	20008804 	.word	0x20008804
 800a2f0:	200087ec 	.word	0x200087ec
 800a2f4:	200087d4 	.word	0x200087d4
 800a2f8:	200087bc 	.word	0x200087bc
 800a2fc:	200087a4 	.word	0x200087a4
 800a300:	2000878c 	.word	0x2000878c
 800a304:	20008774 	.word	0x20008774
 800a308:	2000875c 	.word	0x2000875c
 800a30c:	20008744 	.word	0x20008744
 800a310:	2000872c 	.word	0x2000872c
 800a314:	20008714 	.word	0x20008714
 800a318:	200086fc 	.word	0x200086fc
 800a31c:	200086e4 	.word	0x200086e4
 800a320:	200086cc 	.word	0x200086cc
 800a324:	200086b4 	.word	0x200086b4
 800a328:	2000869c 	.word	0x2000869c
 800a32c:	20008684 	.word	0x20008684
 800a330:	2000866c 	.word	0x2000866c
 800a334:	20008654 	.word	0x20008654
 800a338:	2000863c 	.word	0x2000863c
 800a33c:	20008624 	.word	0x20008624
 800a340:	2000860c 	.word	0x2000860c
 800a344:	200085f4 	.word	0x200085f4
 800a348:	200085dc 	.word	0x200085dc
 800a34c:	200085c4 	.word	0x200085c4
 800a350:	200085ac 	.word	0x200085ac
 800a354:	20008594 	.word	0x20008594
 800a358:	2000857c 	.word	0x2000857c
 800a35c:	20008564 	.word	0x20008564
 800a360:	2000854c 	.word	0x2000854c
 800a364:	20008534 	.word	0x20008534
 800a368:	2000851c 	.word	0x2000851c
 800a36c:	20008504 	.word	0x20008504
 800a370:	200084ec 	.word	0x200084ec
 800a374:	200084d4 	.word	0x200084d4
 800a378:	200084bc 	.word	0x200084bc
 800a37c:	200084a4 	.word	0x200084a4
 800a380:	2000848c 	.word	0x2000848c
 800a384:	20008474 	.word	0x20008474
 800a388:	2000845c 	.word	0x2000845c
 800a38c:	20008444 	.word	0x20008444
 800a390:	2000842c 	.word	0x2000842c
 800a394:	20008414 	.word	0x20008414
 800a398:	200083fc 	.word	0x200083fc
 800a39c:	200083e4 	.word	0x200083e4
 800a3a0:	200083cc 	.word	0x200083cc
 800a3a4:	200083b4 	.word	0x200083b4
 800a3a8:	2000839c 	.word	0x2000839c
 800a3ac:	20008384 	.word	0x20008384
 800a3b0:	2000836c 	.word	0x2000836c
 800a3b4:	2000836c 	.word	0x2000836c
 800a3b8:	200082f4 	.word	0x200082f4
 800a3bc:	200082f4 	.word	0x200082f4
 800a3c0:	20008294 	.word	0x20008294

0800a3c4 <_GLOBAL__sub_I__ZN2ps15FirmwareVersionB5cxx11E>:
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	f7fe fb73 	bl	8008ab8 <_Z41__static_initialization_and_destruction_0ii>
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <_GLOBAL__sub_D__ZN2ps15FirmwareVersionB5cxx11E>:
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f7fe fb6b 	bl	8008ab8 <_Z41__static_initialization_and_destruction_0ii>
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <_ZN2ps10CyclicTestC1Ev>:
#include <math.h>

namespace ps
{

    CyclicTest::CyclicTest() : PeriodicTest()
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b08b      	sub	sp, #44	; 0x2c
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f003 fd02 	bl	800ddf8 <_ZN2ps12PeriodicTestC1Ev>
 800a3f4:	4a15      	ldr	r2, [pc, #84]	; (800a44c <_ZN2ps10CyclicTestC1Ev+0x68>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	601a      	str	r2, [r3, #0]
    {
        setName("cyclic");
 800a3fa:	687c      	ldr	r4, [r7, #4]
 800a3fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a400:	4618      	mov	r0, r3
 800a402:	f014 f838 	bl	801e476 <_ZNSaIcEC1Ev>
 800a406:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	4910      	ldr	r1, [pc, #64]	; (800a450 <_ZN2ps10CyclicTestC1Ev+0x6c>)
 800a410:	4618      	mov	r0, r3
 800a412:	f014 fad7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a416:	f107 030c 	add.w	r3, r7, #12
 800a41a:	4619      	mov	r1, r3
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7fc fcd3 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800a422:	f107 030c 	add.w	r3, r7, #12
 800a426:	4618      	mov	r0, r3
 800a428:	f014 f925 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a430:	4618      	mov	r0, r3
 800a432:	f014 f821 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2101      	movs	r1, #1
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fc fd79 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    }
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4618      	mov	r0, r3
 800a444:	372c      	adds	r7, #44	; 0x2c
 800a446:	46bd      	mov	sp, r7
 800a448:	bd90      	pop	{r4, r7, pc}
 800a44a:	bf00      	nop
 800a44c:	08022340 	.word	0x08022340
 800a450:	080216b8 	.word	0x080216b8

0800a454 <_ZNK2ps10CyclicTest8getValueEy>:


    float CyclicTest::getValue(uint64_t t) const
    {
 800a454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a458:	b08a      	sub	sp, #40	; 0x28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	e9c7 2300 	strd	r2, r3, [r7]
        float value = 0.0;
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
        if ( t < quietTime_)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a46e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a472:	4290      	cmp	r0, r2
 800a474:	eb71 0303 	sbcs.w	r3, r1, r3
 800a478:	d203      	bcs.n	800a482 <_ZNK2ps10CyclicTest8getValueEy+0x2e>
        {
            value = quietValue_;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
 800a480:	e0d4      	b.n	800a62c <_ZNK2ps10CyclicTest8getValueEy+0x1d8>
        }
        else
        {
            uint64_t s = (t - quietTime_ + shiftInUs_)%period_;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a48c:	1a84      	subs	r4, r0, r2
 800a48e:	eb61 0503 	sbc.w	r5, r1, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a498:	eb14 0a02 	adds.w	sl, r4, r2
 800a49c:	eb45 0b03 	adc.w	fp, r5, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	f7f6 fcb9 	bl	8000e20 <__aeabi_uldivmod>
 800a4ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            uint64_t halfPeriod = period_ >> 1;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a4b8:	f04f 0200 	mov.w	r2, #0
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	0842      	lsrs	r2, r0, #1
 800a4c2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800a4c6:	084b      	lsrs	r3, r1, #1
 800a4c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

            if (s < halfPeriod) 
 800a4cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a4d4:	4290      	cmp	r0, r2
 800a4d6:	eb71 0303 	sbcs.w	r3, r1, r3
 800a4da:	d24f      	bcs.n	800a57c <_ZNK2ps10CyclicTest8getValueEy+0x128>
            {
                value = (4.0*amplitude_*s)/period_ + offset_ - amplitude_;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f5 ffef 	bl	80004c4 <__aeabi_f2d>
 800a4e6:	f04f 0200 	mov.w	r2, #0
 800a4ea:	4b55      	ldr	r3, [pc, #340]	; (800a640 <_ZNK2ps10CyclicTest8getValueEy+0x1ec>)
 800a4ec:	f7f6 f842 	bl	8000574 <__aeabi_dmul>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	461d      	mov	r5, r3
 800a4f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4fc:	f7f6 f804 	bl	8000508 <__aeabi_ul2d>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f6 f834 	bl	8000574 <__aeabi_dmul>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4614      	mov	r4, r2
 800a512:	461d      	mov	r5, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	f7f5 fff3 	bl	8000508 <__aeabi_ul2d>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f6 f94d 	bl	80007c8 <__aeabi_ddiv>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4614      	mov	r4, r2
 800a534:	461d      	mov	r5, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f5 ffc2 	bl	80004c4 <__aeabi_f2d>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f5 fe5e 	bl	8000208 <__adddf3>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4614      	mov	r4, r2
 800a552:	461d      	mov	r5, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f5 ffb3 	bl	80004c4 <__aeabi_f2d>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	f7f5 fe4d 	bl	8000204 <__aeabi_dsub>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	f7f6 faf7 	bl	8000b64 <__aeabi_d2f>
 800a576:	4603      	mov	r3, r0
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
 800a57a:	e057      	b.n	800a62c <_ZNK2ps10CyclicTest8getValueEy+0x1d8>
            }
            else
            {
                value = (4.0*amplitude_*(period_ - s))/period_ + offset_ - amplitude_;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a580:	4618      	mov	r0, r3
 800a582:	f7f5 ff9f 	bl	80004c4 <__aeabi_f2d>
 800a586:	f04f 0200 	mov.w	r2, #0
 800a58a:	4b2d      	ldr	r3, [pc, #180]	; (800a640 <_ZNK2ps10CyclicTest8getValueEy+0x1ec>)
 800a58c:	f7f5 fff2 	bl	8000574 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4614      	mov	r4, r2
 800a596:	461d      	mov	r5, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a59e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5a2:	ebb0 0802 	subs.w	r8, r0, r2
 800a5a6:	eb61 0903 	sbc.w	r9, r1, r3
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f7f5 ffab 	bl	8000508 <__aeabi_ul2d>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	f7f5 ffdb 	bl	8000574 <__aeabi_dmul>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	461d      	mov	r5, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f7f5 ff9a 	bl	8000508 <__aeabi_ul2d>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7f6 f8f4 	bl	80007c8 <__aeabi_ddiv>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	461d      	mov	r5, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7f5 ff69 	bl	80004c4 <__aeabi_f2d>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f7f5 fe05 	bl	8000208 <__adddf3>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4614      	mov	r4, r2
 800a604:	461d      	mov	r5, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f5 ff5a 	bl	80004c4 <__aeabi_f2d>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f5 fdf4 	bl	8000204 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4610      	mov	r0, r2
 800a622:	4619      	mov	r1, r3
 800a624:	f7f6 fa9e 	bl	8000b64 <__aeabi_d2f>
 800a628:	4603      	mov	r3, r0
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
        return value;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	ee07 3a90 	vmov	s15, r3
    }
 800a632:	eeb0 0a67 	vmov.f32	s0, s15
 800a636:	3728      	adds	r7, #40	; 0x28
 800a638:	46bd      	mov	sp, r7
 800a63a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a63e:	bf00      	nop
 800a640:	40100000 	.word	0x40100000

0800a644 <_Z41__static_initialization_and_destruction_0ii>:


} // namespace ps
 800a644:	b5b0      	push	{r4, r5, r7, lr}
 800a646:	b08c      	sub	sp, #48	; 0x30
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b01      	cmp	r3, #1
 800a652:	f040 80aa 	bne.w	800a7aa <_Z41__static_initialization_and_destruction_0ii+0x166>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a65c:	4293      	cmp	r3, r2
 800a65e:	f040 80a4 	bne.w	800a7aa <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800a662:	4c61      	ldr	r4, [pc, #388]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800a664:	4625      	mov	r5, r4
 800a666:	f107 030c 	add.w	r3, r7, #12
 800a66a:	4618      	mov	r0, r3
 800a66c:	f013 ff03 	bl	801e476 <_ZNSaIcEC1Ev>
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	461a      	mov	r2, r3
 800a676:	495d      	ldr	r1, [pc, #372]	; (800a7ec <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800a678:	4628      	mov	r0, r5
 800a67a:	f014 f9a3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a67e:	f107 030c 	add.w	r3, r7, #12
 800a682:	4618      	mov	r0, r3
 800a684:	f013 fef8 	bl	801e478 <_ZNSaIcED1Ev>
 800a688:	3418      	adds	r4, #24
 800a68a:	f107 0310 	add.w	r3, r7, #16
 800a68e:	4618      	mov	r0, r3
 800a690:	f013 fef1 	bl	801e476 <_ZNSaIcEC1Ev>
 800a694:	f107 0310 	add.w	r3, r7, #16
 800a698:	461a      	mov	r2, r3
 800a69a:	4955      	ldr	r1, [pc, #340]	; (800a7f0 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800a69c:	4620      	mov	r0, r4
 800a69e:	f014 f991 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a6a2:	f107 0310 	add.w	r3, r7, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f013 fee6 	bl	801e478 <_ZNSaIcED1Ev>
 800a6ac:	3418      	adds	r4, #24
 800a6ae:	f107 0314 	add.w	r3, r7, #20
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f013 fedf 	bl	801e476 <_ZNSaIcEC1Ev>
 800a6b8:	f107 0314 	add.w	r3, r7, #20
 800a6bc:	461a      	mov	r2, r3
 800a6be:	494d      	ldr	r1, [pc, #308]	; (800a7f4 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f014 f97f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a6c6:	f107 0314 	add.w	r3, r7, #20
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f013 fed4 	bl	801e478 <_ZNSaIcED1Ev>
 800a6d0:	3418      	adds	r4, #24
 800a6d2:	f107 0318 	add.w	r3, r7, #24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f013 fecd 	bl	801e476 <_ZNSaIcEC1Ev>
 800a6dc:	f107 0318 	add.w	r3, r7, #24
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4945      	ldr	r1, [pc, #276]	; (800a7f8 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f014 f96d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a6ea:	f107 0318 	add.w	r3, r7, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f013 fec2 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800a6f4:	4c41      	ldr	r4, [pc, #260]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800a6f6:	4625      	mov	r5, r4
 800a6f8:	f107 031c 	add.w	r3, r7, #28
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f013 feba 	bl	801e476 <_ZNSaIcEC1Ev>
 800a702:	f107 031c 	add.w	r3, r7, #28
 800a706:	461a      	mov	r2, r3
 800a708:	493d      	ldr	r1, [pc, #244]	; (800a800 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800a70a:	4628      	mov	r0, r5
 800a70c:	f014 f95a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a710:	f107 031c 	add.w	r3, r7, #28
 800a714:	4618      	mov	r0, r3
 800a716:	f013 feaf 	bl	801e478 <_ZNSaIcED1Ev>
 800a71a:	3418      	adds	r4, #24
 800a71c:	f107 0320 	add.w	r3, r7, #32
 800a720:	4618      	mov	r0, r3
 800a722:	f013 fea8 	bl	801e476 <_ZNSaIcEC1Ev>
 800a726:	f107 0320 	add.w	r3, r7, #32
 800a72a:	461a      	mov	r2, r3
 800a72c:	4935      	ldr	r1, [pc, #212]	; (800a804 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800a72e:	4620      	mov	r0, r4
 800a730:	f014 f948 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a734:	f107 0320 	add.w	r3, r7, #32
 800a738:	4618      	mov	r0, r3
 800a73a:	f013 fe9d 	bl	801e478 <_ZNSaIcED1Ev>
 800a73e:	3418      	adds	r4, #24
 800a740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a744:	4618      	mov	r0, r3
 800a746:	f013 fe96 	bl	801e476 <_ZNSaIcEC1Ev>
 800a74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a74e:	461a      	mov	r2, r3
 800a750:	492d      	ldr	r1, [pc, #180]	; (800a808 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800a752:	4620      	mov	r0, r4
 800a754:	f014 f936 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a75c:	4618      	mov	r0, r3
 800a75e:	f013 fe8b 	bl	801e478 <_ZNSaIcED1Ev>
 800a762:	3418      	adds	r4, #24
 800a764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a768:	4618      	mov	r0, r3
 800a76a:	f013 fe84 	bl	801e476 <_ZNSaIcEC1Ev>
 800a76e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a772:	461a      	mov	r2, r3
 800a774:	4925      	ldr	r1, [pc, #148]	; (800a80c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800a776:	4620      	mov	r0, r4
 800a778:	f014 f924 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a77c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a780:	4618      	mov	r0, r3
 800a782:	f013 fe79 	bl	801e478 <_ZNSaIcED1Ev>
 800a786:	3418      	adds	r4, #24
 800a788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a78c:	4618      	mov	r0, r3
 800a78e:	f013 fe72 	bl	801e476 <_ZNSaIcEC1Ev>
 800a792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a796:	461a      	mov	r2, r3
 800a798:	491d      	ldr	r1, [pc, #116]	; (800a810 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800a79a:	4620      	mov	r0, r4
 800a79c:	f014 f912 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a7a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f013 fe67 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d116      	bne.n	800a7de <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d111      	bne.n	800a7de <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800a7ba:	4c16      	ldr	r4, [pc, #88]	; (800a814 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800a7be:	429c      	cmp	r4, r3
 800a7c0:	d004      	beq.n	800a7cc <_Z41__static_initialization_and_destruction_0ii+0x188>
 800a7c2:	3c18      	subs	r4, #24
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f013 ff56 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7ca:	e7f7      	b.n	800a7bc <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800a7cc:	4c12      	ldr	r4, [pc, #72]	; (800a818 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	d004      	beq.n	800a7de <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800a7d4:	3c18      	subs	r4, #24
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f013 ff4d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7dc:	e7f7      	b.n	800a7ce <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800a7de:	bf00      	nop
 800a7e0:	3730      	adds	r7, #48	; 0x30
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20009098 	.word	0x20009098
 800a7ec:	080216c0 	.word	0x080216c0
 800a7f0:	080216cc 	.word	0x080216cc
 800a7f4:	080216d8 	.word	0x080216d8
 800a7f8:	080216e4 	.word	0x080216e4
 800a7fc:	200090f8 	.word	0x200090f8
 800a800:	080216f0 	.word	0x080216f0
 800a804:	08021700 	.word	0x08021700
 800a808:	08021710 	.word	0x08021710
 800a80c:	08021720 	.word	0x08021720
 800a810:	08021730 	.word	0x08021730
 800a814:	20009170 	.word	0x20009170
 800a818:	200090f8 	.word	0x200090f8

0800a81c <_GLOBAL__sub_I__ZN2ps10CyclicTestC2Ev>:
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
 800a820:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a824:	2001      	movs	r0, #1
 800a826:	f7ff ff0d 	bl	800a644 <_Z41__static_initialization_and_destruction_0ii>
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_GLOBAL__sub_D__ZN2ps10CyclicTestC2Ev>:
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
 800a830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a834:	2000      	movs	r0, #0
 800a836:	f7ff ff05 	bl	800a644 <_Z41__static_initialization_and_destruction_0ii>
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_ZN2ps14DeviceId_NVMEMC1Ev>:
    {
        address_ = address;
    }
#elif defined DEVBOARD_ITSY_BITSY
    //FlashStorage(Storage,uint32_t);
    DeviceId_NVMEM::DeviceId_NVMEM() {}
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_>:
#endif

    ReturnStatus DeviceId_NVMEM::set(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b09d      	sub	sp, #116	; 0x74
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7f6 fdac 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(DeviceIdKey))
 800a868:	4943      	ldr	r1, [pc, #268]	; (800a978 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x124>)
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7f9 fe59 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800a870:	4603      	mov	r3, r0
 800a872:	f083 0301 	eor.w	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d02f      	beq.n	800a8dc <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + DeviceIdKey;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	1d1c      	adds	r4, r3, #4
 800a886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a88a:	4618      	mov	r0, r3
 800a88c:	f013 fdf3 	bl	801e476 <_ZNSaIcEC1Ev>
 800a890:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a898:	4938      	ldr	r1, [pc, #224]	; (800a97c <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x128>)
 800a89a:	4618      	mov	r0, r3
 800a89c:	f014 f892 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a8a0:	f107 0318 	add.w	r3, r7, #24
 800a8a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a8a8:	4a33      	ldr	r2, [pc, #204]	; (800a978 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x124>)
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fb feb1 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a8b0:	f107 0318 	add.w	r3, r7, #24
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f013 fee9 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a8bc:	f107 0318 	add.w	r3, r7, #24
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f013 fed8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f013 fed3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f013 fdcf 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 800a8da:	e048      	b.n	800a96e <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x11a>
        }

        if (!jsonMsg[DeviceIdKey].is<uint32_t>())
 800a8dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8e0:	4a25      	ldr	r2, [pc, #148]	; (800a978 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x124>)
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7f9 fe52 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800a8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fc ff50 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	bf00      	nop
 800a8fa:	f083 0301 	eor.w	r3, r3, #1
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d022      	beq.n	800a94a <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0xf6>
        {
            status.success = false;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
            status.message = string("deviceId is not integer");
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	1d1c      	adds	r4, r3, #4
 800a90e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a912:	4618      	mov	r0, r3
 800a914:	f013 fdaf 	bl	801e476 <_ZNSaIcEC1Ev>
 800a918:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a91c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a920:	4917      	ldr	r1, [pc, #92]	; (800a980 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x12c>)
 800a922:	4618      	mov	r0, r3
 800a924:	f014 f84e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a92c:	4619      	mov	r1, r3
 800a92e:	4620      	mov	r0, r4
 800a930:	f013 fead 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a938:	4618      	mov	r0, r3
 800a93a:	f013 fe9c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a93e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a942:	4618      	mov	r0, r3
 800a944:	f013 fd98 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 800a948:	e011      	b.n	800a96e <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x11a>
        }
        uint32_t device_id = jsonMsg.get<uint32_t>(DeviceIdKey);
 800a94a:	490b      	ldr	r1, [pc, #44]	; (800a978 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x124>)
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7fc fd9a 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800a952:	4603      	mov	r3, r0
 800a954:	617b      	str	r3, [r7, #20]
	#if defined DEVBOARD_TEENSY
			EEPROM.put(address_,device_id);
	#elif defined DEVBOARD_ITSY_BITSY
			//Storage.write(device_id);
			store_flash_memory(FLASH_ADDRESS_COUNTER, (uint8_t*)&device_id, 4);
 800a956:	f107 0314 	add.w	r3, r7, #20
 800a95a:	2204      	movs	r2, #4
 800a95c:	4619      	mov	r1, r3
 800a95e:	4809      	ldr	r0, [pc, #36]	; (800a984 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_+0x130>)
 800a960:	f7f6 fc94 	bl	800128c <_Z18store_flash_memorymPht>
	#endif
        get(jsonDat);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f000 f80e 	bl	800a988 <_ZN2ps14DeviceId_NVMEM3getERN11ArduinoJson10JsonObjectE>
        return status;
 800a96c:	bf00      	nop
    }
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	3774      	adds	r7, #116	; 0x74
 800a972:	46bd      	mov	sp, r7
 800a974:	bd90      	pop	{r4, r7, pc}
 800a976:	bf00      	nop
 800a978:	200085f4 	.word	0x200085f4
 800a97c:	08021740 	.word	0x08021740
 800a980:	0802175c 	.word	0x0802175c
 800a984:	080ff800 	.word	0x080ff800

0800a988 <_ZN2ps14DeviceId_NVMEM3getERN11ArduinoJson10JsonObjectE>:


    void DeviceId_NVMEM::get(JsonObject &jsonDat)
    {
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
        uint32_t device_id;
#if defined DEVBOARD_TEENSY
        EEPROM.get(address_,device_id);
#elif defined DEVBOARD_ITSY_BITSY
        read_flash_memory(FLASH_ADDRESS_COUNTER, (uint8_t*)&device_id, 4);
 800a992:	f107 030c 	add.w	r3, r7, #12
 800a996:	2204      	movs	r2, #4
 800a998:	4619      	mov	r1, r3
 800a99a:	4807      	ldr	r0, [pc, #28]	; (800a9b8 <_ZN2ps14DeviceId_NVMEM3getERN11ArduinoJson10JsonObjectE+0x30>)
 800a99c:	f7f6 fcc8 	bl	8001330 <_Z17read_flash_memorymPht>
        //device_id = Storage.read();
#endif
        jsonDat.set(DeviceIdKey,device_id);
 800a9a0:	f107 030c 	add.w	r3, r7, #12
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4905      	ldr	r1, [pc, #20]	; (800a9bc <_ZN2ps14DeviceId_NVMEM3getERN11ArduinoJson10JsonObjectE+0x34>)
 800a9a8:	6838      	ldr	r0, [r7, #0]
 800a9aa:	f7fc fd3e 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	080ff800 	.word	0x080ff800
 800a9bc:	200085f4 	.word	0x200085f4

0800a9c0 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace ps
 800a9c0:	b5b0      	push	{r4, r5, r7, lr}
 800a9c2:	b08c      	sub	sp, #48	; 0x30
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	f040 80aa 	bne.w	800ab26 <_Z41__static_initialization_and_destruction_0ii+0x166>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	f040 80a4 	bne.w	800ab26 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800a9de:	4c61      	ldr	r4, [pc, #388]	; (800ab64 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800a9e0:	4625      	mov	r5, r4
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f013 fd45 	bl	801e476 <_ZNSaIcEC1Ev>
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	495d      	ldr	r1, [pc, #372]	; (800ab68 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f013 ffe5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f013 fd3a 	bl	801e478 <_ZNSaIcED1Ev>
 800aa04:	3418      	adds	r4, #24
 800aa06:	f107 0310 	add.w	r3, r7, #16
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f013 fd33 	bl	801e476 <_ZNSaIcEC1Ev>
 800aa10:	f107 0310 	add.w	r3, r7, #16
 800aa14:	461a      	mov	r2, r3
 800aa16:	4955      	ldr	r1, [pc, #340]	; (800ab6c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f013 ffd3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa1e:	f107 0310 	add.w	r3, r7, #16
 800aa22:	4618      	mov	r0, r3
 800aa24:	f013 fd28 	bl	801e478 <_ZNSaIcED1Ev>
 800aa28:	3418      	adds	r4, #24
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f013 fd21 	bl	801e476 <_ZNSaIcEC1Ev>
 800aa34:	f107 0314 	add.w	r3, r7, #20
 800aa38:	461a      	mov	r2, r3
 800aa3a:	494d      	ldr	r1, [pc, #308]	; (800ab70 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f013 ffc1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa42:	f107 0314 	add.w	r3, r7, #20
 800aa46:	4618      	mov	r0, r3
 800aa48:	f013 fd16 	bl	801e478 <_ZNSaIcED1Ev>
 800aa4c:	3418      	adds	r4, #24
 800aa4e:	f107 0318 	add.w	r3, r7, #24
 800aa52:	4618      	mov	r0, r3
 800aa54:	f013 fd0f 	bl	801e476 <_ZNSaIcEC1Ev>
 800aa58:	f107 0318 	add.w	r3, r7, #24
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4945      	ldr	r1, [pc, #276]	; (800ab74 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800aa60:	4620      	mov	r0, r4
 800aa62:	f013 ffaf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa66:	f107 0318 	add.w	r3, r7, #24
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f013 fd04 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800aa70:	4c41      	ldr	r4, [pc, #260]	; (800ab78 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800aa72:	4625      	mov	r5, r4
 800aa74:	f107 031c 	add.w	r3, r7, #28
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f013 fcfc 	bl	801e476 <_ZNSaIcEC1Ev>
 800aa7e:	f107 031c 	add.w	r3, r7, #28
 800aa82:	461a      	mov	r2, r3
 800aa84:	493d      	ldr	r1, [pc, #244]	; (800ab7c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800aa86:	4628      	mov	r0, r5
 800aa88:	f013 ff9c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa8c:	f107 031c 	add.w	r3, r7, #28
 800aa90:	4618      	mov	r0, r3
 800aa92:	f013 fcf1 	bl	801e478 <_ZNSaIcED1Ev>
 800aa96:	3418      	adds	r4, #24
 800aa98:	f107 0320 	add.w	r3, r7, #32
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f013 fcea 	bl	801e476 <_ZNSaIcEC1Ev>
 800aaa2:	f107 0320 	add.w	r3, r7, #32
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	4935      	ldr	r1, [pc, #212]	; (800ab80 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f013 ff8a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aab0:	f107 0320 	add.w	r3, r7, #32
 800aab4:	4618      	mov	r0, r3
 800aab6:	f013 fcdf 	bl	801e478 <_ZNSaIcED1Ev>
 800aaba:	3418      	adds	r4, #24
 800aabc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac0:	4618      	mov	r0, r3
 800aac2:	f013 fcd8 	bl	801e476 <_ZNSaIcEC1Ev>
 800aac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaca:	461a      	mov	r2, r3
 800aacc:	492d      	ldr	r1, [pc, #180]	; (800ab84 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800aace:	4620      	mov	r0, r4
 800aad0:	f013 ff78 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aad8:	4618      	mov	r0, r3
 800aada:	f013 fccd 	bl	801e478 <_ZNSaIcED1Ev>
 800aade:	3418      	adds	r4, #24
 800aae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aae4:	4618      	mov	r0, r3
 800aae6:	f013 fcc6 	bl	801e476 <_ZNSaIcEC1Ev>
 800aaea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4925      	ldr	r1, [pc, #148]	; (800ab88 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f013 ff66 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aaf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aafc:	4618      	mov	r0, r3
 800aafe:	f013 fcbb 	bl	801e478 <_ZNSaIcED1Ev>
 800ab02:	3418      	adds	r4, #24
 800ab04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f013 fcb4 	bl	801e476 <_ZNSaIcEC1Ev>
 800ab0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab12:	461a      	mov	r2, r3
 800ab14:	491d      	ldr	r1, [pc, #116]	; (800ab8c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800ab16:	4620      	mov	r0, r4
 800ab18:	f013 ff54 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ab1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab20:	4618      	mov	r0, r3
 800ab22:	f013 fca9 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d116      	bne.n	800ab5a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d111      	bne.n	800ab5a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800ab36:	4c16      	ldr	r4, [pc, #88]	; (800ab90 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800ab38:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d004      	beq.n	800ab48 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800ab3e:	3c18      	subs	r4, #24
 800ab40:	4620      	mov	r0, r4
 800ab42:	f013 fd98 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab46:	e7f7      	b.n	800ab38 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800ab48:	4c12      	ldr	r4, [pc, #72]	; (800ab94 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	d004      	beq.n	800ab5a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800ab50:	3c18      	subs	r4, #24
 800ab52:	4620      	mov	r0, r4
 800ab54:	f013 fd8f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab58:	e7f7      	b.n	800ab4a <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800ab5a:	bf00      	nop
 800ab5c:	3730      	adds	r7, #48	; 0x30
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bdb0      	pop	{r4, r5, r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20009170 	.word	0x20009170
 800ab68:	08021774 	.word	0x08021774
 800ab6c:	08021780 	.word	0x08021780
 800ab70:	0802178c 	.word	0x0802178c
 800ab74:	08021798 	.word	0x08021798
 800ab78:	200091d0 	.word	0x200091d0
 800ab7c:	080217a4 	.word	0x080217a4
 800ab80:	080217b4 	.word	0x080217b4
 800ab84:	080217c4 	.word	0x080217c4
 800ab88:	080217d4 	.word	0x080217d4
 800ab8c:	080217e4 	.word	0x080217e4
 800ab90:	20009248 	.word	0x20009248
 800ab94:	200091d0 	.word	0x200091d0

0800ab98 <_GLOBAL__sub_I__ZN2ps14DeviceId_NVMEMC2Ev>:
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aba0:	2001      	movs	r0, #1
 800aba2:	f7ff ff0d 	bl	800a9c0 <_Z41__static_initialization_and_destruction_0ii>
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <_GLOBAL__sub_D__ZN2ps14DeviceId_NVMEMC2Ev>:
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
 800abac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abb0:	2000      	movs	r0, #0
 800abb2:	f7ff ff05 	bl	800a9c0 <_Z41__static_initialization_and_destruction_0ii>
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <_ZN2ps15ElectrodeSwitchC1Ev>:

#if defined HARDWARE_VERSION_0P2

namespace ps
{
    ElectrodeSwitch::ElectrodeSwitch() {}
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <_ZN2ps15ElectrodeSwitch10initializeEv>:

    void ElectrodeSwitch::initialize() 
    {
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
        //pinMode(SW_CTR_ELECT, OUTPUT);
        //pinMode(SW_REF_ELECT, OUTPUT);
        //pinMode(SW_WRK_ELECT, OUTPUT);

    }
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi>:

    bool ElectrodeSwitch::connected(GPIO_TypeDef* GPIOx, int pin)
    {
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b086      	sub	sp, #24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
        uint8_t value = HAL_GPIO_ReadPin(GPIOx, pin);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f00c fb45 	bl	8017284 <HAL_GPIO_ReadPin>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
        if (value == GPIO_PIN_SET)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d101      	bne.n	800ac08 <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi+0x26>
        {
            return false;
 800ac04:	2300      	movs	r3, #0
 800ac06:	e000      	b.n	800ac0a <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi+0x28>
        }
        else
        {
            return true;
 800ac08:	2301      	movs	r3, #1
        }
    }
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib>:

    void ElectrodeSwitch::setConnected(GPIO_TypeDef* GPIOx, int pin, bool value)
    {
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	60f8      	str	r0, [r7, #12]
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	607a      	str	r2, [r7, #4]
 800ac1e:	70fb      	strb	r3, [r7, #3]
        if (value)
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d007      	beq.n	800ac36 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib+0x24>
        {
            HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68b8      	ldr	r0, [r7, #8]
 800ac30:	f00c fb40 	bl	80172b4 <HAL_GPIO_WritePin>
        } 
        else
        {
            HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
        }
    }
 800ac34:	e006      	b.n	800ac44 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib+0x32>
            HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	68b8      	ldr	r0, [r7, #8]
 800ac40:	f00c fb38 	bl	80172b4 <HAL_GPIO_WritePin>
    }
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZN2ps15ElectrodeSwitch12ctrConnectedEv>:


    bool ElectrodeSwitch::ctrConnected()
    {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
        return connected(SW_CTR_ELECT_GPIO_Port, SW_CTR_ELECT_Pin);
 800ac54:	2210      	movs	r2, #16
 800ac56:	4904      	ldr	r1, [pc, #16]	; (800ac68 <_ZN2ps15ElectrodeSwitch12ctrConnectedEv+0x1c>)
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff ffc2 	bl	800abe2 <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi>
 800ac5e:	4603      	mov	r3, r0
    }
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	40020400 	.word	0x40020400

0800ac6c <_ZN2ps15ElectrodeSwitch15setCtrConnectedEb>:

    void ElectrodeSwitch::setCtrConnected(bool value)
    {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
        setConnected(SW_CTR_ELECT_GPIO_Port, SW_CTR_ELECT_Pin, value);
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	4903      	ldr	r1, [pc, #12]	; (800ac8c <_ZN2ps15ElectrodeSwitch15setCtrConnectedEb+0x20>)
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff ffc7 	bl	800ac12 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib>
    }
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40020400 	.word	0x40020400

0800ac90 <_ZN2ps15ElectrodeSwitch12refConnectedEv>:

    bool ElectrodeSwitch::refConnected()
    {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
        return connected(SW_REF_ELECT_GPIO_Port, SW_REF_ELECT_Pin);
 800ac98:	2220      	movs	r2, #32
 800ac9a:	4904      	ldr	r1, [pc, #16]	; (800acac <_ZN2ps15ElectrodeSwitch12refConnectedEv+0x1c>)
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff ffa0 	bl	800abe2 <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi>
 800aca2:	4603      	mov	r3, r0
    }
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40020400 	.word	0x40020400

0800acb0 <_ZN2ps15ElectrodeSwitch15setRefConnectedEb>:

    void ElectrodeSwitch::setRefConnected(bool value)
    {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
        setConnected(SW_REF_ELECT_GPIO_Port, SW_REF_ELECT_Pin, value);
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	2220      	movs	r2, #32
 800acc0:	4903      	ldr	r1, [pc, #12]	; (800acd0 <_ZN2ps15ElectrodeSwitch15setRefConnectedEb+0x20>)
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff ffa5 	bl	800ac12 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib>
    }
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	40020400 	.word	0x40020400

0800acd4 <_ZN2ps15ElectrodeSwitch12wrkConnectedEv>:

    bool ElectrodeSwitch::wrkConnected()
    {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
        return connected(SW_REF_ELECT_GPIO_Port, SW_REF_ELECT_Pin);
 800acdc:	2220      	movs	r2, #32
 800acde:	4904      	ldr	r1, [pc, #16]	; (800acf0 <_ZN2ps15ElectrodeSwitch12wrkConnectedEv+0x1c>)
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ff7e 	bl	800abe2 <_ZN2ps15ElectrodeSwitch9connectedEP12GPIO_TypeDefi>
 800ace6:	4603      	mov	r3, r0
    }
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	40020400 	.word	0x40020400

0800acf4 <_ZN2ps15ElectrodeSwitch15setWrkConnectedEb>:

    void ElectrodeSwitch::setWrkConnected(bool value)
    {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
        setConnected(SW_REF_ELECT_GPIO_Port, SW_REF_ELECT_Pin, value);
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	2220      	movs	r2, #32
 800ad04:	4903      	ldr	r1, [pc, #12]	; (800ad14 <_ZN2ps15ElectrodeSwitch15setWrkConnectedEb+0x20>)
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff ff83 	bl	800ac12 <_ZN2ps15ElectrodeSwitch12setConnectedEP12GPIO_TypeDefib>
    }
 800ad0c:	bf00      	nop
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	40020400 	.word	0x40020400

0800ad18 <_ZN2ps15ElectrodeSwitch12allConnectedEv>:

    bool ElectrodeSwitch::allConnected()
    {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
        return ctrConnected() && refConnected() && wrkConnected();
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ff93 	bl	800ac4c <_ZN2ps15ElectrodeSwitch12ctrConnectedEv>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00d      	beq.n	800ad48 <_ZN2ps15ElectrodeSwitch12allConnectedEv+0x30>
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff ffaf 	bl	800ac90 <_ZN2ps15ElectrodeSwitch12refConnectedEv>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d007      	beq.n	800ad48 <_ZN2ps15ElectrodeSwitch12allConnectedEv+0x30>
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff ffcb 	bl	800acd4 <_ZN2ps15ElectrodeSwitch12wrkConnectedEv>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <_ZN2ps15ElectrodeSwitch12allConnectedEv+0x30>
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <_ZN2ps15ElectrodeSwitch12allConnectedEv+0x32>
 800ad48:	2300      	movs	r3, #0
    }
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>:

    void ElectrodeSwitch::setAllConnected(bool value)
    {
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
        setCtrConnected(value);
 800ad5e:	78fb      	ldrb	r3, [r7, #3]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7ff ff82 	bl	800ac6c <_ZN2ps15ElectrodeSwitch15setCtrConnectedEb>
        setRefConnected(value);
 800ad68:	78fb      	ldrb	r3, [r7, #3]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff ff9f 	bl	800acb0 <_ZN2ps15ElectrodeSwitch15setRefConnectedEb>
        setWrkConnected(value); 
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff ffbc 	bl	800acf4 <_ZN2ps15ElectrodeSwitch15setWrkConnectedEb>
    }
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZN2ps7LowPassC1Efjf>:

namespace ps 
{
    // Public methods
    // ------------------------------------------------------------------------
    LowPass::LowPass(float cutoffFreq,  unsigned int order, float value)
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad90:	6079      	str	r1, [r7, #4]
 800ad92:	edc7 0a00 	vstr	s1, [r7]
    {
        setParam(cutoffFreq, order, value);
 800ad96:	edd7 0a00 	vldr	s1, [r7]
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f81c 	bl	800adde <_ZN2ps7LowPass8setParamEfjf>
        initializeState();
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f96e 	bl	800b088 <_ZN2ps7LowPass15initializeStateEv>
    }
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <_ZN2ps7LowPassC1ENS_12LowPassParamE>:

    LowPass::LowPass(LowPassParam param)
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	4638      	mov	r0, r7
 800adc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    {
        setParam(param);
 800adc4:	463b      	mov	r3, r7
 800adc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f838 	bl	800ae3e <_ZN2ps7LowPass8setParamENS_12LowPassParamE>
        initializeState();
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 f95a 	bl	800b088 <_ZN2ps7LowPass15initializeStateEv>
    }
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <_ZN2ps7LowPass8setParamEfjf>:

    void LowPass::setParam(float cutoffFreq, unsigned int order, float value)
    {
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	ed87 0a02 	vstr	s0, [r7, #8]
 800adea:	6079      	str	r1, [r7, #4]
 800adec:	edc7 0a00 	vstr	s1, [r7]
        param_.initialValue = value;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	605a      	str	r2, [r3, #4]
        param_.order = min(order,(unsigned int)5);
 800adf6:	2305      	movs	r3, #5
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	f107 0210 	add.w	r2, r7, #16
 800adfe:	1d3b      	adds	r3, r7, #4
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f95d 	bl	800b0c2 <_ZSt3minIjERKT_S2_S2_>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	609a      	str	r2, [r3, #8]
        param_.order = max(param_.order,(unsigned int)1);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	3308      	adds	r3, #8
 800ae14:	2201      	movs	r2, #1
 800ae16:	617a      	str	r2, [r7, #20]
 800ae18:	f107 0214 	add.w	r2, r7, #20
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f963 	bl	800b0ea <_ZSt3maxIjERKT_S2_S2_>
 800ae24:	4603      	mov	r3, r0
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	609a      	str	r2, [r3, #8]
        setCutoffFreq(cutoffFreq);
 800ae2c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 f81d 	bl	800ae70 <_ZN2ps7LowPass13setCutoffFreqEf>
    }
 800ae36:	bf00      	nop
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <_ZN2ps7LowPass8setParamENS_12LowPassParamE>:

    void LowPass::setParam(LowPassParam param)
    {
 800ae3e:	b590      	push	{r4, r7, lr}
 800ae40:	b085      	sub	sp, #20
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	4638      	mov	r0, r7
 800ae48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        param_ = param;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	461c      	mov	r4, r3
 800ae50:	463b      	mov	r3, r7
 800ae52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        setCutoffFreq(param.cutoffFreq);
 800ae5a:	edd7 7a00 	vldr	s15, [r7]
 800ae5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f804 	bl	800ae70 <_ZN2ps7LowPass13setCutoffFreqEf>
    }
 800ae68:	bf00      	nop
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}

0800ae70 <_ZN2ps7LowPass13setCutoffFreqEf>:
    {
        return param_.cutoffFreq;
    }

    void LowPass::setCutoffFreq(float cutoffFreq)
    {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	ed87 0a00 	vstr	s0, [r7]
        param_.cutoffFreq = cutoffFreq;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	601a      	str	r2, [r3, #0]
        float gainScale = 1.0/ (sqrt( pow(2.0, 1.0/float(param_.order)) - 1.0));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	ee17 0a90 	vmov	r0, s15
 800ae92:	f7f5 fb17 	bl	80004c4 <__aeabi_f2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	f04f 0000 	mov.w	r0, #0
 800ae9e:	4930      	ldr	r1, [pc, #192]	; (800af60 <_ZN2ps7LowPass13setCutoffFreqEf+0xf0>)
 800aea0:	f7f5 fc92 	bl	80007c8 <__aeabi_ddiv>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	ec43 2b17 	vmov	d7, r2, r3
 800aeac:	eeb0 1a47 	vmov.f32	s2, s14
 800aeb0:	eef0 1a67 	vmov.f32	s3, s15
 800aeb4:	ed9f 0b26 	vldr	d0, [pc, #152]	; 800af50 <_ZN2ps7LowPass13setCutoffFreqEf+0xe0>
 800aeb8:	f013 fe6e 	bl	801eb98 <pow>
 800aebc:	ec51 0b10 	vmov	r0, r1, d0
 800aec0:	f04f 0200 	mov.w	r2, #0
 800aec4:	4b26      	ldr	r3, [pc, #152]	; (800af60 <_ZN2ps7LowPass13setCutoffFreqEf+0xf0>)
 800aec6:	f7f5 f99d 	bl	8000204 <__aeabi_dsub>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	ec43 2b17 	vmov	d7, r2, r3
 800aed2:	eeb0 0a47 	vmov.f32	s0, s14
 800aed6:	eef0 0a67 	vmov.f32	s1, s15
 800aeda:	f013 fecd 	bl	801ec78 <sqrt>
 800aede:	ec53 2b10 	vmov	r2, r3, d0
 800aee2:	f04f 0000 	mov.w	r0, #0
 800aee6:	491e      	ldr	r1, [pc, #120]	; (800af60 <_ZN2ps7LowPass13setCutoffFreqEf+0xf0>)
 800aee8:	f7f5 fc6e 	bl	80007c8 <__aeabi_ddiv>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	f7f5 fe36 	bl	8000b64 <__aeabi_d2f>
 800aef8:	4603      	mov	r3, r0
 800aefa:	60fb      	str	r3, [r7, #12]
        elemCutoffFreq_ = param_.cutoffFreq*gainScale; // Cutoff freqency for first order stages
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	ed93 7a00 	vldr	s14, [r3]
 800af02:	edd7 7a03 	vldr	s15, [r7, #12]
 800af06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        rc_ = 1.0/(2.0*M_PI*elemCutoffFreq_);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	4618      	mov	r0, r3
 800af16:	f7f5 fad5 	bl	80004c4 <__aeabi_f2d>
 800af1a:	a30f      	add	r3, pc, #60	; (adr r3, 800af58 <_ZN2ps7LowPass13setCutoffFreqEf+0xe8>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 fb28 	bl	8000574 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	f04f 0000 	mov.w	r0, #0
 800af2c:	490c      	ldr	r1, [pc, #48]	; (800af60 <_ZN2ps7LowPass13setCutoffFreqEf+0xf0>)
 800af2e:	f7f5 fc4b 	bl	80007c8 <__aeabi_ddiv>
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	4610      	mov	r0, r2
 800af38:	4619      	mov	r1, r3
 800af3a:	f7f5 fe13 	bl	8000b64 <__aeabi_d2f>
 800af3e:	4602      	mov	r2, r0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	625a      	str	r2, [r3, #36]	; 0x24
    }
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	f3af 8000 	nop.w
 800af50:	00000000 	.word	0x00000000
 800af54:	40000000 	.word	0x40000000
 800af58:	54442d18 	.word	0x54442d18
 800af5c:	401921fb 	.word	0x401921fb
 800af60:	3ff00000 	.word	0x3ff00000

0800af64 <_ZN2ps7LowPass6updateEff>:
    {
        return elemCutoffFreq_;
    }

    void LowPass::update(float value, float dt)
    {
 800af64:	b5b0      	push	{r4, r5, r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	ed87 0a02 	vstr	s0, [r7, #8]
 800af70:	edc7 0a01 	vstr	s1, [r7, #4]
        float alpha = dt/(rc_ + dt);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800af7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800af7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af82:	edd7 6a01 	vldr	s13, [r7, #4]
 800af86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af8a:	edc7 7a04 	vstr	s15, [r7, #16]
        state_[0] = value;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	60da      	str	r2, [r3, #12]
        for (unsigned int i=1; i<=param_.order; i++)
 800af94:	2301      	movs	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e049      	b.n	800b02e <_ZN2ps7LowPass6updateEff+0xca>
        {
            state_[i] = (1.0 - alpha)*state_[i] + alpha*state_[i-1]; 
 800af9a:	6938      	ldr	r0, [r7, #16]
 800af9c:	f7f5 fa92 	bl	80004c4 <__aeabi_f2d>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	f04f 0000 	mov.w	r0, #0
 800afa8:	4926      	ldr	r1, [pc, #152]	; (800b044 <_ZN2ps7LowPass6updateEff+0xe0>)
 800afaa:	f7f5 f92b 	bl	8000204 <__aeabi_dsub>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4614      	mov	r4, r2
 800afb4:	461d      	mov	r5, r3
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	3302      	adds	r3, #2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	3304      	adds	r3, #4
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7f5 fa7d 	bl	80004c4 <__aeabi_f2d>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 facf 	bl	8000574 <__aeabi_dmul>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4614      	mov	r4, r2
 800afdc:	461d      	mov	r5, r3
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	3302      	adds	r3, #2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	3304      	adds	r3, #4
 800afec:	ed93 7a00 	vldr	s14, [r3]
 800aff0:	edd7 7a04 	vldr	s15, [r7, #16]
 800aff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff8:	ee17 0a90 	vmov	r0, s15
 800affc:	f7f5 fa62 	bl	80004c4 <__aeabi_f2d>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 f8fe 	bl	8000208 <__adddf3>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4610      	mov	r0, r2
 800b012:	4619      	mov	r1, r3
 800b014:	f7f5 fda6 	bl	8000b64 <__aeabi_d2f>
 800b018:	4601      	mov	r1, r0
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	3302      	adds	r3, #2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	3304      	adds	r3, #4
 800b026:	6019      	str	r1, [r3, #0]
        for (unsigned int i=1; i<=param_.order; i++)
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	3301      	adds	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	429a      	cmp	r2, r3
 800b036:	d9b0      	bls.n	800af9a <_ZN2ps7LowPass6updateEff+0x36>
        }
    }
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bdb0      	pop	{r4, r5, r7, pc}
 800b042:	bf00      	nop
 800b044:	3ff00000 	.word	0x3ff00000

0800b048 <_ZN2ps7LowPass5resetEv>:

    void LowPass::reset()
    {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
        initializeState();
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f819 	bl	800b088 <_ZN2ps7LowPass15initializeStateEv>
    }
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <_ZNK2ps7LowPass5valueEv>:

    float LowPass::value() const
    {
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
        return state_[param_.order];
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	3302      	adds	r3, #2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	3304      	adds	r3, #4
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	ee07 3a90 	vmov	s15, r3
    }
 800b07a:	eeb0 0a67 	vmov.f32	s0, s15
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <_ZN2ps7LowPass15initializeStateEv>:

    // Protected methods
    // ------------------------------------------------------------------------

    void LowPass::initializeState()
    {
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
        for (unsigned int i=0; i<MaxOrder_+1; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e00b      	b.n	800b0ae <_ZN2ps7LowPass15initializeStateEv+0x26>
        {
            state_[i] = param_.initialValue;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3302      	adds	r3, #2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	601a      	str	r2, [r3, #0]
        for (unsigned int i=0; i<MaxOrder_+1; i++)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	d9f0      	bls.n	800b096 <_ZN2ps7LowPass15initializeStateEv+0xe>
        }
    }
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b0c2:	b480      	push	{r7}
 800b0c4:	b083      	sub	sp, #12
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d201      	bcs.n	800b0dc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	e000      	b.n	800b0de <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800b0dc:	687b      	ldr	r3, [r7, #4]
    }
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d201      	bcs.n	800b104 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	e000      	b.n	800b106 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b104:	687b      	ldr	r3, [r7, #4]
    }
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <_Z41__static_initialization_and_destruction_0ii>:
            rval = CurrGainPathStringArray[value];
        }
        return rval;
    }

}
 800b114:	b5b0      	push	{r4, r5, r7, lr}
 800b116:	b08c      	sub	sp, #48	; 0x30
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 80aa 	bne.w	800b27a <_Z41__static_initialization_and_destruction_0ii+0x166>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b12c:	4293      	cmp	r3, r2
 800b12e:	f040 80a4 	bne.w	800b27a <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800b132:	4c61      	ldr	r4, [pc, #388]	; (800b2b8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800b134:	4625      	mov	r5, r4
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	4618      	mov	r0, r3
 800b13c:	f013 f99b 	bl	801e476 <_ZNSaIcEC1Ev>
 800b140:	f107 030c 	add.w	r3, r7, #12
 800b144:	461a      	mov	r2, r3
 800b146:	495d      	ldr	r1, [pc, #372]	; (800b2bc <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800b148:	4628      	mov	r0, r5
 800b14a:	f013 fc3b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b14e:	f107 030c 	add.w	r3, r7, #12
 800b152:	4618      	mov	r0, r3
 800b154:	f013 f990 	bl	801e478 <_ZNSaIcED1Ev>
 800b158:	3418      	adds	r4, #24
 800b15a:	f107 0310 	add.w	r3, r7, #16
 800b15e:	4618      	mov	r0, r3
 800b160:	f013 f989 	bl	801e476 <_ZNSaIcEC1Ev>
 800b164:	f107 0310 	add.w	r3, r7, #16
 800b168:	461a      	mov	r2, r3
 800b16a:	4955      	ldr	r1, [pc, #340]	; (800b2c0 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800b16c:	4620      	mov	r0, r4
 800b16e:	f013 fc29 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b172:	f107 0310 	add.w	r3, r7, #16
 800b176:	4618      	mov	r0, r3
 800b178:	f013 f97e 	bl	801e478 <_ZNSaIcED1Ev>
 800b17c:	3418      	adds	r4, #24
 800b17e:	f107 0314 	add.w	r3, r7, #20
 800b182:	4618      	mov	r0, r3
 800b184:	f013 f977 	bl	801e476 <_ZNSaIcEC1Ev>
 800b188:	f107 0314 	add.w	r3, r7, #20
 800b18c:	461a      	mov	r2, r3
 800b18e:	494d      	ldr	r1, [pc, #308]	; (800b2c4 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800b190:	4620      	mov	r0, r4
 800b192:	f013 fc17 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b196:	f107 0314 	add.w	r3, r7, #20
 800b19a:	4618      	mov	r0, r3
 800b19c:	f013 f96c 	bl	801e478 <_ZNSaIcED1Ev>
 800b1a0:	3418      	adds	r4, #24
 800b1a2:	f107 0318 	add.w	r3, r7, #24
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f013 f965 	bl	801e476 <_ZNSaIcEC1Ev>
 800b1ac:	f107 0318 	add.w	r3, r7, #24
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4945      	ldr	r1, [pc, #276]	; (800b2c8 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f013 fc05 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b1ba:	f107 0318 	add.w	r3, r7, #24
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f013 f95a 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800b1c4:	4c41      	ldr	r4, [pc, #260]	; (800b2cc <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800b1c6:	4625      	mov	r5, r4
 800b1c8:	f107 031c 	add.w	r3, r7, #28
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f013 f952 	bl	801e476 <_ZNSaIcEC1Ev>
 800b1d2:	f107 031c 	add.w	r3, r7, #28
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	493d      	ldr	r1, [pc, #244]	; (800b2d0 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f013 fbf2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b1e0:	f107 031c 	add.w	r3, r7, #28
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f013 f947 	bl	801e478 <_ZNSaIcED1Ev>
 800b1ea:	3418      	adds	r4, #24
 800b1ec:	f107 0320 	add.w	r3, r7, #32
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f013 f940 	bl	801e476 <_ZNSaIcEC1Ev>
 800b1f6:	f107 0320 	add.w	r3, r7, #32
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4935      	ldr	r1, [pc, #212]	; (800b2d4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800b1fe:	4620      	mov	r0, r4
 800b200:	f013 fbe0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b204:	f107 0320 	add.w	r3, r7, #32
 800b208:	4618      	mov	r0, r3
 800b20a:	f013 f935 	bl	801e478 <_ZNSaIcED1Ev>
 800b20e:	3418      	adds	r4, #24
 800b210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b214:	4618      	mov	r0, r3
 800b216:	f013 f92e 	bl	801e476 <_ZNSaIcEC1Ev>
 800b21a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21e:	461a      	mov	r2, r3
 800b220:	492d      	ldr	r1, [pc, #180]	; (800b2d8 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800b222:	4620      	mov	r0, r4
 800b224:	f013 fbce 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b22c:	4618      	mov	r0, r3
 800b22e:	f013 f923 	bl	801e478 <_ZNSaIcED1Ev>
 800b232:	3418      	adds	r4, #24
 800b234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b238:	4618      	mov	r0, r3
 800b23a:	f013 f91c 	bl	801e476 <_ZNSaIcEC1Ev>
 800b23e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b242:	461a      	mov	r2, r3
 800b244:	4925      	ldr	r1, [pc, #148]	; (800b2dc <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800b246:	4620      	mov	r0, r4
 800b248:	f013 fbbc 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b24c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b250:	4618      	mov	r0, r3
 800b252:	f013 f911 	bl	801e478 <_ZNSaIcED1Ev>
 800b256:	3418      	adds	r4, #24
 800b258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b25c:	4618      	mov	r0, r3
 800b25e:	f013 f90a 	bl	801e476 <_ZNSaIcEC1Ev>
 800b262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b266:	461a      	mov	r2, r3
 800b268:	491d      	ldr	r1, [pc, #116]	; (800b2e0 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800b26a:	4620      	mov	r0, r4
 800b26c:	f013 fbaa 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b274:	4618      	mov	r0, r3
 800b276:	f013 f8ff 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d116      	bne.n	800b2ae <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b286:	4293      	cmp	r3, r2
 800b288:	d111      	bne.n	800b2ae <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800b28a:	4c16      	ldr	r4, [pc, #88]	; (800b2e4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800b28e:	429c      	cmp	r4, r3
 800b290:	d004      	beq.n	800b29c <_Z41__static_initialization_and_destruction_0ii+0x188>
 800b292:	3c18      	subs	r4, #24
 800b294:	4620      	mov	r0, r4
 800b296:	f013 f9ee 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b29a:	e7f7      	b.n	800b28c <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800b29c:	4c12      	ldr	r4, [pc, #72]	; (800b2e8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d004      	beq.n	800b2ae <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800b2a4:	3c18      	subs	r4, #24
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f013 f9e5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b2ac:	e7f7      	b.n	800b29e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800b2ae:	bf00      	nop
 800b2b0:	3730      	adds	r7, #48	; 0x30
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20009248 	.word	0x20009248
 800b2bc:	080217f8 	.word	0x080217f8
 800b2c0:	08021804 	.word	0x08021804
 800b2c4:	08021810 	.word	0x08021810
 800b2c8:	0802181c 	.word	0x0802181c
 800b2cc:	200092a8 	.word	0x200092a8
 800b2d0:	08021828 	.word	0x08021828
 800b2d4:	08021838 	.word	0x08021838
 800b2d8:	08021848 	.word	0x08021848
 800b2dc:	08021858 	.word	0x08021858
 800b2e0:	08021868 	.word	0x08021868
 800b2e4:	20009320 	.word	0x20009320
 800b2e8:	200092a8 	.word	0x200092a8

0800b2ec <_GLOBAL__sub_I__ZN2ps16voltGainToStringB5cxx11ENS_8VoltGainE>:
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f7ff ff0d 	bl	800b114 <_Z41__static_initialization_and_destruction_0ii>
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <_GLOBAL__sub_D__ZN2ps16voltGainToStringB5cxx11ENS_8VoltGainE>:
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b304:	2000      	movs	r0, #0
 800b306:	f7ff ff05 	bl	800b114 <_Z41__static_initialization_and_destruction_0ii>
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <_ZN2ps15LinearSweepTestC1Ev>:
using namespace std;

namespace ps
{

    LinearSweepTest::LinearSweepTest()
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b08b      	sub	sp, #44	; 0x2c
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	f7fb fc14 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 800b31c:	4a1c      	ldr	r2, [pc, #112]	; (800b390 <_ZN2ps15LinearSweepTestC1Ev+0x84>)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800b328:	641a      	str	r2, [r3, #64]	; 0x40
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b330:	645a      	str	r2, [r3, #68]	; 0x44
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4a17      	ldr	r2, [pc, #92]	; (800b394 <_ZN2ps15LinearSweepTestC1Ev+0x88>)
 800b336:	f04f 0300 	mov.w	r3, #0
 800b33a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    { 
        setName("linearSweep");
 800b33e:	687c      	ldr	r4, [r7, #4]
 800b340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b344:	4618      	mov	r0, r3
 800b346:	f013 f896 	bl	801e476 <_ZNSaIcEC1Ev>
 800b34a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b34e:	f107 030c 	add.w	r3, r7, #12
 800b352:	4911      	ldr	r1, [pc, #68]	; (800b398 <_ZN2ps15LinearSweepTestC1Ev+0x8c>)
 800b354:	4618      	mov	r0, r3
 800b356:	f013 fb35 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b35a:	f107 030c 	add.w	r3, r7, #12
 800b35e:	4619      	mov	r1, r3
 800b360:	4620      	mov	r0, r4
 800b362:	f7fb fd31 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	4618      	mov	r0, r3
 800b36c:	f013 f983 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b374:	4618      	mov	r0, r3
 800b376:	f013 f87f 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2101      	movs	r1, #1
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fb fdd7 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    }
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	372c      	adds	r7, #44	; 0x2c
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	080223cc 	.word	0x080223cc
 800b394:	001e8480 	.word	0x001e8480
 800b398:	08021888 	.word	0x08021888

0800b39c <_ZN2ps15LinearSweepTest13setStartValueEf>:


    void LinearSweepTest::setStartValue(float value)
    {
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	ed87 0a00 	vstr	s0, [r7]
        startValue_ = value;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <_ZNK2ps15LinearSweepTest13getStartValueEv>:


    float LinearSweepTest::getStartValue() const
    {
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
        return startValue_;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	ee07 3a90 	vmov	s15, r3
    }
 800b3ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <_ZN2ps15LinearSweepTest13setFinalValueEf>:


    void LinearSweepTest::setFinalValue(float value)
    {
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	ed87 0a00 	vstr	s0, [r7]
        finalValue_ = value;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <_ZNK2ps15LinearSweepTest13getFinalValueEv>:


    float LinearSweepTest::getFinalValue() const
    {
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
        return finalValue_;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	ee07 3a90 	vmov	s15, r3
    }
 800b406:	eeb0 0a67 	vmov.f32	s0, s15
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <_ZN2ps15LinearSweepTest11setDurationEy>:


    void LinearSweepTest::setDuration(uint64_t duration)
    {
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	e9c7 2300 	strd	r2, r3, [r7]
        duration_ = duration;
 800b420:	68f9      	ldr	r1, [r7, #12]
 800b422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b426:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    }
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <_ZNK2ps15LinearSweepTest11getDurationEv>:


    uint64_t LinearSweepTest::getDuration() const
    {
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
        return duration_;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    }
 800b444:	4610      	mov	r0, r2
 800b446:	4619      	mov	r1, r3
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <_ZNK2ps15LinearSweepTest6isDoneEy>:


    bool LinearSweepTest::isDone(uint64_t t) const 
    {
 800b452:	b4b0      	push	{r4, r5, r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	e9c7 2300 	strd	r2, r3, [r7]
        if (t >= (duration_ + quietTime_))
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b46a:	1884      	adds	r4, r0, r2
 800b46c:	eb41 0503 	adc.w	r5, r1, r3
 800b470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b474:	42a2      	cmp	r2, r4
 800b476:	41ab      	sbcs	r3, r5
 800b478:	d301      	bcc.n	800b47e <_ZNK2ps15LinearSweepTest6isDoneEy+0x2c>
        {
            return true;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <_ZNK2ps15LinearSweepTest6isDoneEy+0x2e>
        }
        else
        {
            return false;
 800b47e:	2300      	movs	r3, #0
        }
    }
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bcb0      	pop	{r4, r5, r7}
 800b488:	4770      	bx	lr

0800b48a <_ZNK2ps15LinearSweepTest11getDoneTimeEv>:

    uint64_t LinearSweepTest::getDoneTime() const
    {
 800b48a:	b4b0      	push	{r4, r5, r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
        return duration_ + quietTime_;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b49e:	1884      	adds	r4, r0, r2
 800b4a0:	eb41 0503 	adc.w	r5, r1, r3
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
    }
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bcb0      	pop	{r4, r5, r7}
 800b4b2:	4770      	bx	lr

0800b4b4 <_ZNK2ps15LinearSweepTest8getValueEy>:

    float LinearSweepTest::getValue(uint64_t t) const 
    {
 800b4b4:	b5b0      	push	{r4, r5, r7, lr}
 800b4b6:	ed2d 8b02 	vpush	{d8}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	e9c7 2300 	strd	r2, r3, [r7]
        float value = 0.0;
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
        if (t < quietTime_)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4d4:	4290      	cmp	r0, r2
 800b4d6:	eb71 0303 	sbcs.w	r3, r1, r3
 800b4da:	d203      	bcs.n	800b4e4 <_ZNK2ps15LinearSweepTest8getValueEy+0x30>
        {
            value = quietValue_;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	61fb      	str	r3, [r7, #28]
 800b4e2:	e02b      	b.n	800b53c <_ZNK2ps15LinearSweepTest8getValueEy+0x88>
        }
        else
        {
            uint64_t s = t - quietTime_;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b4ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4ee:	1a84      	subs	r4, r0, r2
 800b4f0:	eb61 0503 	sbc.w	r5, r1, r3
 800b4f4:	e9c7 4504 	strd	r4, r5, [r7, #16]
            value = ((finalValue_ - startValue_)*s)/duration_ + startValue_;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b504:	ee37 8a67 	vsub.f32	s16, s14, s15
 800b508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b50c:	f7f5 fc42 	bl	8000d94 <__aeabi_ul2f>
 800b510:	ee07 0a90 	vmov	s15, r0
 800b514:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800b51e:	4610      	mov	r0, r2
 800b520:	4619      	mov	r1, r3
 800b522:	f7f5 fc37 	bl	8000d94 <__aeabi_ul2f>
 800b526:	ee07 0a90 	vmov	s15, r0
 800b52a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b534:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b538:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        return value;
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	ee07 3a90 	vmov	s15, r3
    }
 800b542:	eeb0 0a67 	vmov.f32	s0, s15
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	ecbd 8b02 	vpop	{d8}
 800b54e:	bdb0      	pop	{r4, r5, r7, pc}

0800b550 <_ZNK2ps15LinearSweepTest11getMaxValueEv>:


    float LinearSweepTest::getMaxValue() const 
    {
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
        return max(startValue_, max(finalValue_, quietValue_));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3310      	adds	r3, #16
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f7f7 fe0e 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800b570:	4603      	mov	r3, r0
 800b572:	4619      	mov	r1, r3
 800b574:	4620      	mov	r0, r4
 800b576:	f7f7 fe09 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800b57a:	4603      	mov	r3, r0
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	ee07 3a90 	vmov	s15, r3
    }
 800b582:	eeb0 0a67 	vmov.f32	s0, s15
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd90      	pop	{r4, r7, pc}

0800b58c <_ZNK2ps15LinearSweepTest11getMinValueEv>:


    float LinearSweepTest::getMinValue() const 
    {
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
        return min(startValue_, min(finalValue_, quietValue_));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3310      	adds	r3, #16
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	f7f7 fe09 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7f7 fe04 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	ee07 3a90 	vmov	s15, r3
    }
 800b5be:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}

0800b5c8 <_ZN2ps15LinearSweepTest8getParamERN11ArduinoJson10JsonObjectE>:


    void LinearSweepTest::getParam(JsonObject &jsonDat)
    {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08c      	sub	sp, #48	; 0x30
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
        BaseTest::getParam(jsonDat);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fb fc42 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>

        ReturnStatus status;
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f5 feed 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f107 020c 	add.w	r2, r7, #12
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fb fcb0 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800b5f4:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (status.success)
 800b5f6:	7b3b      	ldrb	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01d      	beq.n	800b638 <_ZN2ps15LinearSweepTest8getParamERN11ArduinoJson10JsonObjectE+0x70>
        {
            jsonDatPrm.set(StartValueKey, startValue_);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3340      	adds	r3, #64	; 0x40
 800b600:	461a      	mov	r2, r3
 800b602:	4911      	ldr	r1, [pc, #68]	; (800b648 <_ZN2ps15LinearSweepTest8getParamERN11ArduinoJson10JsonObjectE+0x80>)
 800b604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b606:	f7fb ff00 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(FinalValueKey, finalValue_);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3344      	adds	r3, #68	; 0x44
 800b60e:	461a      	mov	r2, r3
 800b610:	490e      	ldr	r1, [pc, #56]	; (800b64c <_ZN2ps15LinearSweepTest8getParamERN11ArduinoJson10JsonObjectE+0x84>)
 800b612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b614:	f7fb fef9 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(DurationKey, convertUsToMs(duration_));
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800b61e:	4610      	mov	r0, r2
 800b620:	4619      	mov	r1, r3
 800b622:	f7f6 f8fa 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800b626:	4603      	mov	r3, r0
 800b628:	62bb      	str	r3, [r7, #40]	; 0x28
 800b62a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b62e:	461a      	mov	r2, r3
 800b630:	4907      	ldr	r1, [pc, #28]	; (800b650 <_ZN2ps15LinearSweepTest8getParamERN11ArduinoJson10JsonObjectE+0x88>)
 800b632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b634:	f7fb fef9 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        }
    }
 800b638:	f107 030c 	add.w	r3, r7, #12
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7f7 f8fd 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 800b642:	3730      	adds	r7, #48	; 0x30
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	2000851c 	.word	0x2000851c
 800b64c:	20008534 	.word	0x20008534
 800b650:	200084ec 	.word	0x200084ec

0800b654 <_ZN2ps15LinearSweepTest8setParamERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus LinearSweepTest::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 800b654:	b580      	push	{r7, lr}
 800b656:	b08e      	sub	sp, #56	; 0x38
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7f5 feac 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	f107 0014 	add.w	r0, r7, #20
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	f7fb fc21 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	4619      	mov	r1, r3
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7f7 f945 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 800b682:	f107 0314 	add.w	r3, r7, #20
 800b686:	4618      	mov	r0, r3
 800b688:	f7f7 f8d8 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>

        // Extract parameter JsonObjects
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	4618      	mov	r0, r3
 800b694:	f7fb fc5e 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800b698:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f083 0301 	eor.w	r3, r3, #1
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d120      	bne.n	800b6ea <_ZN2ps15LinearSweepTest8setParamERN11ArduinoJson10JsonObjectES3_+0x96>
        {
            return status;
        }

        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fb fc50 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800b6b4:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f083 0301 	eor.w	r3, r3, #1
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d114      	bne.n	800b6ee <_ZN2ps15LinearSweepTest8setParamERN11ArduinoJson10JsonObjectES3_+0x9a>
        {
            return status;
        }

        // Set parameters
        setStartValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6ca:	68b8      	ldr	r0, [r7, #8]
 800b6cc:	f000 f814 	bl	800b6f8 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setFinalValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6d6:	68b8      	ldr	r0, [r7, #8]
 800b6d8:	f000 f8b8 	bl	800b84c <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setDurationFromJson(jsonMsgPrm,jsonDatPrm,status);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6e2:	68b8      	ldr	r0, [r7, #8]
 800b6e4:	f000 f95c 	bl	800b9a0 <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>

        return status;
 800b6e8:	e002      	b.n	800b6f0 <_ZN2ps15LinearSweepTest8setParamERN11ArduinoJson10JsonObjectES3_+0x9c>
            return status;
 800b6ea:	bf00      	nop
 800b6ec:	e000      	b.n	800b6f0 <_ZN2ps15LinearSweepTest8setParamERN11ArduinoJson10JsonObjectES3_+0x9c>
            return status;
 800b6ee:	bf00      	nop
    }
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	3738      	adds	r7, #56	; 0x38
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    // Protected methods
    // ----------------------------------------------------------------------------------

    void LinearSweepTest::setStartValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b09e      	sub	sp, #120	; 0x78
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(StartValueKey))
 800b706:	494f      	ldr	r1, [pc, #316]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b708:	68b8      	ldr	r0, [r7, #8]
 800b70a:	f7f8 ff0a 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 8092 	beq.w	800b83a <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[StartValueKey].is<float>())
 800b716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b71a:	4a4a      	ldr	r2, [pc, #296]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f8 ff35 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fb ffb6 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800b730:	4603      	mov	r3, r0
 800b732:	bf00      	nop
 800b734:	2b00      	cmp	r3, #0
 800b736:	d019      	beq.n	800b76c <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setStartValue(jsonMsgPrm.get<float>(StartValueKey));
 800b738:	4942      	ldr	r1, [pc, #264]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f7fb fe85 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800b740:	eef0 7a40 	vmov.f32	s15, s0
 800b744:	eeb0 0a67 	vmov.f32	s0, s15
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff fe27 	bl	800b39c <_ZN2ps15LinearSweepTest13setStartValueEf>
                jsonDatPrm.set(StartValueKey,getStartValue());
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff fe33 	bl	800b3ba <_ZNK2ps15LinearSweepTest13getStartValueEv>
 800b754:	eef0 7a40 	vmov.f32	s15, s0
 800b758:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800b75c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b760:	461a      	mov	r2, r3
 800b762:	4938      	ldr	r1, [pc, #224]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7fb fe50 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = StartValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800b76a:	e066      	b.n	800b83a <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[StartValueKey].is<long>())
 800b76c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b770:	4a34      	ldr	r2, [pc, #208]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b772:	68b9      	ldr	r1, [r7, #8]
 800b774:	4618      	mov	r0, r3
 800b776:	f7f8 ff0a 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b77e:	4611      	mov	r1, r2
 800b780:	4618      	mov	r0, r3
 800b782:	f7fb ffcb 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800b786:	4603      	mov	r3, r0
 800b788:	bf00      	nop
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d01b      	beq.n	800b7c6 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setStartValue(float(jsonMsgPrm.get<long>(StartValueKey)));
 800b78e:	492d      	ldr	r1, [pc, #180]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b790:	68b8      	ldr	r0, [r7, #8]
 800b792:	f7fb fe6a 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800b796:	ee07 0a90 	vmov	s15, r0
 800b79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b79e:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f7ff fdfa 	bl	800b39c <_ZN2ps15LinearSweepTest13setStartValueEf>
                jsonDatPrm.set(StartValueKey,getStartValue());
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff fe06 	bl	800b3ba <_ZNK2ps15LinearSweepTest13getStartValueEv>
 800b7ae:	eef0 7a40 	vmov.f32	s15, s0
 800b7b2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800b7b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	4921      	ldr	r1, [pc, #132]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7fb fe23 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800b7c4:	e039      	b.n	800b83a <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
                string errorMsg = StartValueKey + string(" not a float");
 800b7cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f012 fe50 	bl	801e476 <_ZNSaIcEC1Ev>
 800b7d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b7da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b7de:	491a      	ldr	r1, [pc, #104]	; (800b848 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f013 f8ef 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b7e6:	f107 0314 	add.w	r3, r7, #20
 800b7ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b7ee:	4915      	ldr	r1, [pc, #84]	; (800b844 <_ZN2ps15LinearSweepTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f8 feb4 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800b7f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f012 ff3b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b804:	4618      	mov	r0, r3
 800b806:	f012 fe37 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800b80a:	f107 0214 	add.w	r2, r7, #20
 800b80e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f013 f8a1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b81a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b81e:	4619      	mov	r1, r3
 800b820:	6838      	ldr	r0, [r7, #0]
 800b822:	f003 f9c5 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b826:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b82a:	4618      	mov	r0, r3
 800b82c:	f012 ff23 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800b830:	f107 0314 	add.w	r3, r7, #20
 800b834:	4618      	mov	r0, r3
 800b836:	f012 ff1e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800b83a:	bf00      	nop
 800b83c:	3778      	adds	r7, #120	; 0x78
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	2000851c 	.word	0x2000851c
 800b848:	08021894 	.word	0x08021894

0800b84c <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void LinearSweepTest::setFinalValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b09e      	sub	sp, #120	; 0x78
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(FinalValueKey))
 800b85a:	494f      	ldr	r1, [pc, #316]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b85c:	68b8      	ldr	r0, [r7, #8]
 800b85e:	f7f8 fe60 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 8092 	beq.w	800b98e <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[FinalValueKey].is<float>())
 800b86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b86e:	4a4a      	ldr	r2, [pc, #296]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f7f8 fe8b 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fb ff0c 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800b884:	4603      	mov	r3, r0
 800b886:	bf00      	nop
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d019      	beq.n	800b8c0 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setFinalValue(jsonMsgPrm.get<float>(FinalValueKey));
 800b88c:	4942      	ldr	r1, [pc, #264]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b88e:	68b8      	ldr	r0, [r7, #8]
 800b890:	f7fb fddb 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800b894:	eef0 7a40 	vmov.f32	s15, s0
 800b898:	eeb0 0a67 	vmov.f32	s0, s15
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff fd9b 	bl	800b3d8 <_ZN2ps15LinearSweepTest13setFinalValueEf>
                jsonDatPrm.set(FinalValueKey,getFinalValue());
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff fda7 	bl	800b3f6 <_ZNK2ps15LinearSweepTest13getFinalValueEv>
 800b8a8:	eef0 7a40 	vmov.f32	s15, s0
 800b8ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800b8b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4938      	ldr	r1, [pc, #224]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7fb fda6 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = FinalValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800b8be:	e066      	b.n	800b98e <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[FinalValueKey].is<long>())
 800b8c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b8c4:	4a34      	ldr	r2, [pc, #208]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b8c6:	68b9      	ldr	r1, [r7, #8]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f8 fe60 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fb ff21 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	bf00      	nop
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d01b      	beq.n	800b91a <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setFinalValue(float(jsonMsgPrm.get<long>(FinalValueKey)));
 800b8e2:	492d      	ldr	r1, [pc, #180]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f7fb fdc0 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800b8ea:	ee07 0a90 	vmov	s15, r0
 800b8ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fd6e 	bl	800b3d8 <_ZN2ps15LinearSweepTest13setFinalValueEf>
                jsonDatPrm.set(FinalValueKey,getFinalValue());
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fd7a 	bl	800b3f6 <_ZNK2ps15LinearSweepTest13getFinalValueEv>
 800b902:	eef0 7a40 	vmov.f32	s15, s0
 800b906:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800b90a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b90e:	461a      	mov	r2, r3
 800b910:	4921      	ldr	r1, [pc, #132]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7fb fd79 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800b918:	e039      	b.n	800b98e <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
                string errorMsg = FinalValueKey + string(" not a float");
 800b920:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b924:	4618      	mov	r0, r3
 800b926:	f012 fda6 	bl	801e476 <_ZNSaIcEC1Ev>
 800b92a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b92e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b932:	491a      	ldr	r1, [pc, #104]	; (800b99c <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 800b934:	4618      	mov	r0, r3
 800b936:	f013 f845 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b93a:	f107 0314 	add.w	r3, r7, #20
 800b93e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b942:	4915      	ldr	r1, [pc, #84]	; (800b998 <_ZN2ps15LinearSweepTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800b944:	4618      	mov	r0, r3
 800b946:	f7f8 fe0a 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800b94a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b94e:	4618      	mov	r0, r3
 800b950:	f012 fe91 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b954:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b958:	4618      	mov	r0, r3
 800b95a:	f012 fd8d 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800b95e:	f107 0214 	add.w	r2, r7, #20
 800b962:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f012 fff7 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800b96e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b972:	4619      	mov	r1, r3
 800b974:	6838      	ldr	r0, [r7, #0]
 800b976:	f003 f91b 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800b97a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b97e:	4618      	mov	r0, r3
 800b980:	f012 fe79 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800b984:	f107 0314 	add.w	r3, r7, #20
 800b988:	4618      	mov	r0, r3
 800b98a:	f012 fe74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800b98e:	bf00      	nop
 800b990:	3778      	adds	r7, #120	; 0x78
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20008534 	.word	0x20008534
 800b99c:	08021894 	.word	0x08021894

0800b9a0 <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void LinearSweepTest::setDurationFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b09a      	sub	sp, #104	; 0x68
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(DurationKey))
 800b9ae:	493b      	ldr	r1, [pc, #236]	; (800ba9c <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f7f8 fdb6 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d06a      	beq.n	800ba92 <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf2>
        {
            if (jsonMsgPrm[DurationKey].is<unsigned long>())
 800b9bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9c0:	4a36      	ldr	r2, [pc, #216]	; (800ba9c <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7f8 fde2 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fb fee0 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	bf00      	nop
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d01f      	beq.n	800ba1e <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x7e>
            {
                setDuration(convertMsToUs(jsonMsgPrm.get<unsigned long>(DurationKey)));
 800b9de:	492f      	ldr	r1, [pc, #188]	; (800ba9c <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	f7fb fd50 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f5 ff2a 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fd0e 	bl	800b414 <_ZN2ps15LinearSweepTest11setDurationEy>
                jsonDatPrm.set(DurationKey,convertUsToMs(getDuration()));
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff fd1c 	bl	800b436 <_ZNK2ps15LinearSweepTest11getDurationEv>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4610      	mov	r0, r2
 800ba04:	4619      	mov	r1, r3
 800ba06:	f7f5 ff08 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ba0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba12:	461a      	mov	r2, r3
 800ba14:	4921      	ldr	r1, [pc, #132]	; (800ba9c <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7fb fd07 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = DurationKey + string(" not uint32");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800ba1c:	e039      	b.n	800ba92 <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf2>
                status.success = false;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
                string errorMsg = DurationKey + string(" not uint32");
 800ba24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f012 fd24 	bl	801e476 <_ZNSaIcEC1Ev>
 800ba2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ba32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba36:	491a      	ldr	r1, [pc, #104]	; (800baa0 <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x100>)
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f012 ffc3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ba3e:	f107 0310 	add.w	r3, r7, #16
 800ba42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ba46:	4915      	ldr	r1, [pc, #84]	; (800ba9c <_ZN2ps15LinearSweepTest19setDurationFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfc>)
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7f8 fd88 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800ba4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba52:	4618      	mov	r0, r3
 800ba54:	f012 fe0f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ba58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f012 fd0b 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800ba62:	f107 0210 	add.w	r2, r7, #16
 800ba66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f012 ff75 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ba72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba76:	4619      	mov	r1, r3
 800ba78:	6838      	ldr	r0, [r7, #0]
 800ba7a:	f003 f899 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ba7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba82:	4618      	mov	r0, r3
 800ba84:	f012 fdf7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800ba88:	f107 0310 	add.w	r3, r7, #16
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f012 fdf2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800ba92:	bf00      	nop
 800ba94:	3768      	adds	r7, #104	; 0x68
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	200084ec 	.word	0x200084ec
 800baa0:	080218a4 	.word	0x080218a4

0800baa4 <_Z41__static_initialization_and_destruction_0ii>:


} // namespace ps
 800baa4:	b5b0      	push	{r4, r5, r7, lr}
 800baa6:	b08c      	sub	sp, #48	; 0x30
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	f040 80aa 	bne.w	800bc0a <_Z41__static_initialization_and_destruction_0ii+0x166>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800babc:	4293      	cmp	r3, r2
 800babe:	f040 80a4 	bne.w	800bc0a <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800bac2:	4c61      	ldr	r4, [pc, #388]	; (800bc48 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800bac4:	4625      	mov	r5, r4
 800bac6:	f107 030c 	add.w	r3, r7, #12
 800baca:	4618      	mov	r0, r3
 800bacc:	f012 fcd3 	bl	801e476 <_ZNSaIcEC1Ev>
 800bad0:	f107 030c 	add.w	r3, r7, #12
 800bad4:	461a      	mov	r2, r3
 800bad6:	495d      	ldr	r1, [pc, #372]	; (800bc4c <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800bad8:	4628      	mov	r0, r5
 800bada:	f012 ff73 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bade:	f107 030c 	add.w	r3, r7, #12
 800bae2:	4618      	mov	r0, r3
 800bae4:	f012 fcc8 	bl	801e478 <_ZNSaIcED1Ev>
 800bae8:	3418      	adds	r4, #24
 800baea:	f107 0310 	add.w	r3, r7, #16
 800baee:	4618      	mov	r0, r3
 800baf0:	f012 fcc1 	bl	801e476 <_ZNSaIcEC1Ev>
 800baf4:	f107 0310 	add.w	r3, r7, #16
 800baf8:	461a      	mov	r2, r3
 800bafa:	4955      	ldr	r1, [pc, #340]	; (800bc50 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800bafc:	4620      	mov	r0, r4
 800bafe:	f012 ff61 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb02:	f107 0310 	add.w	r3, r7, #16
 800bb06:	4618      	mov	r0, r3
 800bb08:	f012 fcb6 	bl	801e478 <_ZNSaIcED1Ev>
 800bb0c:	3418      	adds	r4, #24
 800bb0e:	f107 0314 	add.w	r3, r7, #20
 800bb12:	4618      	mov	r0, r3
 800bb14:	f012 fcaf 	bl	801e476 <_ZNSaIcEC1Ev>
 800bb18:	f107 0314 	add.w	r3, r7, #20
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	494d      	ldr	r1, [pc, #308]	; (800bc54 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800bb20:	4620      	mov	r0, r4
 800bb22:	f012 ff4f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb26:	f107 0314 	add.w	r3, r7, #20
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f012 fca4 	bl	801e478 <_ZNSaIcED1Ev>
 800bb30:	3418      	adds	r4, #24
 800bb32:	f107 0318 	add.w	r3, r7, #24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f012 fc9d 	bl	801e476 <_ZNSaIcEC1Ev>
 800bb3c:	f107 0318 	add.w	r3, r7, #24
 800bb40:	461a      	mov	r2, r3
 800bb42:	4945      	ldr	r1, [pc, #276]	; (800bc58 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800bb44:	4620      	mov	r0, r4
 800bb46:	f012 ff3d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb4a:	f107 0318 	add.w	r3, r7, #24
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f012 fc92 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800bb54:	4c41      	ldr	r4, [pc, #260]	; (800bc5c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800bb56:	4625      	mov	r5, r4
 800bb58:	f107 031c 	add.w	r3, r7, #28
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f012 fc8a 	bl	801e476 <_ZNSaIcEC1Ev>
 800bb62:	f107 031c 	add.w	r3, r7, #28
 800bb66:	461a      	mov	r2, r3
 800bb68:	493d      	ldr	r1, [pc, #244]	; (800bc60 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f012 ff2a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb70:	f107 031c 	add.w	r3, r7, #28
 800bb74:	4618      	mov	r0, r3
 800bb76:	f012 fc7f 	bl	801e478 <_ZNSaIcED1Ev>
 800bb7a:	3418      	adds	r4, #24
 800bb7c:	f107 0320 	add.w	r3, r7, #32
 800bb80:	4618      	mov	r0, r3
 800bb82:	f012 fc78 	bl	801e476 <_ZNSaIcEC1Ev>
 800bb86:	f107 0320 	add.w	r3, r7, #32
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4935      	ldr	r1, [pc, #212]	; (800bc64 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f012 ff18 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bb94:	f107 0320 	add.w	r3, r7, #32
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f012 fc6d 	bl	801e478 <_ZNSaIcED1Ev>
 800bb9e:	3418      	adds	r4, #24
 800bba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bba4:	4618      	mov	r0, r3
 800bba6:	f012 fc66 	bl	801e476 <_ZNSaIcEC1Ev>
 800bbaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbae:	461a      	mov	r2, r3
 800bbb0:	492d      	ldr	r1, [pc, #180]	; (800bc68 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f012 ff06 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bbb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f012 fc5b 	bl	801e478 <_ZNSaIcED1Ev>
 800bbc2:	3418      	adds	r4, #24
 800bbc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f012 fc54 	bl	801e476 <_ZNSaIcEC1Ev>
 800bbce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4925      	ldr	r1, [pc, #148]	; (800bc6c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f012 fef4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bbdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f012 fc49 	bl	801e478 <_ZNSaIcED1Ev>
 800bbe6:	3418      	adds	r4, #24
 800bbe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbec:	4618      	mov	r0, r3
 800bbee:	f012 fc42 	bl	801e476 <_ZNSaIcEC1Ev>
 800bbf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	491d      	ldr	r1, [pc, #116]	; (800bc70 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f012 fee2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800bc00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc04:	4618      	mov	r0, r3
 800bc06:	f012 fc37 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d116      	bne.n	800bc3e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d111      	bne.n	800bc3e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800bc1a:	4c16      	ldr	r4, [pc, #88]	; (800bc74 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800bc1e:	429c      	cmp	r4, r3
 800bc20:	d004      	beq.n	800bc2c <_Z41__static_initialization_and_destruction_0ii+0x188>
 800bc22:	3c18      	subs	r4, #24
 800bc24:	4620      	mov	r0, r4
 800bc26:	f012 fd26 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bc2a:	e7f7      	b.n	800bc1c <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800bc2c:	4c12      	ldr	r4, [pc, #72]	; (800bc78 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800bc30:	429c      	cmp	r4, r3
 800bc32:	d004      	beq.n	800bc3e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800bc34:	3c18      	subs	r4, #24
 800bc36:	4620      	mov	r0, r4
 800bc38:	f012 fd1d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bc3c:	e7f7      	b.n	800bc2e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800bc3e:	bf00      	nop
 800bc40:	3730      	adds	r7, #48	; 0x30
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bdb0      	pop	{r4, r5, r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20009320 	.word	0x20009320
 800bc4c:	080218b0 	.word	0x080218b0
 800bc50:	080218bc 	.word	0x080218bc
 800bc54:	080218c8 	.word	0x080218c8
 800bc58:	080218d4 	.word	0x080218d4
 800bc5c:	20009380 	.word	0x20009380
 800bc60:	080218e0 	.word	0x080218e0
 800bc64:	080218f0 	.word	0x080218f0
 800bc68:	08021900 	.word	0x08021900
 800bc6c:	08021910 	.word	0x08021910
 800bc70:	08021920 	.word	0x08021920
 800bc74:	200093f8 	.word	0x200093f8
 800bc78:	20009380 	.word	0x20009380

0800bc7c <_GLOBAL__sub_I__ZN2ps15LinearSweepTestC2Ev>:
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc84:	2001      	movs	r0, #1
 800bc86:	f7ff ff0d 	bl	800baa4 <_Z41__static_initialization_and_destruction_0ii>
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <_GLOBAL__sub_D__ZN2ps15LinearSweepTestC2Ev>:
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc94:	2000      	movs	r0, #0
 800bc96:	f7ff ff05 	bl	800baa4 <_Z41__static_initialization_and_destruction_0ii>
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc>:
  static char unescapeChar(char c) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 800bca6:	2001      	movs	r0, #1
 800bca8:	f000 f818 	bl	800bcdc <_ZN11ArduinoJson9Internals8Encoding11escapeTableEb>
 800bcac:	60f8      	str	r0, [r7, #12]
      if (p[0] == '\0') return c;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc+0x1e>
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	e00c      	b.n	800bcd4 <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	79fa      	ldrb	r2, [r7, #7]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d103      	bne.n	800bccc <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc+0x30>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	e003      	b.n	800bcd4 <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc+0x38>
      p += 2;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3302      	adds	r3, #2
 800bcd0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800bcd2:	e7ec      	b.n	800bcae <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc+0x12>
  }
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <_ZN11ArduinoJson9Internals8Encoding11escapeTableEb>:
  static const char *escapeTable(bool excludeIdenticals) {
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <_ZN11ArduinoJson9Internals8Encoding11escapeTableEb+0x14>
 800bcec:	2304      	movs	r3, #4
 800bcee:	e000      	b.n	800bcf2 <_ZN11ArduinoJson9Internals8Encoding11escapeTableEb+0x16>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <_ZN11ArduinoJson9Internals8Encoding11escapeTableEb+0x28>)
 800bcf4:	4413      	add	r3, r2
  }
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	08021930 	.word	0x08021930

0800bd08 <_ZN11ArduinoJson11JsonVariantC1ENS_9Internals13RawJsonStringIPKcEE>:
  JsonVariant(Internals::RawJsonString<const char *> value) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
    _type = Internals::JSON_UNPARSED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]
    _content.asString = value;
 800bd18:	463b      	mov	r3, r7
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f828 	bl	800bd70 <_ZNK11ArduinoJson9Internals13RawJsonStringIPKcEcvS3_Ev>
 800bd20:	4602      	mov	r2, r0
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	609a      	str	r2, [r3, #8]
  }
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <_ZN2ps13MessageParserC1Ev>:
#include "string"
using namespace std;

namespace ps
{ 
    MessageParser::MessageParser()
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
    { }
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <_ZN2ps13MessageParser5parseERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson16StaticJsonBufferILj4000EEE>:

    JsonObject &MessageParser::parse(string &message, StaticJsonBuffer<JsonMessageBufferSize> &jsonBuffer)
    { 
 800bd46:	b590      	push	{r4, r7, lr}
 800bd48:	b085      	sub	sp, #20
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	60b9      	str	r1, [r7, #8]
 800bd50:	607a      	str	r2, [r7, #4]
        return jsonBuffer.parseObject((char *)(message.c_str()));
 800bd52:	687c      	ldr	r4, [r7, #4]
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	f012 fdcb 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2232      	movs	r2, #50	; 0x32
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 f811 	bl	800bd88 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEE11parseObjectIcEERNS_10JsonObjectEPT_h>
 800bd66:	4603      	mov	r3, r0
    }
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd90      	pop	{r4, r7, pc}

0800bd70 <_ZNK11ArduinoJson9Internals13RawJsonStringIPKcEcvS3_Ev>:
  operator T() const {
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    return _str;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
  }
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEE11parseObjectIcEERNS_10JsonObjectEPT_h>:
  JsonObject &parseObject(
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	71fb      	strb	r3, [r7, #7]
    return Internals::makeParser(that(), json, nestingLimit).parseObject();
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f000 f812 	bl	800bdc0 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEE4thatEv>
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	f107 0010 	add.w	r0, r7, #16
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	f107 0208 	add.w	r2, r7, #8
 800bda8:	f000 f815 	bl	800bdd6 <_ZN11ArduinoJson9Internals10makeParserINS0_20StaticJsonBufferBaseEPcEENS0_17JsonParserBuilderIT_T0_vE7TParserEPS5_RS6_h>
 800bdac:	f107 0310 	add.w	r3, r7, #16
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 f823 	bl	800bdfc <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv>
 800bdb6:	4603      	mov	r3, r0
  }
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3720      	adds	r7, #32
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEE4thatEv>:
  TDerived *that() {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
    return static_cast<TDerived *>(this);
 800bdc8:	687b      	ldr	r3, [r7, #4]
  }
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <_ZN11ArduinoJson9Internals10makeParserINS0_20StaticJsonBufferBaseEPcEENS0_17JsonParserBuilderIT_T0_vE7TParserEPS5_RS6_h>:
inline typename JsonParserBuilder<TJsonBuffer, TString>::TParser makeParser(
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	70fb      	strb	r3, [r7, #3]
  return JsonParserBuilder<TJsonBuffer, TString>::makeParser(buffer, json,
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	78fb      	ldrb	r3, [r7, #3]
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	f000 f8bd 	bl	800bf6c <_ZN11ArduinoJson9Internals17JsonParserBuilderINS0_20StaticJsonBufferBaseEPcvE10makeParserEPS2_S3_h>
                                                             nestingLimit);
 800bdf2:	bf00      	nop
}
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv>:
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObject() {
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b092      	sub	sp, #72	; 0x48
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  if (_nestingLimit == 0) return JsonObject::invalid();
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7b1b      	ldrb	r3, [r3, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x18>
 800be0c:	f7fa fe20 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 800be10:	4603      	mov	r3, r0
 800be12:	e0a7      	b.n	800bf64 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x168>
  _nestingLimit--;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7b1b      	ldrb	r3, [r3, #12]
 800be18:	3b01      	subs	r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	731a      	strb	r2, [r3, #12]
  JsonObject &object = _buffer->createObject();
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4618      	mov	r0, r3
 800be26:	f7fa fe42 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 800be2a:	6478      	str	r0, [r7, #68]	; 0x44
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be30:	237b      	movs	r3, #123	; 0x7b
 800be32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return eat(_reader, charToSkip);
 800be36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be38:	3304      	adds	r3, #4
 800be3a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800be3e:	4611      	mov	r1, r2
 800be40:	4618      	mov	r0, r3
 800be42:	f000 f9b4 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800be46:	4603      	mov	r3, r0
 800be48:	bf00      	nop
  if (!eat('{')) goto ERROR_MISSING_BRACE;
 800be4a:	f083 0301 	eor.w	r3, r3, #1
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d178      	bne.n	800bf46 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x14a>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	637b      	str	r3, [r7, #52]	; 0x34
 800be58:	237d      	movs	r3, #125	; 0x7d
 800be5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    return eat(_reader, charToSkip);
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	3304      	adds	r3, #4
 800be62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f9a0 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800be6e:	4603      	mov	r3, r0
 800be70:	bf00      	nop
  if (eat('}')) goto SUCCESS_EMPTY_OBJECT;
 800be72:	2b00      	cmp	r3, #0
 800be74:	d15c      	bne.n	800bf30 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x134>
    const char *key = parseString();
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f897 	bl	800bfaa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv>
 800be7c:	6438      	str	r0, [r7, #64]	; 0x40
    if (!key) goto ERROR_INVALID_KEY;
 800be7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d062      	beq.n	800bf4a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x14e>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be88:	233a      	movs	r3, #58	; 0x3a
 800be8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    return eat(_reader, charToSkip);
 800be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be90:	3304      	adds	r3, #4
 800be92:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800be96:	4611      	mov	r1, r2
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f988 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800be9e:	4603      	mov	r3, r0
 800bea0:	bf00      	nop
    if (!eat(':')) goto ERROR_MISSING_COLON;
 800bea2:	f083 0301 	eor.w	r3, r3, #1
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d150      	bne.n	800bf4e <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x152>
    JsonVariant value;
 800beac:	f107 0308 	add.w	r3, r7, #8
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7f5 faa1 	bl	80013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
 800beb6:	f107 0308 	add.w	r3, r7, #8
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f8fb 	bl	800c0b8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE>
 800bec2:	4603      	mov	r3, r0
 800bec4:	f083 0301 	eor.w	r3, r3, #1
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d141      	bne.n	800bf52 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x156>
    if (!object.set(key, value)) goto ERROR_NO_MEMORY;
 800bece:	f107 0308 	add.w	r3, r7, #8
 800bed2:	461a      	mov	r2, r3
 800bed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bed6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bed8:	f000 f919 	bl	800c10e <_ZN11ArduinoJson10JsonObject3setINS_11JsonVariantEKcEEbPT0_RKT_>
 800bedc:	4603      	mov	r3, r0
 800bede:	f083 0301 	eor.w	r3, r3, #1
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d136      	bne.n	800bf56 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x15a>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
 800beec:	237d      	movs	r3, #125	; 0x7d
 800beee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return eat(_reader, charToSkip);
 800bef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef4:	3304      	adds	r3, #4
 800bef6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f000 f956 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800bf02:	4603      	mov	r3, r0
 800bf04:	bf00      	nop
    if (eat('}')) goto SUCCESS_NON_EMPTY_OBJECT;
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d114      	bne.n	800bf34 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x138>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	61fb      	str	r3, [r7, #28]
 800bf0e:	232c      	movs	r3, #44	; 0x2c
 800bf10:	76fb      	strb	r3, [r7, #27]
    return eat(_reader, charToSkip);
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	3304      	adds	r3, #4
 800bf16:	7efa      	ldrb	r2, [r7, #27]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f947 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800bf20:	4603      	mov	r3, r0
 800bf22:	bf00      	nop
    if (!eat(',')) goto ERROR_MISSING_COMMA;
 800bf24:	f083 0301 	eor.w	r3, r3, #1
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d115      	bne.n	800bf5a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x15e>
  for (;;) {
 800bf2e:	e7a2      	b.n	800be76 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x7a>
  if (eat('}')) goto SUCCESS_EMPTY_OBJECT;
 800bf30:	bf00      	nop
 800bf32:	e000      	b.n	800bf36 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x13a>
    if (eat('}')) goto SUCCESS_NON_EMPTY_OBJECT;
 800bf34:	bf00      	nop
  _nestingLimit++;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7b1b      	ldrb	r3, [r3, #12]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	731a      	strb	r2, [r3, #12]
  return object;
 800bf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf44:	e00e      	b.n	800bf64 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x168>
  if (!eat('{')) goto ERROR_MISSING_BRACE;
 800bf46:	bf00      	nop
 800bf48:	e008      	b.n	800bf5c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x160>
    if (!key) goto ERROR_INVALID_KEY;
 800bf4a:	bf00      	nop
 800bf4c:	e006      	b.n	800bf5c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x160>
    if (!eat(':')) goto ERROR_MISSING_COLON;
 800bf4e:	bf00      	nop
 800bf50:	e004      	b.n	800bf5c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x160>
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
 800bf52:	bf00      	nop
 800bf54:	e002      	b.n	800bf5c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x160>
    if (!object.set(key, value)) goto ERROR_NO_MEMORY;
 800bf56:	bf00      	nop
 800bf58:	e000      	b.n	800bf5c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv+0x160>
    if (!eat(',')) goto ERROR_MISSING_COMMA;
 800bf5a:	bf00      	nop
  return JsonObject::invalid();
 800bf5c:	f7fa fd78 	bl	8006a50 <_ZN11ArduinoJson10JsonObject7invalidEv>
 800bf60:	4603      	mov	r3, r0
 800bf62:	bf00      	nop
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3748      	adds	r7, #72	; 0x48
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <_ZN11ArduinoJson9Internals17JsonParserBuilderINS0_20StaticJsonBufferBaseEPcvE10makeParserEPS2_S3_h>:
  static TParser makeParser(TJsonBuffer *buffer, TChar *json,
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	70fb      	strb	r3, [r7, #3]
    return TParser(buffer, TReader(json), TWriter(json), nestingLimit);
 800bf7a:	f107 0310 	add.w	r3, r7, #16
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 f8d5 	bl	800c130 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6ReaderC1EPKc>
 800bf86:	f107 0314 	add.w	r3, r7, #20
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f8e5 	bl	800c15c <_ZN11ArduinoJson9Internals12StringWriterIcEC1EPc>
 800bf92:	78fb      	ldrb	r3, [r7, #3]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f8ec 	bl	800c17a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEEC1EPNS_10JsonBufferES4_S6_h>
  }
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv>:
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b086      	sub	sp, #24
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  typename RemoveReference<TWriter>::type::String str = _writer.startString();
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f103 0208 	add.w	r2, r3, #8
 800bfb8:	f107 030c 	add.w	r3, r7, #12
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f915 	bl	800c1ee <_ZN11ArduinoJson9Internals12StringWriterIcE11startStringEv>
  skipSpacesAndComments(_reader);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f91f 	bl	800c20c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_>
  char c = _reader.current();
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f9d6 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	75fb      	strb	r3, [r7, #23]
  if (isQuote(c)) {  // quotes
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 f9dd 	bl	800c39e <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d037      	beq.n	800c05a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xb0>
    _reader.move();
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3304      	adds	r3, #4
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f9e9 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
    char stopChar = c;
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	75bb      	strb	r3, [r7, #22]
      c = _reader.current();
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3304      	adds	r3, #4
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 f9c1 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]
      if (c == '\0') break;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d044      	beq.n	800c096 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xec>
      _reader.move();
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3304      	adds	r3, #4
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f9d8 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
      if (c == stopChar) break;
 800c016:	7dfa      	ldrb	r2, [r7, #23]
 800c018:	7dbb      	ldrb	r3, [r7, #22]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d03d      	beq.n	800c09a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xf0>
      if (c == '\\') {
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b5c      	cmp	r3, #92	; 0x5c
 800c022:	d112      	bne.n	800c04a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xa0>
        c = Encoding::unescapeChar(_reader.current());
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 f9ab 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c02e:	4603      	mov	r3, r0
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fe33 	bl	800bc9c <_ZN11ArduinoJson9Internals8Encoding12unescapeCharEc>
 800c036:	4603      	mov	r3, r0
 800c038:	75fb      	strb	r3, [r7, #23]
        if (c == '\0') break;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d02e      	beq.n	800c09e <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xf4>
        _reader.move();
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	4618      	mov	r0, r3
 800c046:	f000 f9be 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
      str.append(c);
 800c04a:	7dfa      	ldrb	r2, [r7, #23]
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f000 f9c6 	bl	800c3e4 <_ZN11ArduinoJson9Internals12StringWriterIcE6String6appendEc>
      c = _reader.current();
 800c058:	e7ce      	b.n	800bff8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0x4e>
      if (!canBeInNonQuotedString(c)) break;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f9d4 	bl	800c40a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc>
 800c062:	4603      	mov	r3, r0
 800c064:	f083 0301 	eor.w	r3, r3, #1
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d119      	bne.n	800c0a2 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xf8>
      _reader.move();
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3304      	adds	r3, #4
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f9a7 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
      str.append(c);
 800c078:	7dfa      	ldrb	r2, [r7, #23]
 800c07a:	f107 030c 	add.w	r3, r7, #12
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f000 f9af 	bl	800c3e4 <_ZN11ArduinoJson9Internals12StringWriterIcE6String6appendEc>
      c = _reader.current();
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3304      	adds	r3, #4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 f97a 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
      if (!canBeInNonQuotedString(c)) break;
 800c094:	e7e1      	b.n	800c05a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xb0>
      if (c == '\0') break;
 800c096:	bf00      	nop
 800c098:	e004      	b.n	800c0a4 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xfa>
      if (c == stopChar) break;
 800c09a:	bf00      	nop
 800c09c:	e002      	b.n	800c0a4 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xfa>
        if (c == '\0') break;
 800c09e:	bf00      	nop
 800c0a0:	e000      	b.n	800c0a4 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv+0xfa>
      if (!canBeInNonQuotedString(c)) break;
 800c0a2:	bf00      	nop
  return str.c_str();
 800c0a4:	f107 030c 	add.w	r3, r7, #12
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f9de 	bl	800c46a <_ZNK11ArduinoJson9Internals12StringWriterIcE6String5c_strEv>
 800c0ae:	4603      	mov	r3, r0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3718      	adds	r7, #24
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE>:
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  skipSpacesAndComments(_reader);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 f8a0 	bl	800c20c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_>
  switch (_reader.current()) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 f957 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b5b      	cmp	r3, #91	; 0x5b
 800c0da:	d002      	beq.n	800c0e2 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE+0x2a>
 800c0dc:	2b7b      	cmp	r3, #123	; 0x7b
 800c0de:	d006      	beq.n	800c0ee <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE+0x36>
 800c0e0:	e00b      	b.n	800c0fa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE+0x42>
      return parseArrayTo(destination);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f9d3 	bl	800c490 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE12parseArrayToEPNS_11JsonVariantE>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	e00b      	b.n	800c106 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE+0x4e>
      return parseObjectTo(destination);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f9f4 	bl	800c4de <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseObjectToEPNS_11JsonVariantE>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	e005      	b.n	800c106 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE+0x4e>
      return parseStringTo(destination);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 fa15 	bl	800c52c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE>
 800c102:	4603      	mov	r3, r0
 800c104:	bf00      	nop
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <_ZN11ArduinoJson10JsonObject3setINS_11JsonVariantEKcEEbPT0_RKT_>:
  bool set(TString* key, const TValue& value) {
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
    return set_impl<TString*, const TValue&>(key, value);
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	68b9      	ldr	r1, [r7, #8]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 fa47 	bl	800c5b2 <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_>
 800c124:	4603      	mov	r3, r0
  }
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6ReaderC1EPKc>:
    Reader(const TChar* ptr)
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6ReaderC1EPKc+0x14>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	e000      	b.n	800c146 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6ReaderC1EPKc+0x16>
 800c144:	4b04      	ldr	r3, [pc, #16]	; (800c158 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6ReaderC1EPKc+0x28>)
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	08021940 	.word	0x08021940

0800c15c <_ZN11ArduinoJson9Internals12StringWriterIcEC1EPc>:
  StringWriter(TChar* buffer) : _ptr(buffer) {}
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEEC1EPNS_10JsonBufferES4_S6_h>:
  JsonParser(JsonBuffer *buffer, TReader reader, TWriter writer,
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	60f8      	str	r0, [r7, #12]
 800c182:	60b9      	str	r1, [r7, #8]
 800c184:	607a      	str	r2, [r7, #4]
 800c186:	603b      	str	r3, [r7, #0]
      : _buffer(buffer),
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	601a      	str	r2, [r3, #0]
        _reader(reader),
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
        _writer(writer),
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit) {}
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	7e3a      	ldrb	r2, [r7, #24]
 800c19e:	731a      	strb	r2, [r3, #12]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>:
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	70fb      	strb	r3, [r7, #3]
  skipSpacesAndComments(reader);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f826 	bl	800c20c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_>
  if (reader.current() != charToSkip) return false;
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f8df 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	bf14      	ite	ne
 800c1d0:	2301      	movne	r3, #1
 800c1d2:	2300      	moveq	r3, #0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c+0x30>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e003      	b.n	800c1e6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c+0x38>
  reader.move();
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f8f1 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
  return true;
 800c1e4:	2301      	movs	r3, #1
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZN11ArduinoJson9Internals12StringWriterIcE11startStringEv>:
  String startString() {
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
    return String(&_ptr);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fa41 	bl	800c684 <_ZN11ArduinoJson9Internals12StringWriterIcE6StringC1EPPc>
  }
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_>:
void skipSpacesAndComments(TInput& input) {
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
    switch (input.current()) {
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f8b5 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c21a:	4603      	mov	r3, r0
 800c21c:	3b09      	subs	r3, #9
 800c21e:	2b26      	cmp	r3, #38	; 0x26
 800c220:	f200 80a7 	bhi.w	800c372 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x166>
 800c224:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x20>)
 800c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22a:	bf00      	nop
 800c22c:	0800c2c9 	.word	0x0800c2c9
 800c230:	0800c2c9 	.word	0x0800c2c9
 800c234:	0800c373 	.word	0x0800c373
 800c238:	0800c373 	.word	0x0800c373
 800c23c:	0800c2c9 	.word	0x0800c2c9
 800c240:	0800c373 	.word	0x0800c373
 800c244:	0800c373 	.word	0x0800c373
 800c248:	0800c373 	.word	0x0800c373
 800c24c:	0800c373 	.word	0x0800c373
 800c250:	0800c373 	.word	0x0800c373
 800c254:	0800c373 	.word	0x0800c373
 800c258:	0800c373 	.word	0x0800c373
 800c25c:	0800c373 	.word	0x0800c373
 800c260:	0800c373 	.word	0x0800c373
 800c264:	0800c373 	.word	0x0800c373
 800c268:	0800c373 	.word	0x0800c373
 800c26c:	0800c373 	.word	0x0800c373
 800c270:	0800c373 	.word	0x0800c373
 800c274:	0800c373 	.word	0x0800c373
 800c278:	0800c373 	.word	0x0800c373
 800c27c:	0800c373 	.word	0x0800c373
 800c280:	0800c373 	.word	0x0800c373
 800c284:	0800c373 	.word	0x0800c373
 800c288:	0800c2c9 	.word	0x0800c2c9
 800c28c:	0800c373 	.word	0x0800c373
 800c290:	0800c373 	.word	0x0800c373
 800c294:	0800c373 	.word	0x0800c373
 800c298:	0800c373 	.word	0x0800c373
 800c29c:	0800c373 	.word	0x0800c373
 800c2a0:	0800c373 	.word	0x0800c373
 800c2a4:	0800c373 	.word	0x0800c373
 800c2a8:	0800c373 	.word	0x0800c373
 800c2ac:	0800c373 	.word	0x0800c373
 800c2b0:	0800c373 	.word	0x0800c373
 800c2b4:	0800c373 	.word	0x0800c373
 800c2b8:	0800c373 	.word	0x0800c373
 800c2bc:	0800c373 	.word	0x0800c373
 800c2c0:	0800c373 	.word	0x0800c373
 800c2c4:	0800c2d1 	.word	0x0800c2d1
        input.move();
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f87c 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
        continue;
 800c2ce:	e04f      	b.n	800c370 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x164>
        switch (input.next()) {
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f9ea 	bl	800c6aa <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4nextEv>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2da:	d002      	beq.n	800c2e2 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0xd6>
 800c2dc:	2b2f      	cmp	r3, #47	; 0x2f
 800c2de:	d02a      	beq.n	800c336 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x12a>
            return;
 800c2e0:	e04c      	b.n	800c37c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x170>
            input.move();  // skip '/'
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f86f 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
              input.move();
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f86c 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
              if (input.current() == '\0') return;
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f848 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bf0c      	ite	eq
 800c2fa:	2301      	moveq	r3, #1
 800c2fc:	2300      	movne	r3, #0
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b00      	cmp	r3, #0
 800c302:	d138      	bne.n	800c376 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x16a>
              if (input.current() == '*' && input.next() == '/') {
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f83d 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b2a      	cmp	r3, #42	; 0x2a
 800c30e:	d107      	bne.n	800c320 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x114>
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f9ca 	bl	800c6aa <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4nextEv>
 800c316:	4603      	mov	r3, r0
 800c318:	2b2f      	cmp	r3, #47	; 0x2f
 800c31a:	d101      	bne.n	800c320 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x114>
 800c31c:	2301      	movs	r3, #1
 800c31e:	e000      	b.n	800c322 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x116>
 800c320:	2300      	movs	r3, #0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0e0      	beq.n	800c2e8 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0xdc>
                input.move();  // skip '*'
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f84d 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
                input.move();  // skip '/'
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f84a 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
                break;
 800c332:	bf00      	nop
            break;
 800c334:	e01b      	b.n	800c36e <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x162>
              input.move();
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f845 	bl	800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>
              if (input.current() == '\0') return;
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f821 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	bf0c      	ite	eq
 800c348:	2301      	moveq	r3, #1
 800c34a:	2300      	movne	r3, #0
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d113      	bne.n	800c37a <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x16e>
              if (input.current() == '\n') break;
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f816 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b0a      	cmp	r3, #10
 800c35c:	bf0c      	ite	eq
 800c35e:	2301      	moveq	r3, #1
 800c360:	2300      	movne	r3, #0
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d100      	bne.n	800c36a <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x15e>
              input.move();
 800c368:	e7e5      	b.n	800c336 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x12a>
              if (input.current() == '\n') break;
 800c36a:	bf00      	nop
            break;
 800c36c:	bf00      	nop
        break;
 800c36e:	bf00      	nop
    switch (input.current()) {
 800c370:	e750      	b.n	800c214 <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x8>
        return;
 800c372:	bf00      	nop
 800c374:	e002      	b.n	800c37c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x170>
              if (input.current() == '\0') return;
 800c376:	bf00      	nop
 800c378:	e000      	b.n	800c37c <_ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_+0x170>
              if (input.current() == '\0') return;
 800c37a:	bf00      	nop
}
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop

0800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>:
    char current() const {
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
      return char(_ptr[0]);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
    }
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800c39e:	b480      	push	{r7}
 800c3a0:	b083      	sub	sp, #12
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b27      	cmp	r3, #39	; 0x27
 800c3ac:	d002      	beq.n	800c3b4 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc+0x16>
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	2b22      	cmp	r3, #34	; 0x22
 800c3b2:	d101      	bne.n	800c3b8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc+0x1a>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e000      	b.n	800c3ba <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc+0x1c>
 800c3b8:	2300      	movs	r3, #0
  }
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <_ZN11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4moveEv>:
    void move() {
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
      ++_ptr;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	601a      	str	r2, [r3, #0]
    }
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <_ZN11ArduinoJson9Internals12StringWriterIcE6String6appendEc>:
    void append(char c) {
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
      *(*_writePtr)++ = TChar(c);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	6813      	ldr	r3, [r2, #0]
 800c3f6:	1c59      	adds	r1, r3, #1
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	701a      	strb	r2, [r3, #0]
    }
 800c3fe:	bf00      	nop
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	4603      	mov	r3, r0
 800c412:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	2239      	movs	r2, #57	; 0x39
 800c418:	2130      	movs	r1, #48	; 0x30
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f953 	bl	800c6c6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc>
 800c420:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800c422:	2b00      	cmp	r3, #0
 800c424:	d11a      	bne.n	800c45c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	227a      	movs	r2, #122	; 0x7a
 800c42a:	215f      	movs	r1, #95	; 0x5f
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f94a 	bl	800c6c6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d111      	bne.n	800c45c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	225a      	movs	r2, #90	; 0x5a
 800c43c:	2141      	movs	r1, #65	; 0x41
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f941 	bl	800c6c6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc>
 800c444:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800c446:	2b00      	cmp	r3, #0
 800c448:	d108      	bne.n	800c45c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	2b2b      	cmp	r3, #43	; 0x2b
 800c44e:	d005      	beq.n	800c45c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x52>
 800c450:	79fb      	ldrb	r3, [r7, #7]
 800c452:	2b2d      	cmp	r3, #45	; 0x2d
 800c454:	d002      	beq.n	800c45c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x52>
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	2b2e      	cmp	r3, #46	; 0x2e
 800c45a:	d101      	bne.n	800c460 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x56>
 800c45c:	2301      	movs	r3, #1
 800c45e:	e000      	b.n	800c462 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE22canBeInNonQuotedStringEc+0x58>
 800c460:	2300      	movs	r3, #0
  }
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <_ZNK11ArduinoJson9Internals12StringWriterIcE6String5c_strEv>:
    const char* c_str() const {
 800c46a:	b480      	push	{r7}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
      *(*_writePtr)++ = 0;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	1c59      	adds	r1, r3, #1
 800c47a:	6011      	str	r1, [r2, #0]
 800c47c:	2200      	movs	r2, #0
 800c47e:	701a      	strb	r2, [r3, #0]
      return reinterpret_cast<const char*>(_startPtr);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
    }
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE12parseArrayToEPNS_11JsonVariantE>:
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
 800c490:	b590      	push	{r4, r7, lr}
 800c492:	b089      	sub	sp, #36	; 0x24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  JsonArray &array = parseArray();
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f92d 	bl	800c6fa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv>
 800c4a0:	61f8      	str	r0, [r7, #28]
  if (!array.success()) return false;
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f5 fcbf 	bl	8001e28 <_ZNK11ArduinoJson9Internals4ListINS_11JsonVariantEE7successEv>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	f083 0301 	eor.w	r3, r3, #1
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE12parseArrayToEPNS_11JsonVariantE+0x2a>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e00d      	b.n	800c4d6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE12parseArrayToEPNS_11JsonVariantE+0x46>
  *destination = array;
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	69f9      	ldr	r1, [r7, #28]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f5 f93a 	bl	800173a <_ZN11ArduinoJson11JsonVariantC1ERKNS_9JsonArrayE>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	461c      	mov	r4, r3
 800c4ca:	f107 0308 	add.w	r3, r7, #8
 800c4ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return true;
 800c4d4:	2301      	movs	r3, #1
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3724      	adds	r7, #36	; 0x24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd90      	pop	{r4, r7, pc}

0800c4de <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseObjectToEPNS_11JsonVariantE>:
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
 800c4de:	b590      	push	{r4, r7, lr}
 800c4e0:	b089      	sub	sp, #36	; 0x24
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
  JsonObject &object = parseObject();
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fc87 	bl	800bdfc <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv>
 800c4ee:	61f8      	str	r0, [r7, #28]
  if (!object.success()) return false;
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fa ff6a 	bl	80073cc <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE7successEv>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f083 0301 	eor.w	r3, r3, #1
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseObjectToEPNS_11JsonVariantE+0x2a>
 800c504:	2300      	movs	r3, #0
 800c506:	e00d      	b.n	800c524 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseObjectToEPNS_11JsonVariantE+0x46>
  *destination = object;
 800c508:	f107 0308 	add.w	r3, r7, #8
 800c50c:	69f9      	ldr	r1, [r7, #28]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fa fae9 	bl	8006ae6 <_ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	461c      	mov	r4, r3
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c51e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return true;
 800c522:	2301      	movs	r3, #1
}
 800c524:	4618      	mov	r0, r3
 800c526:	3724      	adds	r7, #36	; 0x24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd90      	pop	{r4, r7, pc}

0800c52c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE>:
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseStringTo(
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b08d      	sub	sp, #52	; 0x34
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  bool hasQuotes = isQuote(_reader.current());
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3304      	adds	r3, #4
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff ff22 	bl	800c384 <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader7currentEv>
 800c540:	4603      	mov	r3, r0
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff ff2b 	bl	800c39e <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE7isQuoteEc>
 800c548:	4603      	mov	r3, r0
 800c54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  const char *value = parseString();
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fd2b 	bl	800bfaa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv>
 800c554:	62b8      	str	r0, [r7, #40]	; 0x28
  if (value == NULL) return false;
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE+0x34>
 800c55c:	2300      	movs	r3, #0
 800c55e:	e024      	b.n	800c5aa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE+0x7e>
  if (hasQuotes) {
 800c560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00e      	beq.n	800c586 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE+0x5a>
    *destination = value;
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	2200      	movs	r2, #0
 800c56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f95a 	bl	800c82a <_ZN11ArduinoJson11JsonVariantC1IcEEPKT_PNS_9Internals8EnableIfIXsrNS5_6IsCharIS2_EE5valueEvE4typeE>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	461c      	mov	r4, r3
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c584:	e010      	b.n	800c5a8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE13parseStringToEPNS_11JsonVariantE+0x7c>
    *destination = RawJson(value);
 800c586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c588:	f000 f962 	bl	800c850 <_ZN11ArduinoJson7RawJsonIPKcEENS_9Internals13RawJsonStringIT_EES5_>
 800c58c:	4602      	mov	r2, r0
 800c58e:	f107 0318 	add.w	r3, r7, #24
 800c592:	4611      	mov	r1, r2
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff fbb7 	bl	800bd08 <_ZN11ArduinoJson11JsonVariantC1ENS_9Internals13RawJsonStringIPKcEE>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	461c      	mov	r4, r3
 800c59e:	f107 0318 	add.w	r3, r7, #24
 800c5a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return true;
 800c5a8:	2301      	movs	r3, #1
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3734      	adds	r7, #52	; 0x34
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd90      	pop	{r4, r7, pc}

0800c5b2 <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 800c5b2:	b590      	push	{r4, r7, lr}
 800c5b4:	b089      	sub	sp, #36	; 0x24
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 800c5be:	68b8      	ldr	r0, [r7, #8]
 800c5c0:	f000 f955 	bl	800c86e <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE7is_nullEPS2_>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0x1c>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e056      	b.n	800c67c <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 f95c 	bl	800c88e <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f8 fbf4 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	f107 0214 	add.w	r2, r7, #20
 800c5ea:	f107 0310 	add.w	r3, r7, #16
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7f8 fbd6 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d02f      	beq.n	800c65c <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7f8 fbf2 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 800c604:	4603      	mov	r3, r0
 800c606:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7f8 fbdd 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800c610:	4603      	mov	r3, r0
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	f107 0218 	add.w	r2, r7, #24
 800c618:	f107 0310 	add.w	r3, r7, #16
 800c61c:	4611      	mov	r1, r2
 800c61e:	4618      	mov	r0, r3
 800c620:	f7f8 fbbf 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0x7c>
 800c62a:	2300      	movs	r3, #0
 800c62c:	e026      	b.n	800c67c <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681c      	ldr	r4, [r3, #0]
 800c632:	f107 0310 	add.w	r3, r7, #16
 800c636:	4618      	mov	r0, r3
 800c638:	f7f8 fc08 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800c63c:	4603      	mov	r3, r0
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	4619      	mov	r1, r3
 800c642:	4620      	mov	r0, r4
 800c644:	f000 f960 	bl	800c908 <_ZN11ArduinoJson9Internals10ValueSaverIPKcvE4saveIS3_EEbPNS_10JsonBufferERT_S3_>
 800c648:	4603      	mov	r3, r0
 800c64a:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 800c64c:	7ffb      	ldrb	r3, [r7, #31]
 800c64e:	f083 0301 	eor.w	r3, r3, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0xaa>
 800c658:	2300      	movs	r3, #0
 800c65a:	e00f      	b.n	800c67c <_ZN11ArduinoJson10JsonObject8set_implIPKcRKNS_11JsonVariantEEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681c      	ldr	r4, [r3, #0]
 800c660:	f107 0310 	add.w	r3, r7, #16
 800c664:	4618      	mov	r0, r3
 800c666:	f7f8 fbf1 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800c66a:	4603      	mov	r3, r0
 800c66c:	3308      	adds	r3, #8
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4619      	mov	r1, r3
 800c672:	4620      	mov	r0, r4
 800c674:	f000 f958 	bl	800c928 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_11JsonVariantEvE4saveIS2_EEbPNS_10JsonBufferERT_S4_>
 800c678:	4603      	mov	r3, r0
 800c67a:	bf00      	nop
  }
 800c67c:	4618      	mov	r0, r3
 800c67e:	3724      	adds	r7, #36	; 0x24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd90      	pop	{r4, r7, pc}

0800c684 <_ZN11ArduinoJson9Internals12StringWriterIcE6StringC1EPPc>:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	605a      	str	r2, [r3, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <_ZNK11ArduinoJson9Internals17CharPointerTraitsIcE6Reader4nextEv>:
    char next() const {
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
      return char(_ptr[1]);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	781b      	ldrb	r3, [r3, #0]
    }
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	71fb      	strb	r3, [r7, #7]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	71bb      	strb	r3, [r7, #6]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800c6d8:	79ba      	ldrb	r2, [r7, #6]
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d805      	bhi.n	800c6ec <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc+0x26>
 800c6e0:	79fa      	ldrb	r2, [r7, #7]
 800c6e2:	797b      	ldrb	r3, [r7, #5]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d801      	bhi.n	800c6ec <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc+0x26>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e000      	b.n	800c6ee <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc+0x28>
 800c6ec:	2300      	movs	r3, #0
  }
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv>:
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArray() {
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b090      	sub	sp, #64	; 0x40
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  if (_nestingLimit == 0) return JsonArray::invalid();
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7b1b      	ldrb	r3, [r3, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x18>
 800c70a:	f7f4 febd 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 800c70e:	4603      	mov	r3, r0
 800c710:	e087      	b.n	800c822 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x128>
  _nestingLimit--;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7b1b      	ldrb	r3, [r3, #12]
 800c716:	3b01      	subs	r3, #1
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	731a      	strb	r2, [r3, #12]
  JsonArray &array = _buffer->createArray();
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4618      	mov	r0, r3
 800c724:	f7f4 ff11 	bl	800154a <_ZN11ArduinoJson10JsonBuffer11createArrayEv>
 800c728:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c72e:	235b      	movs	r3, #91	; 0x5b
 800c730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    return eat(_reader, charToSkip);
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	3304      	adds	r3, #4
 800c738:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f7ff fd35 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800c744:	4603      	mov	r3, r0
 800c746:	bf00      	nop
  if (!eat('[')) goto ERROR_MISSING_BRACKET;
 800c748:	f083 0301 	eor.w	r3, r3, #1
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d15c      	bne.n	800c80c <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x112>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	633b      	str	r3, [r7, #48]	; 0x30
 800c756:	235d      	movs	r3, #93	; 0x5d
 800c758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    return eat(_reader, charToSkip);
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	3304      	adds	r3, #4
 800c760:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c764:	4611      	mov	r1, r2
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fd21 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800c76c:	4603      	mov	r3, r0
 800c76e:	bf00      	nop
  if (eat(']')) goto SUCCESS_EMPTY_ARRAY;
 800c770:	2b00      	cmp	r3, #0
 800c772:	d140      	bne.n	800c7f6 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0xfc>
    JsonVariant value;
 800c774:	f107 0308 	add.w	r3, r7, #8
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f4 fe3d 	bl	80013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
 800c77e:	f107 0308 	add.w	r3, r7, #8
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fc97 	bl	800c0b8 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f083 0301 	eor.w	r3, r3, #1
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d13c      	bne.n	800c810 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x116>
    if (!array.add(value)) goto ERROR_NO_MEMORY;
 800c796:	f107 0308 	add.w	r3, r7, #8
 800c79a:	4619      	mov	r1, r3
 800c79c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c79e:	f000 f8d5 	bl	800c94c <_ZN11ArduinoJson9JsonArray3addINS_11JsonVariantEEEbRKT_>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	f083 0301 	eor.w	r3, r3, #1
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d132      	bne.n	800c814 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x11a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7b2:	235d      	movs	r3, #93	; 0x5d
 800c7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return eat(_reader, charToSkip);
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fcf3 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	bf00      	nop
    if (eat(']')) goto SUCCES_NON_EMPTY_ARRAY;
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d114      	bne.n	800c7fa <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x100>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	623b      	str	r3, [r7, #32]
 800c7d4:	232c      	movs	r3, #44	; 0x2c
 800c7d6:	77fb      	strb	r3, [r7, #31]
    return eat(_reader, charToSkip);
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	3304      	adds	r3, #4
 800c7dc:	7ffa      	ldrb	r2, [r7, #31]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff fce4 	bl	800c1ae <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatERS4_c>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	bf00      	nop
    if (!eat(',')) goto ERROR_MISSING_COMMA;
 800c7ea:	f083 0301 	eor.w	r3, r3, #1
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d111      	bne.n	800c818 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x11e>
  for (;;) {
 800c7f4:	e7be      	b.n	800c774 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x7a>
  if (eat(']')) goto SUCCESS_EMPTY_ARRAY;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x102>
    if (eat(']')) goto SUCCES_NON_EMPTY_ARRAY;
 800c7fa:	bf00      	nop
  _nestingLimit++;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7b1b      	ldrb	r3, [r3, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	b2da      	uxtb	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	731a      	strb	r2, [r3, #12]
  return array;
 800c808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80a:	e00a      	b.n	800c822 <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x128>
  if (!eat('[')) goto ERROR_MISSING_BRACKET;
 800c80c:	bf00      	nop
 800c80e:	e004      	b.n	800c81a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x120>
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
 800c810:	bf00      	nop
 800c812:	e002      	b.n	800c81a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x120>
    if (!array.add(value)) goto ERROR_NO_MEMORY;
 800c814:	bf00      	nop
 800c816:	e000      	b.n	800c81a <_ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv+0x120>
    if (!eat(',')) goto ERROR_MISSING_COMMA;
 800c818:	bf00      	nop
  return JsonArray::invalid();
 800c81a:	f7f4 fe35 	bl	8001488 <_ZN11ArduinoJson9JsonArray7invalidEv>
 800c81e:	4603      	mov	r3, r0
 800c820:	bf00      	nop
}
 800c822:	4618      	mov	r0, r3
 800c824:	3740      	adds	r7, #64	; 0x40
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZN11ArduinoJson11JsonVariantC1IcEEPKT_PNS_9Internals8EnableIfIXsrNS5_6IsCharIS2_EE5valueEvE4typeE>:
  JsonVariant(
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	60b9      	str	r1, [r7, #8]
 800c834:	607a      	str	r2, [r7, #4]
    _type = Internals::JSON_STRING;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2202      	movs	r2, #2
 800c83a:	701a      	strb	r2, [r3, #0]
    _content.asString = reinterpret_cast<const char *>(value);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	609a      	str	r2, [r3, #8]
  }
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <_ZN11ArduinoJson7RawJsonIPKcEENS_9Internals13RawJsonStringIT_EES5_>:
inline Internals::RawJsonString<T> RawJson(T str) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  return Internals::RawJsonString<T>(str);
 800c858:	f107 030c 	add.w	r3, r7, #12
 800c85c:	6879      	ldr	r1, [r7, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f882 	bl	800c968 <_ZN11ArduinoJson9Internals13RawJsonStringIPKcEC1ES3_>
 800c864:	68fb      	ldr	r3, [r7, #12]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE7is_nullEPS2_>:
  static bool is_null(const TChar* str) {
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
    return !str;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bf0c      	ite	eq
 800c87c:	2301      	moveq	r3, #1
 800c87e:	2300      	movne	r3, #0
 800c880:	b2db      	uxtb	r3, r3
  }
 800c882:	4618      	mov	r0, r3
 800c884:	370c      	adds	r7, #12
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>:
  iterator findKey(TStringRef key) {
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	6039      	str	r1, [r7, #0]
    iterator it;
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	2100      	movs	r1, #0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f8 fb06 	bl	8004eb0 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEC1EPNS0_8ListNodeIS2_EE>
    for (it = begin(); it != end(); ++it) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7f8 fb11 	bl	8004ece <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE5beginEv>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	60bb      	str	r3, [r7, #8]
 800c8b0:	e012      	b.n	800c8d8 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x4a>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7f8 fac8 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f000 f85f 	bl	800c986 <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE6equalsEPS2_S4_>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d116      	bne.n	800c8fc <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x6e>
    for (it = begin(); it != end(); ++it) {
 800c8ce:	f107 0308 	add.w	r3, r7, #8
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7f8 fb20 	bl	8004f18 <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEppEv>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7f8 fa75 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	f107 020c 	add.w	r2, r7, #12
 800c8e8:	f107 0308 	add.w	r3, r7, #8
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7f8 fafe 	bl	8004ef0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEneERKS3_>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1db      	bne.n	800c8b2 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x24>
 800c8fa:	e000      	b.n	800c8fe <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x70>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
 800c8fc:	bf00      	nop
    return it;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
  }
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <_ZN11ArduinoJson9Internals10ValueSaverIPKcvE4saveIS3_EEbPNS_10JsonBufferERT_S3_>:
  static bool save(JsonBuffer*, Destination& dest, Char* source) {
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
    dest = reinterpret_cast<const char*>(source);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	601a      	str	r2, [r3, #0]
    return true;
 800c91a:	2301      	movs	r3, #1
  }
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_11JsonVariantEvE4saveIS2_EEbPNS_10JsonBufferERT_S4_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 800c928:	b490      	push	{r4, r7}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
    destination = source;
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4614      	mov	r4, r2
 800c93a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c93c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 800c940:	2301      	movs	r3, #1
  }
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bc90      	pop	{r4, r7}
 800c94a:	4770      	bx	lr

0800c94c <_ZN11ArduinoJson9JsonArray3addINS_11JsonVariantEEEbRKT_>:
  bool add(const T &value) {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
    return add_impl<const T &>(value);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f837 	bl	800c9cc <_ZN11ArduinoJson9JsonArray8add_implIRKNS_11JsonVariantEEEbT_>
 800c95e:	4603      	mov	r3, r0
  }
 800c960:	4618      	mov	r0, r3
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <_ZN11ArduinoJson9Internals13RawJsonStringIPKcEC1ES3_>:
  explicit RawJsonString(T str) : _str(str) {}
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE6equalsEPS2_S4_>:
  static bool equals(const TChar* str, const char* expected) {
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
    const char* actual = reinterpret_cast<const char*>(str);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE6equalsEPS2_S4_+0x1a>
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d107      	bne.n	800c9b0 <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE6equalsEPS2_S4_+0x2a>
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2301      	moveq	r3, #1
 800c9aa:	2300      	movne	r3, #0
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	e009      	b.n	800c9c4 <_ZN11ArduinoJson9Internals17CharPointerTraitsIKcE6equalsEPS2_S4_+0x3e>
    return strcmp(actual, expected) == 0;
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f7f3 fc10 	bl	80001d8 <strcmp>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bf0c      	ite	eq
 800c9be:	2301      	moveq	r3, #1
 800c9c0:	2300      	movne	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
  }
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <_ZN11ArduinoJson9JsonArray8add_implIRKNS_11JsonVariantEEEbT_>:
  bool add_impl(TValueRef value) {
 800c9cc:	b590      	push	{r4, r7, lr}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
    iterator it = Internals::List<JsonVariant>::add();
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f5 fab1 	bl	8001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	60bb      	str	r3, [r7, #8]
    if (it == end()) return false;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7f5 fa8f 	bl	8001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	60fb      	str	r3, [r7, #12]
 800c9ee:	f107 020c 	add.w	r2, r7, #12
 800c9f2:	f107 0308 	add.w	r3, r7, #8
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7f5 fa71 	bl	8001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <_ZN11ArduinoJson9JsonArray8add_implIRKNS_11JsonVariantEEEbT_+0x3c>
 800ca04:	2300      	movs	r3, #0
 800ca06:	e00e      	b.n	800ca26 <_ZN11ArduinoJson9JsonArray8add_implIRKNS_11JsonVariantEEEbT_+0x5a>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681c      	ldr	r4, [r3, #0]
 800ca0c:	f107 0308 	add.w	r3, r7, #8
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f5 fa88 	bl	8001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>
 800ca16:	4603      	mov	r3, r0
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f7ff ff83 	bl	800c928 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_11JsonVariantEvE4saveIS2_EEbPNS_10JsonBufferERT_S4_>
 800ca22:	4603      	mov	r3, r0
 800ca24:	bf00      	nop
  }
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd90      	pop	{r4, r7, pc}
	...

0800ca30 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace ps
 800ca30:	b5b0      	push	{r4, r5, r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	f040 80aa 	bne.w	800cb96 <_Z41__static_initialization_and_destruction_0ii+0x166>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	f040 80a4 	bne.w	800cb96 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800ca4e:	4c61      	ldr	r4, [pc, #388]	; (800cbd4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800ca50:	4625      	mov	r5, r4
 800ca52:	f107 030c 	add.w	r3, r7, #12
 800ca56:	4618      	mov	r0, r3
 800ca58:	f011 fd0d 	bl	801e476 <_ZNSaIcEC1Ev>
 800ca5c:	f107 030c 	add.w	r3, r7, #12
 800ca60:	461a      	mov	r2, r3
 800ca62:	495d      	ldr	r1, [pc, #372]	; (800cbd8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800ca64:	4628      	mov	r0, r5
 800ca66:	f011 ffad 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ca6a:	f107 030c 	add.w	r3, r7, #12
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f011 fd02 	bl	801e478 <_ZNSaIcED1Ev>
 800ca74:	3418      	adds	r4, #24
 800ca76:	f107 0310 	add.w	r3, r7, #16
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f011 fcfb 	bl	801e476 <_ZNSaIcEC1Ev>
 800ca80:	f107 0310 	add.w	r3, r7, #16
 800ca84:	461a      	mov	r2, r3
 800ca86:	4955      	ldr	r1, [pc, #340]	; (800cbdc <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f011 ff9b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ca8e:	f107 0310 	add.w	r3, r7, #16
 800ca92:	4618      	mov	r0, r3
 800ca94:	f011 fcf0 	bl	801e478 <_ZNSaIcED1Ev>
 800ca98:	3418      	adds	r4, #24
 800ca9a:	f107 0314 	add.w	r3, r7, #20
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f011 fce9 	bl	801e476 <_ZNSaIcEC1Ev>
 800caa4:	f107 0314 	add.w	r3, r7, #20
 800caa8:	461a      	mov	r2, r3
 800caaa:	494d      	ldr	r1, [pc, #308]	; (800cbe0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800caac:	4620      	mov	r0, r4
 800caae:	f011 ff89 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cab2:	f107 0314 	add.w	r3, r7, #20
 800cab6:	4618      	mov	r0, r3
 800cab8:	f011 fcde 	bl	801e478 <_ZNSaIcED1Ev>
 800cabc:	3418      	adds	r4, #24
 800cabe:	f107 0318 	add.w	r3, r7, #24
 800cac2:	4618      	mov	r0, r3
 800cac4:	f011 fcd7 	bl	801e476 <_ZNSaIcEC1Ev>
 800cac8:	f107 0318 	add.w	r3, r7, #24
 800cacc:	461a      	mov	r2, r3
 800cace:	4945      	ldr	r1, [pc, #276]	; (800cbe4 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800cad0:	4620      	mov	r0, r4
 800cad2:	f011 ff77 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cad6:	f107 0318 	add.w	r3, r7, #24
 800cada:	4618      	mov	r0, r3
 800cadc:	f011 fccc 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800cae0:	4c41      	ldr	r4, [pc, #260]	; (800cbe8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800cae2:	4625      	mov	r5, r4
 800cae4:	f107 031c 	add.w	r3, r7, #28
 800cae8:	4618      	mov	r0, r3
 800caea:	f011 fcc4 	bl	801e476 <_ZNSaIcEC1Ev>
 800caee:	f107 031c 	add.w	r3, r7, #28
 800caf2:	461a      	mov	r2, r3
 800caf4:	493d      	ldr	r1, [pc, #244]	; (800cbec <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800caf6:	4628      	mov	r0, r5
 800caf8:	f011 ff64 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cafc:	f107 031c 	add.w	r3, r7, #28
 800cb00:	4618      	mov	r0, r3
 800cb02:	f011 fcb9 	bl	801e478 <_ZNSaIcED1Ev>
 800cb06:	3418      	adds	r4, #24
 800cb08:	f107 0320 	add.w	r3, r7, #32
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f011 fcb2 	bl	801e476 <_ZNSaIcEC1Ev>
 800cb12:	f107 0320 	add.w	r3, r7, #32
 800cb16:	461a      	mov	r2, r3
 800cb18:	4935      	ldr	r1, [pc, #212]	; (800cbf0 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f011 ff52 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cb20:	f107 0320 	add.w	r3, r7, #32
 800cb24:	4618      	mov	r0, r3
 800cb26:	f011 fca7 	bl	801e478 <_ZNSaIcED1Ev>
 800cb2a:	3418      	adds	r4, #24
 800cb2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb30:	4618      	mov	r0, r3
 800cb32:	f011 fca0 	bl	801e476 <_ZNSaIcEC1Ev>
 800cb36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	492d      	ldr	r1, [pc, #180]	; (800cbf4 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f011 ff40 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cb44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f011 fc95 	bl	801e478 <_ZNSaIcED1Ev>
 800cb4e:	3418      	adds	r4, #24
 800cb50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb54:	4618      	mov	r0, r3
 800cb56:	f011 fc8e 	bl	801e476 <_ZNSaIcEC1Ev>
 800cb5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb5e:	461a      	mov	r2, r3
 800cb60:	4925      	ldr	r1, [pc, #148]	; (800cbf8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800cb62:	4620      	mov	r0, r4
 800cb64:	f011 ff2e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cb68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f011 fc83 	bl	801e478 <_ZNSaIcED1Ev>
 800cb72:	3418      	adds	r4, #24
 800cb74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f011 fc7c 	bl	801e476 <_ZNSaIcEC1Ev>
 800cb7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb82:	461a      	mov	r2, r3
 800cb84:	491d      	ldr	r1, [pc, #116]	; (800cbfc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800cb86:	4620      	mov	r0, r4
 800cb88:	f011 ff1c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cb8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb90:	4618      	mov	r0, r3
 800cb92:	f011 fc71 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d116      	bne.n	800cbca <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d111      	bne.n	800cbca <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800cba6:	4c16      	ldr	r4, [pc, #88]	; (800cc00 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800cbaa:	429c      	cmp	r4, r3
 800cbac:	d004      	beq.n	800cbb8 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800cbae:	3c18      	subs	r4, #24
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f011 fd60 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800cbb6:	e7f7      	b.n	800cba8 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800cbb8:	4c12      	ldr	r4, [pc, #72]	; (800cc04 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800cbba:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	d004      	beq.n	800cbca <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800cbc0:	3c18      	subs	r4, #24
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f011 fd57 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800cbc8:	e7f7      	b.n	800cbba <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800cbca:	bf00      	nop
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	200093f8 	.word	0x200093f8
 800cbd8:	08021944 	.word	0x08021944
 800cbdc:	08021950 	.word	0x08021950
 800cbe0:	0802195c 	.word	0x0802195c
 800cbe4:	08021968 	.word	0x08021968
 800cbe8:	20009458 	.word	0x20009458
 800cbec:	08021974 	.word	0x08021974
 800cbf0:	08021984 	.word	0x08021984
 800cbf4:	08021994 	.word	0x08021994
 800cbf8:	080219a4 	.word	0x080219a4
 800cbfc:	080219b4 	.word	0x080219b4
 800cc00:	200094d0 	.word	0x200094d0
 800cc04:	20009458 	.word	0x20009458

0800cc08 <_GLOBAL__sub_I__ZN2ps13MessageParserC2Ev>:
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc10:	2001      	movs	r0, #1
 800cc12:	f7ff ff0d 	bl	800ca30 <_Z41__static_initialization_and_destruction_0ii>
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_GLOBAL__sub_D__ZN2ps13MessageParserC2Ev>:
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc20:	2000      	movs	r0, #0
 800cc22:	f7ff ff05 	bl	800ca30 <_Z41__static_initialization_and_destruction_0ii>
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <_ZN2ps15MessageReceiverC1Ev>:
#include "string"
using namespace std;

namespace ps
{
    MessageReceiver::MessageReceiver() 
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 f8d2 	bl	800cddc <_ZN2ps14CircularBufferIcLj2000EEC1Ev>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
    { }
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <_ZN2ps15MessageReceiver5resetEv>:

    void MessageReceiver::reset()
    {
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
        overflow_ = false;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
        messageCnt_ = 0;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
    }
 800cc72:	bf00      	nop
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <_ZN2ps15MessageReceiver8readDataEv>:


    void MessageReceiver::readData()
    {
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
        //while(Serial.available() > 0)
        //{
            uint8_t byte;
            uint32_t len = 1;
 800cc86:	2301      	movs	r3, #1
 800cc88:	60bb      	str	r3, [r7, #8]
            CDC_Receive_FS(&byte, &len);
 800cc8a:	f107 0208 	add.w	r2, r7, #8
 800cc8e:	f107 030e 	add.w	r3, r7, #14
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f010 ff9f 	bl	801dbd8 <CDC_Receive_FS>
            if (!serialBuffer_.full())
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 f8bb 	bl	800ce18 <_ZNK2ps14CircularBufferIcLj2000EE4fullEv>
 800cca2:	4603      	mov	r3, r0
 800cca4:	f083 0301 	eor.w	r3, r3, #1
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d01a      	beq.n	800cce4 <_ZN2ps15MessageReceiver8readDataEv+0x66>
            {
                serialBuffer_.push_back(byte);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7bba      	ldrb	r2, [r7, #14]
 800ccb2:	73fa      	strb	r2, [r7, #15]
 800ccb4:	f107 020f 	add.w	r2, r7, #15
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f8be 	bl	800ce3c <_ZN2ps14CircularBufferIcLj2000EE9push_backERKc>
                if (byte == '\n')
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	2b0a      	cmp	r3, #10
 800ccc4:	d112      	bne.n	800ccec <_ZN2ps15MessageReceiver8readDataEv+0x6e>
                {
                    messageCnt_++;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	; 0x7e4
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
                    totalMessageCnt_++;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 37e8 	ldr.w	r3, [r3, #2024]	; 0x7e8
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8c3 27e8 	str.w	r2, [r3, #2024]	; 0x7e8
            else
            {
                overflow_ = true;
            }
        //}
    }
 800cce2:	e003      	b.n	800ccec <_ZN2ps15MessageReceiver8readDataEv+0x6e>
                overflow_ = true;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
    }
 800ccec:	bf00      	nop
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <_ZN2ps15MessageReceiver4nextB5cxx11Ev>:


    string MessageReceiver::next()
    {
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08c      	sub	sp, #48	; 0x30
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
        string message("");
 800ccfe:	f107 0310 	add.w	r3, r7, #16
 800cd02:	4618      	mov	r0, r3
 800cd04:	f011 fbb7 	bl	801e476 <_ZNSaIcEC1Ev>
 800cd08:	f107 0310 	add.w	r3, r7, #16
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4929      	ldr	r1, [pc, #164]	; (800cdb4 <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0xc0>)
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f011 fe57 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd16:	f107 0310 	add.w	r3, r7, #16
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f011 fbac 	bl	801e478 <_ZNSaIcED1Ev>
        if (messageCnt_ > 0)
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	; 0x7e4
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d03f      	beq.n	800cdaa <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0xb6>
        {
            {  // Begin atomic block  
                while (!serialBuffer_.empty())
 800cd2a:	e02b      	b.n	800cd84 <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0x90>
                {
                    char byte = serialBuffer_.front();
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f8c9 	bl	800cec6 <_ZN2ps14CircularBufferIcLj2000EE5frontEv>
 800cd34:	4603      	mov	r3, r0
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	73fb      	strb	r3, [r7, #15]
                    serialBuffer_.pop_front();
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 f8d3 	bl	800cee8 <_ZN2ps14CircularBufferIcLj2000EE9pop_frontEv>
                    if (byte == '\n')
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	2b0a      	cmp	r3, #10
 800cd46:	d028      	beq.n	800cd9a <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0xa6>
                    {
                        break;
                    }
                    message.append(string(&byte));
 800cd48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f011 fb92 	bl	801e476 <_ZNSaIcEC1Ev>
 800cd52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cd56:	f107 010f 	add.w	r1, r7, #15
 800cd5a:	f107 0314 	add.w	r3, r7, #20
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f011 fe30 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800cd64:	f107 0314 	add.w	r3, r7, #20
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f011 fd9c 	bl	801e8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	4618      	mov	r0, r3
 800cd76:	f011 fc7e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800cd7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f011 fb7a 	bl	801e478 <_ZNSaIcED1Ev>
                while (!serialBuffer_.empty())
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 f88c 	bl	800cea4 <_ZNK2ps14CircularBufferIcLj2000EE5emptyEv>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	f083 0301 	eor.w	r3, r3, #1
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1c9      	bne.n	800cd2c <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0x38>
 800cd98:	e000      	b.n	800cd9c <_ZN2ps15MessageReceiver4nextB5cxx11Ev+0xa8>
                        break;
 800cd9a:	bf00      	nop
                }
                messageCnt_--;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	; 0x7e4
 800cda2:	1e5a      	subs	r2, r3, #1
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	f8c3 27e4 	str.w	r2, [r3, #2020]	; 0x7e4
            } // End atomic block
        }
        return message;
 800cdaa:	bf00      	nop
    }
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	3730      	adds	r7, #48	; 0x30
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	080219c4 	.word	0x080219c4

0800cdb8 <_ZNK2ps15MessageReceiver9availableEv>:


    bool MessageReceiver::available() const
    {
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
        return (messageCnt_ > 0);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	; 0x7e4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	bf14      	ite	ne
 800cdca:	2301      	movne	r3, #1
 800cdcc:	2300      	moveq	r3, #0
 800cdce:	b2db      	uxtb	r3, r3
    }
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <_ZN2ps14CircularBufferIcLj2000EEC1Ev>:

    };


    template<typename T, size_t MAX_SIZE>
    CircularBuffer<T,MAX_SIZE>::CircularBuffer() 
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f8a6 	bl	800cf38 <_ZN5ArrayIcLj2001EEC1Ev>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
    {
        T dummy = T();
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73fb      	strb	r3, [r7, #15]
        data_.fill(dummy);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f107 020f 	add.w	r2, r7, #15
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f000 f8a4 	bl	800cf56 <_ZN5ArrayIcLj2001EE4fillIcEEvRKT_>
    };
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <_ZNK2ps14CircularBufferIcLj2000EE4fullEv>:
        return (size() == 0);
    }


    template<typename T, size_t MAX_SIZE>
    bool CircularBuffer<T,MAX_SIZE>::full() const
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
    {
        return (size() == MAX_SIZE);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f8a7 	bl	800cf74 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv>
 800ce26:	4603      	mov	r3, r0
 800ce28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ce2c:	bf0c      	ite	eq
 800ce2e:	2301      	moveq	r3, #1
 800ce30:	2300      	movne	r3, #0
 800ce32:	b2db      	uxtb	r3, r3
    }
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <_ZN2ps14CircularBufferIcLj2000EE9push_backERKc>:
    void CircularBuffer<T,MAX_SIZE>::push_back(const T &value)
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
        if (!full()) 
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff ffe6 	bl	800ce18 <_ZNK2ps14CircularBufferIcLj2000EE4fullEv>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	f083 0301 	eor.w	r3, r3, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01e      	beq.n	800ce96 <_ZN2ps14CircularBufferIcLj2000EE9push_backERKc+0x5a>
            data_[pos_back_] = value;
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800ce60:	4619      	mov	r1, r3
 800ce62:	4610      	mov	r0, r2
 800ce64:	f000 f8ae 	bl	800cfc4 <_ZN5ArrayIcLj2001EEixEj>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	7013      	strb	r3, [r2, #0]
            pos_back_ = (pos_back_ + 1)%(MAX_SIZE+1); 
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	4b09      	ldr	r3, [pc, #36]	; (800cea0 <_ZN2ps14CircularBufferIcLj2000EE9push_backERKc+0x64>)
 800ce7a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce7e:	1ad1      	subs	r1, r2, r3
 800ce80:	0849      	lsrs	r1, r1, #1
 800ce82:	440b      	add	r3, r1
 800ce84:	0a9b      	lsrs	r3, r3, #10
 800ce86:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800ce8a:	fb01 f303 	mul.w	r3, r1, r3
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
    }
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	0603538b 	.word	0x0603538b

0800cea4 <_ZNK2ps14CircularBufferIcLj2000EE5emptyEv>:
    bool CircularBuffer<T,MAX_SIZE>::empty() const
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
        return (size() == 0);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f861 	bl	800cf74 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	bf0c      	ite	eq
 800ceb8:	2301      	moveq	r3, #1
 800ceba:	2300      	movne	r3, #0
 800cebc:	b2db      	uxtb	r3, r3
    }
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZN2ps14CircularBufferIcLj2000EE5frontEv>:
    T& CircularBuffer<T,MAX_SIZE>::front()
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
        return data_[pos_front_];
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 800ced6:	4619      	mov	r1, r3
 800ced8:	4610      	mov	r0, r2
 800ceda:	f000 f873 	bl	800cfc4 <_ZN5ArrayIcLj2001EEixEj>
 800cede:	4603      	mov	r3, r0
    }
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZN2ps14CircularBufferIcLj2000EE9pop_frontEv>:
    void CircularBuffer<T,MAX_SIZE>::pop_front()
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
        if (size() > 0)
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f83f 	bl	800cf74 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	bf14      	ite	ne
 800cefc:	2301      	movne	r3, #1
 800cefe:	2300      	moveq	r3, #0
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d012      	beq.n	800cf2c <_ZN2ps14CircularBufferIcLj2000EE9pop_frontEv+0x44>
            pos_front_ = (pos_front_ + 1)%(MAX_SIZE+1); 
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <_ZN2ps14CircularBufferIcLj2000EE9pop_frontEv+0x4c>)
 800cf10:	fba3 1302 	umull	r1, r3, r3, r2
 800cf14:	1ad1      	subs	r1, r2, r3
 800cf16:	0849      	lsrs	r1, r1, #1
 800cf18:	440b      	add	r3, r1
 800cf1a:	0a9b      	lsrs	r3, r3, #10
 800cf1c:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800cf20:	fb01 f303 	mul.w	r3, r1, r3
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
    }
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0603538b 	.word	0x0603538b

0800cf38 <_ZN5ArrayIcLj2001EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  size_ = 0;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 27d4 	str.w	r2, [r3, #2004]	; 0x7d4
}
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <_ZN5ArrayIcLj2001EE4fillIcEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f83a 	bl	800cfe0 <_ZN5ArrayIcLj2001EE6assignIcEEvjRKT_>
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv>:


    template<typename T, size_t MAX_SIZE>
    size_t CircularBuffer<T,MAX_SIZE>::size() const
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    {
        if (pos_front_ <= pos_back_)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	; 0x7d8
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	bf94      	ite	ls
 800cf8c:	2301      	movls	r3, #1
 800cf8e:	2300      	movhi	r3, #0
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d007      	beq.n	800cfa6 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv+0x32>
        {
            return pos_back_ - pos_front_;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	e008      	b.n	800cfb8 <_ZNK2ps14CircularBufferIcLj2000EE4sizeEv+0x44>
        }
        else
        {
            return MAX_SIZE - pos_front_ + pos_back_ + 1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
        }
    }
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <_ZN5ArrayIcLj2001EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  return values_[index];
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	4413      	add	r3, r2
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <_ZN5ArrayIcLj2001EE6assignIcEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 800cfe0:	b480      	push	{r7}
 800cfe2:	b087      	sub	sp, #28
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bf28      	it	cs
 800cff6:	4613      	movcs	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	f8c3 27d4 	str.w	r2, [r3, #2004]	; 0x7d4
  for (size_t i=0; i<assign_size; ++i)
 800d002:	2300      	movs	r3, #0
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	e009      	b.n	800d01c <_ZN5ArrayIcLj2001EE6assignIcEEvjRKT_+0x3c>
    values_[i] = value;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	7819      	ldrb	r1, [r3, #0]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	460a      	mov	r2, r1
 800d014:	701a      	strb	r2, [r3, #0]
  for (size_t i=0; i<assign_size; ++i)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	3301      	adds	r3, #1
 800d01a:	617b      	str	r3, [r7, #20]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	429a      	cmp	r2, r3
 800d022:	d3f1      	bcc.n	800d008 <_ZN5ArrayIcLj2001EE6assignIcEEvjRKT_+0x28>
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop
 800d028:	371c      	adds	r7, #28
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
	...

0800d034 <_Z41__static_initialization_and_destruction_0ii>:
    {
        return totalMessageCnt_;
    }


} // namespace ps
 800d034:	b5b0      	push	{r4, r5, r7, lr}
 800d036:	b08c      	sub	sp, #48	; 0x30
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b01      	cmp	r3, #1
 800d042:	f040 80aa 	bne.w	800d19a <_Z41__static_initialization_and_destruction_0ii+0x166>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d04c:	4293      	cmp	r3, r2
 800d04e:	f040 80a4 	bne.w	800d19a <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800d052:	4c61      	ldr	r4, [pc, #388]	; (800d1d8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800d054:	4625      	mov	r5, r4
 800d056:	f107 030c 	add.w	r3, r7, #12
 800d05a:	4618      	mov	r0, r3
 800d05c:	f011 fa0b 	bl	801e476 <_ZNSaIcEC1Ev>
 800d060:	f107 030c 	add.w	r3, r7, #12
 800d064:	461a      	mov	r2, r3
 800d066:	495d      	ldr	r1, [pc, #372]	; (800d1dc <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800d068:	4628      	mov	r0, r5
 800d06a:	f011 fcab 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d06e:	f107 030c 	add.w	r3, r7, #12
 800d072:	4618      	mov	r0, r3
 800d074:	f011 fa00 	bl	801e478 <_ZNSaIcED1Ev>
 800d078:	3418      	adds	r4, #24
 800d07a:	f107 0310 	add.w	r3, r7, #16
 800d07e:	4618      	mov	r0, r3
 800d080:	f011 f9f9 	bl	801e476 <_ZNSaIcEC1Ev>
 800d084:	f107 0310 	add.w	r3, r7, #16
 800d088:	461a      	mov	r2, r3
 800d08a:	4955      	ldr	r1, [pc, #340]	; (800d1e0 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800d08c:	4620      	mov	r0, r4
 800d08e:	f011 fc99 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d092:	f107 0310 	add.w	r3, r7, #16
 800d096:	4618      	mov	r0, r3
 800d098:	f011 f9ee 	bl	801e478 <_ZNSaIcED1Ev>
 800d09c:	3418      	adds	r4, #24
 800d09e:	f107 0314 	add.w	r3, r7, #20
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f011 f9e7 	bl	801e476 <_ZNSaIcEC1Ev>
 800d0a8:	f107 0314 	add.w	r3, r7, #20
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	494d      	ldr	r1, [pc, #308]	; (800d1e4 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f011 fc87 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d0b6:	f107 0314 	add.w	r3, r7, #20
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f011 f9dc 	bl	801e478 <_ZNSaIcED1Ev>
 800d0c0:	3418      	adds	r4, #24
 800d0c2:	f107 0318 	add.w	r3, r7, #24
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f011 f9d5 	bl	801e476 <_ZNSaIcEC1Ev>
 800d0cc:	f107 0318 	add.w	r3, r7, #24
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4945      	ldr	r1, [pc, #276]	; (800d1e8 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f011 fc75 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d0da:	f107 0318 	add.w	r3, r7, #24
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f011 f9ca 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800d0e4:	4c41      	ldr	r4, [pc, #260]	; (800d1ec <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800d0e6:	4625      	mov	r5, r4
 800d0e8:	f107 031c 	add.w	r3, r7, #28
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f011 f9c2 	bl	801e476 <_ZNSaIcEC1Ev>
 800d0f2:	f107 031c 	add.w	r3, r7, #28
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	493d      	ldr	r1, [pc, #244]	; (800d1f0 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f011 fc62 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d100:	f107 031c 	add.w	r3, r7, #28
 800d104:	4618      	mov	r0, r3
 800d106:	f011 f9b7 	bl	801e478 <_ZNSaIcED1Ev>
 800d10a:	3418      	adds	r4, #24
 800d10c:	f107 0320 	add.w	r3, r7, #32
 800d110:	4618      	mov	r0, r3
 800d112:	f011 f9b0 	bl	801e476 <_ZNSaIcEC1Ev>
 800d116:	f107 0320 	add.w	r3, r7, #32
 800d11a:	461a      	mov	r2, r3
 800d11c:	4935      	ldr	r1, [pc, #212]	; (800d1f4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800d11e:	4620      	mov	r0, r4
 800d120:	f011 fc50 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d124:	f107 0320 	add.w	r3, r7, #32
 800d128:	4618      	mov	r0, r3
 800d12a:	f011 f9a5 	bl	801e478 <_ZNSaIcED1Ev>
 800d12e:	3418      	adds	r4, #24
 800d130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d134:	4618      	mov	r0, r3
 800d136:	f011 f99e 	bl	801e476 <_ZNSaIcEC1Ev>
 800d13a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d13e:	461a      	mov	r2, r3
 800d140:	492d      	ldr	r1, [pc, #180]	; (800d1f8 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800d142:	4620      	mov	r0, r4
 800d144:	f011 fc3e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d14c:	4618      	mov	r0, r3
 800d14e:	f011 f993 	bl	801e478 <_ZNSaIcED1Ev>
 800d152:	3418      	adds	r4, #24
 800d154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d158:	4618      	mov	r0, r3
 800d15a:	f011 f98c 	bl	801e476 <_ZNSaIcEC1Ev>
 800d15e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d162:	461a      	mov	r2, r3
 800d164:	4925      	ldr	r1, [pc, #148]	; (800d1fc <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800d166:	4620      	mov	r0, r4
 800d168:	f011 fc2c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d16c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d170:	4618      	mov	r0, r3
 800d172:	f011 f981 	bl	801e478 <_ZNSaIcED1Ev>
 800d176:	3418      	adds	r4, #24
 800d178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d17c:	4618      	mov	r0, r3
 800d17e:	f011 f97a 	bl	801e476 <_ZNSaIcEC1Ev>
 800d182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d186:	461a      	mov	r2, r3
 800d188:	491d      	ldr	r1, [pc, #116]	; (800d200 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800d18a:	4620      	mov	r0, r4
 800d18c:	f011 fc1a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800d190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d194:	4618      	mov	r0, r3
 800d196:	f011 f96f 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d116      	bne.n	800d1ce <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d111      	bne.n	800d1ce <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800d1aa:	4c16      	ldr	r4, [pc, #88]	; (800d204 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800d1ac:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800d1ae:	429c      	cmp	r4, r3
 800d1b0:	d004      	beq.n	800d1bc <_Z41__static_initialization_and_destruction_0ii+0x188>
 800d1b2:	3c18      	subs	r4, #24
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f011 fa5e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d1ba:	e7f7      	b.n	800d1ac <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800d1bc:	4c12      	ldr	r4, [pc, #72]	; (800d208 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800d1be:	4b06      	ldr	r3, [pc, #24]	; (800d1d8 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	d004      	beq.n	800d1ce <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800d1c4:	3c18      	subs	r4, #24
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f011 fa55 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d1cc:	e7f7      	b.n	800d1be <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800d1ce:	bf00      	nop
 800d1d0:	3730      	adds	r7, #48	; 0x30
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200094d0 	.word	0x200094d0
 800d1dc:	080219c8 	.word	0x080219c8
 800d1e0:	080219d4 	.word	0x080219d4
 800d1e4:	080219e0 	.word	0x080219e0
 800d1e8:	080219ec 	.word	0x080219ec
 800d1ec:	20009530 	.word	0x20009530
 800d1f0:	080219f8 	.word	0x080219f8
 800d1f4:	08021a08 	.word	0x08021a08
 800d1f8:	08021a18 	.word	0x08021a18
 800d1fc:	08021a28 	.word	0x08021a28
 800d200:	08021a38 	.word	0x08021a38
 800d204:	200095a8 	.word	0x200095a8
 800d208:	20009530 	.word	0x20009530

0800d20c <_GLOBAL__sub_I__ZN2ps15MessageReceiverC2Ev>:
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0
 800d210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d214:	2001      	movs	r0, #1
 800d216:	f7ff ff0d 	bl	800d034 <_Z41__static_initialization_and_destruction_0ii>
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <_GLOBAL__sub_D__ZN2ps15MessageReceiverC2Ev>:
 800d21c:	b580      	push	{r7, lr}
 800d21e:	af00      	add	r7, sp, #0
 800d220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d224:	2000      	movs	r0, #0
 800d226:	f7ff ff05 	bl	800d034 <_Z41__static_initialization_and_destruction_0ii>
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <_ZN11ArduinoJson11JsonVariantC1Eb>:
  JsonVariant(bool value) {
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	70f9      	strb	r1, [r7, #3]
    _type = JSON_BOOLEAN;
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	2003      	movs	r0, #3
 800d23a:	7008      	strb	r0, [r1, #0]
    _content.asInteger = static_cast<JsonUInt>(value);
 800d23c:	78f9      	ldrb	r1, [r7, #3]
 800d23e:	2000      	movs	r0, #0
 800d240:	460a      	mov	r2, r1
 800d242:	4603      	mov	r3, r0
 800d244:	6879      	ldr	r1, [r7, #4]
 800d246:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <_ZN11ArduinoJson10JsonBufferD1Ev>:
  ~JsonBuffer() {}
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	4a04      	ldr	r2, [pc, #16]	; (800d274 <_ZN11ArduinoJson10JsonBufferD1Ev+0x1c>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4618      	mov	r0, r3
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	08022450 	.word	0x08022450

0800d278 <_ZN11ArduinoJson10JsonBufferC1Ev>:
class JsonBuffer : Internals::NonCopyable {
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f4 f8ae 	bl	80013e2 <_ZN11ArduinoJson9Internals11NonCopyableC1Ev>
 800d286:	4a04      	ldr	r2, [pc, #16]	; (800d298 <_ZN11ArduinoJson10JsonBufferC1Ev+0x20>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	08022450 	.word	0x08022450

0800d29c <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEEC1Ev>:
class JsonBufferBase : public JsonBuffer {
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff ffe6 	bl	800d278 <_ZN11ArduinoJson10JsonBufferC1Ev>
 800d2ac:	4a03      	ldr	r2, [pc, #12]	; (800d2bc <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEEC1Ev+0x20>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	08022444 	.word	0x08022444

0800d2c0 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseC1EPcj>:
  StaticJsonBufferBase(char* buffer, size_t capa)
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
      : _buffer(buffer), _capacity(capa), _size(0) {}
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff ffe4 	bl	800d29c <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEEC1Ev>
 800d2d4:	4a08      	ldr	r2, [pc, #32]	; (800d2f8 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseC1EPcj+0x38>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	605a      	str	r2, [r3, #4]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	609a      	str	r2, [r3, #8]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	60da      	str	r2, [r3, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	08022438 	.word	0x08022438

0800d2fc <_ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj>:
  virtual void* alloc(size_t bytes) {
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
    alignNextAlloc();
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f828 	bl	800d35c <_ZN11ArduinoJson9Internals20StaticJsonBufferBase14alignNextAllocEv>
    if (!canAlloc(bytes)) return NULL;
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f839 	bl	800d386 <_ZNK11ArduinoJson9Internals20StaticJsonBufferBase8canAllocEj>
 800d314:	4603      	mov	r3, r0
 800d316:	f083 0301 	eor.w	r3, r3, #1
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <_ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj+0x28>
 800d320:	2300      	movs	r3, #0
 800d322:	e005      	b.n	800d330 <_ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj+0x34>
    return doAlloc(bytes);
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f843 	bl	800d3b2 <_ZN11ArduinoJson9Internals20StaticJsonBufferBase7doAllocEj>
 800d32c:	4603      	mov	r3, r0
 800d32e:	bf00      	nop
  }
 800d330:	4618      	mov	r0, r3
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseD1Ev>:
  ~StaticJsonBufferBase() {}
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	4a05      	ldr	r2, [pc, #20]	; (800d358 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseD1Ev+0x20>)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f943 	bl	800d5d4 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEED1Ev>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	08022438 	.word	0x08022438

0800d35c <_ZN11ArduinoJson9Internals20StaticJsonBufferBase14alignNextAllocEv>:
  void alignNextAlloc() {
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
    _size = round_size_up(_size);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	60fb      	str	r3, [r7, #12]
    const size_t x = sizeof(void *) - 1;
 800d36a:	2303      	movs	r3, #3
 800d36c:	60bb      	str	r3, [r7, #8]
    return (bytes + x) & ~x;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3303      	adds	r3, #3
 800d372:	f023 0203 	bic.w	r2, r3, #3
    _size = round_size_up(_size);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	60da      	str	r2, [r3, #12]
  }
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <_ZNK11ArduinoJson9Internals20StaticJsonBufferBase8canAllocEj>:
  bool canAlloc(size_t bytes) const {
 800d386:	b480      	push	{r7}
 800d388:	b083      	sub	sp, #12
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	6039      	str	r1, [r7, #0]
    return _size + bytes <= _capacity;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68da      	ldr	r2, [r3, #12]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	441a      	add	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	bf94      	ite	ls
 800d3a0:	2301      	movls	r3, #1
 800d3a2:	2300      	movhi	r3, #0
 800d3a4:	b2db      	uxtb	r3, r3
  }
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <_ZN11ArduinoJson9Internals20StaticJsonBufferBase7doAllocEj>:
  void* doAlloc(size_t bytes) {
 800d3b2:	b480      	push	{r7}
 800d3b4:	b085      	sub	sp, #20
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
    void* p = &_buffer[_size];
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]
    _size += bytes;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68da      	ldr	r2, [r3, #12]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	441a      	add	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	60da      	str	r2, [r3, #12]
    return p;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
  }
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <_ZN2ps13MessageSenderC1Ev>:
#include "ps_time_utils.h"
#include "usbd_cdc_if.h"
namespace ps
{

    MessageSender::MessageSender()
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
    {}
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>:
class StaticJsonBuffer : public Internals::StaticJsonBufferBase {
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	4a05      	ldr	r2, [pc, #20]	; (800d418 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev+0x20>)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff ff95 	bl	800d338 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseD1Ev>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	0802242c 	.word	0x0802242c

0800d41c <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE>:

    void MessageSender::sendCommandResponse(ReturnStatus status, JsonObject &jsonDat)
    {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	f6ad 7dc8 	subw	sp, sp, #4040	; 0xfc8
 800d422:	af00      	add	r7, sp, #0
 800d424:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d428:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 800d42c:	6018      	str	r0, [r3, #0]
 800d42e:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d432:	f5a3 637c 	sub.w	r3, r3, #4032	; 0xfc0
 800d436:	6019      	str	r1, [r3, #0]
 800d438:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d43c:	f6a3 73c4 	subw	r3, r3, #4036	; 0xfc4
 800d440:	601a      	str	r2, [r3, #0]
        StaticJsonBuffer<JsonMessageBufferSize> jsonBuffer;
 800d442:	f107 0314 	add.w	r3, r7, #20
 800d446:	4618      	mov	r0, r3
 800d448:	f000 f8d6 	bl	800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>
        JsonObject &jsonMsg = jsonBuffer.createObject();
 800d44c:	f107 0314 	add.w	r3, r7, #20
 800d450:	4618      	mov	r0, r3
 800d452:	f7f9 fb2c 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 800d456:	f8c7 0fc4 	str.w	r0, [r7, #4036]	; 0xfc4
        jsonMsg.set(SuccessKey, status.success);
 800d45a:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d45e:	f5a3 637c 	sub.w	r3, r3, #4032	; 0xfc0
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	491a      	ldr	r1, [pc, #104]	; (800d4d0 <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE+0xb4>)
 800d468:	f8d7 0fc4 	ldr.w	r0, [r7, #4036]	; 0xfc4
 800d46c:	f000 f8da 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        if (status.message.length() > 0)
 800d470:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d474:	f5a3 637c 	sub.w	r3, r3, #4032	; 0xfc0
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3304      	adds	r3, #4
 800d47c:	4618      	mov	r0, r3
 800d47e:	f011 f933 	bl	801e6e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	bf14      	ite	ne
 800d488:	2301      	movne	r3, #1
 800d48a:	2300      	moveq	r3, #0
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00b      	beq.n	800d4aa <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE+0x8e>
        {
            jsonMsg.set(MessageKey, status.message);
 800d492:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d496:	f5a3 637c 	sub.w	r3, r3, #4032	; 0xfc0
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3304      	adds	r3, #4
 800d49e:	461a      	mov	r2, r3
 800d4a0:	490c      	ldr	r1, [pc, #48]	; (800d4d4 <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE+0xb8>)
 800d4a2:	f8d7 0fc4 	ldr.w	r0, [r7, #4036]	; 0xfc4
 800d4a6:	f000 f8cd 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
        }
        jsonMsg.set(ResponseKey, jsonDat);
 800d4aa:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d4ae:	f6a3 73c4 	subw	r3, r3, #4036	; 0xfc4
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	4908      	ldr	r1, [pc, #32]	; (800d4d8 <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE+0xbc>)
 800d4b6:	f8d7 0fc4 	ldr.w	r0, [r7, #4036]	; 0xfc4
 800d4ba:	f7fa f9c1 	bl	8007840 <_ZN11ArduinoJson10JsonObject3setIS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        //jsonMsg.printTo(Serial);
        //Serial.println();
    }
 800d4be:	f107 0314 	add.w	r3, r7, #20
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff ff98 	bl	800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>
 800d4c8:	f607 77c8 	addw	r7, r7, #4040	; 0xfc8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	200083e4 	.word	0x200083e4
 800d4d4:	200083cc 	.word	0x200083cc
 800d4d8:	200083b4 	.word	0x200083b4

0800d4dc <_ZN2ps13MessageSender10sendSampleENS_6SampleE>:

    void MessageSender::sendSample(Sample sample)
    {
 800d4dc:	b082      	sub	sp, #8
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	f5ad 6d7c 	sub.w	sp, sp, #4032	; 0xfc0
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	f507 617c 	add.w	r1, r7, #4032	; 0xfc0
 800d4ea:	f6a1 71bc 	subw	r1, r1, #4028	; 0xfbc
 800d4ee:	6008      	str	r0, [r1, #0]
 800d4f0:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 800d4f4:	e881 000c 	stmia.w	r1, {r2, r3}
        StaticJsonBuffer<JsonMessageBufferSize> jsonBuffer;
 800d4f8:	f107 0308 	add.w	r3, r7, #8
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f87b 	bl	800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>
        JsonObject &jsonSample = jsonBuffer.createObject();
 800d502:	f107 0308 	add.w	r3, r7, #8
 800d506:	4618      	mov	r0, r3
 800d508:	f7f9 fad1 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 800d50c:	f8c7 0fbc 	str.w	r0, [r7, #4028]	; 0xfbc
        jsonSample.set(TimeKey, convertUsToMs(sample.t)); 
 800d510:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	4610      	mov	r0, r2
 800d51a:	4619      	mov	r1, r3
 800d51c:	f7f4 f97d 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800d520:	4603      	mov	r3, r0
 800d522:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
 800d526:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 800d52a:	461a      	mov	r2, r3
 800d52c:	4916      	ldr	r1, [pc, #88]	; (800d588 <_ZN2ps13MessageSender10sendSampleENS_6SampleE+0xac>)
 800d52e:	f8d7 0fbc 	ldr.w	r0, [r7, #4028]	; 0xfbc
 800d532:	f7f9 ff7a 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        jsonSample.set(VoltKey, sample.volt);
 800d536:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800d53a:	461a      	mov	r2, r3
 800d53c:	4913      	ldr	r1, [pc, #76]	; (800d58c <_ZN2ps13MessageSender10sendSampleENS_6SampleE+0xb0>)
 800d53e:	f8d7 0fbc 	ldr.w	r0, [r7, #4028]	; 0xfbc
 800d542:	f7f9 ff62 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        jsonSample.set(CurrKey, sample.curr);
 800d546:	f607 73d4 	addw	r3, r7, #4052	; 0xfd4
 800d54a:	461a      	mov	r2, r3
 800d54c:	4910      	ldr	r1, [pc, #64]	; (800d590 <_ZN2ps13MessageSender10sendSampleENS_6SampleE+0xb4>)
 800d54e:	f8d7 0fbc 	ldr.w	r0, [r7, #4028]	; 0xfbc
 800d552:	f7f9 ff5a 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        if (sample.chan > 0)
 800d556:	f897 3fd8 	ldrb.w	r3, [r7, #4056]	; 0xfd8
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d007      	beq.n	800d56e <_ZN2ps13MessageSender10sendSampleENS_6SampleE+0x92>
        {
            jsonSample.set(ChanKey, sample.chan);
 800d55e:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800d562:	461a      	mov	r2, r3
 800d564:	490b      	ldr	r1, [pc, #44]	; (800d594 <_ZN2ps13MessageSender10sendSampleENS_6SampleE+0xb8>)
 800d566:	f8d7 0fbc 	ldr.w	r0, [r7, #4028]	; 0xfbc
 800d56a:	f000 f87b 	bl	800d664 <_ZN11ArduinoJson10JsonObject3setIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        }
        //jsonSample.printTo(Serial);
        //Serial.println();
    }
 800d56e:	f107 0308 	add.w	r3, r7, #8
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ff40 	bl	800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>
 800d578:	f507 677c 	add.w	r7, r7, #4032	; 0xfc0
 800d57c:	46bd      	mov	sp, r7
 800d57e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d582:	b002      	add	sp, #8
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	200083fc 	.word	0x200083fc
 800d58c:	20008414 	.word	0x20008414
 800d590:	2000842c 	.word	0x2000842c
 800d594:	20008444 	.word	0x20008444

0800d598 <_ZN2ps13MessageSender13sendSampleEndEv>:

    void MessageSender::sendSampleEnd()
    {
 800d598:	b580      	push	{r7, lr}
 800d59a:	f5ad 6d7c 	sub.w	sp, sp, #4032	; 0xfc0
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800d5a4:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 800d5a8:	6018      	str	r0, [r3, #0]
        StaticJsonBuffer<JsonMessageBufferSize> jsonBuffer;
 800d5aa:	f107 030c 	add.w	r3, r7, #12
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f000 f822 	bl	800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>
        JsonObject &jsonSample = jsonBuffer.createObject();
 800d5b4:	f107 030c 	add.w	r3, r7, #12
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7f9 fa78 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 800d5be:	f8c7 0fbc 	str.w	r0, [r7, #4028]	; 0xfbc
        //jsonSample.printTo(Serial);
        //Serial.println();
    }
 800d5c2:	f107 030c 	add.w	r3, r7, #12
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff ff16 	bl	800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>
 800d5cc:	f507 677c 	add.w	r7, r7, #4032	; 0xfc0
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEED1Ev>:
  ~JsonBufferBase() {}
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	4a05      	ldr	r2, [pc, #20]	; (800d5f4 <_ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEED1Ev+0x20>)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fe37 	bl	800d258 <_ZN11ArduinoJson10JsonBufferD1Ev>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	08022444 	.word	0x08022444

0800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>:
  explicit StaticJsonBuffer()
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
      : Internals::StaticJsonBufferBase(_buffer, CAPACITY) {}
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	3310      	adds	r3, #16
 800d606:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800d60a:	4619      	mov	r1, r3
 800d60c:	f7ff fe58 	bl	800d2c0 <_ZN11ArduinoJson9Internals20StaticJsonBufferBaseC1EPcj>
 800d610:	4a03      	ldr	r2, [pc, #12]	; (800d620 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev+0x28>)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4618      	mov	r0, r3
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	0802242c 	.word	0x0802242c

0800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f000 f825 	bl	800d684 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_>
 800d63a:	4603      	mov	r3, r0
  }
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f87e 	bl	800d756 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_>
 800d65a:	4603      	mov	r3, r0
  }
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <_ZN11ArduinoJson10JsonObject3setIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	68b9      	ldr	r1, [r7, #8]
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 f8d7 	bl	800d828 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_>
 800d67a:	4603      	mov	r3, r0
  }
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b089      	sub	sp, #36	; 0x24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 800d690:	68b8      	ldr	r0, [r7, #8]
 800d692:	f7f7 fb75 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0x1c>
 800d69c:	2300      	movs	r3, #0
 800d69e:	e056      	b.n	800d74e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f7f7 fa05 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f7 fb8b 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	617b      	str	r3, [r7, #20]
 800d6b8:	f107 0214 	add.w	r2, r7, #20
 800d6bc:	f107 0310 	add.w	r3, r7, #16
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f7 fb6d 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d02f      	beq.n	800d72e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7f7 fb89 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7f7 fb74 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	61bb      	str	r3, [r7, #24]
 800d6e6:	f107 0218 	add.w	r2, r7, #24
 800d6ea:	f107 0310 	add.w	r3, r7, #16
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7f7 fb56 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0x7c>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	e026      	b.n	800d74e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681c      	ldr	r4, [r3, #0]
 800d704:	f107 0310 	add.w	r3, r7, #16
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f7 fb9f 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d70e:	4603      	mov	r3, r0
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	4619      	mov	r1, r3
 800d714:	4620      	mov	r0, r4
 800d716:	f7f7 fba6 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 800d71a:	4603      	mov	r3, r0
 800d71c:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 800d71e:	7ffb      	ldrb	r3, [r7, #31]
 800d720:	f083 0301 	eor.w	r3, r3, #1
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0xaa>
 800d72a:	2300      	movs	r3, #0
 800d72c:	e00f      	b.n	800d74e <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKbEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681c      	ldr	r4, [r3, #0]
 800d732:	f107 0310 	add.w	r3, r7, #16
 800d736:	4618      	mov	r0, r3
 800d738:	f7f7 fb88 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d73c:	4603      	mov	r3, r0
 800d73e:	3308      	adds	r3, #8
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	4619      	mov	r1, r3
 800d744:	4620      	mov	r0, r4
 800d746:	f000 f8d8 	bl	800d8fa <_ZN11ArduinoJson9Internals10ValueSaverIRKbvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 800d74a:	4603      	mov	r3, r0
 800d74c:	bf00      	nop
  }
 800d74e:	4618      	mov	r0, r3
 800d750:	3724      	adds	r7, #36	; 0x24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd90      	pop	{r4, r7, pc}

0800d756 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 800d756:	b590      	push	{r4, r7, lr}
 800d758:	b089      	sub	sp, #36	; 0x24
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	60f8      	str	r0, [r7, #12]
 800d75e:	60b9      	str	r1, [r7, #8]
 800d760:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 800d762:	68b8      	ldr	r0, [r7, #8]
 800d764:	f7f7 fb0c 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0x1c>
 800d76e:	2300      	movs	r3, #0
 800d770:	e056      	b.n	800d820 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 800d772:	68b9      	ldr	r1, [r7, #8]
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7f7 f99c 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 800d77a:	4603      	mov	r3, r0
 800d77c:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	4618      	mov	r0, r3
 800d782:	f7f7 fb22 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d786:	4603      	mov	r3, r0
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	f107 0214 	add.w	r2, r7, #20
 800d78e:	f107 0310 	add.w	r3, r7, #16
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f7f7 fb04 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d02f      	beq.n	800d800 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7f7 fb20 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7f7 fb0b 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	61bb      	str	r3, [r7, #24]
 800d7b8:	f107 0218 	add.w	r2, r7, #24
 800d7bc:	f107 0310 	add.w	r3, r7, #16
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f7 faed 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0x7c>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	e026      	b.n	800d820 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681c      	ldr	r4, [r3, #0]
 800d7d6:	f107 0310 	add.w	r3, r7, #16
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f7 fb36 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7f7 fb3d 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 800d7f0:	7ffb      	ldrb	r3, [r7, #31]
 800d7f2:	f083 0301 	eor.w	r3, r3, #1
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0xaa>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	e00f      	b.n	800d820 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681c      	ldr	r4, [r3, #0]
 800d804:	f107 0310 	add.w	r3, r7, #16
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f7 fb1f 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d80e:	4603      	mov	r3, r0
 800d810:	3308      	adds	r3, #8
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	4619      	mov	r1, r3
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f889 	bl	800d92e <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_>
 800d81c:	4603      	mov	r3, r0
 800d81e:	bf00      	nop
  }
 800d820:	4618      	mov	r0, r3
 800d822:	3724      	adds	r7, #36	; 0x24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd90      	pop	{r4, r7, pc}

0800d828 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 800d828:	b590      	push	{r4, r7, lr}
 800d82a:	b089      	sub	sp, #36	; 0x24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 800d834:	68b8      	ldr	r0, [r7, #8]
 800d836:	f7f7 faa3 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d001      	beq.n	800d844 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0x1c>
 800d840:	2300      	movs	r3, #0
 800d842:	e056      	b.n	800d8f2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 800d844:	68b9      	ldr	r1, [r7, #8]
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f7f7 f933 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 800d84c:	4603      	mov	r3, r0
 800d84e:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4618      	mov	r0, r3
 800d854:	f7f7 fab9 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d858:	4603      	mov	r3, r0
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	f107 0214 	add.w	r2, r7, #20
 800d860:	f107 0310 	add.w	r3, r7, #16
 800d864:	4611      	mov	r1, r2
 800d866:	4618      	mov	r0, r3
 800d868:	f7f7 fa9b 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d02f      	beq.n	800d8d2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	4618      	mov	r0, r3
 800d876:	f7f7 fab7 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 800d87a:	4603      	mov	r3, r0
 800d87c:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	4618      	mov	r0, r3
 800d882:	f7f7 faa2 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 800d886:	4603      	mov	r3, r0
 800d888:	61bb      	str	r3, [r7, #24]
 800d88a:	f107 0218 	add.w	r2, r7, #24
 800d88e:	f107 0310 	add.w	r3, r7, #16
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7f7 fa84 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0x7c>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	e026      	b.n	800d8f2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681c      	ldr	r4, [r3, #0]
 800d8a8:	f107 0310 	add.w	r3, r7, #16
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7f7 facd 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7f7 fad4 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 800d8c2:	7ffb      	ldrb	r3, [r7, #31]
 800d8c4:	f083 0301 	eor.w	r3, r3, #1
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0xaa>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e00f      	b.n	800d8f2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKhEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681c      	ldr	r4, [r3, #0]
 800d8d6:	f107 0310 	add.w	r3, r7, #16
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7f7 fab6 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 f85b 	bl	800d9a4 <_ZN11ArduinoJson9Internals10ValueSaverIRKhvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	bf00      	nop
  }
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3724      	adds	r7, #36	; 0x24
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd90      	pop	{r4, r7, pc}

0800d8fa <_ZN11ArduinoJson9Internals10ValueSaverIRKbvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 800d8fa:	b590      	push	{r4, r7, lr}
 800d8fc:	b089      	sub	sp, #36	; 0x24
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]
    destination = source;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	781a      	ldrb	r2, [r3, #0]
 800d90a:	f107 0310 	add.w	r3, r7, #16
 800d90e:	4611      	mov	r1, r2
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fc8b 	bl	800d22c <_ZN11ArduinoJson11JsonVariantC1Eb>
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	461c      	mov	r4, r3
 800d91a:	f107 0310 	add.w	r3, r7, #16
 800d91e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 800d924:	2301      	movs	r3, #1
  }
 800d926:	4618      	mov	r0, r3
 800d928:	3724      	adds	r7, #36	; 0x24
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd90      	pop	{r4, r7, pc}

0800d92e <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_>:
  static bool save(JsonBuffer* buffer, Destination& dest, Source source) {
 800d92e:	b590      	push	{r4, r7, lr}
 800d930:	b08f      	sub	sp, #60	; 0x3c
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	607a      	str	r2, [r7, #4]
    if (!StringTraits<Source>::is_null(source)) {
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7f7 fa20 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 800d940:	4603      	mov	r3, r0
 800d942:	f083 0301 	eor.w	r3, r3, #1
 800d946:	b2db      	uxtb	r3, r3
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d018      	beq.n	800d97e <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_+0x50>
          StringTraits<Source>::duplicate(source, buffer);
 800d94c:	68f9      	ldr	r1, [r7, #12]
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f7f7 fcd5 	bl	80052fe <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9duplicateINS_10JsonBufferEEEPKcRKS7_PT_>
 800d954:	6378      	str	r0, [r7, #52]	; 0x34
      if (!dup) return false;
 800d956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_+0x32>
 800d95c:	2300      	movs	r3, #0
 800d95e:	e01d      	b.n	800d99c <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_+0x6e>
      dest = dup;
 800d960:	f107 0310 	add.w	r3, r7, #16
 800d964:	2200      	movs	r2, #0
 800d966:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe ff5e 	bl	800c82a <_ZN11ArduinoJson11JsonVariantC1IcEEPKT_PNS_9Internals8EnableIfIXsrNS5_6IsCharIS2_EE5valueEvE4typeE>
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	461c      	mov	r4, r3
 800d972:	f107 0310 	add.w	r3, r7, #16
 800d976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d97c:	e00d      	b.n	800d99a <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_+0x6c>
      dest = reinterpret_cast<const char*>(0);
 800d97e:	f107 0320 	add.w	r3, r7, #32
 800d982:	2200      	movs	r2, #0
 800d984:	2100      	movs	r1, #0
 800d986:	4618      	mov	r0, r3
 800d988:	f7fe ff4f 	bl	800c82a <_ZN11ArduinoJson11JsonVariantC1IcEEPKT_PNS_9Internals8EnableIfIXsrNS5_6IsCharIS2_EE5valueEvE4typeE>
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	461c      	mov	r4, r3
 800d990:	f107 0320 	add.w	r3, r7, #32
 800d994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 800d99a:	2301      	movs	r3, #1
  }
 800d99c:	4618      	mov	r0, r3
 800d99e:	373c      	adds	r7, #60	; 0x3c
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd90      	pop	{r4, r7, pc}

0800d9a4 <_ZN11ArduinoJson9Internals10ValueSaverIRKhvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S3_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b089      	sub	sp, #36	; 0x24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
    destination = source;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7819      	ldrb	r1, [r3, #0]
 800d9b4:	f107 0310 	add.w	r3, r7, #16
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f80c 	bl	800d9d8 <_ZN11ArduinoJson11JsonVariantC1IhEET_PNS_9Internals8EnableIfIXsrNS3_18IsUnsignedIntegralIS2_EE5valueEvE4typeE>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	461c      	mov	r4, r3
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 800d9ce:	2301      	movs	r3, #1
  }
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3724      	adds	r7, #36	; 0x24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd90      	pop	{r4, r7, pc}

0800d9d8 <_ZN11ArduinoJson11JsonVariantC1IhEET_PNS_9Internals8EnableIfIXsrNS3_18IsUnsignedIntegralIS2_EE5valueEvE4typeE>:
  JsonVariant(T value,
 800d9d8:	b4b0      	push	{r4, r5, r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	72fb      	strb	r3, [r7, #11]
    _type = JSON_POSITIVE_INTEGER;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2204      	movs	r2, #4
 800d9ea:	701a      	strb	r2, [r3, #0]
    _content.asInteger = static_cast<JsonUInt>(value);
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	461c      	mov	r4, r3
 800d9f2:	4615      	mov	r5, r2
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	e9c3 4502 	strd	r4, r5, [r3, #8]
  }
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3714      	adds	r7, #20
 800da00:	46bd      	mov	sp, r7
 800da02:	bcb0      	pop	{r4, r5, r7}
 800da04:	4770      	bx	lr
	...

0800da08 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace ps
 800da08:	b5b0      	push	{r4, r5, r7, lr}
 800da0a:	b08c      	sub	sp, #48	; 0x30
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b01      	cmp	r3, #1
 800da16:	f040 80aa 	bne.w	800db6e <_Z41__static_initialization_and_destruction_0ii+0x166>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da20:	4293      	cmp	r3, r2
 800da22:	f040 80a4 	bne.w	800db6e <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800da26:	4c61      	ldr	r4, [pc, #388]	; (800dbac <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800da28:	4625      	mov	r5, r4
 800da2a:	f107 030c 	add.w	r3, r7, #12
 800da2e:	4618      	mov	r0, r3
 800da30:	f010 fd21 	bl	801e476 <_ZNSaIcEC1Ev>
 800da34:	f107 030c 	add.w	r3, r7, #12
 800da38:	461a      	mov	r2, r3
 800da3a:	495d      	ldr	r1, [pc, #372]	; (800dbb0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800da3c:	4628      	mov	r0, r5
 800da3e:	f010 ffc1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800da42:	f107 030c 	add.w	r3, r7, #12
 800da46:	4618      	mov	r0, r3
 800da48:	f010 fd16 	bl	801e478 <_ZNSaIcED1Ev>
 800da4c:	3418      	adds	r4, #24
 800da4e:	f107 0310 	add.w	r3, r7, #16
 800da52:	4618      	mov	r0, r3
 800da54:	f010 fd0f 	bl	801e476 <_ZNSaIcEC1Ev>
 800da58:	f107 0310 	add.w	r3, r7, #16
 800da5c:	461a      	mov	r2, r3
 800da5e:	4955      	ldr	r1, [pc, #340]	; (800dbb4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800da60:	4620      	mov	r0, r4
 800da62:	f010 ffaf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800da66:	f107 0310 	add.w	r3, r7, #16
 800da6a:	4618      	mov	r0, r3
 800da6c:	f010 fd04 	bl	801e478 <_ZNSaIcED1Ev>
 800da70:	3418      	adds	r4, #24
 800da72:	f107 0314 	add.w	r3, r7, #20
 800da76:	4618      	mov	r0, r3
 800da78:	f010 fcfd 	bl	801e476 <_ZNSaIcEC1Ev>
 800da7c:	f107 0314 	add.w	r3, r7, #20
 800da80:	461a      	mov	r2, r3
 800da82:	494d      	ldr	r1, [pc, #308]	; (800dbb8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800da84:	4620      	mov	r0, r4
 800da86:	f010 ff9d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800da8a:	f107 0314 	add.w	r3, r7, #20
 800da8e:	4618      	mov	r0, r3
 800da90:	f010 fcf2 	bl	801e478 <_ZNSaIcED1Ev>
 800da94:	3418      	adds	r4, #24
 800da96:	f107 0318 	add.w	r3, r7, #24
 800da9a:	4618      	mov	r0, r3
 800da9c:	f010 fceb 	bl	801e476 <_ZNSaIcEC1Ev>
 800daa0:	f107 0318 	add.w	r3, r7, #24
 800daa4:	461a      	mov	r2, r3
 800daa6:	4945      	ldr	r1, [pc, #276]	; (800dbbc <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800daa8:	4620      	mov	r0, r4
 800daaa:	f010 ff8b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800daae:	f107 0318 	add.w	r3, r7, #24
 800dab2:	4618      	mov	r0, r3
 800dab4:	f010 fce0 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800dab8:	4c41      	ldr	r4, [pc, #260]	; (800dbc0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800daba:	4625      	mov	r5, r4
 800dabc:	f107 031c 	add.w	r3, r7, #28
 800dac0:	4618      	mov	r0, r3
 800dac2:	f010 fcd8 	bl	801e476 <_ZNSaIcEC1Ev>
 800dac6:	f107 031c 	add.w	r3, r7, #28
 800daca:	461a      	mov	r2, r3
 800dacc:	493d      	ldr	r1, [pc, #244]	; (800dbc4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800dace:	4628      	mov	r0, r5
 800dad0:	f010 ff78 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dad4:	f107 031c 	add.w	r3, r7, #28
 800dad8:	4618      	mov	r0, r3
 800dada:	f010 fccd 	bl	801e478 <_ZNSaIcED1Ev>
 800dade:	3418      	adds	r4, #24
 800dae0:	f107 0320 	add.w	r3, r7, #32
 800dae4:	4618      	mov	r0, r3
 800dae6:	f010 fcc6 	bl	801e476 <_ZNSaIcEC1Ev>
 800daea:	f107 0320 	add.w	r3, r7, #32
 800daee:	461a      	mov	r2, r3
 800daf0:	4935      	ldr	r1, [pc, #212]	; (800dbc8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800daf2:	4620      	mov	r0, r4
 800daf4:	f010 ff66 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800daf8:	f107 0320 	add.w	r3, r7, #32
 800dafc:	4618      	mov	r0, r3
 800dafe:	f010 fcbb 	bl	801e478 <_ZNSaIcED1Ev>
 800db02:	3418      	adds	r4, #24
 800db04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db08:	4618      	mov	r0, r3
 800db0a:	f010 fcb4 	bl	801e476 <_ZNSaIcEC1Ev>
 800db0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db12:	461a      	mov	r2, r3
 800db14:	492d      	ldr	r1, [pc, #180]	; (800dbcc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800db16:	4620      	mov	r0, r4
 800db18:	f010 ff54 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800db1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db20:	4618      	mov	r0, r3
 800db22:	f010 fca9 	bl	801e478 <_ZNSaIcED1Ev>
 800db26:	3418      	adds	r4, #24
 800db28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db2c:	4618      	mov	r0, r3
 800db2e:	f010 fca2 	bl	801e476 <_ZNSaIcEC1Ev>
 800db32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db36:	461a      	mov	r2, r3
 800db38:	4925      	ldr	r1, [pc, #148]	; (800dbd0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800db3a:	4620      	mov	r0, r4
 800db3c:	f010 ff42 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800db40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db44:	4618      	mov	r0, r3
 800db46:	f010 fc97 	bl	801e478 <_ZNSaIcED1Ev>
 800db4a:	3418      	adds	r4, #24
 800db4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db50:	4618      	mov	r0, r3
 800db52:	f010 fc90 	bl	801e476 <_ZNSaIcEC1Ev>
 800db56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db5a:	461a      	mov	r2, r3
 800db5c:	491d      	ldr	r1, [pc, #116]	; (800dbd4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800db5e:	4620      	mov	r0, r4
 800db60:	f010 ff30 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800db64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db68:	4618      	mov	r0, r3
 800db6a:	f010 fc85 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d116      	bne.n	800dba2 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d111      	bne.n	800dba2 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800db7e:	4c16      	ldr	r4, [pc, #88]	; (800dbd8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800db80:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800db82:	429c      	cmp	r4, r3
 800db84:	d004      	beq.n	800db90 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800db86:	3c18      	subs	r4, #24
 800db88:	4620      	mov	r0, r4
 800db8a:	f010 fd74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800db8e:	e7f7      	b.n	800db80 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800db90:	4c12      	ldr	r4, [pc, #72]	; (800dbdc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800db92:	4b06      	ldr	r3, [pc, #24]	; (800dbac <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800db94:	429c      	cmp	r4, r3
 800db96:	d004      	beq.n	800dba2 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800db98:	3c18      	subs	r4, #24
 800db9a:	4620      	mov	r0, r4
 800db9c:	f010 fd6b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dba0:	e7f7      	b.n	800db92 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800dba2:	bf00      	nop
 800dba4:	3730      	adds	r7, #48	; 0x30
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bdb0      	pop	{r4, r5, r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	200095a8 	.word	0x200095a8
 800dbb0:	08021a48 	.word	0x08021a48
 800dbb4:	08021a54 	.word	0x08021a54
 800dbb8:	08021a60 	.word	0x08021a60
 800dbbc:	08021a6c 	.word	0x08021a6c
 800dbc0:	20009608 	.word	0x20009608
 800dbc4:	08021a78 	.word	0x08021a78
 800dbc8:	08021a88 	.word	0x08021a88
 800dbcc:	08021a98 	.word	0x08021a98
 800dbd0:	08021aa8 	.word	0x08021aa8
 800dbd4:	08021ab8 	.word	0x08021ab8
 800dbd8:	20009680 	.word	0x20009680
 800dbdc:	20009608 	.word	0x20009608

0800dbe0 <_GLOBAL__sub_I__ZN2ps13MessageSenderC2Ev>:
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dbe8:	2001      	movs	r0, #1
 800dbea:	f7ff ff0d 	bl	800da08 <_Z41__static_initialization_and_destruction_0ii>
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <_GLOBAL__sub_D__ZN2ps13MessageSenderC2Ev>:
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	f7ff ff05 	bl	800da08 <_Z41__static_initialization_and_destruction_0ii>
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_Z41__static_initialization_and_destruction_0ii>:
            string message;

    };


} // namespace ps
 800dc00:	b5b0      	push	{r4, r5, r7, lr}
 800dc02:	b08c      	sub	sp, #48	; 0x30
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	f040 80aa 	bne.w	800dd66 <_Z41__static_initialization_and_destruction_0ii+0x166>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	f040 80a4 	bne.w	800dd66 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800dc1e:	4c61      	ldr	r4, [pc, #388]	; (800dda4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800dc20:	4625      	mov	r5, r4
 800dc22:	f107 030c 	add.w	r3, r7, #12
 800dc26:	4618      	mov	r0, r3
 800dc28:	f010 fc25 	bl	801e476 <_ZNSaIcEC1Ev>
 800dc2c:	f107 030c 	add.w	r3, r7, #12
 800dc30:	461a      	mov	r2, r3
 800dc32:	495d      	ldr	r1, [pc, #372]	; (800dda8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800dc34:	4628      	mov	r0, r5
 800dc36:	f010 fec5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dc3a:	f107 030c 	add.w	r3, r7, #12
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f010 fc1a 	bl	801e478 <_ZNSaIcED1Ev>
 800dc44:	3418      	adds	r4, #24
 800dc46:	f107 0310 	add.w	r3, r7, #16
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f010 fc13 	bl	801e476 <_ZNSaIcEC1Ev>
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	461a      	mov	r2, r3
 800dc56:	4955      	ldr	r1, [pc, #340]	; (800ddac <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f010 feb3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dc5e:	f107 0310 	add.w	r3, r7, #16
 800dc62:	4618      	mov	r0, r3
 800dc64:	f010 fc08 	bl	801e478 <_ZNSaIcED1Ev>
 800dc68:	3418      	adds	r4, #24
 800dc6a:	f107 0314 	add.w	r3, r7, #20
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f010 fc01 	bl	801e476 <_ZNSaIcEC1Ev>
 800dc74:	f107 0314 	add.w	r3, r7, #20
 800dc78:	461a      	mov	r2, r3
 800dc7a:	494d      	ldr	r1, [pc, #308]	; (800ddb0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f010 fea1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dc82:	f107 0314 	add.w	r3, r7, #20
 800dc86:	4618      	mov	r0, r3
 800dc88:	f010 fbf6 	bl	801e478 <_ZNSaIcED1Ev>
 800dc8c:	3418      	adds	r4, #24
 800dc8e:	f107 0318 	add.w	r3, r7, #24
 800dc92:	4618      	mov	r0, r3
 800dc94:	f010 fbef 	bl	801e476 <_ZNSaIcEC1Ev>
 800dc98:	f107 0318 	add.w	r3, r7, #24
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4945      	ldr	r1, [pc, #276]	; (800ddb4 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800dca0:	4620      	mov	r0, r4
 800dca2:	f010 fe8f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dca6:	f107 0318 	add.w	r3, r7, #24
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f010 fbe4 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800dcb0:	4c41      	ldr	r4, [pc, #260]	; (800ddb8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800dcb2:	4625      	mov	r5, r4
 800dcb4:	f107 031c 	add.w	r3, r7, #28
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f010 fbdc 	bl	801e476 <_ZNSaIcEC1Ev>
 800dcbe:	f107 031c 	add.w	r3, r7, #28
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	493d      	ldr	r1, [pc, #244]	; (800ddbc <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f010 fe7c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dccc:	f107 031c 	add.w	r3, r7, #28
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f010 fbd1 	bl	801e478 <_ZNSaIcED1Ev>
 800dcd6:	3418      	adds	r4, #24
 800dcd8:	f107 0320 	add.w	r3, r7, #32
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f010 fbca 	bl	801e476 <_ZNSaIcEC1Ev>
 800dce2:	f107 0320 	add.w	r3, r7, #32
 800dce6:	461a      	mov	r2, r3
 800dce8:	4935      	ldr	r1, [pc, #212]	; (800ddc0 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800dcea:	4620      	mov	r0, r4
 800dcec:	f010 fe6a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dcf0:	f107 0320 	add.w	r3, r7, #32
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f010 fbbf 	bl	801e478 <_ZNSaIcED1Ev>
 800dcfa:	3418      	adds	r4, #24
 800dcfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd00:	4618      	mov	r0, r3
 800dd02:	f010 fbb8 	bl	801e476 <_ZNSaIcEC1Ev>
 800dd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	492d      	ldr	r1, [pc, #180]	; (800ddc4 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f010 fe58 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dd14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f010 fbad 	bl	801e478 <_ZNSaIcED1Ev>
 800dd1e:	3418      	adds	r4, #24
 800dd20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd24:	4618      	mov	r0, r3
 800dd26:	f010 fba6 	bl	801e476 <_ZNSaIcEC1Ev>
 800dd2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd2e:	461a      	mov	r2, r3
 800dd30:	4925      	ldr	r1, [pc, #148]	; (800ddc8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800dd32:	4620      	mov	r0, r4
 800dd34:	f010 fe46 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dd38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f010 fb9b 	bl	801e478 <_ZNSaIcED1Ev>
 800dd42:	3418      	adds	r4, #24
 800dd44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f010 fb94 	bl	801e476 <_ZNSaIcEC1Ev>
 800dd4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd52:	461a      	mov	r2, r3
 800dd54:	491d      	ldr	r1, [pc, #116]	; (800ddcc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800dd56:	4620      	mov	r0, r4
 800dd58:	f010 fe34 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800dd5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd60:	4618      	mov	r0, r3
 800dd62:	f010 fb89 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d116      	bne.n	800dd9a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d111      	bne.n	800dd9a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800dd76:	4c16      	ldr	r4, [pc, #88]	; (800ddd0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800dd78:	4b0f      	ldr	r3, [pc, #60]	; (800ddb8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800dd7a:	429c      	cmp	r4, r3
 800dd7c:	d004      	beq.n	800dd88 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800dd7e:	3c18      	subs	r4, #24
 800dd80:	4620      	mov	r0, r4
 800dd82:	f010 fc78 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dd86:	e7f7      	b.n	800dd78 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800dd88:	4c12      	ldr	r4, [pc, #72]	; (800ddd4 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	d004      	beq.n	800dd9a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800dd90:	3c18      	subs	r4, #24
 800dd92:	4620      	mov	r0, r4
 800dd94:	f010 fc6f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dd98:	e7f7      	b.n	800dd8a <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800dd9a:	bf00      	nop
 800dd9c:	3730      	adds	r7, #48	; 0x30
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bdb0      	pop	{r4, r5, r7, pc}
 800dda2:	bf00      	nop
 800dda4:	20009680 	.word	0x20009680
 800dda8:	08021ac8 	.word	0x08021ac8
 800ddac:	08021ad4 	.word	0x08021ad4
 800ddb0:	08021ae0 	.word	0x08021ae0
 800ddb4:	08021aec 	.word	0x08021aec
 800ddb8:	200096e0 	.word	0x200096e0
 800ddbc:	08021af8 	.word	0x08021af8
 800ddc0:	08021b08 	.word	0x08021b08
 800ddc4:	08021b18 	.word	0x08021b18
 800ddc8:	08021b28 	.word	0x08021b28
 800ddcc:	08021b38 	.word	0x08021b38
 800ddd0:	20009758 	.word	0x20009758
 800ddd4:	200096e0 	.word	0x200096e0

0800ddd8 <_GLOBAL__sub_I_ps_multiplexer.cpp>:
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dde0:	2001      	movs	r0, #1
 800dde2:	f7ff ff0d 	bl	800dc00 <_Z41__static_initialization_and_destruction_0ii>
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <_GLOBAL__sub_D_ps_multiplexer.cpp>:
 800dde8:	b580      	push	{r7, lr}
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f7ff ff05 	bl	800dc00 <_Z41__static_initialization_and_destruction_0ii>
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_ZN2ps12PeriodicTestC1Ev>:
using namespace std;

namespace ps
{ 

    PeriodicTest::PeriodicTest() 
 800ddf8:	b590      	push	{r4, r7, lr}
 800ddfa:	b08b      	sub	sp, #44	; 0x2c
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4618      	mov	r0, r3
 800de04:	f7f8 fe9e 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 800de08:	4a22      	ldr	r2, [pc, #136]	; (800de94 <_ZN2ps12PeriodicTestC1Ev+0x9c>)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800de14:	641a      	str	r2, [r3, #64]	; 0x40
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f04f 0200 	mov.w	r2, #0
 800de1c:	645a      	str	r2, [r3, #68]	; 0x44
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	4a1d      	ldr	r2, [pc, #116]	; (800de98 <_ZN2ps12PeriodicTestC1Ev+0xa0>)
 800de22:	f04f 0300 	mov.w	r3, #0
 800de26:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	220a      	movs	r2, #10
 800de2e:	651a      	str	r2, [r3, #80]	; 0x50
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f04f 0200 	mov.w	r2, #0
 800de36:	655a      	str	r2, [r3, #84]	; 0x54
 800de38:	6879      	ldr	r1, [r7, #4]
 800de3a:	f04f 0200 	mov.w	r2, #0
 800de3e:	f04f 0300 	mov.w	r3, #0
 800de42:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    { 
        updateShiftInUs();
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fd8e 	bl	800e968 <_ZN2ps12PeriodicTest15updateShiftInUsEv>
        setName("period");
 800de4c:	687c      	ldr	r4, [r7, #4]
 800de4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f010 fb0f 	bl	801e476 <_ZNSaIcEC1Ev>
 800de58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800de5c:	f107 030c 	add.w	r3, r7, #12
 800de60:	490e      	ldr	r1, [pc, #56]	; (800de9c <_ZN2ps12PeriodicTestC1Ev+0xa4>)
 800de62:	4618      	mov	r0, r3
 800de64:	f010 fdae 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	4619      	mov	r1, r3
 800de6e:	4620      	mov	r0, r4
 800de70:	f7f8 ffaa 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800de74:	f107 030c 	add.w	r3, r7, #12
 800de78:	4618      	mov	r0, r3
 800de7a:	f010 fbfc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800de7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de82:	4618      	mov	r0, r3
 800de84:	f010 faf8 	bl	801e478 <_ZNSaIcED1Ev>
    }
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4618      	mov	r0, r3
 800de8c:	372c      	adds	r7, #44	; 0x2c
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd90      	pop	{r4, r7, pc}
 800de92:	bf00      	nop
 800de94:	0802245c 	.word	0x0802245c
 800de98:	000f4240 	.word	0x000f4240
 800de9c:	08021b58 	.word	0x08021b58

0800dea0 <_ZN2ps12PeriodicTest12setAmplitudeEf>:


    void PeriodicTest::setAmplitude(float amplitude)
    {
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	ed87 0a00 	vstr	s0, [r7]
        amplitude_ = amplitude;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800deb2:	bf00      	nop
 800deb4:	370c      	adds	r7, #12
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr

0800debe <_ZNK2ps12PeriodicTest12getAmplitudeEv>:


    float PeriodicTest::getAmplitude() const
    {
 800debe:	b480      	push	{r7}
 800dec0:	b083      	sub	sp, #12
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
        return amplitude_;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deca:	ee07 3a90 	vmov	s15, r3
    }
 800dece:	eeb0 0a67 	vmov.f32	s0, s15
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <_ZN2ps12PeriodicTest9setOffsetEf>:


    void PeriodicTest::setOffset(float offset)
    {
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	ed87 0a00 	vstr	s0, [r7]
        offset_ = offset;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <_ZNK2ps12PeriodicTest9getOffsetEv>:


    float PeriodicTest::getOffset() const
    {
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
        return offset_;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df06:	ee07 3a90 	vmov	s15, r3
    }
 800df0a:	eeb0 0a67 	vmov.f32	s0, s15
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <_ZN2ps12PeriodicTest9setPeriodEy>:


    void PeriodicTest::setPeriod(uint64_t period)
    {
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	e9c7 2300 	strd	r2, r3, [r7]
        period_ = period;
 800df24:	68f9      	ldr	r1, [r7, #12]
 800df26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df2a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        updateShiftInUs();
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 fd1a 	bl	800e968 <_ZN2ps12PeriodicTest15updateShiftInUsEv>
    }
 800df34:	bf00      	nop
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <_ZNK2ps12PeriodicTest9getPeriodEv>:


    uint64_t PeriodicTest::getPeriod() const
    {
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
        return period_;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    }
 800df4a:	4610      	mov	r0, r2
 800df4c:	4619      	mov	r1, r3
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <_ZN2ps12PeriodicTest8setShiftEf>:


    void PeriodicTest::setShift(float shift)
    {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	ed87 0a00 	vstr	s0, [r7]
        shift_ = shift;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	655a      	str	r2, [r3, #84]	; 0x54
        updateShiftInUs();
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 fcfc 	bl	800e968 <_ZN2ps12PeriodicTest15updateShiftInUsEv>
    }
 800df70:	bf00      	nop
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_ZNK2ps12PeriodicTest8getShiftEv>:


    float PeriodicTest::getShift() const
    {
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
        return shift_;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df84:	ee07 3a90 	vmov	s15, r3
    }
 800df88:	eeb0 0a67 	vmov.f32	s0, s15
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <_ZN2ps12PeriodicTest12setNumCyclesEm>:


    void PeriodicTest::setNumCycles(uint32_t numCycles)
    {
 800df96:	b480      	push	{r7}
 800df98:	b083      	sub	sp, #12
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
        numCycles_ = numCycles;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	651a      	str	r2, [r3, #80]	; 0x50
    }
 800dfa6:	bf00      	nop
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <_ZNK2ps12PeriodicTest12getNumCyclesEv>:


    uint32_t PeriodicTest::getNumCycles() const
    {
 800dfb2:	b480      	push	{r7}
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
        return numCycles_;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    }
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <_ZNK2ps12PeriodicTest13getCycleCountEy>:


    uint32_t PeriodicTest::getCycleCount(uint64_t t) const
    {
 800dfca:	b5b0      	push	{r4, r5, r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	e9c7 2300 	strd	r2, r3, [r7]
        if (t < quietTime_)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dfdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dfe0:	4290      	cmp	r0, r2
 800dfe2:	eb71 0303 	sbcs.w	r3, r1, r3
 800dfe6:	d201      	bcs.n	800dfec <_ZNK2ps12PeriodicTest13getCycleCountEy+0x22>
        {
            return 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	e011      	b.n	800e010 <_ZNK2ps12PeriodicTest13getCycleCountEy+0x46>
        }
        else
        {
            return uint32_t((t-quietTime_)/period_);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dff6:	1a84      	subs	r4, r0, r2
 800dff8:	eb61 0503 	sbc.w	r5, r1, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800e002:	4620      	mov	r0, r4
 800e004:	4629      	mov	r1, r5
 800e006:	f7f2 ff0b 	bl	8000e20 <__aeabi_uldivmod>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4613      	mov	r3, r2
        }
    }
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bdb0      	pop	{r4, r5, r7, pc}

0800e018 <_ZNK2ps12PeriodicTest6isDoneEy>:


    bool PeriodicTest::isDone(uint64_t t) const
    {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	e9c7 2300 	strd	r2, r3, [r7]
        bool done = false;
 800e024:	2300      	movs	r3, #0
 800e026:	75fb      	strb	r3, [r7, #23]
        uint32_t cycleCount = getCycleCount(t);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3380      	adds	r3, #128	; 0x80
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	4788      	blx	r1
 800e038:	6138      	str	r0, [r7, #16]
        if (cycleCount >= numCycles_)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	429a      	cmp	r2, r3
 800e042:	d301      	bcc.n	800e048 <_ZNK2ps12PeriodicTest6isDoneEy+0x30>
        {
            done = true;
 800e044:	2301      	movs	r3, #1
 800e046:	75fb      	strb	r3, [r7, #23]
        }
        return done;
 800e048:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e04a:	4618      	mov	r0, r3
 800e04c:	3718      	adds	r7, #24
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <_ZNK2ps12PeriodicTest11getDoneTimeEv>:


    uint64_t PeriodicTest::getDoneTime() const 
    {
 800e052:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
        return quietTime_ + numCycles_*period_;
 800e05c:	6879      	ldr	r1, [r7, #4]
 800e05e:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
 800e062:	6879      	ldr	r1, [r7, #4]
 800e064:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800e066:	2000      	movs	r0, #0
 800e068:	460c      	mov	r4, r1
 800e06a:	4605      	mov	r5, r0
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800e072:	fb00 fc05 	mul.w	ip, r0, r5
 800e076:	fb04 f601 	mul.w	r6, r4, r1
 800e07a:	4466      	add	r6, ip
 800e07c:	fba4 2300 	umull	r2, r3, r4, r0
 800e080:	18f1      	adds	r1, r6, r3
 800e082:	460b      	mov	r3, r1
 800e084:	eb18 0a02 	adds.w	sl, r8, r2
 800e088:	eb49 0b03 	adc.w	fp, r9, r3
 800e08c:	4652      	mov	r2, sl
 800e08e:	465b      	mov	r3, fp
    }
 800e090:	4610      	mov	r0, r2
 800e092:	4619      	mov	r1, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e09c:	4770      	bx	lr

0800e09e <_ZNK2ps12PeriodicTest8getValueEy>:


    float PeriodicTest::getValue(uint64_t t) const
    {
 800e09e:	b480      	push	{r7}
 800e0a0:	b085      	sub	sp, #20
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	60f8      	str	r0, [r7, #12]
 800e0a6:	e9c7 2300 	strd	r2, r3, [r7]
        return 0.0;
 800e0aa:	f04f 0300 	mov.w	r3, #0
 800e0ae:	ee07 3a90 	vmov	s15, r3
    }
 800e0b2:	eeb0 0a67 	vmov.f32	s0, s15
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <_ZNK2ps12PeriodicTest11getMaxValueEv>:


    float PeriodicTest::getMaxValue() const
    {
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
        return offset_ + amplitude_;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e0d4:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800e0d8:	eeb0 0a67 	vmov.f32	s0, s15
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <_ZNK2ps12PeriodicTest11getMinValueEv>:


    float PeriodicTest::getMinValue() const
    {
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
        return offset_ - amplitude_;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
 800e0fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE>:


    void PeriodicTest::getParam(JsonObject &jsonDat)
    {
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b08c      	sub	sp, #48	; 0x30
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
        BaseTest::getParam(jsonDat);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7f8 fea0 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>

        ReturnStatus status;
 800e120:	f107 030c 	add.w	r3, r7, #12
 800e124:	4618      	mov	r0, r3
 800e126:	f7f3 f94b 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f107 020c 	add.w	r2, r7, #12
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	4618      	mov	r0, r3
 800e134:	f7f8 ff0e 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800e138:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (status.success)
 800e13a:	7b3b      	ldrb	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d02b      	beq.n	800e198 <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0x8c>
        {
            jsonDatPrm.set(AmplitudeKey, amplitude_);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3340      	adds	r3, #64	; 0x40
 800e144:	461a      	mov	r2, r3
 800e146:	4918      	ldr	r1, [pc, #96]	; (800e1a8 <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0x9c>)
 800e148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e14a:	f7f9 f95e 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(OffsetKey, offset_);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3344      	adds	r3, #68	; 0x44
 800e152:	461a      	mov	r2, r3
 800e154:	4915      	ldr	r1, [pc, #84]	; (800e1ac <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0xa0>)
 800e156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e158:	f7f9 f957 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(PeriodKey, convertUsToMs(period_));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800e162:	4610      	mov	r0, r2
 800e164:	4619      	mov	r1, r3
 800e166:	f7f3 fb58 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800e16a:	4603      	mov	r3, r0
 800e16c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e16e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e172:	461a      	mov	r2, r3
 800e174:	490e      	ldr	r1, [pc, #56]	; (800e1b0 <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0xa4>)
 800e176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e178:	f7f9 f957 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(NumCyclesKey, numCycles_);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3350      	adds	r3, #80	; 0x50
 800e180:	461a      	mov	r2, r3
 800e182:	490c      	ldr	r1, [pc, #48]	; (800e1b4 <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0xa8>)
 800e184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e186:	f7f9 f950 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(ShiftKey, shift_);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3354      	adds	r3, #84	; 0x54
 800e18e:	461a      	mov	r2, r3
 800e190:	4909      	ldr	r1, [pc, #36]	; (800e1b8 <_ZN2ps12PeriodicTest8getParamERN11ArduinoJson10JsonObjectE+0xac>)
 800e192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e194:	f7f9 f939 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        }
    }
 800e198:	f107 030c 	add.w	r3, r7, #12
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f4 fb4d 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 800e1a2:	3730      	adds	r7, #48	; 0x30
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	20008564 	.word	0x20008564
 800e1ac:	2000857c 	.word	0x2000857c
 800e1b0:	20008594 	.word	0x20008594
 800e1b4:	200085ac 	.word	0x200085ac
 800e1b8:	200085c4 	.word	0x200085c4

0800e1bc <_ZN2ps12PeriodicTest8setParamERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus PeriodicTest::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08e      	sub	sp, #56	; 0x38
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7f3 f8f8 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 800e1d0:	68b9      	ldr	r1, [r7, #8]
 800e1d2:	f107 0014 	add.w	r0, r7, #20
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	f7f8 fe6d 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 800e1de:	f107 0314 	add.w	r3, r7, #20
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f7f4 fb91 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 800e1ea:	f107 0314 	add.w	r3, r7, #20
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f4 fb24 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>

        // Extract parameter JsonObjects
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	6879      	ldr	r1, [r7, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f8 feaa 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800e200:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	f083 0301 	eor.w	r3, r3, #1
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d12c      	bne.n	800e26a <_ZN2ps12PeriodicTest8setParamERN11ArduinoJson10JsonObjectES3_+0xae>
        {
            return status;
        }

        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	4618      	mov	r0, r3
 800e218:	f7f8 fe9c 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800e21c:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	f083 0301 	eor.w	r3, r3, #1
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d120      	bne.n	800e26e <_ZN2ps12PeriodicTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb2>
        {
            return status;
        }

        // Set parameters
        setAmplitudeFromJson(jsonMsgPrm,jsonDatPrm,status);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e230:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e232:	68b8      	ldr	r0, [r7, #8]
 800e234:	f000 f820 	bl	800e278 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setOffsetFromJson(jsonMsgPrm,jsonDatPrm,status);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e23e:	68b8      	ldr	r0, [r7, #8]
 800e240:	f000 f8d0 	bl	800e3e4 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setPeriodFromJson(jsonMsgPrm,jsonDatPrm,status);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e248:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e24a:	68b8      	ldr	r0, [r7, #8]
 800e24c:	f000 f980 	bl	800e550 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setNumCyclesFromJson(jsonMsgPrm,jsonDatPrm,status);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e256:	68b8      	ldr	r0, [r7, #8]
 800e258:	f000 fa02 	bl	800e660 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setShiftFromJson(jsonMsgPrm,jsonDatPrm,status);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e262:	68b8      	ldr	r0, [r7, #8]
 800e264:	f000 fa7a 	bl	800e75c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>

        return status;
 800e268:	e002      	b.n	800e270 <_ZN2ps12PeriodicTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb4>
            return status;
 800e26a:	bf00      	nop
 800e26c:	e000      	b.n	800e270 <_ZN2ps12PeriodicTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb4>
            return status;
 800e26e:	bf00      	nop
    }
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	3738      	adds	r7, #56	; 0x38
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    // Protected Methods
    // ------------------------------------------------------------------------
    
    void PeriodicTest::setAmplitudeFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b09f      	sub	sp, #124	; 0x7c
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(AmplitudeKey))
 800e286:	4955      	ldr	r1, [pc, #340]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e288:	68b8      	ldr	r0, [r7, #8]
 800e28a:	f7f6 f94a 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 809e 	beq.w	800e3d2 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
        {
            if (jsonMsgPrm[AmplitudeKey].is<float>())
 800e296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e29a:	4a50      	ldr	r2, [pc, #320]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e29c:	68b9      	ldr	r1, [r7, #8]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f6 f975 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7f9 f9f6 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	bf00      	nop
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d01f      	beq.n	800e2f8 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x80>
            {
                setAmplitude(jsonMsgPrm.get<float>(AmplitudeKey));
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3358      	adds	r3, #88	; 0x58
 800e2be:	681c      	ldr	r4, [r3, #0]
 800e2c0:	4946      	ldr	r1, [pc, #280]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e2c2:	68b8      	ldr	r0, [r7, #8]
 800e2c4:	f7f9 f8c1 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e2c8:	eef0 7a40 	vmov.f32	s15, s0
 800e2cc:	eeb0 0a67 	vmov.f32	s0, s15
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	47a0      	blx	r4
                jsonDatPrm.set(AmplitudeKey,getAmplitude());
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	335c      	adds	r3, #92	; 0x5c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	4798      	blx	r3
 800e2e0:	eef0 7a40 	vmov.f32	s15, s0
 800e2e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800e2e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	493b      	ldr	r1, [pc, #236]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7f9 f88a 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = AmplitudeKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800e2f6:	e06c      	b.n	800e3d2 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
            else if (jsonMsgPrm[AmplitudeKey].is<long>()) 
 800e2f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2fc:	4a37      	ldr	r2, [pc, #220]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	4618      	mov	r0, r3
 800e302:	f7f6 f944 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f9 fa05 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e312:	4603      	mov	r3, r0
 800e314:	bf00      	nop
 800e316:	2b00      	cmp	r3, #0
 800e318:	d021      	beq.n	800e35e <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xe6>
                setAmplitude(float(jsonMsgPrm.get<long>(AmplitudeKey)));
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3358      	adds	r3, #88	; 0x58
 800e320:	681c      	ldr	r4, [r3, #0]
 800e322:	492e      	ldr	r1, [pc, #184]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e324:	68b8      	ldr	r0, [r7, #8]
 800e326:	f7f9 f8a0 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e32a:	ee07 0a90 	vmov	s15, r0
 800e32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e332:	eeb0 0a67 	vmov.f32	s0, s15
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	47a0      	blx	r4
                jsonDatPrm.set(AmplitudeKey,getAmplitude());
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	335c      	adds	r3, #92	; 0x5c
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	4798      	blx	r3
 800e346:	eef0 7a40 	vmov.f32	s15, s0
 800e34a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800e34e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e352:	461a      	mov	r2, r3
 800e354:	4921      	ldr	r1, [pc, #132]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7f9 f857 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800e35c:	e039      	b.n	800e3d2 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
                status.success = false;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2200      	movs	r2, #0
 800e362:	701a      	strb	r2, [r3, #0]
                string errorMsg = AmplitudeKey + string(" not a float");
 800e364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e368:	4618      	mov	r0, r3
 800e36a:	f010 f884 	bl	801e476 <_ZNSaIcEC1Ev>
 800e36e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e376:	491a      	ldr	r1, [pc, #104]	; (800e3e0 <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x168>)
 800e378:	4618      	mov	r0, r3
 800e37a:	f010 fb23 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e37e:	f107 0314 	add.w	r3, r7, #20
 800e382:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e386:	4915      	ldr	r1, [pc, #84]	; (800e3dc <_ZN2ps12PeriodicTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f6 f8e8 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e38e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e392:	4618      	mov	r0, r3
 800e394:	f010 f96f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e39c:	4618      	mov	r0, r3
 800e39e:	f010 f86b 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800e3a2:	f107 0214 	add.w	r2, r7, #20
 800e3a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f010 fad5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e3b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6838      	ldr	r0, [r7, #0]
 800e3ba:	f000 fbf9 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e3be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f010 f957 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800e3c8:	f107 0314 	add.w	r3, r7, #20
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f010 f952 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e3d2:	bf00      	nop
 800e3d4:	377c      	adds	r7, #124	; 0x7c
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd90      	pop	{r4, r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	20008564 	.word	0x20008564
 800e3e0:	08021b60 	.word	0x08021b60

0800e3e4 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void PeriodicTest::setOffsetFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b09f      	sub	sp, #124	; 0x7c
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(OffsetKey))
 800e3f2:	4955      	ldr	r1, [pc, #340]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e3f4:	68b8      	ldr	r0, [r7, #8]
 800e3f6:	f7f6 f894 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f000 809e 	beq.w	800e53e <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
        {
            if (jsonMsgPrm[OffsetKey].is<float>())
 800e402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e406:	4a50      	ldr	r2, [pc, #320]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e408:	68b9      	ldr	r1, [r7, #8]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f6 f8bf 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f7f9 f940 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e41c:	4603      	mov	r3, r0
 800e41e:	bf00      	nop
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01f      	beq.n	800e464 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x80>
            {
                setOffset(jsonMsgPrm.get<float>(OffsetKey));
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3360      	adds	r3, #96	; 0x60
 800e42a:	681c      	ldr	r4, [r3, #0]
 800e42c:	4946      	ldr	r1, [pc, #280]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e42e:	68b8      	ldr	r0, [r7, #8]
 800e430:	f7f9 f80b 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e434:	eef0 7a40 	vmov.f32	s15, s0
 800e438:	eeb0 0a67 	vmov.f32	s0, s15
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	47a0      	blx	r4
                jsonDatPrm.set(OffsetKey,getOffset());
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	3364      	adds	r3, #100	; 0x64
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	4798      	blx	r3
 800e44c:	eef0 7a40 	vmov.f32	s15, s0
 800e450:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800e454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e458:	461a      	mov	r2, r3
 800e45a:	493b      	ldr	r1, [pc, #236]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7f8 ffd4 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = OffsetKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800e462:	e06c      	b.n	800e53e <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
            else if (jsonMsgPrm[OffsetKey].is<long>())
 800e464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e468:	4a37      	ldr	r2, [pc, #220]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f6 f88e 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7f9 f94f 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e47e:	4603      	mov	r3, r0
 800e480:	bf00      	nop
 800e482:	2b00      	cmp	r3, #0
 800e484:	d021      	beq.n	800e4ca <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xe6>
                setOffset(float(jsonMsgPrm.get<long>(OffsetKey)));
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3360      	adds	r3, #96	; 0x60
 800e48c:	681c      	ldr	r4, [r3, #0]
 800e48e:	492e      	ldr	r1, [pc, #184]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e490:	68b8      	ldr	r0, [r7, #8]
 800e492:	f7f8 ffea 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e496:	ee07 0a90 	vmov	s15, r0
 800e49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e49e:	eeb0 0a67 	vmov.f32	s0, s15
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	47a0      	blx	r4
                jsonDatPrm.set(OffsetKey,getOffset());
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3364      	adds	r3, #100	; 0x64
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	4798      	blx	r3
 800e4b2:	eef0 7a40 	vmov.f32	s15, s0
 800e4b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800e4ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e4be:	461a      	mov	r2, r3
 800e4c0:	4921      	ldr	r1, [pc, #132]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7f8 ffa1 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800e4c8:	e039      	b.n	800e53e <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x15a>
                status.success = false;
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]
                string errorMsg = OffsetKey + string(" not a float");
 800e4d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f00f ffce 	bl	801e476 <_ZNSaIcEC1Ev>
 800e4da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e4de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e4e2:	491a      	ldr	r1, [pc, #104]	; (800e54c <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x168>)
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f010 fa6d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e4ea:	f107 0314 	add.w	r3, r7, #20
 800e4ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e4f2:	4915      	ldr	r1, [pc, #84]	; (800e548 <_ZN2ps12PeriodicTest17setOffsetFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x164>)
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f6 f832 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e4fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e4fe:	4618      	mov	r0, r3
 800e500:	f010 f8b9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e504:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e508:	4618      	mov	r0, r3
 800e50a:	f00f ffb5 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800e50e:	f107 0214 	add.w	r2, r7, #20
 800e512:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e516:	4611      	mov	r1, r2
 800e518:	4618      	mov	r0, r3
 800e51a:	f010 fa1f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e51e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e522:	4619      	mov	r1, r3
 800e524:	6838      	ldr	r0, [r7, #0]
 800e526:	f000 fb43 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e52a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e52e:	4618      	mov	r0, r3
 800e530:	f010 f8a1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800e534:	f107 0314 	add.w	r3, r7, #20
 800e538:	4618      	mov	r0, r3
 800e53a:	f010 f89c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e53e:	bf00      	nop
 800e540:	377c      	adds	r7, #124	; 0x7c
 800e542:	46bd      	mov	sp, r7
 800e544:	bd90      	pop	{r4, r7, pc}
 800e546:	bf00      	nop
 800e548:	2000857c 	.word	0x2000857c
 800e54c:	08021b60 	.word	0x08021b60

0800e550 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void PeriodicTest::setPeriodFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800e550:	b590      	push	{r4, r7, lr}
 800e552:	b09b      	sub	sp, #108	; 0x6c
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(PeriodKey))
 800e55e:	493e      	ldr	r1, [pc, #248]	; (800e658 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800e560:	68b8      	ldr	r0, [r7, #8]
 800e562:	f7f5 ffde 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d070      	beq.n	800e64e <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfe>
        {
            if (jsonMsgPrm[PeriodKey].is<unsigned long>())
 800e56c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e570:	4a39      	ldr	r2, [pc, #228]	; (800e658 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800e572:	68b9      	ldr	r1, [r7, #8]
 800e574:	4618      	mov	r0, r3
 800e576:	f7f6 f80a 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e57e:	4611      	mov	r1, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f7f9 f908 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e586:	4603      	mov	r3, r0
 800e588:	bf00      	nop
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d025      	beq.n	800e5da <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x8a>
            {
                setPeriod(convertMsToUs(jsonMsgPrm.get<unsigned long>(PeriodKey)));
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3368      	adds	r3, #104	; 0x68
 800e594:	681c      	ldr	r4, [r3, #0]
 800e596:	4930      	ldr	r1, [pc, #192]	; (800e658 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800e598:	68b8      	ldr	r0, [r7, #8]
 800e59a:	f7f8 ff74 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f3 f94e 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	47a0      	blx	r4
                jsonDatPrm.set(PeriodKey,convertUsToMs(getPeriod()));
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	336c      	adds	r3, #108	; 0x6c
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	4798      	blx	r3
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f7f3 f92a 	bl	800181a <_ZN2ps13convertUsToMsEy>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	4921      	ldr	r1, [pc, #132]	; (800e658 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f8 ff29 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = PeriodKey + string(" not uint32");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800e5d8:	e039      	b.n	800e64e <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xfe>
                status.success = false;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	701a      	strb	r2, [r3, #0]
                string errorMsg = PeriodKey + string(" not uint32");
 800e5e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f00f ff46 	bl	801e476 <_ZNSaIcEC1Ev>
 800e5ea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e5ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e5f2:	491a      	ldr	r1, [pc, #104]	; (800e65c <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x10c>)
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f010 f9e5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e5fa:	f107 0310 	add.w	r3, r7, #16
 800e5fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e602:	4915      	ldr	r1, [pc, #84]	; (800e658 <_ZN2ps12PeriodicTest17setPeriodFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x108>)
 800e604:	4618      	mov	r0, r3
 800e606:	f7f5 ffaa 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e60a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e60e:	4618      	mov	r0, r3
 800e610:	f010 f831 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e614:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e618:	4618      	mov	r0, r3
 800e61a:	f00f ff2d 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800e61e:	f107 0210 	add.w	r2, r7, #16
 800e622:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e626:	4611      	mov	r1, r2
 800e628:	4618      	mov	r0, r3
 800e62a:	f010 f997 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e62e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e632:	4619      	mov	r1, r3
 800e634:	6838      	ldr	r0, [r7, #0]
 800e636:	f000 fabb 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e63a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e63e:	4618      	mov	r0, r3
 800e640:	f010 f819 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800e644:	f107 0310 	add.w	r3, r7, #16
 800e648:	4618      	mov	r0, r3
 800e64a:	f010 f814 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e64e:	bf00      	nop
 800e650:	376c      	adds	r7, #108	; 0x6c
 800e652:	46bd      	mov	sp, r7
 800e654:	bd90      	pop	{r4, r7, pc}
 800e656:	bf00      	nop
 800e658:	20008594 	.word	0x20008594
 800e65c:	08021b70 	.word	0x08021b70

0800e660 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void PeriodicTest::setNumCyclesFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800e660:	b590      	push	{r4, r7, lr}
 800e662:	b09b      	sub	sp, #108	; 0x6c
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(NumCyclesKey))
 800e66e:	4939      	ldr	r1, [pc, #228]	; (800e754 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf4>)
 800e670:	68b8      	ldr	r0, [r7, #8]
 800e672:	f7f5 ff56 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d066      	beq.n	800e74a <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xea>
        {
            if (jsonMsgPrm[NumCyclesKey].is<unsigned long>())
 800e67c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e680:	4a34      	ldr	r2, [pc, #208]	; (800e754 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf4>)
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	4618      	mov	r0, r3
 800e686:	f7f5 ff82 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68e:	4611      	mov	r1, r2
 800e690:	4618      	mov	r0, r3
 800e692:	f7f9 f880 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e696:	4603      	mov	r3, r0
 800e698:	bf00      	nop
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d01b      	beq.n	800e6d6 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x76>
            {
                setNumCycles(jsonMsgPrm.get<unsigned long>(NumCyclesKey));
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3370      	adds	r3, #112	; 0x70
 800e6a4:	681c      	ldr	r4, [r3, #0]
 800e6a6:	492b      	ldr	r1, [pc, #172]	; (800e754 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf4>)
 800e6a8:	68b8      	ldr	r0, [r7, #8]
 800e6aa:	f7f8 feec 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	47a0      	blx	r4
                jsonDatPrm.set(NumCyclesKey,getNumCycles());
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3374      	adds	r3, #116	; 0x74
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	4798      	blx	r3
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	4921      	ldr	r1, [pc, #132]	; (800e754 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf4>)
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7f8 feab 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = NumCyclesKey + string(" not uint32");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800e6d4:	e039      	b.n	800e74a <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xea>
                status.success = false;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	701a      	strb	r2, [r3, #0]
                string errorMsg = NumCyclesKey + string(" not uint32");
 800e6dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f00f fec8 	bl	801e476 <_ZNSaIcEC1Ev>
 800e6e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e6ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e6ee:	491a      	ldr	r1, [pc, #104]	; (800e758 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf8>)
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f010 f967 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e6f6:	f107 0310 	add.w	r3, r7, #16
 800e6fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e6fe:	4915      	ldr	r1, [pc, #84]	; (800e754 <_ZN2ps12PeriodicTest20setNumCyclesFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xf4>)
 800e700:	4618      	mov	r0, r3
 800e702:	f7f5 ff2c 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e706:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e70a:	4618      	mov	r0, r3
 800e70c:	f00f ffb3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e714:	4618      	mov	r0, r3
 800e716:	f00f feaf 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800e71a:	f107 0210 	add.w	r2, r7, #16
 800e71e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f010 f919 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e72a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e72e:	4619      	mov	r1, r3
 800e730:	6838      	ldr	r0, [r7, #0]
 800e732:	f000 fa3d 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e736:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e73a:	4618      	mov	r0, r3
 800e73c:	f00f ff9b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800e740:	f107 0310 	add.w	r3, r7, #16
 800e744:	4618      	mov	r0, r3
 800e746:	f00f ff96 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e74a:	bf00      	nop
 800e74c:	376c      	adds	r7, #108	; 0x6c
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd90      	pop	{r4, r7, pc}
 800e752:	bf00      	nop
 800e754:	200085ac 	.word	0x200085ac
 800e758:	08021b70 	.word	0x08021b70

0800e75c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void PeriodicTest::setShiftFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b0b2      	sub	sp, #200	; 0xc8
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(ShiftKey))
 800e76a:	497c      	ldr	r1, [pc, #496]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e76c:	68b8      	ldr	r0, [r7, #8]
 800e76e:	f7f5 fed8 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 80ed 	beq.w	800e954 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x1f8>
        {
            if (jsonMsgPrm[ShiftKey].is<float>() || jsonMsgPrm[ShiftKey].is<long>())
 800e77a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e77e:	4a77      	ldr	r2, [pc, #476]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e780:	68b9      	ldr	r1, [r7, #8]
 800e782:	4618      	mov	r0, r3
 800e784:	f7f5 ff03 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e78a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7f8 ff84 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e794:	4603      	mov	r3, r0
 800e796:	bf00      	nop
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d110      	bne.n	800e7be <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x62>
 800e79c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7a0:	4a6e      	ldr	r2, [pc, #440]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e7a2:	68b9      	ldr	r1, [r7, #8]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f5 fef2 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f8 ffb3 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	bf00      	nop
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x66>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x68>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 808b 	beq.w	800e8e0 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x184>
            {
                float shiftTmp = 0.0;
 800e7ca:	f04f 0300 	mov.w	r3, #0
 800e7ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                if (jsonMsgPrm[ShiftKey].is<float>())
 800e7d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e7d6:	4a61      	ldr	r2, [pc, #388]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e7d8:	68b9      	ldr	r1, [r7, #8]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7f5 fed7 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800e7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f8 ff58 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	bf00      	nop
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d006      	beq.n	800e802 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xa6>
                { 
                    shiftTmp = jsonMsgPrm.get<float>(ShiftKey);
 800e7f4:	4959      	ldr	r1, [pc, #356]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e7f6:	68b8      	ldr	r0, [r7, #8]
 800e7f8:	f7f8 fe27 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e7fc:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
 800e800:	e009      	b.n	800e816 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xba>
                }
                else
                { 
                    shiftTmp = float(jsonMsgPrm.get<long>(ShiftKey));
 800e802:	4956      	ldr	r1, [pc, #344]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e804:	68b8      	ldr	r0, [r7, #8]
 800e806:	f7f8 fe30 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800e80a:	ee07 0a90 	vmov	s15, r0
 800e80e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e812:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                }

                if ((shiftTmp >= 0.0) || (shiftTmp <= 1.0))
 800e816:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800e81a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e822:	da08      	bge.n	800e836 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xda>
 800e824:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800e828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e82c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e834:	d819      	bhi.n	800e86a <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x10e>
                {
                    setShift(shiftTmp);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3378      	adds	r3, #120	; 0x78
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	4798      	blx	r3
                    jsonDatPrm.set(ShiftKey,getShift());
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	337c      	adds	r3, #124	; 0x7c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	4798      	blx	r3
 800e852:	eef0 7a40 	vmov.f32	s15, s0
 800e856:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800e85a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e85e:	461a      	mov	r2, r3
 800e860:	493e      	ldr	r1, [pc, #248]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7f8 fdd1 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = ShiftKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800e868:	e074      	b.n	800e954 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x1f8>
                    status.success = false;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	2200      	movs	r2, #0
 800e86e:	701a      	strb	r2, [r3, #0]
                    string errorMsg = ShiftKey + string(" out of range");
 800e870:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e874:	4618      	mov	r0, r3
 800e876:	f00f fdfe 	bl	801e476 <_ZNSaIcEC1Ev>
 800e87a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800e87e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e882:	4937      	ldr	r1, [pc, #220]	; (800e960 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x204>)
 800e884:	4618      	mov	r0, r3
 800e886:	f010 f89d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e88a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e88e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e892:	4932      	ldr	r1, [pc, #200]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e894:	4618      	mov	r0, r3
 800e896:	f7f5 fe62 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e89a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f00f fee9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e8a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f00f fde5 	bl	801e478 <_ZNSaIcED1Ev>
                    status.appendToMessage(errorMsg);
 800e8ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e8b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f010 f84f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e8be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	6838      	ldr	r0, [r7, #0]
 800e8c6:	f000 f973 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e8ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f00f fed1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                }
 800e8d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f00f fecc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e8de:	e039      	b.n	800e954 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x1f8>
                status.success = false;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]
                string errorMsg = ShiftKey + string(" not a float");
 800e8e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f00f fdc3 	bl	801e476 <_ZNSaIcEC1Ev>
 800e8f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e8f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e8f8:	491a      	ldr	r1, [pc, #104]	; (800e964 <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x208>)
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f010 f862 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e900:	f107 0310 	add.w	r3, r7, #16
 800e904:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800e908:	4914      	ldr	r1, [pc, #80]	; (800e95c <_ZN2ps12PeriodicTest16setShiftFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x200>)
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f5 fe27 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800e910:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e914:	4618      	mov	r0, r3
 800e916:	f00f feae 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e91a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e91e:	4618      	mov	r0, r3
 800e920:	f00f fdaa 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800e924:	f107 0210 	add.w	r2, r7, #16
 800e928:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f010 f814 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800e934:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e938:	4619      	mov	r1, r3
 800e93a:	6838      	ldr	r0, [r7, #0]
 800e93c:	f000 f938 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800e940:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e944:	4618      	mov	r0, r3
 800e946:	f00f fe96 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800e94a:	f107 0310 	add.w	r3, r7, #16
 800e94e:	4618      	mov	r0, r3
 800e950:	f00f fe91 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800e954:	bf00      	nop
 800e956:	37c8      	adds	r7, #200	; 0xc8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	200085c4 	.word	0x200085c4
 800e960:	08021b7c 	.word	0x08021b7c
 800e964:	08021b60 	.word	0x08021b60

0800e968 <_ZN2ps12PeriodicTest15updateShiftInUsEv>:


    void PeriodicTest::updateShiftInUs()
    {
 800e968:	b5b0      	push	{r4, r5, r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
        shiftInUs_ = uint64_t(double(shift_)*period_);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e974:	4618      	mov	r0, r3
 800e976:	f7f1 fda5 	bl	80004c4 <__aeabi_f2d>
 800e97a:	4604      	mov	r4, r0
 800e97c:	460d      	mov	r5, r1
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800e984:	4610      	mov	r0, r2
 800e986:	4619      	mov	r1, r3
 800e988:	f7f1 fdbe 	bl	8000508 <__aeabi_ul2d>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	4620      	mov	r0, r4
 800e992:	4629      	mov	r1, r5
 800e994:	f7f1 fdee 	bl	8000574 <__aeabi_dmul>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	4610      	mov	r0, r2
 800e99e:	4619      	mov	r1, r3
 800e9a0:	f7f2 fa76 	bl	8000e90 <__aeabi_d2ulz>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    }
 800e9ae:	bf00      	nop
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e9b8 <_Z41__static_initialization_and_destruction_0ii>:

}
 800e9b8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ba:	b08c      	sub	sp, #48	; 0x30
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	f040 80aa 	bne.w	800eb1e <_Z41__static_initialization_and_destruction_0ii+0x166>
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	f040 80a4 	bne.w	800eb1e <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800e9d6:	4c61      	ldr	r4, [pc, #388]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800e9d8:	4625      	mov	r5, r4
 800e9da:	f107 030c 	add.w	r3, r7, #12
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f00f fd49 	bl	801e476 <_ZNSaIcEC1Ev>
 800e9e4:	f107 030c 	add.w	r3, r7, #12
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	495d      	ldr	r1, [pc, #372]	; (800eb60 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f00f ffe9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e9f2:	f107 030c 	add.w	r3, r7, #12
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f00f fd3e 	bl	801e478 <_ZNSaIcED1Ev>
 800e9fc:	3418      	adds	r4, #24
 800e9fe:	f107 0310 	add.w	r3, r7, #16
 800ea02:	4618      	mov	r0, r3
 800ea04:	f00f fd37 	bl	801e476 <_ZNSaIcEC1Ev>
 800ea08:	f107 0310 	add.w	r3, r7, #16
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	4955      	ldr	r1, [pc, #340]	; (800eb64 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800ea10:	4620      	mov	r0, r4
 800ea12:	f00f ffd7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ea16:	f107 0310 	add.w	r3, r7, #16
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f00f fd2c 	bl	801e478 <_ZNSaIcED1Ev>
 800ea20:	3418      	adds	r4, #24
 800ea22:	f107 0314 	add.w	r3, r7, #20
 800ea26:	4618      	mov	r0, r3
 800ea28:	f00f fd25 	bl	801e476 <_ZNSaIcEC1Ev>
 800ea2c:	f107 0314 	add.w	r3, r7, #20
 800ea30:	461a      	mov	r2, r3
 800ea32:	494d      	ldr	r1, [pc, #308]	; (800eb68 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800ea34:	4620      	mov	r0, r4
 800ea36:	f00f ffc5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f00f fd1a 	bl	801e478 <_ZNSaIcED1Ev>
 800ea44:	3418      	adds	r4, #24
 800ea46:	f107 0318 	add.w	r3, r7, #24
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f00f fd13 	bl	801e476 <_ZNSaIcEC1Ev>
 800ea50:	f107 0318 	add.w	r3, r7, #24
 800ea54:	461a      	mov	r2, r3
 800ea56:	4945      	ldr	r1, [pc, #276]	; (800eb6c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f00f ffb3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ea5e:	f107 0318 	add.w	r3, r7, #24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f00f fd08 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800ea68:	4c41      	ldr	r4, [pc, #260]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800ea6a:	4625      	mov	r5, r4
 800ea6c:	f107 031c 	add.w	r3, r7, #28
 800ea70:	4618      	mov	r0, r3
 800ea72:	f00f fd00 	bl	801e476 <_ZNSaIcEC1Ev>
 800ea76:	f107 031c 	add.w	r3, r7, #28
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	493d      	ldr	r1, [pc, #244]	; (800eb74 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f00f ffa0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ea84:	f107 031c 	add.w	r3, r7, #28
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f00f fcf5 	bl	801e478 <_ZNSaIcED1Ev>
 800ea8e:	3418      	adds	r4, #24
 800ea90:	f107 0320 	add.w	r3, r7, #32
 800ea94:	4618      	mov	r0, r3
 800ea96:	f00f fcee 	bl	801e476 <_ZNSaIcEC1Ev>
 800ea9a:	f107 0320 	add.w	r3, r7, #32
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	4935      	ldr	r1, [pc, #212]	; (800eb78 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f00f ff8e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800eaa8:	f107 0320 	add.w	r3, r7, #32
 800eaac:	4618      	mov	r0, r3
 800eaae:	f00f fce3 	bl	801e478 <_ZNSaIcED1Ev>
 800eab2:	3418      	adds	r4, #24
 800eab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f00f fcdc 	bl	801e476 <_ZNSaIcEC1Ev>
 800eabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eac2:	461a      	mov	r2, r3
 800eac4:	492d      	ldr	r1, [pc, #180]	; (800eb7c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800eac6:	4620      	mov	r0, r4
 800eac8:	f00f ff7c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800eacc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ead0:	4618      	mov	r0, r3
 800ead2:	f00f fcd1 	bl	801e478 <_ZNSaIcED1Ev>
 800ead6:	3418      	adds	r4, #24
 800ead8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eadc:	4618      	mov	r0, r3
 800eade:	f00f fcca 	bl	801e476 <_ZNSaIcEC1Ev>
 800eae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eae6:	461a      	mov	r2, r3
 800eae8:	4925      	ldr	r1, [pc, #148]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800eaea:	4620      	mov	r0, r4
 800eaec:	f00f ff6a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800eaf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f00f fcbf 	bl	801e478 <_ZNSaIcED1Ev>
 800eafa:	3418      	adds	r4, #24
 800eafc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb00:	4618      	mov	r0, r3
 800eb02:	f00f fcb8 	bl	801e476 <_ZNSaIcEC1Ev>
 800eb06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	491d      	ldr	r1, [pc, #116]	; (800eb84 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f00f ff58 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800eb14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f00f fcad 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d116      	bne.n	800eb52 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d111      	bne.n	800eb52 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800eb2e:	4c16      	ldr	r4, [pc, #88]	; (800eb88 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800eb30:	4b0f      	ldr	r3, [pc, #60]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800eb32:	429c      	cmp	r4, r3
 800eb34:	d004      	beq.n	800eb40 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800eb36:	3c18      	subs	r4, #24
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f00f fd9c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eb3e:	e7f7      	b.n	800eb30 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800eb40:	4c12      	ldr	r4, [pc, #72]	; (800eb8c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800eb42:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800eb44:	429c      	cmp	r4, r3
 800eb46:	d004      	beq.n	800eb52 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800eb48:	3c18      	subs	r4, #24
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f00f fd93 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eb50:	e7f7      	b.n	800eb42 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800eb52:	bf00      	nop
 800eb54:	3730      	adds	r7, #48	; 0x30
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20009758 	.word	0x20009758
 800eb60:	08021b8c 	.word	0x08021b8c
 800eb64:	08021b98 	.word	0x08021b98
 800eb68:	08021ba4 	.word	0x08021ba4
 800eb6c:	08021bb0 	.word	0x08021bb0
 800eb70:	200097b8 	.word	0x200097b8
 800eb74:	08021bbc 	.word	0x08021bbc
 800eb78:	08021bcc 	.word	0x08021bcc
 800eb7c:	08021bdc 	.word	0x08021bdc
 800eb80:	08021bec 	.word	0x08021bec
 800eb84:	08021bfc 	.word	0x08021bfc
 800eb88:	20009830 	.word	0x20009830
 800eb8c:	200097b8 	.word	0x200097b8

0800eb90 <_GLOBAL__sub_I__ZN2ps12PeriodicTestC2Ev>:
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb98:	2001      	movs	r0, #1
 800eb9a:	f7ff ff0d 	bl	800e9b8 <_Z41__static_initialization_and_destruction_0ii>
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <_GLOBAL__sub_D__ZN2ps12PeriodicTestC2Ev>:
 800eba0:	b580      	push	{r7, lr}
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f7ff ff05 	bl	800e9b8 <_Z41__static_initialization_and_destruction_0ii>
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
using namespace std;

namespace ps
{
    void ReturnStatus::appendToMessage(string value)
    {
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
        if (message.length() > 0)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f00f fd92 	bl	801e6e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	bf14      	ite	ne
 800ebca:	2301      	movne	r3, #1
 800ebcc:	2300      	moveq	r3, #0
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
        {
            message += ", ";
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	4906      	ldr	r1, [pc, #24]	; (800ebf4 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>)
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f00f fe84 	bl	801e8e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
        }
        message += value;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3304      	adds	r3, #4
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f00f fe64 	bl	801e8b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
    }
 800ebec:	bf00      	nop
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	08021c0c 	.word	0x08021c0c

0800ebf8 <_ZN2ps12SinusoidTestC1Ev>:
#include <math.h>

namespace ps
{ 

    SinusoidTest::SinusoidTest() : PeriodicTest()
 800ebf8:	b590      	push	{r4, r7, lr}
 800ebfa:	b08b      	sub	sp, #44	; 0x2c
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7ff f8f8 	bl	800ddf8 <_ZN2ps12PeriodicTestC1Ev>
 800ec08:	4a19      	ldr	r2, [pc, #100]	; (800ec70 <_ZN2ps12SinusoidTestC1Ev+0x78>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	601a      	str	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	3360      	adds	r3, #96	; 0x60
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 f94a 	bl	800eeac <_ZN2ps11LookupTableIfLj300EEC1Ev>
    {
        updateLookupTable();
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 f8e1 	bl	800ede0 <_ZN2ps12SinusoidTest17updateLookupTableEv>
        setName("sinusoid");
 800ec1e:	687c      	ldr	r4, [r7, #4]
 800ec20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec24:	4618      	mov	r0, r3
 800ec26:	f00f fc26 	bl	801e476 <_ZNSaIcEC1Ev>
 800ec2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ec2e:	f107 030c 	add.w	r3, r7, #12
 800ec32:	4910      	ldr	r1, [pc, #64]	; (800ec74 <_ZN2ps12SinusoidTestC1Ev+0x7c>)
 800ec34:	4618      	mov	r0, r3
 800ec36:	f00f fec5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ec3a:	f107 030c 	add.w	r3, r7, #12
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7f8 f8c1 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ec46:	f107 030c 	add.w	r3, r7, #12
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f00f fd13 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ec50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec54:	4618      	mov	r0, r3
 800ec56:	f00f fc0f 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2101      	movs	r1, #1
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7f8 f967 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    }
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4618      	mov	r0, r3
 800ec68:	372c      	adds	r7, #44	; 0x2c
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd90      	pop	{r4, r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	080224e8 	.word	0x080224e8
 800ec74:	08021c10 	.word	0x08021c10

0800ec78 <_ZN2ps12SinusoidTest12setAmplitudeEf>:


    void SinusoidTest::setAmplitude(float amplitude)
    {
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	ed87 0a00 	vstr	s0, [r7]
        PeriodicTest::setAmplitude(amplitude);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	ed97 0a00 	vldr	s0, [r7]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff f908 	bl	800dea0 <_ZN2ps12PeriodicTest12setAmplitudeEf>
        updateLookupTable();
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 f8a5 	bl	800ede0 <_ZN2ps12SinusoidTest17updateLookupTableEv>
    }
 800ec96:	bf00      	nop
 800ec98:	3708      	adds	r7, #8
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <_ZN2ps12SinusoidTest9setOffsetEf>:


    void SinusoidTest::setOffset(float offset)
    {
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b082      	sub	sp, #8
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
 800eca6:	ed87 0a00 	vstr	s0, [r7]
        PeriodicTest::setOffset(offset);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	ed97 0a00 	vldr	s0, [r7]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff f913 	bl	800dedc <_ZN2ps12PeriodicTest9setOffsetEf>
        updateLookupTable();
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f892 	bl	800ede0 <_ZN2ps12SinusoidTest17updateLookupTableEv>
    }
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <_ZNK2ps12SinusoidTest8getValueEy>:


    float SinusoidTest::getValue(uint64_t t) const
    {
 800ecc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecc8:	ed2d 8b02 	vpush	{d8}
 800eccc:	b08e      	sub	sp, #56	; 0x38
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	61f8      	str	r0, [r7, #28]
 800ecd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        float value = 0.0;
 800ecd6:	f04f 0300 	mov.w	r3, #0
 800ecda:	637b      	str	r3, [r7, #52]	; 0x34
        if (t < quietTime_)
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ece2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ece6:	4290      	cmp	r0, r2
 800ece8:	eb71 0303 	sbcs.w	r3, r1, r3
 800ecec:	d203      	bcs.n	800ecf6 <_ZNK2ps12SinusoidTest8getValueEy+0x32>
        {
            value = quietValue_;
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf4:	e066      	b.n	800edc4 <_ZNK2ps12SinusoidTest8getValueEy+0x100>
        }
        else
        {
            uint64_t tmod = (t - quietTime_ + shiftInUs_)%period_;
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ecfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ed00:	1a84      	subs	r4, r0, r2
 800ed02:	eb61 0503 	sbc.w	r5, r1, r3
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800ed0c:	18a1      	adds	r1, r4, r2
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	eb45 0303 	adc.w	r3, r5, r3
 800ed14:	60fb      	str	r3, [r7, #12]
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ed1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ed20:	f7f2 f87e 	bl	8000e20 <__aeabi_uldivmod>
 800ed24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            float pos =  float(tmod*(LookupTableSize-1))/float(period_);
 800ed28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	f04f 0400 	mov.w	r4, #0
 800ed34:	f04f 0500 	mov.w	r5, #0
 800ed38:	009d      	lsls	r5, r3, #2
 800ed3a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ed3e:	0094      	lsls	r4, r2, #2
 800ed40:	4622      	mov	r2, r4
 800ed42:	462b      	mov	r3, r5
 800ed44:	eb12 0a00 	adds.w	sl, r2, r0
 800ed48:	eb43 0b01 	adc.w	fp, r3, r1
 800ed4c:	f04f 0200 	mov.w	r2, #0
 800ed50:	f04f 0300 	mov.w	r3, #0
 800ed54:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800ed58:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800ed5c:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800ed60:	ebb2 080a 	subs.w	r8, r2, sl
 800ed64:	eb63 090b 	sbc.w	r9, r3, fp
 800ed68:	f04f 0200 	mov.w	r2, #0
 800ed6c:	f04f 0300 	mov.w	r3, #0
 800ed70:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ed74:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800ed78:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ed7c:	4690      	mov	r8, r2
 800ed7e:	4699      	mov	r9, r3
 800ed80:	ebb8 0300 	subs.w	r3, r8, r0
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	eb69 0301 	sbc.w	r3, r9, r1
 800ed8a:	607b      	str	r3, [r7, #4]
 800ed8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ed90:	f7f2 f800 	bl	8000d94 <__aeabi_ul2f>
 800ed94:	ee08 0a10 	vmov	s16, r0
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ed9e:	4610      	mov	r0, r2
 800eda0:	4619      	mov	r1, r3
 800eda2:	f7f1 fff7 	bl	8000d94 <__aeabi_ul2f>
 800eda6:	ee07 0a10 	vmov	s14, r0
 800edaa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800edae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            value = lookupTable_.getValue(pos);
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	3360      	adds	r3, #96	; 0x60
 800edb6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 f88e 	bl	800eedc <_ZNK2ps11LookupTableIfLj300EE8getValueEf>
 800edc0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        }
        return value;
 800edc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc6:	ee07 3a90 	vmov	s15, r3
    }
 800edca:	eeb0 0a67 	vmov.f32	s0, s15
 800edce:	3738      	adds	r7, #56	; 0x38
 800edd0:	46bd      	mov	sp, r7
 800edd2:	ecbd 8b02 	vpop	{d8}
 800edd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edda:	0000      	movs	r0, r0
 800eddc:	0000      	movs	r0, r0
	...

0800ede0 <_ZN2ps12SinusoidTest17updateLookupTableEv>:


    void SinusoidTest::updateLookupTable()
    {
 800ede0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ede4:	b084      	sub	sp, #16
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
        for (uint32_t i=0; i<LookupTableSize; i++)
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
 800edee:	e04c      	b.n	800ee8a <_ZN2ps12SinusoidTest17updateLookupTableEv+0xaa>
        {
            float s = float(i)/float(LookupTableSize-1);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	ee07 3a90 	vmov	s15, r3
 800edf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800edfa:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800eea8 <_ZN2ps12SinusoidTest17updateLookupTableEv+0xc8>
 800edfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee02:	edc7 7a02 	vstr	s15, [r7, #8]
            lookupTable_[i] = amplitude_*sin(2.0*M_PI*s) + offset_;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f1 fb5a 	bl	80004c4 <__aeabi_f2d>
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	68b8      	ldr	r0, [r7, #8]
 800ee16:	f7f1 fb55 	bl	80004c4 <__aeabi_f2d>
 800ee1a:	a321      	add	r3, pc, #132	; (adr r3, 800eea0 <_ZN2ps12SinusoidTest17updateLookupTableEv+0xc0>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	f7f1 fba8 	bl	8000574 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	ec43 2b17 	vmov	d7, r2, r3
 800ee2c:	eeb0 0a47 	vmov.f32	s0, s14
 800ee30:	eef0 0a67 	vmov.f32	s1, s15
 800ee34:	f00f ff4c 	bl	801ecd0 <sin>
 800ee38:	ec53 2b10 	vmov	r2, r3, d0
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	f7f1 fb98 	bl	8000574 <__aeabi_dmul>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	461d      	mov	r5, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7f1 fb37 	bl	80004c4 <__aeabi_f2d>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	f7f1 f9d3 	bl	8000208 <__adddf3>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4690      	mov	r8, r2
 800ee68:	4699      	mov	r9, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	3360      	adds	r3, #96	; 0x60
 800ee6e:	68f9      	ldr	r1, [r7, #12]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 f897 	bl	800efa4 <_ZN2ps11LookupTableIfLj300EEixEj>
 800ee76:	4604      	mov	r4, r0
 800ee78:	4640      	mov	r0, r8
 800ee7a:	4649      	mov	r1, r9
 800ee7c:	f7f1 fe72 	bl	8000b64 <__aeabi_d2f>
 800ee80:	4603      	mov	r3, r0
 800ee82:	6023      	str	r3, [r4, #0]
        for (uint32_t i=0; i<LookupTableSize; i++)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	3301      	adds	r3, #1
 800ee88:	60fb      	str	r3, [r7, #12]
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ee90:	d3ae      	bcc.n	800edf0 <_ZN2ps12SinusoidTest17updateLookupTableEv+0x10>
        }

    }
 800ee92:	bf00      	nop
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee9e:	bf00      	nop
 800eea0:	54442d18 	.word	0x54442d18
 800eea4:	401921fb 	.word	0x401921fb
 800eea8:	43958000 	.word	0x43958000

0800eeac <_ZN2ps11LookupTableIfLj300EEC1Ev>:
            Array<T,SIZE> data_;
    };


    template<typename T, size_t SIZE>
    LookupTable<T,SIZE>::LookupTable()
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f000 f883 	bl	800efc2 <_ZN5ArrayIfLj300EEC1Ev>
    {
        T dummy = {};
 800eebc:	f04f 0300 	mov.w	r3, #0
 800eec0:	60fb      	str	r3, [r7, #12]
        data_.fill(dummy);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f107 020c 	add.w	r2, r7, #12
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 f888 	bl	800efe0 <_ZN5ArrayIfLj300EE4fillIfEEvRKT_>
    }
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
	...

0800eedc <_ZNK2ps11LookupTableIfLj300EE8getValueEf>:
        return data_[ind];
    }


    template<typename T, size_t SIZE>
    T LookupTable<T,SIZE>::getValue(T pos) const
 800eedc:	b580      	push	{r7, lr}
 800eede:	ed2d 8b02 	vpush	{d8}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	ed87 0a00 	vstr	s0, [r7]
    {
        T value;
        if (pos < T(0))
 800eeec:	edd7 7a00 	vldr	s15, [r7]
 800eef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef8:	d507      	bpl.n	800ef0a <_ZNK2ps11LookupTableIfLj300EE8getValueEf+0x2e>
        {
            value = data_[0];
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2100      	movs	r1, #0
 800eefe:	4618      	mov	r0, r3
 800ef00:	f000 f87d 	bl	800effe <_ZNK5ArrayIfLj300EEixEj>
 800ef04:	ed87 0a03 	vstr	s0, [r7, #12]
 800ef08:	e040      	b.n	800ef8c <_ZNK2ps11LookupTableIfLj300EE8getValueEf+0xb0>
        }
        else if (pos > T(SIZE-1))
 800ef0a:	edd7 7a00 	vldr	s15, [r7]
 800ef0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800efa0 <_ZNK2ps11LookupTableIfLj300EE8getValueEf+0xc4>
 800ef12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1a:	dd08      	ble.n	800ef2e <_ZNK2ps11LookupTableIfLj300EE8getValueEf+0x52>
        {
            value = data_[SIZE-1];
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f240 112b 	movw	r1, #299	; 0x12b
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 f86b 	bl	800effe <_ZNK5ArrayIfLj300EEixEj>
 800ef28:	ed87 0a03 	vstr	s0, [r7, #12]
 800ef2c:	e02e      	b.n	800ef8c <_ZNK2ps11LookupTableIfLj300EE8getValueEf+0xb0>
        }
        else
        {
            size_t ind = size_t(pos);
 800ef2e:	edd7 7a00 	vldr	s15, [r7]
 800ef32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef36:	ee17 3a90 	vmov	r3, s15
 800ef3a:	60bb      	str	r3, [r7, #8]
            value = (data_[ind+1] - data_[ind])*(pos - T(ind)) + data_[ind];
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	3301      	adds	r3, #1
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f000 f85a 	bl	800effe <_ZNK5ArrayIfLj300EEixEj>
 800ef4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 f853 	bl	800effe <_ZNK5ArrayIfLj300EEixEj>
 800ef58:	eef0 7a40 	vmov.f32	s15, s0
 800ef5c:	ee38 7a67 	vsub.f32	s14, s16, s15
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	ee07 3a90 	vmov	s15, r3
 800ef66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6a:	edd7 6a00 	vldr	s13, [r7]
 800ef6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ef72:	ee27 8a27 	vmul.f32	s16, s14, s15
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	68b9      	ldr	r1, [r7, #8]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 f83f 	bl	800effe <_ZNK5ArrayIfLj300EEixEj>
 800ef80:	eef0 7a40 	vmov.f32	s15, s0
 800ef84:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ef88:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        return value;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	ee07 3a90 	vmov	s15, r3
    }
 800ef92:	eeb0 0a67 	vmov.f32	s0, s15
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	ecbd 8b02 	vpop	{d8}
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	43958000 	.word	0x43958000

0800efa4 <_ZN2ps11LookupTableIfLj300EEixEj>:
    T & LookupTable<T,SIZE>::operator[](const size_t ind)
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
        return data_[ind];
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 f836 	bl	800f024 <_ZN5ArrayIfLj300EEixEj>
 800efb8:	4603      	mov	r3, r0
    }
 800efba:	4618      	mov	r0, r3
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <_ZN5ArrayIfLj300EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 800efc2:	b480      	push	{r7}
 800efc4:	b083      	sub	sp, #12
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
  size_ = 0;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
}
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <_ZN5ArrayIfLj300EE4fillIfEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f826 	bl	800f042 <_ZN5ArrayIfLj300EE6assignIfEEvjRKT_>
}
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <_ZNK5ArrayIfLj300EEixEj>:
T Array<T, MAX_SIZE>::operator[](const size_t index) const
 800effe:	b480      	push	{r7}
 800f000:	b083      	sub	sp, #12
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
 800f006:	6039      	str	r1, [r7, #0]
  return values_[index];
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	ee07 3a90 	vmov	s15, r3
}
 800f016:	eeb0 0a67 	vmov.f32	s0, s15
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <_ZN5ArrayIfLj300EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  return values_[index];
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	4413      	add	r3, r2
}
 800f036:	4618      	mov	r0, r3
 800f038:	370c      	adds	r7, #12
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr

0800f042 <_ZN5ArrayIfLj300EE6assignIfEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 800f042:	b480      	push	{r7}
 800f044:	b087      	sub	sp, #28
 800f046:	af00      	add	r7, sp, #0
 800f048:	60f8      	str	r0, [r7, #12]
 800f04a:	60b9      	str	r1, [r7, #8]
 800f04c:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f054:	bf28      	it	cs
 800f056:	f44f 7396 	movcs.w	r3, #300	; 0x12c
 800f05a:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
  for (size_t i=0; i<assign_size; ++i)
 800f064:	2300      	movs	r3, #0
 800f066:	617b      	str	r3, [r7, #20]
 800f068:	e009      	b.n	800f07e <_ZN5ArrayIfLj300EE6assignIfEEvjRKT_+0x3c>
    values_[i] = value;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68f9      	ldr	r1, [r7, #12]
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	440b      	add	r3, r1
 800f076:	601a      	str	r2, [r3, #0]
  for (size_t i=0; i<assign_size; ++i)
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	3301      	adds	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	429a      	cmp	r2, r3
 800f084:	d3f1      	bcc.n	800f06a <_ZN5ArrayIfLj300EE6assignIfEEvjRKT_+0x28>
}
 800f086:	bf00      	nop
 800f088:	bf00      	nop
 800f08a:	371c      	adds	r7, #28
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <_Z41__static_initialization_and_destruction_0ii>:

 
} // nanespace ps
 800f094:	b5b0      	push	{r4, r5, r7, lr}
 800f096:	b08c      	sub	sp, #48	; 0x30
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	f040 80aa 	bne.w	800f1fa <_Z41__static_initialization_and_destruction_0ii+0x166>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	f040 80a4 	bne.w	800f1fa <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 800f0b2:	4c61      	ldr	r4, [pc, #388]	; (800f238 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800f0b4:	4625      	mov	r5, r4
 800f0b6:	f107 030c 	add.w	r3, r7, #12
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f00f f9db 	bl	801e476 <_ZNSaIcEC1Ev>
 800f0c0:	f107 030c 	add.w	r3, r7, #12
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	495d      	ldr	r1, [pc, #372]	; (800f23c <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	f00f fc7b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f0ce:	f107 030c 	add.w	r3, r7, #12
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f00f f9d0 	bl	801e478 <_ZNSaIcED1Ev>
 800f0d8:	3418      	adds	r4, #24
 800f0da:	f107 0310 	add.w	r3, r7, #16
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f00f f9c9 	bl	801e476 <_ZNSaIcEC1Ev>
 800f0e4:	f107 0310 	add.w	r3, r7, #16
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4955      	ldr	r1, [pc, #340]	; (800f240 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f00f fc69 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f0f2:	f107 0310 	add.w	r3, r7, #16
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f00f f9be 	bl	801e478 <_ZNSaIcED1Ev>
 800f0fc:	3418      	adds	r4, #24
 800f0fe:	f107 0314 	add.w	r3, r7, #20
 800f102:	4618      	mov	r0, r3
 800f104:	f00f f9b7 	bl	801e476 <_ZNSaIcEC1Ev>
 800f108:	f107 0314 	add.w	r3, r7, #20
 800f10c:	461a      	mov	r2, r3
 800f10e:	494d      	ldr	r1, [pc, #308]	; (800f244 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800f110:	4620      	mov	r0, r4
 800f112:	f00f fc57 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f116:	f107 0314 	add.w	r3, r7, #20
 800f11a:	4618      	mov	r0, r3
 800f11c:	f00f f9ac 	bl	801e478 <_ZNSaIcED1Ev>
 800f120:	3418      	adds	r4, #24
 800f122:	f107 0318 	add.w	r3, r7, #24
 800f126:	4618      	mov	r0, r3
 800f128:	f00f f9a5 	bl	801e476 <_ZNSaIcEC1Ev>
 800f12c:	f107 0318 	add.w	r3, r7, #24
 800f130:	461a      	mov	r2, r3
 800f132:	4945      	ldr	r1, [pc, #276]	; (800f248 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800f134:	4620      	mov	r0, r4
 800f136:	f00f fc45 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f13a:	f107 0318 	add.w	r3, r7, #24
 800f13e:	4618      	mov	r0, r3
 800f140:	f00f f99a 	bl	801e478 <_ZNSaIcED1Ev>
    };
 800f144:	4c41      	ldr	r4, [pc, #260]	; (800f24c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800f146:	4625      	mov	r5, r4
 800f148:	f107 031c 	add.w	r3, r7, #28
 800f14c:	4618      	mov	r0, r3
 800f14e:	f00f f992 	bl	801e476 <_ZNSaIcEC1Ev>
 800f152:	f107 031c 	add.w	r3, r7, #28
 800f156:	461a      	mov	r2, r3
 800f158:	493d      	ldr	r1, [pc, #244]	; (800f250 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800f15a:	4628      	mov	r0, r5
 800f15c:	f00f fc32 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f160:	f107 031c 	add.w	r3, r7, #28
 800f164:	4618      	mov	r0, r3
 800f166:	f00f f987 	bl	801e478 <_ZNSaIcED1Ev>
 800f16a:	3418      	adds	r4, #24
 800f16c:	f107 0320 	add.w	r3, r7, #32
 800f170:	4618      	mov	r0, r3
 800f172:	f00f f980 	bl	801e476 <_ZNSaIcEC1Ev>
 800f176:	f107 0320 	add.w	r3, r7, #32
 800f17a:	461a      	mov	r2, r3
 800f17c:	4935      	ldr	r1, [pc, #212]	; (800f254 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800f17e:	4620      	mov	r0, r4
 800f180:	f00f fc20 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f184:	f107 0320 	add.w	r3, r7, #32
 800f188:	4618      	mov	r0, r3
 800f18a:	f00f f975 	bl	801e478 <_ZNSaIcED1Ev>
 800f18e:	3418      	adds	r4, #24
 800f190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f194:	4618      	mov	r0, r3
 800f196:	f00f f96e 	bl	801e476 <_ZNSaIcEC1Ev>
 800f19a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f19e:	461a      	mov	r2, r3
 800f1a0:	492d      	ldr	r1, [pc, #180]	; (800f258 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f00f fc0e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f00f f963 	bl	801e478 <_ZNSaIcED1Ev>
 800f1b2:	3418      	adds	r4, #24
 800f1b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f00f f95c 	bl	801e476 <_ZNSaIcEC1Ev>
 800f1be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	4925      	ldr	r1, [pc, #148]	; (800f25c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f00f fbfc 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f1cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f00f f951 	bl	801e478 <_ZNSaIcED1Ev>
 800f1d6:	3418      	adds	r4, #24
 800f1d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f00f f94a 	bl	801e476 <_ZNSaIcEC1Ev>
 800f1e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	491d      	ldr	r1, [pc, #116]	; (800f260 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f00f fbea 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f1f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f00f f93f 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d116      	bne.n	800f22e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f206:	4293      	cmp	r3, r2
 800f208:	d111      	bne.n	800f22e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800f20a:	4c16      	ldr	r4, [pc, #88]	; (800f264 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800f20e:	429c      	cmp	r4, r3
 800f210:	d004      	beq.n	800f21c <_Z41__static_initialization_and_destruction_0ii+0x188>
 800f212:	3c18      	subs	r4, #24
 800f214:	4620      	mov	r0, r4
 800f216:	f00f fa2e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f21a:	e7f7      	b.n	800f20c <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 800f21c:	4c12      	ldr	r4, [pc, #72]	; (800f268 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800f21e:	4b06      	ldr	r3, [pc, #24]	; (800f238 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800f220:	429c      	cmp	r4, r3
 800f222:	d004      	beq.n	800f22e <_Z41__static_initialization_and_destruction_0ii+0x19a>
 800f224:	3c18      	subs	r4, #24
 800f226:	4620      	mov	r0, r4
 800f228:	f00f fa25 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f22c:	e7f7      	b.n	800f21e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800f22e:	bf00      	nop
 800f230:	3730      	adds	r7, #48	; 0x30
 800f232:	46bd      	mov	sp, r7
 800f234:	bdb0      	pop	{r4, r5, r7, pc}
 800f236:	bf00      	nop
 800f238:	20009830 	.word	0x20009830
 800f23c:	08021c1c 	.word	0x08021c1c
 800f240:	08021c28 	.word	0x08021c28
 800f244:	08021c34 	.word	0x08021c34
 800f248:	08021c40 	.word	0x08021c40
 800f24c:	20009890 	.word	0x20009890
 800f250:	08021c4c 	.word	0x08021c4c
 800f254:	08021c5c 	.word	0x08021c5c
 800f258:	08021c6c 	.word	0x08021c6c
 800f25c:	08021c7c 	.word	0x08021c7c
 800f260:	08021c8c 	.word	0x08021c8c
 800f264:	20009908 	.word	0x20009908
 800f268:	20009890 	.word	0x20009890

0800f26c <_GLOBAL__sub_I__ZN2ps12SinusoidTestC2Ev>:
 800f26c:	b580      	push	{r7, lr}
 800f26e:	af00      	add	r7, sp, #0
 800f270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f274:	2001      	movs	r0, #1
 800f276:	f7ff ff0d 	bl	800f094 <_Z41__static_initialization_and_destruction_0ii>
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_GLOBAL__sub_D__ZN2ps12SinusoidTestC2Ev>:
 800f27c:	b580      	push	{r7, lr}
 800f27e:	af00      	add	r7, sp, #0
 800f280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f284:	2000      	movs	r0, #0
 800f286:	f7ff ff05 	bl	800f094 <_Z41__static_initialization_and_destruction_0ii>
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	ed87 0a01 	vstr	s0, [r7, #4]
 800f296:	ed97 0a01 	vldr	s0, [r7, #4]
 800f29a:	f00f fe57 	bl	801ef4c <ceilf>
 800f29e:	eef0 7a40 	vmov.f32	s15, s0
 800f2a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800f2b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2ba:	eef0 7ae7 	vabs.f32	s15, s15
 800f2be:	eeb0 0a67 	vmov.f32	s0, s15
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <_ZN2ps14SquareWaveTestC1Ev>:

namespace ps 
{
    // Public methods
    // --------------------------------------------------------------------------------------------
    SquareWaveTest::SquareWaveTest()
 800f2cc:	b590      	push	{r4, r7, lr}
 800f2ce:	b08b      	sub	sp, #44	; 0x2c
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f7 fc34 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 800f2dc:	4a46      	ldr	r2, [pc, #280]	; (800f3f8 <_ZN2ps14SquareWaveTestC1Ev+0x12c>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	601a      	str	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800f2e8:	641a      	str	r2, [r3, #64]	; 0x40
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800f2f0:	645a      	str	r2, [r3, #68]	; 0x44
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a41      	ldr	r2, [pc, #260]	; (800f3fc <_ZN2ps14SquareWaveTestC1Ev+0x130>)
 800f2f6:	649a      	str	r2, [r3, #72]	; 0x48
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4a41      	ldr	r2, [pc, #260]	; (800f400 <_ZN2ps14SquareWaveTestC1Ev+0x134>)
 800f2fc:	64da      	str	r2, [r3, #76]	; 0x4c
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a40      	ldr	r2, [pc, #256]	; (800f404 <_ZN2ps14SquareWaveTestC1Ev+0x138>)
 800f302:	651a      	str	r2, [r3, #80]	; 0x50
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f04f 0200 	mov.w	r2, #0
 800f30a:	655a      	str	r2, [r3, #84]	; 0x54
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f04f 0200 	mov.w	r2, #0
 800f312:	659a      	str	r2, [r3, #88]	; 0x58
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f31a:	65da      	str	r2, [r3, #92]	; 0x5c
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	f04f 0200 	mov.w	r2, #0
 800f322:	f04f 0300 	mov.w	r3, #0
 800f326:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	f04f 0200 	mov.w	r2, #0
 800f33e:	f04f 0300 	mov.w	r3, #0
 800f342:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	f04f 0200 	mov.w	r2, #0
 800f354:	f04f 0300 	mov.w	r3, #0
 800f358:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 800f35c:	6879      	ldr	r1, [r7, #4]
 800f35e:	f04f 0200 	mov.w	r2, #0
 800f362:	f04f 0300 	mov.w	r3, #0
 800f366:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 800f36a:	6879      	ldr	r1, [r7, #4]
 800f36c:	f04f 0200 	mov.w	r2, #0
 800f370:	f04f 0300 	mov.w	r3, #0
 800f374:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f04f 0200 	mov.w	r2, #0
 800f37e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f04f 0200 	mov.w	r2, #0
 800f388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    { 
        setName("squareWave");
 800f38c:	687c      	ldr	r4, [r7, #4]
 800f38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f392:	4618      	mov	r0, r3
 800f394:	f00f f86f 	bl	801e476 <_ZNSaIcEC1Ev>
 800f398:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f39c:	f107 030c 	add.w	r3, r7, #12
 800f3a0:	4919      	ldr	r1, [pc, #100]	; (800f408 <_ZN2ps14SquareWaveTestC1Ev+0x13c>)
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f00f fb0e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f7f7 fd0a 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f3b4:	f107 030c 	add.w	r3, r7, #12
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f00f f95c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f00f f858 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(false);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2100      	movs	r1, #0
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7f7 fdb0 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
        setSampleMethod(SampleCustom);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f7 fd14 	bl	8006e04 <_ZN2ps8BaseTest15setSampleMethodENS_12SampleMethodE>
        updateDoneTime();
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fc6f 	bl	800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>
        updateMaxMinValues();
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fcc8 	bl	800fd78 <_ZN2ps14SquareWaveTest18updateMaxMinValuesEv>
        updateStepSign();
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fd39 	bl	800fe60 <_ZN2ps14SquareWaveTest14updateStepSignEv>
    };
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	372c      	adds	r7, #44	; 0x2c
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd90      	pop	{r4, r7, pc}
 800f3f8:	08022574 	.word	0x08022574
 800f3fc:	3ba3d70a 	.word	0x3ba3d70a
 800f400:	3ccccccd 	.word	0x3ccccccd
 800f404:	3e4ccccd 	.word	0x3e4ccccd
 800f408:	08021cac 	.word	0x08021cac

0800f40c <_ZN2ps14SquareWaveTest13setStartValueEf>:

    void SquareWaveTest::setStartValue(float value)
    {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	ed87 0a00 	vstr	s0, [r7]
        startValue_ = value;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	641a      	str	r2, [r3, #64]	; 0x40
        updateDoneTime();
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 fc4e 	bl	800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>
        updateMaxMinValues();
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fca7 	bl	800fd78 <_ZN2ps14SquareWaveTest18updateMaxMinValuesEv>
        updateStepSign();
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fd18 	bl	800fe60 <_ZN2ps14SquareWaveTest14updateStepSignEv>
    }
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN2ps14SquareWaveTest13getStartValueEv>:


    float SquareWaveTest::getStartValue()
    {
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
        return startValue_;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f444:	ee07 3a90 	vmov	s15, r3
    }
 800f448:	eeb0 0a67 	vmov.f32	s0, s15
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr

0800f456 <_ZN2ps14SquareWaveTest13setFinalValueEf>:


    void SquareWaveTest::setFinalValue(float value)
    {
 800f456:	b580      	push	{r7, lr}
 800f458:	b082      	sub	sp, #8
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
 800f45e:	ed87 0a00 	vstr	s0, [r7]
        finalValue_ = value;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	645a      	str	r2, [r3, #68]	; 0x44
        updateDoneTime();
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fc29 	bl	800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>
        updateMaxMinValues();
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 fc82 	bl	800fd78 <_ZN2ps14SquareWaveTest18updateMaxMinValuesEv>
        updateStepSign();
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 fcf3 	bl	800fe60 <_ZN2ps14SquareWaveTest14updateStepSignEv>
    }
 800f47a:	bf00      	nop
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <_ZN2ps14SquareWaveTest13getFinalValueEv>:


    float SquareWaveTest::getFinalValue()
    {
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
        return finalValue_;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f48e:	ee07 3a90 	vmov	s15, r3
    }
 800f492:	eeb0 0a67 	vmov.f32	s0, s15
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <_ZN2ps14SquareWaveTest12setStepValueEf>:


    void SquareWaveTest::setStepValue(float value)
    {
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	ed87 0a00 	vstr	s0, [r7]
        stepValue_ = fabs(value);
 800f4ac:	ed97 0a00 	vldr	s0, [r7]
 800f4b0:	f7ff fefc 	bl	800f2ac <_ZSt4fabsf>
 800f4b4:	eef0 7a40 	vmov.f32	s15, s0
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
        updateDoneTime();
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fbfe 	bl	800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>
    }
 800f4c4:	bf00      	nop
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <_ZN2ps14SquareWaveTest12getStepValueEv>:


    float SquareWaveTest::getStepValue()
    {
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
        return stepValue_;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4d8:	ee07 3a90 	vmov	s15, r3
    }
 800f4dc:	eeb0 0a67 	vmov.f32	s0, s15
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <_ZN2ps14SquareWaveTest12setAmplitudeEf>:


    void SquareWaveTest::setAmplitude(float value)
    {
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b082      	sub	sp, #8
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
 800f4f2:	ed87 0a00 	vstr	s0, [r7]
        amplitude_ = fabs(value);
 800f4f6:	ed97 0a00 	vldr	s0, [r7]
 800f4fa:	f7ff fed7 	bl	800f2ac <_ZSt4fabsf>
 800f4fe:	eef0 7a40 	vmov.f32	s15, s0
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    }
 800f508:	bf00      	nop
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <_ZN2ps14SquareWaveTest12getAmplitudeEv>:


    float SquareWaveTest::getAmplitude()
    {
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
        return amplitude_;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f51c:	ee07 3a90 	vmov	s15, r3
    }
 800f520:	eeb0 0a67 	vmov.f32	s0, s15
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <_ZN2ps14SquareWaveTest9setWindowEf>:


    void SquareWaveTest::setWindow(float value)
    {
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	ed87 0a00 	vstr	s0, [r7]
        window_ = fabs(value);
 800f53a:	ed97 0a00 	vldr	s0, [r7]
 800f53e:	f7ff feb5 	bl	800f2ac <_ZSt4fabsf>
 800f542:	eef0 7a40 	vmov.f32	s15, s0
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
        window_ = max(0.0f, window_);
 800f54c:	f04f 0300 	mov.w	r3, #0
 800f550:	60bb      	str	r3, [r7, #8]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f558:	f107 0308 	add.w	r3, r7, #8
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f3 fe14 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800f564:	4603      	mov	r3, r0
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	651a      	str	r2, [r3, #80]	; 0x50
        window_ = min(1.0f, window_);
 800f56c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f578:	f107 030c 	add.w	r3, r7, #12
 800f57c:	4611      	mov	r1, r2
 800f57e:	4618      	mov	r0, r3
 800f580:	f7f3 fe1d 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800f584:	4603      	mov	r3, r0
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	651a      	str	r2, [r3, #80]	; 0x50
        updateWindowLenUs();
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fc15 	bl	800fdbc <_ZN2ps14SquareWaveTest17updateWindowLenUsEv>
    }
 800f592:	bf00      	nop
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <_ZN2ps14SquareWaveTest9getWindowEv>:


    float SquareWaveTest::getWindow()
    {
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
        return window_;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5a6:	ee07 3a90 	vmov	s15, r3
    }
 800f5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <_ZNK2ps14SquareWaveTest11getMaxValueEv>:


    float SquareWaveTest::getMaxValue() const 
    {
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
        float maxValue = max(startValue_, finalValue_) + amplitude_;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3344      	adds	r3, #68	; 0x44
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	f7f3 fddd 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	ed93 7a00 	vldr	s14, [r3]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800f5de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5e2:	edc7 7a03 	vstr	s15, [r7, #12]
        return max(maxValue, quietValue_);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f103 0210 	add.w	r2, r3, #16
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f3 fdca 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	ee07 3a90 	vmov	s15, r3
    }
 800f600:	eeb0 0a67 	vmov.f32	s0, s15
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <_ZNK2ps14SquareWaveTest11getMinValueEv>:


    float SquareWaveTest::getMinValue() const 
    {
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
        float minValue = min(startValue_, finalValue_) - amplitude_;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3344      	adds	r3, #68	; 0x44
 800f61c:	4619      	mov	r1, r3
 800f61e:	4610      	mov	r0, r2
 800f620:	f7f3 fdcd 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800f624:	4603      	mov	r3, r0
 800f626:	ed93 7a00 	vldr	s14, [r3]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800f630:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f634:	edc7 7a03 	vstr	s15, [r7, #12]
        return min(minValue, quietValue_);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f103 0210 	add.w	r2, r3, #16
 800f63e:	f107 030c 	add.w	r3, r7, #12
 800f642:	4611      	mov	r1, r2
 800f644:	4618      	mov	r0, r3
 800f646:	f7f3 fdba 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800f64a:	4603      	mov	r3, r0
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	ee07 3a90 	vmov	s15, r3
    }
 800f652:	eeb0 0a67 	vmov.f32	s0, s15
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <_ZN2ps14SquareWaveTest15setSamplePeriodEy>:


    void SquareWaveTest::setSamplePeriod(uint64_t samplePeriod)
    {
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	e9c7 2300 	strd	r2, r3, [r7]
        BaseTest::setSamplePeriod(samplePeriod);
 800f668:	68f9      	ldr	r1, [r7, #12]
 800f66a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f66e:	4608      	mov	r0, r1
 800f670:	f7f7 fb7a 	bl	8006d68 <_ZN2ps8BaseTest15setSamplePeriodEy>
        halfSamplePeriod_ = samplePeriod >> 1;
 800f674:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f678:	f04f 0200 	mov.w	r2, #0
 800f67c:	f04f 0300 	mov.w	r3, #0
 800f680:	0842      	lsrs	r2, r0, #1
 800f682:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f686:	084b      	lsrs	r3, r1, #1
 800f688:	68f9      	ldr	r1, [r7, #12]
 800f68a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
        updateDoneTime();
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f000 fb16 	bl	800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>
        updateWindowLenUs();
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 fb91 	bl	800fdbc <_ZN2ps14SquareWaveTest17updateWindowLenUsEv>
    }
 800f69a:	bf00      	nop
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <_ZNK2ps14SquareWaveTest6isDoneEy>:

    bool SquareWaveTest::isDone(uint64_t t) const 
    {
 800f6a2:	b480      	push	{r7}
 800f6a4:	b085      	sub	sp, #20
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	60f8      	str	r0, [r7, #12]
 800f6aa:	e9c7 2300 	strd	r2, r3, [r7]
        if (t >= doneTime_)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800f6b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f6b8:	4290      	cmp	r0, r2
 800f6ba:	eb71 0303 	sbcs.w	r3, r1, r3
 800f6be:	d301      	bcc.n	800f6c4 <_ZNK2ps14SquareWaveTest6isDoneEy+0x22>
        {
            return true;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e000      	b.n	800f6c6 <_ZNK2ps14SquareWaveTest6isDoneEy+0x24>
        }
        else
        {
            return false;
 800f6c4:	2300      	movs	r3, #0
        }
    }
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <_ZNK2ps14SquareWaveTest11getDoneTimeEv>:


    uint64_t SquareWaveTest::getDoneTime() const
    {
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
        return doneTime_;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60

    }
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZN2ps14SquareWaveTest5resetEv>:

    void SquareWaveTest::reset()
    {
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
        numForward_ = 0;
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	f04f 0200 	mov.w	r2, #0
 800f6fc:	f04f 0300 	mov.w	r3, #0
 800f700:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
        numReverse_ = 0;
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	f04f 0200 	mov.w	r2, #0
 800f70a:	f04f 0300 	mov.w	r3, #0
 800f70e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
        currForward_ = 0.0;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f04f 0200 	mov.w	r2, #0
 800f718:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        currReverse_ = 0.0;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f04f 0200 	mov.w	r2, #0
 800f722:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        testCnt_ = 0;
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	f04f 0200 	mov.w	r2, #0
 800f72c:	f04f 0300 	mov.w	r3, #0
 800f730:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
        isFirst_ = true;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    }
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <_ZNK2ps14SquareWaveTest8getValueEy>:


    float SquareWaveTest::getValue(uint64_t t) const 
    {
 800f748:	b5b0      	push	{r4, r5, r7, lr}
 800f74a:	b08a      	sub	sp, #40	; 0x28
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	e9c7 2300 	strd	r2, r3, [r7]
        float value = 0.0;
 800f754:	f04f 0300 	mov.w	r3, #0
 800f758:	627b      	str	r3, [r7, #36]	; 0x24
        if ( t < quietTime_)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f760:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f764:	4290      	cmp	r0, r2
 800f766:	eb71 0303 	sbcs.w	r3, r1, r3
 800f76a:	d203      	bcs.n	800f774 <_ZNK2ps14SquareWaveTest8getValueEy+0x2c>
        {
            value = quietValue_;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	627b      	str	r3, [r7, #36]	; 0x24
 800f772:	e036      	b.n	800f7e2 <_ZNK2ps14SquareWaveTest8getValueEy+0x9a>
        }
        else
        {
            uint64_t stepModPos = (t - quietTime_)%samplePeriod_;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f77a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f77e:	1a84      	subs	r4, r0, r2
 800f780:	eb61 0503 	sbc.w	r5, r1, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f78a:	4620      	mov	r0, r4
 800f78c:	4629      	mov	r1, r5
 800f78e:	f7f1 fb47 	bl	8000e20 <__aeabi_uldivmod>
 800f792:	e9c7 2306 	strd	r2, r3, [r7, #24]
            float stairValue = getStairValue(t);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	3358      	adds	r3, #88	; 0x58
 800f79c:	6819      	ldr	r1, [r3, #0]
 800f79e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	4788      	blx	r1
 800f7a6:	ed87 0a05 	vstr	s0, [r7, #20]
            if (stepModPos < halfSamplePeriod_)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800f7b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f7b4:	4290      	cmp	r0, r2
 800f7b6:	eb71 0303 	sbcs.w	r3, r1, r3
 800f7ba:	d209      	bcs.n	800f7d0 <_ZNK2ps14SquareWaveTest8getValueEy+0x88>
            {
                value = stairValue + amplitude_;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800f7c2:	ed97 7a05 	vldr	s14, [r7, #20]
 800f7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f7ce:	e008      	b.n	800f7e2 <_ZNK2ps14SquareWaveTest8getValueEy+0x9a>
            }
            else
            {
                value = stairValue - amplitude_;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800f7d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800f7da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }
        }
        return value;
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e4:	ee07 3a90 	vmov	s15, r3
    }
 800f7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ec:	3728      	adds	r7, #40	; 0x28
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bdb0      	pop	{r4, r5, r7, pc}

0800f7f2 <_ZNK2ps14SquareWaveTest13getStairValueEy>:


    float SquareWaveTest::getStairValue(uint64_t t) const
    {
 800f7f2:	b5b0      	push	{r4, r5, r7, lr}
 800f7f4:	ed2d 8b02 	vpush	{d8}
 800f7f8:	b08a      	sub	sp, #40	; 0x28
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	e9c7 2300 	strd	r2, r3, [r7]
        float stairValue = 0.0;
 800f802:	f04f 0300 	mov.w	r3, #0
 800f806:	617b      	str	r3, [r7, #20]
        if (t < quietTime_)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f80e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f812:	4290      	cmp	r0, r2
 800f814:	eb71 0303 	sbcs.w	r3, r1, r3
 800f818:	d203      	bcs.n	800f822 <_ZNK2ps14SquareWaveTest13getStairValueEy+0x30>
        {
            stairValue = quietValue_;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	691b      	ldr	r3, [r3, #16]
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	e043      	b.n	800f8aa <_ZNK2ps14SquareWaveTest13getStairValueEy+0xb8>
        }
        else
        {
            uint64_t tTest = t - quietTime_;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f82c:	1a84      	subs	r4, r0, r2
 800f82e:	eb61 0503 	sbc.w	r5, r1, r3
 800f832:	e9c7 4508 	strd	r4, r5, [r7, #32]
            uint64_t stepCount = tTest/samplePeriod_;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f83c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f840:	f7f1 faee 	bl	8000e20 <__aeabi_uldivmod>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	e9c7 2306 	strd	r2, r3, [r7, #24]
            stairValue = startValue_ + stepCount*stepSign_*stepValue_;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 800f852:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f856:	f7f1 fa9d 	bl	8000d94 <__aeabi_ul2f>
 800f85a:	ee07 0a10 	vmov	s14, r0
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f864:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800f86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f872:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f876:	edc7 7a05 	vstr	s15, [r7, #20]
            stairValue = max(stairValue, minValue_);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f7f3 fc80 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800f88c:	4603      	mov	r3, r0
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	617b      	str	r3, [r7, #20]
            stairValue = min(stairValue, maxValue_);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7f3 fc8d 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	617b      	str	r3, [r7, #20]
        }
        return stairValue;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	ee07 3a90 	vmov	s15, r3
    }
 800f8b0:	eeb0 0a67 	vmov.f32	s0, s15
 800f8b4:	3728      	adds	r7, #40	; 0x28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	ecbd 8b02 	vpop	{d8}
 800f8bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f8be <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_>:


    bool SquareWaveTest::updateSample(Sample sampleRaw, Sample &sampleTest) 
    {
 800f8be:	b082      	sub	sp, #8
 800f8c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8c4:	ed2d 8b02 	vpush	{d8}
 800f8c8:	b098      	sub	sp, #96	; 0x60
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6478      	str	r0, [r7, #68]	; 0x44
 800f8ce:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800f8d2:	e881 000c 	stmia.w	r1, {r2, r3}
        bool newSample = false;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        if (sampleRaw.t < quietTime_)
 800f8dc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800f8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f8e6:	4290      	cmp	r0, r2
 800f8e8:	eb71 0303 	sbcs.w	r3, r1, r3
 800f8ec:	d22f      	bcs.n	800f94e <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x90>
        {
            if ((testCnt_ > 0) && (testCnt_%sampleModulus_==0))
 800f8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8f0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	d020      	beq.n	800f93a <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x7c>
 800f8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8fa:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800f8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	2200      	movs	r2, #0
 800f904:	63bb      	str	r3, [r7, #56]	; 0x38
 800f906:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f90c:	f7f1 fa88 	bl	8000e20 <__aeabi_uldivmod>
 800f910:	4313      	orrs	r3, r2
 800f912:	d112      	bne.n	800f93a <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x7c>
            {
                sampleTest.t = sampleRaw.t;
 800f914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f918:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f91c:	e9c1 2300 	strd	r2, r3, [r1]
                sampleTest.volt = quietValue_;
 800f920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f922:	691a      	ldr	r2, [r3, #16]
 800f924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f928:	609a      	str	r2, [r3, #8]
                sampleTest.curr =  0.0;
 800f92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f92e:	f04f 0200 	mov.w	r2, #0
 800f932:	60da      	str	r2, [r3, #12]
                newSample = true;
 800f934:	2301      	movs	r3, #1
 800f936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            }
            testCnt_++;
 800f93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f93c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800f940:	1c54      	adds	r4, r2, #1
 800f942:	f143 0500 	adc.w	r5, r3, #0
 800f946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f948:	e9c3 4520 	strd	r4, r5, [r3, #128]	; 0x80
 800f94c:	e0ff      	b.n	800fb4e <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x290>
        }
        else 
        {
            if (isFirst_)
 800f94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f950:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00a      	beq.n	800f96e <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0xb0>
            {
                isFirst_ = false;
 800f958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f95a:	2300      	movs	r3, #0
 800f95c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                testCnt_ = 0;
 800f960:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f962:	f04f 0200 	mov.w	r2, #0
 800f966:	f04f 0300 	mov.w	r3, #0
 800f96a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
            }

            uint64_t tTest = (sampleRaw.t - quietTime_);
 800f96e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800f972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f974:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f978:	1a84      	subs	r4, r0, r2
 800f97a:	603c      	str	r4, [r7, #0]
 800f97c:	eb61 0303 	sbc.w	r3, r1, r3
 800f980:	607b      	str	r3, [r7, #4]
 800f982:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f986:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            uint64_t stepModPos = tTest%samplePeriod_;
 800f98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f990:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f994:	f7f1 fa44 	bl	8000e20 <__aeabi_uldivmod>
 800f998:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

            if (stepModPos < halfSamplePeriod_)
 800f99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f99e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800f9a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f9a6:	4282      	cmp	r2, r0
 800f9a8:	418b      	sbcs	r3, r1
 800f9aa:	d234      	bcs.n	800fa16 <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x158>
            {
                // forward step
                if ((halfSamplePeriod_ - stepModPos - 1) < windowLenUs_)
 800f9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ae:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800f9b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f9b6:	1a84      	subs	r4, r0, r2
 800f9b8:	633c      	str	r4, [r7, #48]	; 0x30
 800f9ba:	eb61 0303 	sbc.w	r3, r1, r3
 800f9be:	637b      	str	r3, [r7, #52]	; 0x34
 800f9c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9d4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800f9d8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4291      	cmp	r1, r2
 800f9e0:	4629      	mov	r1, r5
 800f9e2:	4199      	sbcs	r1, r3
 800f9e4:	d242      	bcs.n	800fa6c <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x1ae>
                {
                    numForward_++;
 800f9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9e8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800f9ec:	1c51      	adds	r1, r2, #1
 800f9ee:	6239      	str	r1, [r7, #32]
 800f9f0:	f143 0300 	adc.w	r3, r3, #0
 800f9f4:	627b      	str	r3, [r7, #36]	; 0x24
 800f9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f9fc:	e9c3 1222 	strd	r1, r2, [r3, #136]	; 0x88
                    currForward_ += sampleRaw.curr;
 800fa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa02:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800fa06:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800fa0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa10:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 800fa14:	e02a      	b.n	800fa6c <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x1ae>
                }
            }
            else
            {
                // reverse step
                if ((samplePeriod_ - stepModPos - 1) < windowLenUs_)
 800fa16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800fa1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fa20:	ebb0 0a02 	subs.w	sl, r0, r2
 800fa24:	eb61 0b03 	sbc.w	fp, r1, r3
 800fa28:	f11a 38ff 	adds.w	r8, sl, #4294967295
 800fa2c:	f14b 39ff 	adc.w	r9, fp, #4294967295
 800fa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa32:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800fa36:	4590      	cmp	r8, r2
 800fa38:	eb79 0303 	sbcs.w	r3, r9, r3
 800fa3c:	d216      	bcs.n	800fa6c <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x1ae>
                {
                    numReverse_++;
 800fa3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa40:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800fa44:	1c51      	adds	r1, r2, #1
 800fa46:	61b9      	str	r1, [r7, #24]
 800fa48:	f143 0300 	adc.w	r3, r3, #0
 800fa4c:	61fb      	str	r3, [r7, #28]
 800fa4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fa54:	e9c3 1224 	strd	r1, r2, [r3, #144]	; 0x90
                    currReverse_ += sampleRaw.curr;
 800fa58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa5a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800fa5e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800fa62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa68:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
                }
            }

            if ((testCnt_ > 0) && (testCnt_%sampleModulus_==0))
 800fa6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa6e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800fa72:	4313      	orrs	r3, r2
 800fa74:	d05e      	beq.n	800fb34 <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x276>
 800fa76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa78:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800fa7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa7e:	6a1b      	ldr	r3, [r3, #32]
 800fa80:	2200      	movs	r2, #0
 800fa82:	613b      	str	r3, [r7, #16]
 800fa84:	617a      	str	r2, [r7, #20]
 800fa86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa8a:	f7f1 f9c9 	bl	8000e20 <__aeabi_uldivmod>
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	d150      	bne.n	800fb34 <_ZN2ps14SquareWaveTest12updateSampleENS_6SampleERS1_+0x276>
            {
                sampleTest.t = sampleRaw.t;
 800fa92:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fa96:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800fa9a:	e9c1 2300 	strd	r2, r3, [r1]
                sampleTest.volt = getStairValue(sampleRaw.t);
 800fa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	3358      	adds	r3, #88	; 0x58
 800faa4:	6819      	ldr	r1, [r3, #0]
 800faa6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800faaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800faac:	4788      	blx	r1
 800faae:	eef0 7a40 	vmov.f32	s15, s0
 800fab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fab6:	edc3 7a02 	vstr	s15, [r3, #8]
                sampleTest.curr = currForward_/numForward_ - currReverse_/numReverse_;
 800faba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fabc:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 800fac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800fac6:	4610      	mov	r0, r2
 800fac8:	4619      	mov	r1, r3
 800faca:	f7f1 f963 	bl	8000d94 <__aeabi_ul2f>
 800face:	ee07 0a90 	vmov	s15, r0
 800fad2:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 800fad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fad8:	edd3 8a27 	vldr	s17, [r3, #156]	; 0x9c
 800fadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fade:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800fae2:	4610      	mov	r0, r2
 800fae4:	4619      	mov	r1, r3
 800fae6:	f7f1 f955 	bl	8000d94 <__aeabi_ul2f>
 800faea:	ee07 0a10 	vmov	s14, r0
 800faee:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800faf2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800faf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fafa:	edc3 7a03 	vstr	s15, [r3, #12]
                numForward_ = 0;
 800fafe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb00:	f04f 0200 	mov.w	r2, #0
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                numReverse_ = 0;
 800fb0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb0e:	f04f 0200 	mov.w	r2, #0
 800fb12:	f04f 0300 	mov.w	r3, #0
 800fb16:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
                currForward_ = 0.0;
 800fb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb1c:	f04f 0200 	mov.w	r2, #0
 800fb20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                currReverse_ = 0.0;
 800fb24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb26:	f04f 0200 	mov.w	r2, #0
 800fb2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                newSample = true;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            }
            testCnt_++;
 800fb34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb36:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800fb3a:	1c51      	adds	r1, r2, #1
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	f143 0300 	adc.w	r3, r3, #0
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fb4a:	e9c3 1220 	strd	r1, r2, [r3, #128]	; 0x80
        }

        return newSample; 
 800fb4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    }
 800fb52:	4618      	mov	r0, r3
 800fb54:	3760      	adds	r7, #96	; 0x60
 800fb56:	46bd      	mov	sp, r7
 800fb58:	ecbd 8b02 	vpop	{d8}
 800fb5c:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb60:	b002      	add	sp, #8
 800fb62:	4770      	bx	lr

0800fb64 <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE>:


    void SquareWaveTest::getParam(JsonObject &jsonDat)
    {
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08a      	sub	sp, #40	; 0x28
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
        BaseTest::getParam(jsonDat);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f7 f974 	bl	8006e60 <_ZN2ps8BaseTest8getParamERN11ArduinoJson10JsonObjectE>

        ReturnStatus status;
 800fb78:	f107 0308 	add.w	r3, r7, #8
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7f1 fc1f 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f107 0208 	add.w	r2, r7, #8
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7f7 f9e2 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800fb90:	6278      	str	r0, [r7, #36]	; 0x24

        if (status.success)
 800fb92:	7a3b      	ldrb	r3, [r7, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d022      	beq.n	800fbde <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x7a>
        {
            jsonDatPrm.set(StartValueKey, startValue_);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3340      	adds	r3, #64	; 0x40
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4914      	ldr	r1, [pc, #80]	; (800fbf0 <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x8c>)
 800fba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fba2:	f7f7 fc32 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(FinalValueKey, finalValue_);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3344      	adds	r3, #68	; 0x44
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4911      	ldr	r1, [pc, #68]	; (800fbf4 <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x90>)
 800fbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbb0:	f7f7 fc2b 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(StepValueKey, stepValue_);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	3348      	adds	r3, #72	; 0x48
 800fbb8:	461a      	mov	r2, r3
 800fbba:	490f      	ldr	r1, [pc, #60]	; (800fbf8 <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x94>)
 800fbbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbbe:	f7f7 fc24 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(AmplitudeKey, amplitude_);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	334c      	adds	r3, #76	; 0x4c
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	490c      	ldr	r1, [pc, #48]	; (800fbfc <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x98>)
 800fbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbcc:	f7f7 fc1d 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
            jsonDatPrm.set(WindowKey, window_);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3350      	adds	r3, #80	; 0x50
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	490a      	ldr	r1, [pc, #40]	; (800fc00 <_ZN2ps14SquareWaveTest8getParamERN11ArduinoJson10JsonObjectE+0x9c>)
 800fbd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbda:	f7f7 fc16 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        }
    }
 800fbde:	f107 0308 	add.w	r3, r7, #8
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7f2 fe2a 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 800fbe8:	3728      	adds	r7, #40	; 0x28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	2000851c 	.word	0x2000851c
 800fbf4:	20008534 	.word	0x20008534
 800fbf8:	2000854c 	.word	0x2000854c
 800fbfc:	20008564 	.word	0x20008564
 800fc00:	200085dc 	.word	0x200085dc

0800fc04 <_ZN2ps14SquareWaveTest8setParamERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SquareWaveTest::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08e      	sub	sp, #56	; 0x38
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7f1 fbd4 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = BaseTest::setParam(jsonMsg,jsonDat);
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	f107 0014 	add.w	r0, r7, #20
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	f7f7 f949 	bl	8006eb8 <_ZN2ps8BaseTest8setParamERN11ArduinoJson10JsonObjectES3_>
 800fc26:	f107 0314 	add.w	r3, r7, #20
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7f2 fe6d 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 800fc32:	f107 0314 	add.w	r3, r7, #20
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f2 fe00 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>

        // Extract parameter JsonObjects
        JsonObject &jsonMsgPrm = getParamJsonObject(jsonMsg,status);
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	6879      	ldr	r1, [r7, #4]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7f7 f986 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800fc48:	6378      	str	r0, [r7, #52]	; 0x34
        if (!status.success)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	f083 0301 	eor.w	r3, r3, #1
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d12c      	bne.n	800fcb2 <_ZN2ps14SquareWaveTest8setParamERN11ArduinoJson10JsonObjectES3_+0xae>
        {
            return status;
        }

        JsonObject &jsonDatPrm = getParamJsonObject(jsonDat,status);
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f7 f978 	bl	8006f54 <_ZN2ps8BaseTest18getParamJsonObjectERN11ArduinoJson10JsonObjectERNS_12ReturnStatusE>
 800fc64:	6338      	str	r0, [r7, #48]	; 0x30
        if (!status.success)
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	f083 0301 	eor.w	r3, r3, #1
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d120      	bne.n	800fcb6 <_ZN2ps14SquareWaveTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb2>
        {
            return status;
        }

        // Set parameters
        setStartValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc7a:	68b8      	ldr	r0, [r7, #8]
 800fc7c:	f000 f90e 	bl	800fe9c <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setFinalValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc86:	68b8      	ldr	r0, [r7, #8]
 800fc88:	f000 f9b2 	bl	800fff0 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setStepValueFromJson(jsonMsgPrm,jsonDatPrm,status);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc92:	68b8      	ldr	r0, [r7, #8]
 800fc94:	f000 fa56 	bl	8010144 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setAmplitudeFromJson(jsonMsgPrm,jsonDatPrm,status);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc9e:	68b8      	ldr	r0, [r7, #8]
 800fca0:	f000 fafa 	bl	8010298 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        setWindowFromJson(jsonMsgPrm,jsonDatPrm,status);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fca8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	f000 fb9e 	bl	80103ec <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>
        return status;
 800fcb0:	e002      	b.n	800fcb8 <_ZN2ps14SquareWaveTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb4>
            return status;
 800fcb2:	bf00      	nop
 800fcb4:	e000      	b.n	800fcb8 <_ZN2ps14SquareWaveTest8setParamERN11ArduinoJson10JsonObjectES3_+0xb4>
            return status;
 800fcb6:	bf00      	nop
    }
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	3738      	adds	r7, #56	; 0x38
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZN2ps14SquareWaveTest14updateDoneTimeEv>:

    // Protected methods
    // --------------------------------------------------------------------------------------------
   
    void SquareWaveTest::updateDoneTime()
    {
 800fcc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fcc4:	b086      	sub	sp, #24
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
        if (stepValue_ > 0.0) 
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800fcd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	dd43      	ble.n	800fd62 <_ZN2ps14SquareWaveTest14updateDoneTimeEv+0xa2>
        {
            uint64_t numSteps_ = uint64_t(ceil(fabs(finalValue_ - startValue_)/stepValue_))+1;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800fce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcea:	eeb0 0a67 	vmov.f32	s0, s15
 800fcee:	f7ff fadd 	bl	800f2ac <_ZSt4fabsf>
 800fcf2:	eef0 6a40 	vmov.f32	s13, s0
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800fcfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd00:	eeb0 0a47 	vmov.f32	s0, s14
 800fd04:	f7ff fac2 	bl	800f28c <_ZSt4ceilf>
 800fd08:	ee10 3a10 	vmov	r3, s0
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7f1 f89f 	bl	8000e50 <__aeabi_f2ulz>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	f112 0a01 	adds.w	sl, r2, #1
 800fd1a:	f143 0b00 	adc.w	fp, r3, #0
 800fd1e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
            uint64_t testDuration = numSteps_*uint64_t(samplePeriod_);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800fd28:	6979      	ldr	r1, [r7, #20]
 800fd2a:	fb02 f001 	mul.w	r0, r2, r1
 800fd2e:	6939      	ldr	r1, [r7, #16]
 800fd30:	fb03 f101 	mul.w	r1, r3, r1
 800fd34:	4401      	add	r1, r0
 800fd36:	6938      	ldr	r0, [r7, #16]
 800fd38:	fba0 4502 	umull	r4, r5, r0, r2
 800fd3c:	194b      	adds	r3, r1, r5
 800fd3e:	461d      	mov	r5, r3
 800fd40:	e9c7 4502 	strd	r4, r5, [r7, #8]
 800fd44:	e9c7 4502 	strd	r4, r5, [r7, #8]
            doneTime_ = quietTime_ + testDuration;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800fd4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd52:	eb10 0802 	adds.w	r8, r0, r2
 800fd56:	eb41 0903 	adc.w	r9, r1, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	e9c3 8918 	strd	r8, r9, [r3, #96]	; 0x60
        }
        else
        {
            doneTime_ = quietTime_;
        }
    }
 800fd60:	e005      	b.n	800fd6e <_ZN2ps14SquareWaveTest14updateDoneTimeEv+0xae>
            doneTime_ = quietTime_;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    }
 800fd6e:	bf00      	nop
 800fd70:	3718      	adds	r7, #24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fd78 <_ZN2ps14SquareWaveTest18updateMaxMinValuesEv>:


    void SquareWaveTest::updateMaxMinValues()
    {
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
        maxValue_ = max(startValue_,finalValue_);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	3344      	adds	r3, #68	; 0x44
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	f7f3 f9fd 	bl	800318c <_ZSt3maxIfERKT_S2_S2_>
 800fd92:	4603      	mov	r3, r0
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	655a      	str	r2, [r3, #84]	; 0x54
        minValue_ = min(startValue_,finalValue_);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3344      	adds	r3, #68	; 0x44
 800fda4:	4619      	mov	r1, r3
 800fda6:	4610      	mov	r0, r2
 800fda8:	f7f3 fa09 	bl	80031be <_ZSt3minIfERKT_S2_S2_>
 800fdac:	4603      	mov	r3, r0
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	659a      	str	r2, [r3, #88]	; 0x58
    }
 800fdb4:	bf00      	nop
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <_ZN2ps14SquareWaveTest17updateWindowLenUsEv>:


    void SquareWaveTest::updateWindowLenUs()
    {
 800fdbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fdc0:	b086      	sub	sp, #24
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
        windowLenUs_ = uint64_t((halfSamplePeriod_- 1)*window_);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800fdcc:	f112 38ff 	adds.w	r8, r2, #4294967295
 800fdd0:	f143 39ff 	adc.w	r9, r3, #4294967295
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4649      	mov	r1, r9
 800fdd8:	f7f0 ffdc 	bl	8000d94 <__aeabi_ul2f>
 800fddc:	ee07 0a10 	vmov	s14, r0
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800fde6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdea:	ee17 0a90 	vmov	r0, s15
 800fdee:	f7f1 f82f 	bl	8000e50 <__aeabi_f2ulz>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	6879      	ldr	r1, [r7, #4]
 800fdf8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        windowLenUs_ = min(halfSamplePeriod_- 1, windowLenUs_);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800fe02:	1e54      	subs	r4, r2, #1
 800fe04:	f143 35ff 	adc.w	r5, r3, #4294967295
 800fe08:	e9c7 4502 	strd	r4, r5, [r7, #8]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	4611      	mov	r1, r2
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 fb91 	bl	8010540 <_ZSt3minIyERKT_S2_S2_>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe24:	6879      	ldr	r1, [r7, #4]
 800fe26:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        windowLenUs_ = max(uint64_t(1), windowLenUs_);
 800fe2a:	f04f 0201 	mov.w	r2, #1
 800fe2e:	f04f 0300 	mov.w	r3, #0
 800fe32:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800fe3c:	f107 0310 	add.w	r3, r7, #16
 800fe40:	4611      	mov	r1, r2
 800fe42:	4618      	mov	r0, r3
 800fe44:	f000 fb94 	bl	8010570 <_ZSt3maxIyERKT_S2_S2_>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	6879      	ldr	r1, [r7, #4]
 800fe50:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    }
 800fe54:	bf00      	nop
 800fe56:	3718      	adds	r7, #24
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800fe60 <_ZN2ps14SquareWaveTest14updateStepSignEv>:


    void SquareWaveTest::updateStepSign()
    {
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
        stepSign_ = (startValue_ <= finalValue_) ? 1.0 : -1.0;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800fe74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7c:	d802      	bhi.n	800fe84 <_ZN2ps14SquareWaveTest14updateStepSignEv+0x24>
 800fe7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fe82:	e000      	b.n	800fe86 <_ZN2ps14SquareWaveTest14updateStepSignEv+0x26>
 800fe84:	4a04      	ldr	r2, [pc, #16]	; (800fe98 <_ZN2ps14SquareWaveTest14updateStepSignEv+0x38>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	65da      	str	r2, [r3, #92]	; 0x5c
    }
 800fe8a:	bf00      	nop
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	bf800000 	.word	0xbf800000

0800fe9c <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void SquareWaveTest::setStartValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b09e      	sub	sp, #120	; 0x78
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
 800fea8:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(StartValueKey))
 800feaa:	494f      	ldr	r1, [pc, #316]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800feac:	68b8      	ldr	r0, [r7, #8]
 800feae:	f7f4 fb38 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 8092 	beq.w	800ffde <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[StartValueKey].is<float>())
 800feba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800febe:	4a4a      	ldr	r2, [pc, #296]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800fec0:	68b9      	ldr	r1, [r7, #8]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7f4 fb63 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800fec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fecc:	4611      	mov	r1, r2
 800fece:	4618      	mov	r0, r3
 800fed0:	f7f7 fbe4 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800fed4:	4603      	mov	r3, r0
 800fed6:	bf00      	nop
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d019      	beq.n	800ff10 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setStartValue(jsonMsgPrm.get<float>(StartValueKey));
 800fedc:	4942      	ldr	r1, [pc, #264]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800fede:	68b8      	ldr	r0, [r7, #8]
 800fee0:	f7f7 fab3 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800fee4:	eef0 7a40 	vmov.f32	s15, s0
 800fee8:	eeb0 0a67 	vmov.f32	s0, s15
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f7ff fa8d 	bl	800f40c <_ZN2ps14SquareWaveTest13setStartValueEf>
                jsonDatPrm.set(StartValueKey,getStartValue());
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7ff faa0 	bl	800f438 <_ZN2ps14SquareWaveTest13getStartValueEv>
 800fef8:	eef0 7a40 	vmov.f32	s15, s0
 800fefc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800ff00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff04:	461a      	mov	r2, r3
 800ff06:	4938      	ldr	r1, [pc, #224]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7f7 fa7e 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = StartValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 800ff0e:	e066      	b.n	800ffde <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[StartValueKey].is<long>())
 800ff10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff14:	4a34      	ldr	r2, [pc, #208]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800ff16:	68b9      	ldr	r1, [r7, #8]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f4 fb38 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff22:	4611      	mov	r1, r2
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f7 fbf9 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	bf00      	nop
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d01b      	beq.n	800ff6a <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setStartValue(float(jsonMsgPrm.get<long>(StartValueKey)));
 800ff32:	492d      	ldr	r1, [pc, #180]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800ff34:	68b8      	ldr	r0, [r7, #8]
 800ff36:	f7f7 fa98 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 800ff3a:	ee07 0a90 	vmov	s15, r0
 800ff3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff42:	eeb0 0a67 	vmov.f32	s0, s15
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7ff fa60 	bl	800f40c <_ZN2ps14SquareWaveTest13setStartValueEf>
                jsonDatPrm.set(StartValueKey,getStartValue());
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f7ff fa73 	bl	800f438 <_ZN2ps14SquareWaveTest13getStartValueEv>
 800ff52:	eef0 7a40 	vmov.f32	s15, s0
 800ff56:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800ff5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4921      	ldr	r1, [pc, #132]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7f7 fa51 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 800ff68:	e039      	b.n	800ffde <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	701a      	strb	r2, [r3, #0]
                string errorMsg = StartValueKey + string(" not a float");
 800ff70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ff74:	4618      	mov	r0, r3
 800ff76:	f00e fa7e 	bl	801e476 <_ZNSaIcEC1Ev>
 800ff7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800ff7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ff82:	491a      	ldr	r1, [pc, #104]	; (800ffec <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 800ff84:	4618      	mov	r0, r3
 800ff86:	f00e fd1d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ff8a:	f107 0314 	add.w	r3, r7, #20
 800ff8e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ff92:	4915      	ldr	r1, [pc, #84]	; (800ffe8 <_ZN2ps14SquareWaveTest21setStartValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f4 fae2 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 800ff9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f00e fb69 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ffa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f00e fa65 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 800ffae:	f107 0214 	add.w	r2, r7, #20
 800ffb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f00e fccf 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ffbe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6838      	ldr	r0, [r7, #0]
 800ffc6:	f7fe fdf3 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800ffca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f00e fb51 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 800ffd4:	f107 0314 	add.w	r3, r7, #20
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f00e fb4c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800ffde:	bf00      	nop
 800ffe0:	3778      	adds	r7, #120	; 0x78
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	2000851c 	.word	0x2000851c
 800ffec:	08021cb8 	.word	0x08021cb8

0800fff0 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void SquareWaveTest::setFinalValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b09e      	sub	sp, #120	; 0x78
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(FinalValueKey))
 800fffe:	494f      	ldr	r1, [pc, #316]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010000:	68b8      	ldr	r0, [r7, #8]
 8010002:	f7f4 fa8e 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 8092 	beq.w	8010132 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[FinalValueKey].is<float>())
 801000e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010012:	4a4a      	ldr	r2, [pc, #296]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010014:	68b9      	ldr	r1, [r7, #8]
 8010016:	4618      	mov	r0, r3
 8010018:	f7f4 fab9 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 801001c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010020:	4611      	mov	r1, r2
 8010022:	4618      	mov	r0, r3
 8010024:	f7f7 fb3a 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8010028:	4603      	mov	r3, r0
 801002a:	bf00      	nop
 801002c:	2b00      	cmp	r3, #0
 801002e:	d019      	beq.n	8010064 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setFinalValue(jsonMsgPrm.get<float>(FinalValueKey));
 8010030:	4942      	ldr	r1, [pc, #264]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010032:	68b8      	ldr	r0, [r7, #8]
 8010034:	f7f7 fa09 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8010038:	eef0 7a40 	vmov.f32	s15, s0
 801003c:	eeb0 0a67 	vmov.f32	s0, s15
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f7ff fa08 	bl	800f456 <_ZN2ps14SquareWaveTest13setFinalValueEf>
                jsonDatPrm.set(FinalValueKey,getFinalValue());
 8010046:	68f8      	ldr	r0, [r7, #12]
 8010048:	f7ff fa1b 	bl	800f482 <_ZN2ps14SquareWaveTest13getFinalValueEv>
 801004c:	eef0 7a40 	vmov.f32	s15, s0
 8010050:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8010054:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010058:	461a      	mov	r2, r3
 801005a:	4938      	ldr	r1, [pc, #224]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7f7 f9d4 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = FinalValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 8010062:	e066      	b.n	8010132 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[FinalValueKey].is<long>())
 8010064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010068:	4a34      	ldr	r2, [pc, #208]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801006a:	68b9      	ldr	r1, [r7, #8]
 801006c:	4618      	mov	r0, r3
 801006e:	f7f4 fa8e 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010076:	4611      	mov	r1, r2
 8010078:	4618      	mov	r0, r3
 801007a:	f7f7 fb4f 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 801007e:	4603      	mov	r3, r0
 8010080:	bf00      	nop
 8010082:	2b00      	cmp	r3, #0
 8010084:	d01b      	beq.n	80100be <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setFinalValue(float(jsonMsgPrm.get<long>(FinalValueKey)));
 8010086:	492d      	ldr	r1, [pc, #180]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010088:	68b8      	ldr	r0, [r7, #8]
 801008a:	f7f7 f9ee 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 801008e:	ee07 0a90 	vmov	s15, r0
 8010092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010096:	eeb0 0a67 	vmov.f32	s0, s15
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff f9db 	bl	800f456 <_ZN2ps14SquareWaveTest13setFinalValueEf>
                jsonDatPrm.set(FinalValueKey,getFinalValue());
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f7ff f9ee 	bl	800f482 <_ZN2ps14SquareWaveTest13getFinalValueEv>
 80100a6:	eef0 7a40 	vmov.f32	s15, s0
 80100aa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80100ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100b2:	461a      	mov	r2, r3
 80100b4:	4921      	ldr	r1, [pc, #132]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7f7 f9a7 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 80100bc:	e039      	b.n	8010132 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2200      	movs	r2, #0
 80100c2:	701a      	strb	r2, [r3, #0]
                string errorMsg = FinalValueKey + string(" not a float");
 80100c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80100c8:	4618      	mov	r0, r3
 80100ca:	f00e f9d4 	bl	801e476 <_ZNSaIcEC1Ev>
 80100ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80100d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80100d6:	491a      	ldr	r1, [pc, #104]	; (8010140 <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 80100d8:	4618      	mov	r0, r3
 80100da:	f00e fc73 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80100de:	f107 0314 	add.w	r3, r7, #20
 80100e2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80100e6:	4915      	ldr	r1, [pc, #84]	; (801013c <_ZN2ps14SquareWaveTest21setFinalValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7f4 fa38 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80100ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80100f2:	4618      	mov	r0, r3
 80100f4:	f00e fabf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80100f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80100fc:	4618      	mov	r0, r3
 80100fe:	f00e f9bb 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 8010102:	f107 0214 	add.w	r2, r7, #20
 8010106:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801010a:	4611      	mov	r1, r2
 801010c:	4618      	mov	r0, r3
 801010e:	f00e fc25 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010112:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010116:	4619      	mov	r1, r3
 8010118:	6838      	ldr	r0, [r7, #0]
 801011a:	f7fe fd49 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801011e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010122:	4618      	mov	r0, r3
 8010124:	f00e faa7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 8010128:	f107 0314 	add.w	r3, r7, #20
 801012c:	4618      	mov	r0, r3
 801012e:	f00e faa2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8010132:	bf00      	nop
 8010134:	3778      	adds	r7, #120	; 0x78
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	20008534 	.word	0x20008534
 8010140:	08021cb8 	.word	0x08021cb8

08010144 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    void SquareWaveTest::setStepValueFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 8010144:	b580      	push	{r7, lr}
 8010146:	b09e      	sub	sp, #120	; 0x78
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
 8010150:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(StepValueKey))
 8010152:	494f      	ldr	r1, [pc, #316]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010154:	68b8      	ldr	r0, [r7, #8]
 8010156:	f7f4 f9e4 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 8092 	beq.w	8010286 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[StepValueKey].is<float>())
 8010162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010166:	4a4a      	ldr	r2, [pc, #296]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010168:	68b9      	ldr	r1, [r7, #8]
 801016a:	4618      	mov	r0, r3
 801016c:	f7f4 fa0f 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010174:	4611      	mov	r1, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7f7 fa90 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 801017c:	4603      	mov	r3, r0
 801017e:	bf00      	nop
 8010180:	2b00      	cmp	r3, #0
 8010182:	d019      	beq.n	80101b8 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setStepValue(jsonMsgPrm.get<float>(StepValueKey));
 8010184:	4942      	ldr	r1, [pc, #264]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010186:	68b8      	ldr	r0, [r7, #8]
 8010188:	f7f7 f95f 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 801018c:	eef0 7a40 	vmov.f32	s15, s0
 8010190:	eeb0 0a67 	vmov.f32	s0, s15
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7ff f983 	bl	800f4a0 <_ZN2ps14SquareWaveTest12setStepValueEf>
                jsonDatPrm.set(StepValueKey,getStepValue());
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff f996 	bl	800f4cc <_ZN2ps14SquareWaveTest12getStepValueEv>
 80101a0:	eef0 7a40 	vmov.f32	s15, s0
 80101a4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80101a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80101ac:	461a      	mov	r2, r3
 80101ae:	4938      	ldr	r1, [pc, #224]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7f7 f92a 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = StepValueKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 80101b6:	e066      	b.n	8010286 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[StepValueKey].is<long>())
 80101b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101bc:	4a34      	ldr	r2, [pc, #208]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80101be:	68b9      	ldr	r1, [r7, #8]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f4 f9e4 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80101ca:	4611      	mov	r1, r2
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7f7 faa5 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80101d2:	4603      	mov	r3, r0
 80101d4:	bf00      	nop
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d01b      	beq.n	8010212 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setStepValue(float(jsonMsgPrm.get<long>(StepValueKey)));
 80101da:	492d      	ldr	r1, [pc, #180]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80101dc:	68b8      	ldr	r0, [r7, #8]
 80101de:	f7f7 f944 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80101e2:	ee07 0a90 	vmov	s15, r0
 80101e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101ea:	eeb0 0a67 	vmov.f32	s0, s15
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7ff f956 	bl	800f4a0 <_ZN2ps14SquareWaveTest12setStepValueEf>
                jsonDatPrm.set(StepValueKey,getStepValue());
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f7ff f969 	bl	800f4cc <_ZN2ps14SquareWaveTest12getStepValueEv>
 80101fa:	eef0 7a40 	vmov.f32	s15, s0
 80101fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8010202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010206:	461a      	mov	r2, r3
 8010208:	4921      	ldr	r1, [pc, #132]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7f7 f8fd 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 8010210:	e039      	b.n	8010286 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	2200      	movs	r2, #0
 8010216:	701a      	strb	r2, [r3, #0]
                string errorMsg = StepValueKey + string(" not a float");
 8010218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801021c:	4618      	mov	r0, r3
 801021e:	f00e f92a 	bl	801e476 <_ZNSaIcEC1Ev>
 8010222:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8010226:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801022a:	491a      	ldr	r1, [pc, #104]	; (8010294 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 801022c:	4618      	mov	r0, r3
 801022e:	f00e fbc9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010232:	f107 0314 	add.w	r3, r7, #20
 8010236:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801023a:	4915      	ldr	r1, [pc, #84]	; (8010290 <_ZN2ps14SquareWaveTest20setStepValueFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801023c:	4618      	mov	r0, r3
 801023e:	f7f4 f98e 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8010242:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010246:	4618      	mov	r0, r3
 8010248:	f00e fa15 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801024c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010250:	4618      	mov	r0, r3
 8010252:	f00e f911 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 8010256:	f107 0214 	add.w	r2, r7, #20
 801025a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f00e fb7b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010266:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801026a:	4619      	mov	r1, r3
 801026c:	6838      	ldr	r0, [r7, #0]
 801026e:	f7fe fc9f 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8010272:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010276:	4618      	mov	r0, r3
 8010278:	f00e f9fd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 801027c:	f107 0314 	add.w	r3, r7, #20
 8010280:	4618      	mov	r0, r3
 8010282:	f00e f9f8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8010286:	bf00      	nop
 8010288:	3778      	adds	r7, #120	; 0x78
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	2000854c 	.word	0x2000854c
 8010294:	08021cb8 	.word	0x08021cb8

08010298 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:


    void SquareWaveTest::setAmplitudeFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 8010298:	b580      	push	{r7, lr}
 801029a:	b09e      	sub	sp, #120	; 0x78
 801029c:	af00      	add	r7, sp, #0
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	607a      	str	r2, [r7, #4]
 80102a4:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(AmplitudeKey))
 80102a6:	494f      	ldr	r1, [pc, #316]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f7f4 f93a 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 8092 	beq.w	80103da <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[AmplitudeKey].is<float>())
 80102b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80102ba:	4a4a      	ldr	r2, [pc, #296]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80102bc:	68b9      	ldr	r1, [r7, #8]
 80102be:	4618      	mov	r0, r3
 80102c0:	f7f4 f965 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7f7 f9e6 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80102d0:	4603      	mov	r3, r0
 80102d2:	bf00      	nop
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d019      	beq.n	801030c <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setAmplitude(jsonMsgPrm.get<float>(AmplitudeKey));
 80102d8:	4942      	ldr	r1, [pc, #264]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80102da:	68b8      	ldr	r0, [r7, #8]
 80102dc:	f7f7 f8b5 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80102e0:	eef0 7a40 	vmov.f32	s15, s0
 80102e4:	eeb0 0a67 	vmov.f32	s0, s15
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f7ff f8fe 	bl	800f4ea <_ZN2ps14SquareWaveTest12setAmplitudeEf>
                jsonDatPrm.set(AmplitudeKey,getAmplitude());
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff f90e 	bl	800f510 <_ZN2ps14SquareWaveTest12getAmplitudeEv>
 80102f4:	eef0 7a40 	vmov.f32	s15, s0
 80102f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80102fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010300:	461a      	mov	r2, r3
 8010302:	4938      	ldr	r1, [pc, #224]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7f7 f880 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = AmplitudeKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 801030a:	e066      	b.n	80103da <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[AmplitudeKey].is<long>()) 
 801030c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010310:	4a34      	ldr	r2, [pc, #208]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010312:	68b9      	ldr	r1, [r7, #8]
 8010314:	4618      	mov	r0, r3
 8010316:	f7f4 f93a 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 801031a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801031e:	4611      	mov	r1, r2
 8010320:	4618      	mov	r0, r3
 8010322:	f7f7 f9fb 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8010326:	4603      	mov	r3, r0
 8010328:	bf00      	nop
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01b      	beq.n	8010366 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setAmplitude(float(jsonMsgPrm.get<long>(AmplitudeKey)));
 801032e:	492d      	ldr	r1, [pc, #180]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010330:	68b8      	ldr	r0, [r7, #8]
 8010332:	f7f7 f89a 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8010336:	ee07 0a90 	vmov	s15, r0
 801033a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801033e:	eeb0 0a67 	vmov.f32	s0, s15
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f7ff f8d1 	bl	800f4ea <_ZN2ps14SquareWaveTest12setAmplitudeEf>
                jsonDatPrm.set(AmplitudeKey,getAmplitude());
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f7ff f8e1 	bl	800f510 <_ZN2ps14SquareWaveTest12getAmplitudeEv>
 801034e:	eef0 7a40 	vmov.f32	s15, s0
 8010352:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8010356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801035a:	461a      	mov	r2, r3
 801035c:	4921      	ldr	r1, [pc, #132]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7f7 f853 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 8010364:	e039      	b.n	80103da <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2200      	movs	r2, #0
 801036a:	701a      	strb	r2, [r3, #0]
                string errorMsg = AmplitudeKey + string(" not a float");
 801036c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010370:	4618      	mov	r0, r3
 8010372:	f00e f880 	bl	801e476 <_ZNSaIcEC1Ev>
 8010376:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801037a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801037e:	491a      	ldr	r1, [pc, #104]	; (80103e8 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 8010380:	4618      	mov	r0, r3
 8010382:	f00e fb1f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010386:	f107 0314 	add.w	r3, r7, #20
 801038a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801038e:	4915      	ldr	r1, [pc, #84]	; (80103e4 <_ZN2ps14SquareWaveTest20setAmplitudeFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010390:	4618      	mov	r0, r3
 8010392:	f7f4 f8e4 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8010396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801039a:	4618      	mov	r0, r3
 801039c:	f00e f96b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80103a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80103a4:	4618      	mov	r0, r3
 80103a6:	f00e f867 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 80103aa:	f107 0214 	add.w	r2, r7, #20
 80103ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80103b2:	4611      	mov	r1, r2
 80103b4:	4618      	mov	r0, r3
 80103b6:	f00e fad1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80103ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80103be:	4619      	mov	r1, r3
 80103c0:	6838      	ldr	r0, [r7, #0]
 80103c2:	f7fe fbf5 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80103c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80103ca:	4618      	mov	r0, r3
 80103cc:	f00e f953 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 80103d0:	f107 0314 	add.w	r3, r7, #20
 80103d4:	4618      	mov	r0, r3
 80103d6:	f00e f94e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80103da:	bf00      	nop
 80103dc:	3778      	adds	r7, #120	; 0x78
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	20008564 	.word	0x20008564
 80103e8:	08021cb8 	.word	0x08021cb8

080103ec <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE>:

    void SquareWaveTest::setWindowFromJson(JsonObject &jsonMsgPrm, JsonObject &jsonDatPrm, ReturnStatus &status)
    {
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b09e      	sub	sp, #120	; 0x78
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
        if (jsonMsgPrm.containsKey(WindowKey))
 80103fa:	494f      	ldr	r1, [pc, #316]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80103fc:	68b8      	ldr	r0, [r7, #8]
 80103fe:	f7f4 f890 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 8092 	beq.w	801052e <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
        {
            if (jsonMsgPrm[WindowKey].is<float>())
 801040a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801040e:	4a4a      	ldr	r2, [pc, #296]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010410:	68b9      	ldr	r1, [r7, #8]
 8010412:	4618      	mov	r0, r3
 8010414:	f7f4 f8bb 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7f7 f93c 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8010424:	4603      	mov	r3, r0
 8010426:	bf00      	nop
 8010428:	2b00      	cmp	r3, #0
 801042a:	d019      	beq.n	8010460 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x74>
            {
                setWindow(jsonMsgPrm.get<float>(WindowKey));
 801042c:	4942      	ldr	r1, [pc, #264]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 801042e:	68b8      	ldr	r0, [r7, #8]
 8010430:	f7f7 f80b 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8010434:	eef0 7a40 	vmov.f32	s15, s0
 8010438:	eeb0 0a67 	vmov.f32	s0, s15
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f7ff f876 	bl	800f52e <_ZN2ps14SquareWaveTest9setWindowEf>
                jsonDatPrm.set(WindowKey,getWindow());
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f7ff f8a9 	bl	800f59a <_ZN2ps14SquareWaveTest9getWindowEv>
 8010448:	eef0 7a40 	vmov.f32	s15, s0
 801044c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8010450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010454:	461a      	mov	r2, r3
 8010456:	4938      	ldr	r1, [pc, #224]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7f6 ffd6 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
                status.success = false;
                string errorMsg = WindowKey + string(" not a float");
                status.appendToMessage(errorMsg);
            }
        }
    }
 801045e:	e066      	b.n	801052e <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
            else if (jsonMsgPrm[WindowKey].is<long>()) 
 8010460:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010464:	4a34      	ldr	r2, [pc, #208]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010466:	68b9      	ldr	r1, [r7, #8]
 8010468:	4618      	mov	r0, r3
 801046a:	f7f4 f890 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 801046e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010472:	4611      	mov	r1, r2
 8010474:	4618      	mov	r0, r3
 8010476:	f7f7 f951 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 801047a:	4603      	mov	r3, r0
 801047c:	bf00      	nop
 801047e:	2b00      	cmp	r3, #0
 8010480:	d01b      	beq.n	80104ba <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0xce>
                setWindow(float(jsonMsgPrm.get<long>(WindowKey)));
 8010482:	492d      	ldr	r1, [pc, #180]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 8010484:	68b8      	ldr	r0, [r7, #8]
 8010486:	f7f6 fff0 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 801048a:	ee07 0a90 	vmov	s15, r0
 801048e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010492:	eeb0 0a67 	vmov.f32	s0, s15
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f7ff f849 	bl	800f52e <_ZN2ps14SquareWaveTest9setWindowEf>
                jsonDatPrm.set(WindowKey,getWindow());
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f7ff f87c 	bl	800f59a <_ZN2ps14SquareWaveTest9getWindowEv>
 80104a2:	eef0 7a40 	vmov.f32	s15, s0
 80104a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80104aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80104ae:	461a      	mov	r2, r3
 80104b0:	4921      	ldr	r1, [pc, #132]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7f6 ffa9 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
    }
 80104b8:	e039      	b.n	801052e <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x142>
                status.success = false;
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	2200      	movs	r2, #0
 80104be:	701a      	strb	r2, [r3, #0]
                string errorMsg = WindowKey + string(" not a float");
 80104c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80104c4:	4618      	mov	r0, r3
 80104c6:	f00d ffd6 	bl	801e476 <_ZNSaIcEC1Ev>
 80104ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80104ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104d2:	491a      	ldr	r1, [pc, #104]	; (801053c <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x150>)
 80104d4:	4618      	mov	r0, r3
 80104d6:	f00e fa75 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80104da:	f107 0314 	add.w	r3, r7, #20
 80104de:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80104e2:	4915      	ldr	r1, [pc, #84]	; (8010538 <_ZN2ps14SquareWaveTest17setWindowFromJsonERN11ArduinoJson10JsonObjectES3_RNS_12ReturnStatusE+0x14c>)
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f4 f83a 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 80104ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104ee:	4618      	mov	r0, r3
 80104f0:	f00e f8c1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80104f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80104f8:	4618      	mov	r0, r3
 80104fa:	f00d ffbd 	bl	801e478 <_ZNSaIcED1Ev>
                status.appendToMessage(errorMsg);
 80104fe:	f107 0214 	add.w	r2, r7, #20
 8010502:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010506:	4611      	mov	r1, r2
 8010508:	4618      	mov	r0, r3
 801050a:	f00e fa27 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801050e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010512:	4619      	mov	r1, r3
 8010514:	6838      	ldr	r0, [r7, #0]
 8010516:	f7fe fb4b 	bl	800ebb0 <_ZN2ps12ReturnStatus15appendToMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801051a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801051e:	4618      	mov	r0, r3
 8010520:	f00e f8a9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
 8010524:	f107 0314 	add.w	r3, r7, #20
 8010528:	4618      	mov	r0, r3
 801052a:	f00e f8a4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 801052e:	bf00      	nop
 8010530:	3778      	adds	r7, #120	; 0x78
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	200085dc 	.word	0x200085dc
 801053c:	08021cb8 	.word	0x08021cb8

08010540 <_ZSt3minIyERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	4290      	cmp	r0, r2
 8010558:	eb71 0303 	sbcs.w	r3, r1, r3
 801055c:	d201      	bcs.n	8010562 <_ZSt3minIyERKT_S2_S2_+0x22>
	return __b;
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	e000      	b.n	8010564 <_ZSt3minIyERKT_S2_S2_+0x24>
      return __a;
 8010562:	687b      	ldr	r3, [r7, #4]
    }
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <_ZSt3maxIyERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	4290      	cmp	r0, r2
 8010588:	eb71 0303 	sbcs.w	r3, r1, r3
 801058c:	d201      	bcs.n	8010592 <_ZSt3maxIyERKT_S2_S2_+0x22>
	return __b;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	e000      	b.n	8010594 <_ZSt3maxIyERKT_S2_S2_+0x24>
      return __a;
 8010592:	687b      	ldr	r3, [r7, #4]
    }
 8010594:	4618      	mov	r0, r3
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <_Z41__static_initialization_and_destruction_0ii>:
 
} // namespace ps
 80105a0:	b5b0      	push	{r4, r5, r7, lr}
 80105a2:	b08c      	sub	sp, #48	; 0x30
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	f040 80aa 	bne.w	8010706 <_Z41__static_initialization_and_destruction_0ii+0x166>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105b8:	4293      	cmp	r3, r2
 80105ba:	f040 80a4 	bne.w	8010706 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 80105be:	4c61      	ldr	r4, [pc, #388]	; (8010744 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80105c0:	4625      	mov	r5, r4
 80105c2:	f107 030c 	add.w	r3, r7, #12
 80105c6:	4618      	mov	r0, r3
 80105c8:	f00d ff55 	bl	801e476 <_ZNSaIcEC1Ev>
 80105cc:	f107 030c 	add.w	r3, r7, #12
 80105d0:	461a      	mov	r2, r3
 80105d2:	495d      	ldr	r1, [pc, #372]	; (8010748 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80105d4:	4628      	mov	r0, r5
 80105d6:	f00e f9f5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80105da:	f107 030c 	add.w	r3, r7, #12
 80105de:	4618      	mov	r0, r3
 80105e0:	f00d ff4a 	bl	801e478 <_ZNSaIcED1Ev>
 80105e4:	3418      	adds	r4, #24
 80105e6:	f107 0310 	add.w	r3, r7, #16
 80105ea:	4618      	mov	r0, r3
 80105ec:	f00d ff43 	bl	801e476 <_ZNSaIcEC1Ev>
 80105f0:	f107 0310 	add.w	r3, r7, #16
 80105f4:	461a      	mov	r2, r3
 80105f6:	4955      	ldr	r1, [pc, #340]	; (801074c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80105f8:	4620      	mov	r0, r4
 80105fa:	f00e f9e3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80105fe:	f107 0310 	add.w	r3, r7, #16
 8010602:	4618      	mov	r0, r3
 8010604:	f00d ff38 	bl	801e478 <_ZNSaIcED1Ev>
 8010608:	3418      	adds	r4, #24
 801060a:	f107 0314 	add.w	r3, r7, #20
 801060e:	4618      	mov	r0, r3
 8010610:	f00d ff31 	bl	801e476 <_ZNSaIcEC1Ev>
 8010614:	f107 0314 	add.w	r3, r7, #20
 8010618:	461a      	mov	r2, r3
 801061a:	494d      	ldr	r1, [pc, #308]	; (8010750 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 801061c:	4620      	mov	r0, r4
 801061e:	f00e f9d1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010622:	f107 0314 	add.w	r3, r7, #20
 8010626:	4618      	mov	r0, r3
 8010628:	f00d ff26 	bl	801e478 <_ZNSaIcED1Ev>
 801062c:	3418      	adds	r4, #24
 801062e:	f107 0318 	add.w	r3, r7, #24
 8010632:	4618      	mov	r0, r3
 8010634:	f00d ff1f 	bl	801e476 <_ZNSaIcEC1Ev>
 8010638:	f107 0318 	add.w	r3, r7, #24
 801063c:	461a      	mov	r2, r3
 801063e:	4945      	ldr	r1, [pc, #276]	; (8010754 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8010640:	4620      	mov	r0, r4
 8010642:	f00e f9bf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010646:	f107 0318 	add.w	r3, r7, #24
 801064a:	4618      	mov	r0, r3
 801064c:	f00d ff14 	bl	801e478 <_ZNSaIcED1Ev>
    };
 8010650:	4c41      	ldr	r4, [pc, #260]	; (8010758 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8010652:	4625      	mov	r5, r4
 8010654:	f107 031c 	add.w	r3, r7, #28
 8010658:	4618      	mov	r0, r3
 801065a:	f00d ff0c 	bl	801e476 <_ZNSaIcEC1Ev>
 801065e:	f107 031c 	add.w	r3, r7, #28
 8010662:	461a      	mov	r2, r3
 8010664:	493d      	ldr	r1, [pc, #244]	; (801075c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8010666:	4628      	mov	r0, r5
 8010668:	f00e f9ac 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801066c:	f107 031c 	add.w	r3, r7, #28
 8010670:	4618      	mov	r0, r3
 8010672:	f00d ff01 	bl	801e478 <_ZNSaIcED1Ev>
 8010676:	3418      	adds	r4, #24
 8010678:	f107 0320 	add.w	r3, r7, #32
 801067c:	4618      	mov	r0, r3
 801067e:	f00d fefa 	bl	801e476 <_ZNSaIcEC1Ev>
 8010682:	f107 0320 	add.w	r3, r7, #32
 8010686:	461a      	mov	r2, r3
 8010688:	4935      	ldr	r1, [pc, #212]	; (8010760 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 801068a:	4620      	mov	r0, r4
 801068c:	f00e f99a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010690:	f107 0320 	add.w	r3, r7, #32
 8010694:	4618      	mov	r0, r3
 8010696:	f00d feef 	bl	801e478 <_ZNSaIcED1Ev>
 801069a:	3418      	adds	r4, #24
 801069c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106a0:	4618      	mov	r0, r3
 80106a2:	f00d fee8 	bl	801e476 <_ZNSaIcEC1Ev>
 80106a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106aa:	461a      	mov	r2, r3
 80106ac:	492d      	ldr	r1, [pc, #180]	; (8010764 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80106ae:	4620      	mov	r0, r4
 80106b0:	f00e f988 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80106b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106b8:	4618      	mov	r0, r3
 80106ba:	f00d fedd 	bl	801e478 <_ZNSaIcED1Ev>
 80106be:	3418      	adds	r4, #24
 80106c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106c4:	4618      	mov	r0, r3
 80106c6:	f00d fed6 	bl	801e476 <_ZNSaIcEC1Ev>
 80106ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106ce:	461a      	mov	r2, r3
 80106d0:	4925      	ldr	r1, [pc, #148]	; (8010768 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80106d2:	4620      	mov	r0, r4
 80106d4:	f00e f976 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80106d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106dc:	4618      	mov	r0, r3
 80106de:	f00d fecb 	bl	801e478 <_ZNSaIcED1Ev>
 80106e2:	3418      	adds	r4, #24
 80106e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106e8:	4618      	mov	r0, r3
 80106ea:	f00d fec4 	bl	801e476 <_ZNSaIcEC1Ev>
 80106ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80106f2:	461a      	mov	r2, r3
 80106f4:	491d      	ldr	r1, [pc, #116]	; (801076c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80106f6:	4620      	mov	r0, r4
 80106f8:	f00e f964 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80106fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010700:	4618      	mov	r0, r3
 8010702:	f00d feb9 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d116      	bne.n	801073a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010712:	4293      	cmp	r3, r2
 8010714:	d111      	bne.n	801073a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8010716:	4c16      	ldr	r4, [pc, #88]	; (8010770 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8010718:	4b0f      	ldr	r3, [pc, #60]	; (8010758 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 801071a:	429c      	cmp	r4, r3
 801071c:	d004      	beq.n	8010728 <_Z41__static_initialization_and_destruction_0ii+0x188>
 801071e:	3c18      	subs	r4, #24
 8010720:	4620      	mov	r0, r4
 8010722:	f00d ffa8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010726:	e7f7      	b.n	8010718 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 8010728:	4c12      	ldr	r4, [pc, #72]	; (8010774 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 801072a:	4b06      	ldr	r3, [pc, #24]	; (8010744 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 801072c:	429c      	cmp	r4, r3
 801072e:	d004      	beq.n	801073a <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8010730:	3c18      	subs	r4, #24
 8010732:	4620      	mov	r0, r4
 8010734:	f00d ff9f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010738:	e7f7      	b.n	801072a <_Z41__static_initialization_and_destruction_0ii+0x18a>
 801073a:	bf00      	nop
 801073c:	3730      	adds	r7, #48	; 0x30
 801073e:	46bd      	mov	sp, r7
 8010740:	bdb0      	pop	{r4, r5, r7, pc}
 8010742:	bf00      	nop
 8010744:	20009908 	.word	0x20009908
 8010748:	08021cc8 	.word	0x08021cc8
 801074c:	08021cd4 	.word	0x08021cd4
 8010750:	08021ce0 	.word	0x08021ce0
 8010754:	08021cec 	.word	0x08021cec
 8010758:	20009968 	.word	0x20009968
 801075c:	08021cf8 	.word	0x08021cf8
 8010760:	08021d08 	.word	0x08021d08
 8010764:	08021d18 	.word	0x08021d18
 8010768:	08021d28 	.word	0x08021d28
 801076c:	08021d38 	.word	0x08021d38
 8010770:	200099e0 	.word	0x200099e0
 8010774:	20009968 	.word	0x20009968

08010778 <_GLOBAL__sub_I__ZN2ps14SquareWaveTestC2Ev>:
 8010778:	b580      	push	{r7, lr}
 801077a:	af00      	add	r7, sp, #0
 801077c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010780:	2001      	movs	r0, #1
 8010782:	f7ff ff0d 	bl	80105a0 <_Z41__static_initialization_and_destruction_0ii>
 8010786:	bd80      	pop	{r7, pc}

08010788 <_GLOBAL__sub_D__ZN2ps14SquareWaveTestC2Ev>:
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
 801078c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010790:	2000      	movs	r0, #0
 8010792:	f7ff ff05 	bl	80105a0 <_Z41__static_initialization_and_destruction_0ii>
 8010796:	bd80      	pop	{r7, pc}

08010798 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv>:
inline const char *JsonVariant::variantAsString() const {
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  if (_type == JSON_UNPARSED && _content.asString &&
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d10e      	bne.n	80107c6 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x2e>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00a      	beq.n	80107c6 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x2e>
      !strcmp("null", _content.asString))
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	4619      	mov	r1, r3
 80107b6:	480c      	ldr	r0, [pc, #48]	; (80107e8 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x50>)
 80107b8:	f7ef fd0e 	bl	80001d8 <strcmp>
 80107bc:	4603      	mov	r3, r0
  if (_type == JSON_UNPARSED && _content.asString &&
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x2e>
    return NULL;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e00b      	b.n	80107de <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x46>
  if (_type == JSON_STRING || _type == JSON_UNPARSED) return _content.asString;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	d003      	beq.n	80107d6 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x3e>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d102      	bne.n	80107dc <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x44>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	e000      	b.n	80107de <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv+0x46>
  return NULL;
 80107dc:	2300      	movs	r3, #0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	08021d58 	.word	0x08021d58

080107ec <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv>:
inline bool JsonVariant::variantIsBoolean() const {
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  if (_type == JSON_BOOLEAN) return true;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b03      	cmp	r3, #3
 80107fa:	d101      	bne.n	8010800 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x14>
 80107fc:	2301      	movs	r3, #1
 80107fe:	e01f      	b.n	8010840 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x54>
  if (_type != JSON_UNPARSED || _content.asString == NULL) return false;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d103      	bne.n	8010810 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x24>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d101      	bne.n	8010814 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x28>
 8010810:	2300      	movs	r3, #0
 8010812:	e015      	b.n	8010840 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x54>
  return !strcmp(_content.asString, "true") ||
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	490b      	ldr	r1, [pc, #44]	; (8010848 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x5c>)
 801081a:	4618      	mov	r0, r3
 801081c:	f7ef fcdc 	bl	80001d8 <strcmp>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d008      	beq.n	8010838 <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x4c>
         !strcmp(_content.asString, "false");
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	689b      	ldr	r3, [r3, #8]
 801082a:	4908      	ldr	r1, [pc, #32]	; (801084c <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x60>)
 801082c:	4618      	mov	r0, r3
 801082e:	f7ef fcd3 	bl	80001d8 <strcmp>
 8010832:	4603      	mov	r3, r0
  return !strcmp(_content.asString, "true") ||
 8010834:	2b00      	cmp	r3, #0
 8010836:	d101      	bne.n	801083c <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x50>
 8010838:	2301      	movs	r3, #1
         !strcmp(_content.asString, "false");
 801083a:	e000      	b.n	801083e <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv+0x52>
  return !strcmp(_content.asString, "true") ||
 801083c:	2300      	movs	r3, #0
         !strcmp(_content.asString, "false");
 801083e:	bf00      	nop
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	08021d60 	.word	0x08021d60
 801084c:	08021d68 	.word	0x08021d68

08010850 <_ZN2ps11SystemState18dummyTimerCallbackEv>:

            Array<LowPass,NumMuxChan> currLowPass_;
            float lowPassDtSec_;
            BaseTest *test_;

            static void dummyTimerCallback() {};
 8010850:	b480      	push	{r7}
 8010852:	af00      	add	r7, sp, #0
 8010854:	bf00      	nop
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <_ZN2ps11SystemStateC1Ev>:
#endif

namespace ps
{

    SystemState::SystemState()
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b08f      	sub	sp, #60	; 0x3c
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3304      	adds	r3, #4
 801086c:	4618      	mov	r0, r3
 801086e:	f7f4 fe7c 	bl	800556a <_ZN2ps15AnalogSubsystemC1Ev>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	339c      	adds	r3, #156	; 0x9c
 8010876:	4618      	mov	r0, r3
 8010878:	f7fa f99e 	bl	800abb8 <_ZN2ps15ElectrodeSwitchC1Ev>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	33a0      	adds	r3, #160	; 0xa0
 8010880:	4618      	mov	r0, r3
 8010882:	f7fc f9d1 	bl	800cc28 <_ZN2ps15MessageReceiverC1Ev>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 801088c:	4618      	mov	r0, r3
 801088e:	f7fb fa4f 	bl	800bd30 <_ZN2ps13MessageParserC1Ev>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f603 038d 	addw	r3, r3, #2189	; 0x88d
 8010898:	4618      	mov	r0, r3
 801089a:	f7fc fda2 	bl	800d3e2 <_ZN2ps13MessageSenderC1Ev>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 80108a4:	2100      	movs	r1, #0
 80108a6:	4618      	mov	r0, r3
 80108a8:	f003 fe68 	bl	801457c <_ZN2ps12CommandTableINS_11SystemStateELj50EEC1EPS1_>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80108b2:	3308      	adds	r3, #8
 80108b4:	4618      	mov	r0, r3
 80108b6:	f003 fe73 	bl	80145a0 <_ZN2ps14CircularBufferINS_6SampleELj1000EEC1Ev>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f503 43e2 	add.w	r3, r3, #28928	; 0x7100
 80108c0:	3370      	adds	r3, #112	; 0x70
 80108c2:	4618      	mov	r0, r3
 80108c4:	f004 fe5e 	bl	8015584 <_ZN2ps11VoltammetryC1Ev>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80108ce:	461a      	mov	r2, r3
 80108d0:	4b22      	ldr	r3, [pc, #136]	; (801095c <_ZN2ps11SystemStateC1Ev+0xfc>)
 80108d2:	f8c2 3be0 	str.w	r3, [r2, #3040]	; 0xbe0
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80108dc:	3378      	adds	r3, #120	; 0x78
 80108de:	4618      	mov	r0, r3
 80108e0:	f003 fe8a 	bl	80145f8 <_ZN5ArrayIN2ps7LowPassELj1EEC1Ev>
    { 
        testInProgress_ = false;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	701a      	strb	r2, [r3, #0]
        lastSampleFlag_ = false;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	705a      	strb	r2, [r3, #1]
        timerCnt_ = 0;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80108f6:	3370      	adds	r3, #112	; 0x70
 80108f8:	4619      	mov	r1, r3
 80108fa:	f04f 0200 	mov.w	r2, #0
 80108fe:	f04f 0300 	mov.w	r3, #0
 8010902:	e941 2302 	strd	r2, r3, [r1, #-8]
        test_ = nullptr;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 801090c:	461a      	mov	r2, r3
 801090e:	2300      	movs	r3, #0
 8010910:	f8c2 3c2c 	str.w	r3, [r2, #3116]	; 0xc2c

        //currLowPass_.setParam(CurrLowPassParam);
        for (int i=0; i<NumMuxChan; i++)
 8010914:	2300      	movs	r3, #0
 8010916:	637b      	str	r3, [r7, #52]	; 0x34
 8010918:	e012      	b.n	8010940 <_ZN2ps11SystemStateC1Ev+0xe0>
        {
            currLowPass_.push_back(LowPass(CurrLowPassParam));
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f503 44f7 	add.w	r4, r3, #31616	; 0x7b80
 8010920:	3478      	adds	r4, #120	; 0x78
 8010922:	4b0f      	ldr	r3, [pc, #60]	; (8010960 <_ZN2ps11SystemStateC1Ev+0x100>)
 8010924:	f107 0008 	add.w	r0, r7, #8
 8010928:	cb0e      	ldmia	r3, {r1, r2, r3}
 801092a:	f7fa fa44 	bl	800adb6 <_ZN2ps7LowPassC1ENS_12LowPassParamE>
 801092e:	f107 0308 	add.w	r3, r7, #8
 8010932:	4619      	mov	r1, r3
 8010934:	4620      	mov	r0, r4
 8010936:	f003 fe7d 	bl	8014634 <_ZN5ArrayIN2ps7LowPassELj1EE9push_backERKS1_>
        for (int i=0; i<NumMuxChan; i++)
 801093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093c:	3301      	adds	r3, #1
 801093e:	637b      	str	r3, [r7, #52]	; 0x34
 8010940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010942:	2b00      	cmp	r3, #0
 8010944:	dde9      	ble.n	801091a <_ZN2ps11SystemStateC1Ev+0xba>
        }
        setSamplePeriod(DefaultSamplePeriod);
 8010946:	4b07      	ldr	r3, [pc, #28]	; (8010964 <_ZN2ps11SystemStateC1Ev+0x104>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f003 fdb3 	bl	80144b8 <_ZN2ps11SystemState15setSamplePeriodEm>
    }
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	373c      	adds	r7, #60	; 0x3c
 8010958:	46bd      	mov	sp, r7
 801095a:	bd90      	pop	{r4, r7, pc}
 801095c:	08010851 	.word	0x08010851
 8010960:	0802232c 	.word	0x0802232c
 8010964:	08022320 	.word	0x08022320

08010968 <_ZN2ps11SystemState10initializeEv>:


    void SystemState::initialize()
    {
 8010968:	b590      	push	{r4, r7, lr}
 801096a:	f6ad 1dec 	subw	sp, sp, #2540	; 0x9ec
 801096e:	af02      	add	r7, sp, #8
 8010970:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010974:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010978:	6018      	str	r0, [r3, #0]
        commandTable_.setClient(this);
 801097a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801097e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f503 6209 	add.w	r2, r3, #2192	; 0x890
 8010988:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801098c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010990:	6819      	ldr	r1, [r3, #0]
 8010992:	4610      	mov	r0, r2
 8010994:	f003 fe71 	bl	801467a <_ZN2ps12CommandTableINS_11SystemStateELj50EE9setClientEPS1_>
        commandTable_.registerMethod(CommandKey,   RunTestCmd,              &SystemState::onCommandRunTest);
 8010998:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801099c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80109a6:	f107 0308 	add.w	r3, r7, #8
 80109aa:	49db      	ldr	r1, [pc, #876]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 80109ac:	4618      	mov	r0, r3
 80109ae:	f00d ffd5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80109b2:	f107 0320 	add.w	r3, r7, #32
 80109b6:	49d9      	ldr	r1, [pc, #868]	; (8010d1c <_ZN2ps11SystemState10initializeEv+0x3b4>)
 80109b8:	4618      	mov	r0, r3
 80109ba:	f00d ffcf 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80109be:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80109c2:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80109c6:	4ad6      	ldr	r2, [pc, #856]	; (8010d20 <_ZN2ps11SystemState10initializeEv+0x3b8>)
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80109ce:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80109d2:	2200      	movs	r2, #0
 80109d4:	605a      	str	r2, [r3, #4]
 80109d6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80109da:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 80109de:	f107 0020 	add.w	r0, r7, #32
 80109e2:	f107 0108 	add.w	r1, r7, #8
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	9200      	str	r2, [sp, #0]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4602      	mov	r2, r0
 80109ee:	4620      	mov	r0, r4
 80109f0:	f003 fe51 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80109f4:	f107 0320 	add.w	r3, r7, #32
 80109f8:	4618      	mov	r0, r3
 80109fa:	f00d fe3c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80109fe:	f107 0308 	add.w	r3, r7, #8
 8010a02:	4618      	mov	r0, r3
 8010a04:	f00d fe37 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   StopTestCmd,             &SystemState::onCommandStopTest);
 8010a08:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010a0c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a1a:	49bf      	ldr	r1, [pc, #764]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f00d ff9d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a26:	49bf      	ldr	r1, [pc, #764]	; (8010d24 <_ZN2ps11SystemState10initializeEv+0x3bc>)
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f00d ff97 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010a2e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010a32:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8010a36:	4abc      	ldr	r2, [pc, #752]	; (8010d28 <_ZN2ps11SystemState10initializeEv+0x3c0>)
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010a3e:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8010a42:	2200      	movs	r2, #0
 8010a44:	605a      	str	r2, [r3, #4]
 8010a46:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010a4a:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8010a4e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8010a52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010a56:	685a      	ldr	r2, [r3, #4]
 8010a58:	9200      	str	r2, [sp, #0]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f003 fe19 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f00d fe04 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a72:	4618      	mov	r0, r3
 8010a74:	f00d fdff 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetVoltCmd,              &SystemState::onCommandGetVolt);
 8010a78:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010a7c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010a86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010a8a:	49a3      	ldr	r1, [pc, #652]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f00d ff65 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010a92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010a96:	49a5      	ldr	r1, [pc, #660]	; (8010d2c <_ZN2ps11SystemState10initializeEv+0x3c4>)
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f00d ff5f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010a9e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010aa2:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8010aa6:	4aa2      	ldr	r2, [pc, #648]	; (8010d30 <_ZN2ps11SystemState10initializeEv+0x3c8>)
 8010aa8:	601a      	str	r2, [r3, #0]
 8010aaa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010aae:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	605a      	str	r2, [r3, #4]
 8010ab6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010aba:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8010abe:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8010ac2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8010ac6:	685a      	ldr	r2, [r3, #4]
 8010ac8:	9200      	str	r2, [sp, #0]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4602      	mov	r2, r0
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f003 fde1 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010ad4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f00d fdcc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010ade:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f00d fdc7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetVoltCmd,              &SystemState::onCommandSetVolt);
 8010ae8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010aec:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010af6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010afa:	4987      	ldr	r1, [pc, #540]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010afc:	4618      	mov	r0, r3
 8010afe:	f00d ff2d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010b02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010b06:	498b      	ldr	r1, [pc, #556]	; (8010d34 <_ZN2ps11SystemState10initializeEv+0x3cc>)
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f00d ff27 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010b0e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b12:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8010b16:	4a88      	ldr	r2, [pc, #544]	; (8010d38 <_ZN2ps11SystemState10initializeEv+0x3d0>)
 8010b18:	601a      	str	r2, [r3, #0]
 8010b1a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b1e:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8010b22:	2200      	movs	r2, #0
 8010b24:	605a      	str	r2, [r3, #4]
 8010b26:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b2a:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8010b2e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8010b32:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	9200      	str	r2, [sp, #0]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f003 fda9 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010b44:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f00d fd94 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010b4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010b52:	4618      	mov	r0, r3
 8010b54:	f00d fd8f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetCurrCmd,              &SystemState::onCommandGetCurr);
 8010b58:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b5c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010b66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010b6a:	496b      	ldr	r1, [pc, #428]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f00d fef5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010b72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010b76:	4971      	ldr	r1, [pc, #452]	; (8010d3c <_ZN2ps11SystemState10initializeEv+0x3d4>)
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f00d feef 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010b7e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b82:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8010b86:	4a6e      	ldr	r2, [pc, #440]	; (8010d40 <_ZN2ps11SystemState10initializeEv+0x3d8>)
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b8e:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8010b92:	2200      	movs	r2, #0
 8010b94:	605a      	str	r2, [r3, #4]
 8010b96:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b9a:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8010b9e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8010ba2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	9200      	str	r2, [sp, #0]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4602      	mov	r2, r0
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f003 fd71 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010bb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f00d fd5c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010bbe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f00d fd57 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetRefVoltCmd,           &SystemState::onCommandGetRefVolt);
 8010bc8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bcc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010bd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010bda:	494f      	ldr	r1, [pc, #316]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f00d febd 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010be2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010be6:	4957      	ldr	r1, [pc, #348]	; (8010d44 <_ZN2ps11SystemState10initializeEv+0x3dc>)
 8010be8:	4618      	mov	r0, r3
 8010bea:	f00d feb7 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010bee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bf2:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8010bf6:	4a54      	ldr	r2, [pc, #336]	; (8010d48 <_ZN2ps11SystemState10initializeEv+0x3e0>)
 8010bf8:	601a      	str	r2, [r3, #0]
 8010bfa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bfe:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8010c02:	2200      	movs	r2, #0
 8010c04:	605a      	str	r2, [r3, #4]
 8010c06:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c0a:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 8010c0e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8010c12:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	9200      	str	r2, [sp, #0]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f003 fd39 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010c24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f00d fd24 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010c2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010c32:	4618      	mov	r0, r3
 8010c34:	f00d fd1f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetParamCmd,             &SystemState::onCommandSetTestParam);
 8010c38:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c3c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010c46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8010c4a:	4933      	ldr	r1, [pc, #204]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f00d fe85 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010c52:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010c56:	493d      	ldr	r1, [pc, #244]	; (8010d4c <_ZN2ps11SystemState10initializeEv+0x3e4>)
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f00d fe7f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010c5e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c62:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8010c66:	4a3a      	ldr	r2, [pc, #232]	; (8010d50 <_ZN2ps11SystemState10initializeEv+0x3e8>)
 8010c68:	601a      	str	r2, [r3, #0]
 8010c6a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c6e:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8010c72:	2200      	movs	r2, #0
 8010c74:	605a      	str	r2, [r3, #4]
 8010c76:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c7a:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 8010c7e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8010c82:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	9200      	str	r2, [sp, #0]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f003 fd01 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010c94:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f00d fcec 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010c9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f00d fce7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetParamCmd,             &SystemState::onCommandGetTestParam);
 8010ca8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cac:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010cb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010cba:	4917      	ldr	r1, [pc, #92]	; (8010d18 <_ZN2ps11SystemState10initializeEv+0x3b0>)
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f00d fe4d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010cc2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8010cc6:	4923      	ldr	r1, [pc, #140]	; (8010d54 <_ZN2ps11SystemState10initializeEv+0x3ec>)
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f00d fe47 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010cce:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cd2:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8010cd6:	4a20      	ldr	r2, [pc, #128]	; (8010d58 <_ZN2ps11SystemState10initializeEv+0x3f0>)
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cde:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	605a      	str	r2, [r3, #4]
 8010ce6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cea:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8010cee:	f507 70d4 	add.w	r0, r7, #424	; 0x1a8
 8010cf2:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8010cf6:	685a      	ldr	r2, [r3, #4]
 8010cf8:	9200      	str	r2, [sp, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f003 fcc9 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010d04:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f00d fcb4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010d0e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010d12:	4618      	mov	r0, r3
 8010d14:	e022      	b.n	8010d5c <_ZN2ps11SystemState10initializeEv+0x3f4>
 8010d16:	bf00      	nop
 8010d18:	2000839c 	.word	0x2000839c
 8010d1c:	200086fc 	.word	0x200086fc
 8010d20:	08011f01 	.word	0x08011f01
 8010d24:	20008714 	.word	0x20008714
 8010d28:	08011fa5 	.word	0x08011fa5
 8010d2c:	2000872c 	.word	0x2000872c
 8010d30:	08011fc9 	.word	0x08011fc9
 8010d34:	20008744 	.word	0x20008744
 8010d38:	0801200d 	.word	0x0801200d
 8010d3c:	2000875c 	.word	0x2000875c
 8010d40:	080121cd 	.word	0x080121cd
 8010d44:	20008774 	.word	0x20008774
 8010d48:	08012211 	.word	0x08012211
 8010d4c:	2000878c 	.word	0x2000878c
 8010d50:	08012255 	.word	0x08012255
 8010d54:	200087a4 	.word	0x200087a4
 8010d58:	0801227f 	.word	0x0801227f
 8010d5c:	f00d fc8b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetVoltRangeCmd,         &SystemState::onCommandSetVoltRange);
 8010d60:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010d64:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010d6e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010d72:	49db      	ldr	r1, [pc, #876]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010d74:	4618      	mov	r0, r3
 8010d76:	f00d fdf1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010d7a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8010d7e:	49d9      	ldr	r1, [pc, #868]	; (80110e4 <_ZN2ps11SystemState10initializeEv+0x77c>)
 8010d80:	4618      	mov	r0, r3
 8010d82:	f00d fdeb 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010d86:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010d8a:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8010d8e:	4ad6      	ldr	r2, [pc, #856]	; (80110e8 <_ZN2ps11SystemState10initializeEv+0x780>)
 8010d90:	601a      	str	r2, [r3, #0]
 8010d92:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010d96:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	605a      	str	r2, [r3, #4]
 8010d9e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010da2:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 8010da6:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8010daa:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	9200      	str	r2, [sp, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4602      	mov	r2, r0
 8010db6:	4620      	mov	r0, r4
 8010db8:	f003 fc6d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010dbc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f00d fc58 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010dc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f00d fc53 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetVoltRangeCmd,         &SystemState::onCommandGetVoltRange);
 8010dd0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010dd4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8010de2:	49bf      	ldr	r1, [pc, #764]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010de4:	4618      	mov	r0, r3
 8010de6:	f00d fdb9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010dea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010dee:	49bf      	ldr	r1, [pc, #764]	; (80110ec <_ZN2ps11SystemState10initializeEv+0x784>)
 8010df0:	4618      	mov	r0, r3
 8010df2:	f00d fdb3 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010df6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010dfa:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8010dfe:	4abc      	ldr	r2, [pc, #752]	; (80110f0 <_ZN2ps11SystemState10initializeEv+0x788>)
 8010e00:	601a      	str	r2, [r3, #0]
 8010e02:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e06:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	605a      	str	r2, [r3, #4]
 8010e0e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e12:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8010e16:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8010e1a:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	9200      	str	r2, [sp, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4602      	mov	r2, r0
 8010e26:	4620      	mov	r0, r4
 8010e28:	f003 fc35 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010e2c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010e30:	4618      	mov	r0, r3
 8010e32:	f00d fc20 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f00d fc1b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetCurrRangeCmd,         &SystemState::onCommandSetCurrRange);
 8010e40:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e44:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010e4e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8010e52:	49a3      	ldr	r1, [pc, #652]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010e54:	4618      	mov	r0, r3
 8010e56:	f00d fd81 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010e5e:	49a5      	ldr	r1, [pc, #660]	; (80110f4 <_ZN2ps11SystemState10initializeEv+0x78c>)
 8010e60:	4618      	mov	r0, r3
 8010e62:	f00d fd7b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010e66:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e6a:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8010e6e:	4aa2      	ldr	r2, [pc, #648]	; (80110f8 <_ZN2ps11SystemState10initializeEv+0x790>)
 8010e70:	601a      	str	r2, [r3, #0]
 8010e72:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e76:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	605a      	str	r2, [r3, #4]
 8010e7e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010e82:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8010e86:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8010e8a:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8010e8e:	685a      	ldr	r2, [r3, #4]
 8010e90:	9200      	str	r2, [sp, #0]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4602      	mov	r2, r0
 8010e96:	4620      	mov	r0, r4
 8010e98:	f003 fbfd 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f00d fbe8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010ea6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f00d fbe3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetCurrRangeCmd,         &SystemState::onCommandGetCurrRange);
 8010eb0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010eb4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010ebe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ec2:	4987      	ldr	r1, [pc, #540]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f00d fd49 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010eca:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010ece:	498b      	ldr	r1, [pc, #556]	; (80110fc <_ZN2ps11SystemState10initializeEv+0x794>)
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f00d fd43 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010ed6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010eda:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8010ede:	4a88      	ldr	r2, [pc, #544]	; (8011100 <_ZN2ps11SystemState10initializeEv+0x798>)
 8010ee0:	601a      	str	r2, [r3, #0]
 8010ee2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010ee6:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8010eea:	2200      	movs	r2, #0
 8010eec:	605a      	str	r2, [r3, #4]
 8010eee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010ef2:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8010ef6:	f507 7022 	add.w	r0, r7, #648	; 0x288
 8010efa:	f507 711c 	add.w	r1, r7, #624	; 0x270
 8010efe:	685a      	ldr	r2, [r3, #4]
 8010f00:	9200      	str	r2, [sp, #0]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4602      	mov	r2, r0
 8010f06:	4620      	mov	r0, r4
 8010f08:	f003 fbc5 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010f0c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8010f10:	4618      	mov	r0, r3
 8010f12:	f00d fbb0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010f16:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f00d fbab 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetDeviceIdCmd,          &SystemState::onCommandSetDeviceId);
 8010f20:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f24:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010f2e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8010f32:	496b      	ldr	r1, [pc, #428]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010f34:	4618      	mov	r0, r3
 8010f36:	f00d fd11 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010f3a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8010f3e:	4971      	ldr	r1, [pc, #452]	; (8011104 <_ZN2ps11SystemState10initializeEv+0x79c>)
 8010f40:	4618      	mov	r0, r3
 8010f42:	f00d fd0b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010f46:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f4a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8010f4e:	4a6e      	ldr	r2, [pc, #440]	; (8011108 <_ZN2ps11SystemState10initializeEv+0x7a0>)
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f56:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	605a      	str	r2, [r3, #4]
 8010f5e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f62:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8010f66:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 8010f6a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8010f6e:	685a      	ldr	r2, [r3, #4]
 8010f70:	9200      	str	r2, [sp, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4602      	mov	r2, r0
 8010f76:	4620      	mov	r0, r4
 8010f78:	f003 fb8d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010f7c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8010f80:	4618      	mov	r0, r3
 8010f82:	f00d fb78 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010f86:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f00d fb73 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetDeviceIdCmd,          &SystemState::onCommandGetDeviceId);
 8010f90:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f94:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8010f9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8010fa2:	494f      	ldr	r1, [pc, #316]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f00d fcd9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010faa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8010fae:	4957      	ldr	r1, [pc, #348]	; (801110c <_ZN2ps11SystemState10initializeEv+0x7a4>)
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f00d fcd3 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8010fb6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010fba:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8010fbe:	4a54      	ldr	r2, [pc, #336]	; (8011110 <_ZN2ps11SystemState10initializeEv+0x7a8>)
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010fc6:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8010fca:	2200      	movs	r2, #0
 8010fcc:	605a      	str	r2, [r3, #4]
 8010fce:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010fd2:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8010fd6:	f507 703e 	add.w	r0, r7, #760	; 0x2f8
 8010fda:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	9200      	str	r2, [sp, #0]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f003 fb55 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8010fec:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f00d fb40 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010ff6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f00d fb3b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetSamplePeriodCmd,      &SystemState::onCommandSetSamplePeriod);
 8011000:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011004:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801100e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011012:	4933      	ldr	r1, [pc, #204]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8011014:	4618      	mov	r0, r3
 8011016:	f00d fca1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801101a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801101e:	493d      	ldr	r1, [pc, #244]	; (8011114 <_ZN2ps11SystemState10initializeEv+0x7ac>)
 8011020:	4618      	mov	r0, r3
 8011022:	f00d fc9b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011026:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801102a:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801102e:	4a3a      	ldr	r2, [pc, #232]	; (8011118 <_ZN2ps11SystemState10initializeEv+0x7b0>)
 8011030:	601a      	str	r2, [r3, #0]
 8011032:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011036:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801103a:	2200      	movs	r2, #0
 801103c:	605a      	str	r2, [r3, #4]
 801103e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011042:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8011046:	f507 704c 	add.w	r0, r7, #816	; 0x330
 801104a:	f507 7146 	add.w	r1, r7, #792	; 0x318
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	9200      	str	r2, [sp, #0]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4602      	mov	r2, r0
 8011056:	4620      	mov	r0, r4
 8011058:	f003 fb1d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801105c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8011060:	4618      	mov	r0, r3
 8011062:	f00d fb08 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011066:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801106a:	4618      	mov	r0, r3
 801106c:	f00d fb03 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetSamplePeriodCmd,      &SystemState::onCommandGetSamplePeriod);
 8011070:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011074:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801107e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8011082:	4917      	ldr	r1, [pc, #92]	; (80110e0 <_ZN2ps11SystemState10initializeEv+0x778>)
 8011084:	4618      	mov	r0, r3
 8011086:	f00d fc69 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801108a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801108e:	4923      	ldr	r1, [pc, #140]	; (801111c <_ZN2ps11SystemState10initializeEv+0x7b4>)
 8011090:	4618      	mov	r0, r3
 8011092:	f00d fc63 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011096:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801109a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801109e:	4a20      	ldr	r2, [pc, #128]	; (8011120 <_ZN2ps11SystemState10initializeEv+0x7b8>)
 80110a0:	601a      	str	r2, [r3, #0]
 80110a2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80110a6:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80110aa:	2200      	movs	r2, #0
 80110ac:	605a      	str	r2, [r3, #4]
 80110ae:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80110b2:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80110b6:	f507 705a 	add.w	r0, r7, #872	; 0x368
 80110ba:	f507 7154 	add.w	r1, r7, #848	; 0x350
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	9200      	str	r2, [sp, #0]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4602      	mov	r2, r0
 80110c6:	4620      	mov	r0, r4
 80110c8:	f003 fae5 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80110cc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00d fad0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80110d6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80110da:	4618      	mov	r0, r3
 80110dc:	e022      	b.n	8011124 <_ZN2ps11SystemState10initializeEv+0x7bc>
 80110de:	bf00      	nop
 80110e0:	2000839c 	.word	0x2000839c
 80110e4:	200087bc 	.word	0x200087bc
 80110e8:	080122a9 	.word	0x080122a9
 80110ec:	200087d4 	.word	0x200087d4
 80110f0:	08012415 	.word	0x08012415
 80110f4:	200087ec 	.word	0x200087ec
 80110f8:	08012461 	.word	0x08012461
 80110fc:	20008804 	.word	0x20008804
 8011100:	080125cd 	.word	0x080125cd
 8011104:	2000881c 	.word	0x2000881c
 8011108:	08012619 	.word	0x08012619
 801110c:	20008834 	.word	0x20008834
 8011110:	08012667 	.word	0x08012667
 8011114:	2000884c 	.word	0x2000884c
 8011118:	0801269d 	.word	0x0801269d
 801111c:	20008864 	.word	0x20008864
 8011120:	08012ab5 	.word	0x08012ab5
 8011124:	f00d faa7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetTestDoneTimeCmd,      &SystemState::onCommandGetTestDoneTime);
 8011128:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801112c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011136:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801113a:	49db      	ldr	r1, [pc, #876]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 801113c:	4618      	mov	r0, r3
 801113e:	f00d fc0d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011142:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8011146:	49d9      	ldr	r1, [pc, #868]	; (80114ac <_ZN2ps11SystemState10initializeEv+0xb44>)
 8011148:	4618      	mov	r0, r3
 801114a:	f00d fc07 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801114e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011152:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8011156:	4ad6      	ldr	r2, [pc, #856]	; (80114b0 <_ZN2ps11SystemState10initializeEv+0xb48>)
 8011158:	601a      	str	r2, [r3, #0]
 801115a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801115e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8011162:	2200      	movs	r2, #0
 8011164:	605a      	str	r2, [r3, #4]
 8011166:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801116a:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801116e:	f507 7068 	add.w	r0, r7, #928	; 0x3a0
 8011172:	f507 7162 	add.w	r1, r7, #904	; 0x388
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	9200      	str	r2, [sp, #0]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4602      	mov	r2, r0
 801117e:	4620      	mov	r0, r4
 8011180:	f003 fa89 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011184:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8011188:	4618      	mov	r0, r3
 801118a:	f00d fa74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801118e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011192:	4618      	mov	r0, r3
 8011194:	f00d fa6f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetTestNamesCmd,         &SystemState::onCommandGetTestNames);
 8011198:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801119c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80111a6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80111aa:	49bf      	ldr	r1, [pc, #764]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 80111ac:	4618      	mov	r0, r3
 80111ae:	f00d fbd5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80111b2:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80111b6:	49bf      	ldr	r1, [pc, #764]	; (80114b4 <_ZN2ps11SystemState10initializeEv+0xb4c>)
 80111b8:	4618      	mov	r0, r3
 80111ba:	f00d fbcf 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80111be:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80111c2:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 80111c6:	4abc      	ldr	r2, [pc, #752]	; (80114b8 <_ZN2ps11SystemState10initializeEv+0xb50>)
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80111ce:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 80111d2:	2200      	movs	r2, #0
 80111d4:	605a      	str	r2, [r3, #4]
 80111d6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80111da:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 80111de:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80111e2:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 80111e6:	685a      	ldr	r2, [r3, #4]
 80111e8:	9200      	str	r2, [sp, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4602      	mov	r2, r0
 80111ee:	4620      	mov	r0, r4
 80111f0:	f003 fa51 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80111f4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80111f8:	4618      	mov	r0, r3
 80111fa:	f00d fa3c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80111fe:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8011202:	4618      	mov	r0, r3
 8011204:	f00d fa37 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetVersionCmd,           &SystemState::onCommandGetVersion);
 8011208:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801120c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011216:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 801121a:	49a3      	ldr	r1, [pc, #652]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 801121c:	4618      	mov	r0, r3
 801121e:	f00d fb9d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011222:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011226:	49a5      	ldr	r1, [pc, #660]	; (80114bc <_ZN2ps11SystemState10initializeEv+0xb54>)
 8011228:	4618      	mov	r0, r3
 801122a:	f00d fb97 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801122e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011232:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8011236:	4aa2      	ldr	r2, [pc, #648]	; (80114c0 <_ZN2ps11SystemState10initializeEv+0xb58>)
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801123e:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8011242:	2200      	movs	r2, #0
 8011244:	605a      	str	r2, [r3, #4]
 8011246:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801124a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 801124e:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 8011252:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8011256:	685a      	ldr	r2, [r3, #4]
 8011258:	9200      	str	r2, [sp, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4602      	mov	r2, r0
 801125e:	4620      	mov	r0, r4
 8011260:	f003 fa19 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011264:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011268:	4618      	mov	r0, r3
 801126a:	f00d fa04 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801126e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8011272:	4618      	mov	r0, r3
 8011274:	f00d f9ff 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetVariantCmd,           &SystemState::onCommandGetVariant);
 8011278:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801127c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011286:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801128a:	4987      	ldr	r1, [pc, #540]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 801128c:	4618      	mov	r0, r3
 801128e:	f00d fb65 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011292:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8011296:	498b      	ldr	r1, [pc, #556]	; (80114c4 <_ZN2ps11SystemState10initializeEv+0xb5c>)
 8011298:	4618      	mov	r0, r3
 801129a:	f00d fb5f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801129e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80112a2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80112a6:	4a88      	ldr	r2, [pc, #544]	; (80114c8 <_ZN2ps11SystemState10initializeEv+0xb60>)
 80112a8:	601a      	str	r2, [r3, #0]
 80112aa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80112ae:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80112b2:	2200      	movs	r2, #0
 80112b4:	605a      	str	r2, [r3, #4]
 80112b6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80112ba:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80112be:	f507 6089 	add.w	r0, r7, #1096	; 0x448
 80112c2:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 80112c6:	685a      	ldr	r2, [r3, #4]
 80112c8:	9200      	str	r2, [sp, #0]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4602      	mov	r2, r0
 80112ce:	4620      	mov	r0, r4
 80112d0:	f003 f9e1 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80112d4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80112d8:	4618      	mov	r0, r3
 80112da:	f00d f9cc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80112de:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80112e2:	4618      	mov	r0, r3
 80112e4:	f00d f9c7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetMuxEnabledCmd,        &SystemState::onCommandSetMuxEnabled);
 80112e8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80112ec:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80112f6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80112fa:	496b      	ldr	r1, [pc, #428]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 80112fc:	4618      	mov	r0, r3
 80112fe:	f00d fb2d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011302:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8011306:	4971      	ldr	r1, [pc, #452]	; (80114cc <_ZN2ps11SystemState10initializeEv+0xb64>)
 8011308:	4618      	mov	r0, r3
 801130a:	f00d fb27 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801130e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011312:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8011316:	4a6e      	ldr	r2, [pc, #440]	; (80114d0 <_ZN2ps11SystemState10initializeEv+0xb68>)
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801131e:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 8011322:	2200      	movs	r2, #0
 8011324:	605a      	str	r2, [r3, #4]
 8011326:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801132a:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801132e:	f507 6090 	add.w	r0, r7, #1152	; 0x480
 8011332:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8011336:	685a      	ldr	r2, [r3, #4]
 8011338:	9200      	str	r2, [sp, #0]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4602      	mov	r2, r0
 801133e:	4620      	mov	r0, r4
 8011340:	f003 f9a9 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011344:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8011348:	4618      	mov	r0, r3
 801134a:	f00d f994 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801134e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8011352:	4618      	mov	r0, r3
 8011354:	f00d f98f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetMuxEnabledCmd,        &SystemState::onCommandGetMuxEnabled);
 8011358:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801135c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011366:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 801136a:	494f      	ldr	r1, [pc, #316]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 801136c:	4618      	mov	r0, r3
 801136e:	f00d faf5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011372:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8011376:	4957      	ldr	r1, [pc, #348]	; (80114d4 <_ZN2ps11SystemState10initializeEv+0xb6c>)
 8011378:	4618      	mov	r0, r3
 801137a:	f00d faef 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801137e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011382:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8011386:	4a54      	ldr	r2, [pc, #336]	; (80114d8 <_ZN2ps11SystemState10initializeEv+0xb70>)
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801138e:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8011392:	2200      	movs	r2, #0
 8011394:	605a      	str	r2, [r3, #4]
 8011396:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801139a:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801139e:	f507 6097 	add.w	r0, r7, #1208	; 0x4b8
 80113a2:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 80113a6:	685a      	ldr	r2, [r3, #4]
 80113a8:	9200      	str	r2, [sp, #0]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4602      	mov	r2, r0
 80113ae:	4620      	mov	r0, r4
 80113b0:	f003 f971 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80113b4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80113b8:	4618      	mov	r0, r3
 80113ba:	f00d f95c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80113be:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80113c2:	4618      	mov	r0, r3
 80113c4:	f00d f957 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetEnabledMuxChanCmd,    &SystemState::onCommandSetEnabledMuxChan);
 80113c8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80113cc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80113d6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80113da:	4933      	ldr	r1, [pc, #204]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 80113dc:	4618      	mov	r0, r3
 80113de:	f00d fabd 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80113e2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80113e6:	493d      	ldr	r1, [pc, #244]	; (80114dc <_ZN2ps11SystemState10initializeEv+0xb74>)
 80113e8:	4618      	mov	r0, r3
 80113ea:	f00d fab7 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80113ee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80113f2:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80113f6:	4a3a      	ldr	r2, [pc, #232]	; (80114e0 <_ZN2ps11SystemState10initializeEv+0xb78>)
 80113f8:	601a      	str	r2, [r3, #0]
 80113fa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80113fe:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8011402:	2200      	movs	r2, #0
 8011404:	605a      	str	r2, [r3, #4]
 8011406:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801140a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801140e:	f507 609e 	add.w	r0, r7, #1264	; 0x4f0
 8011412:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8011416:	685a      	ldr	r2, [r3, #4]
 8011418:	9200      	str	r2, [sp, #0]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4602      	mov	r2, r0
 801141e:	4620      	mov	r0, r4
 8011420:	f003 f939 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011424:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8011428:	4618      	mov	r0, r3
 801142a:	f00d f924 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801142e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8011432:	4618      	mov	r0, r3
 8011434:	f00d f91f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetEnabledMuxChanCmd,    &SystemState::onCommandGetEnabledMuxChan);
 8011438:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801143c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011446:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801144a:	4917      	ldr	r1, [pc, #92]	; (80114a8 <_ZN2ps11SystemState10initializeEv+0xb40>)
 801144c:	4618      	mov	r0, r3
 801144e:	f00d fa85 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011452:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8011456:	4923      	ldr	r1, [pc, #140]	; (80114e4 <_ZN2ps11SystemState10initializeEv+0xb7c>)
 8011458:	4618      	mov	r0, r3
 801145a:	f00d fa7f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801145e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011462:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8011466:	4a20      	ldr	r2, [pc, #128]	; (80114e8 <_ZN2ps11SystemState10initializeEv+0xb80>)
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801146e:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8011472:	2200      	movs	r2, #0
 8011474:	605a      	str	r2, [r3, #4]
 8011476:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801147a:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801147e:	f507 60a5 	add.w	r0, r7, #1320	; 0x528
 8011482:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8011486:	685a      	ldr	r2, [r3, #4]
 8011488:	9200      	str	r2, [sp, #0]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4602      	mov	r2, r0
 801148e:	4620      	mov	r0, r4
 8011490:	f003 f901 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011494:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8011498:	4618      	mov	r0, r3
 801149a:	f00d f8ec 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801149e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80114a2:	4618      	mov	r0, r3
 80114a4:	e022      	b.n	80114ec <_ZN2ps11SystemState10initializeEv+0xb84>
 80114a6:	bf00      	nop
 80114a8:	2000839c 	.word	0x2000839c
 80114ac:	2000887c 	.word	0x2000887c
 80114b0:	08012b01 	.word	0x08012b01
 80114b4:	20008894 	.word	0x20008894
 80114b8:	08012b49 	.word	0x08012b49
 80114bc:	200088ac 	.word	0x200088ac
 80114c0:	08012b91 	.word	0x08012b91
 80114c4:	200088c4 	.word	0x200088c4
 80114c8:	08012bc1 	.word	0x08012bc1
 80114cc:	200088dc 	.word	0x200088dc
 80114d0:	08012bf1 	.word	0x08012bf1
 80114d4:	200088f4 	.word	0x200088f4
 80114d8:	08012d45 	.word	0x08012d45
 80114dc:	2000890c 	.word	0x2000890c
 80114e0:	08012d79 	.word	0x08012d79
 80114e4:	20008924 	.word	0x20008924
 80114e8:	08012de1 	.word	0x08012de1
 80114ec:	f00d f8c3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetMuxTestNamesCmd,      &SystemState::onCommandGetMuxTestNames);
 80114f0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80114f4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80114fe:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8011502:	49db      	ldr	r1, [pc, #876]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 8011504:	4618      	mov	r0, r3
 8011506:	f00d fa29 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801150a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801150e:	49d9      	ldr	r1, [pc, #868]	; (8011874 <_ZN2ps11SystemState10initializeEv+0xf0c>)
 8011510:	4618      	mov	r0, r3
 8011512:	f00d fa23 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011516:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801151a:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 801151e:	4ad6      	ldr	r2, [pc, #856]	; (8011878 <_ZN2ps11SystemState10initializeEv+0xf10>)
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011526:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 801152a:	2200      	movs	r2, #0
 801152c:	605a      	str	r2, [r3, #4]
 801152e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011532:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8011536:	f507 60ac 	add.w	r0, r7, #1376	; 0x560
 801153a:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 801153e:	685a      	ldr	r2, [r3, #4]
 8011540:	9200      	str	r2, [sp, #0]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4602      	mov	r2, r0
 8011546:	4620      	mov	r0, r4
 8011548:	f003 f8a5 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801154c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8011550:	4618      	mov	r0, r3
 8011552:	f00d f890 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011556:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801155a:	4618      	mov	r0, r3
 801155c:	f00d f88b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetMuxRefElectConnCmd,   &SystemState::onCommandSetMuxRefElectConn);
 8011560:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011564:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801156e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8011572:	49bf      	ldr	r1, [pc, #764]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 8011574:	4618      	mov	r0, r3
 8011576:	f00d f9f1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801157a:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801157e:	49bf      	ldr	r1, [pc, #764]	; (801187c <_ZN2ps11SystemState10initializeEv+0xf14>)
 8011580:	4618      	mov	r0, r3
 8011582:	f00d f9eb 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011586:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801158a:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 801158e:	4abc      	ldr	r2, [pc, #752]	; (8011880 <_ZN2ps11SystemState10initializeEv+0xf18>)
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011596:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 801159a:	2200      	movs	r2, #0
 801159c:	605a      	str	r2, [r3, #4]
 801159e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80115a2:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80115a6:	f507 60b3 	add.w	r0, r7, #1432	; 0x598
 80115aa:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80115ae:	685a      	ldr	r2, [r3, #4]
 80115b0:	9200      	str	r2, [sp, #0]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4602      	mov	r2, r0
 80115b6:	4620      	mov	r0, r4
 80115b8:	f003 f86d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80115bc:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80115c0:	4618      	mov	r0, r3
 80115c2:	f00d f858 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80115c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80115ca:	4618      	mov	r0, r3
 80115cc:	f00d f853 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetMuxRefElectConnCmd,   &SystemState::onCommandGetMuxRefElectConn);
 80115d0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80115d4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80115de:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80115e2:	49a3      	ldr	r1, [pc, #652]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 80115e4:	4618      	mov	r0, r3
 80115e6:	f00d f9b9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80115ea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80115ee:	49a5      	ldr	r1, [pc, #660]	; (8011884 <_ZN2ps11SystemState10initializeEv+0xf1c>)
 80115f0:	4618      	mov	r0, r3
 80115f2:	f00d f9b3 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80115f6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80115fa:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80115fe:	4aa2      	ldr	r2, [pc, #648]	; (8011888 <_ZN2ps11SystemState10initializeEv+0xf20>)
 8011600:	601a      	str	r2, [r3, #0]
 8011602:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011606:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801160a:	2200      	movs	r2, #0
 801160c:	605a      	str	r2, [r3, #4]
 801160e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011612:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8011616:	f507 60ba 	add.w	r0, r7, #1488	; 0x5d0
 801161a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 801161e:	685a      	ldr	r2, [r3, #4]
 8011620:	9200      	str	r2, [sp, #0]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4602      	mov	r2, r0
 8011626:	4620      	mov	r0, r4
 8011628:	f003 f835 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801162c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8011630:	4618      	mov	r0, r3
 8011632:	f00d f820 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011636:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801163a:	4618      	mov	r0, r3
 801163c:	f00d f81b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetMuxCtrElectConnCmd,   &SystemState::onCommandSetMuxCtrElectConn); 
 8011640:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011644:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801164e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8011652:	4987      	ldr	r1, [pc, #540]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 8011654:	4618      	mov	r0, r3
 8011656:	f00d f981 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801165a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801165e:	498b      	ldr	r1, [pc, #556]	; (801188c <_ZN2ps11SystemState10initializeEv+0xf24>)
 8011660:	4618      	mov	r0, r3
 8011662:	f00d f97b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011666:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801166a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801166e:	4a88      	ldr	r2, [pc, #544]	; (8011890 <_ZN2ps11SystemState10initializeEv+0xf28>)
 8011670:	601a      	str	r2, [r3, #0]
 8011672:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011676:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801167a:	2200      	movs	r2, #0
 801167c:	605a      	str	r2, [r3, #4]
 801167e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011682:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8011686:	f507 60c1 	add.w	r0, r7, #1544	; 0x608
 801168a:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	9200      	str	r2, [sp, #0]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4602      	mov	r2, r0
 8011696:	4620      	mov	r0, r4
 8011698:	f002 fffd 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801169c:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80116a0:	4618      	mov	r0, r3
 80116a2:	f00c ffe8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80116a6:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80116aa:	4618      	mov	r0, r3
 80116ac:	f00c ffe3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetMuxCtrElectConnCmd,   &SystemState::onCommandGetMuxCtrElectConn);
 80116b0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80116b4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80116be:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80116c2:	496b      	ldr	r1, [pc, #428]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 80116c4:	4618      	mov	r0, r3
 80116c6:	f00d f949 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80116ca:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80116ce:	4971      	ldr	r1, [pc, #452]	; (8011894 <_ZN2ps11SystemState10initializeEv+0xf2c>)
 80116d0:	4618      	mov	r0, r3
 80116d2:	f00d f943 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80116d6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80116da:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80116de:	4a6e      	ldr	r2, [pc, #440]	; (8011898 <_ZN2ps11SystemState10initializeEv+0xf30>)
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80116e6:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80116ea:	2200      	movs	r2, #0
 80116ec:	605a      	str	r2, [r3, #4]
 80116ee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80116f2:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80116f6:	f507 60c8 	add.w	r0, r7, #1600	; 0x640
 80116fa:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80116fe:	685a      	ldr	r2, [r3, #4]
 8011700:	9200      	str	r2, [sp, #0]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4602      	mov	r2, r0
 8011706:	4620      	mov	r0, r4
 8011708:	f002 ffc5 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801170c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8011710:	4618      	mov	r0, r3
 8011712:	f00c ffb0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011716:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801171a:	4618      	mov	r0, r3
 801171c:	f00c ffab 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetMuxWrkElectConnCmd,   &SystemState::onCommandSetMuxWrkElectConn);
 8011720:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011724:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801172e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011732:	494f      	ldr	r1, [pc, #316]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 8011734:	4618      	mov	r0, r3
 8011736:	f00d f911 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801173a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801173e:	4957      	ldr	r1, [pc, #348]	; (801189c <_ZN2ps11SystemState10initializeEv+0xf34>)
 8011740:	4618      	mov	r0, r3
 8011742:	f00d f90b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011746:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801174a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801174e:	4a54      	ldr	r2, [pc, #336]	; (80118a0 <_ZN2ps11SystemState10initializeEv+0xf38>)
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011756:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801175a:	2200      	movs	r2, #0
 801175c:	605a      	str	r2, [r3, #4]
 801175e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011762:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8011766:	f507 60cf 	add.w	r0, r7, #1656	; 0x678
 801176a:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	9200      	str	r2, [sp, #0]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4602      	mov	r2, r0
 8011776:	4620      	mov	r0, r4
 8011778:	f002 ff8d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801177c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011780:	4618      	mov	r0, r3
 8011782:	f00c ff78 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011786:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801178a:	4618      	mov	r0, r3
 801178c:	f00c ff73 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetMuxWrkElectConnCmd,   &SystemState::onCommandGetMuxWrkElectConn); 
 8011790:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011794:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801179e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80117a2:	4933      	ldr	r1, [pc, #204]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 80117a4:	4618      	mov	r0, r3
 80117a6:	f00d f8d9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80117aa:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80117ae:	493d      	ldr	r1, [pc, #244]	; (80118a4 <_ZN2ps11SystemState10initializeEv+0xf3c>)
 80117b0:	4618      	mov	r0, r3
 80117b2:	f00d f8d3 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80117b6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80117ba:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80117be:	4a3a      	ldr	r2, [pc, #232]	; (80118a8 <_ZN2ps11SystemState10initializeEv+0xf40>)
 80117c0:	601a      	str	r2, [r3, #0]
 80117c2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80117c6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80117ca:	2200      	movs	r2, #0
 80117cc:	605a      	str	r2, [r3, #4]
 80117ce:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80117d2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80117d6:	f507 60d6 	add.w	r0, r7, #1712	; 0x6b0
 80117da:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 80117de:	685a      	ldr	r2, [r3, #4]
 80117e0:	9200      	str	r2, [sp, #0]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4602      	mov	r2, r0
 80117e6:	4620      	mov	r0, r4
 80117e8:	f002 ff55 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80117ec:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80117f0:	4618      	mov	r0, r3
 80117f2:	f00c ff40 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80117f6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 80117fa:	4618      	mov	r0, r3
 80117fc:	f00c ff3b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   DisconnAllMuxElectCmd,   &SystemState::onCommandDisconnAllMuxElect);
 8011800:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011804:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 801180e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8011812:	4917      	ldr	r1, [pc, #92]	; (8011870 <_ZN2ps11SystemState10initializeEv+0xf08>)
 8011814:	4618      	mov	r0, r3
 8011816:	f00d f8a1 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801181a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801181e:	4923      	ldr	r1, [pc, #140]	; (80118ac <_ZN2ps11SystemState10initializeEv+0xf44>)
 8011820:	4618      	mov	r0, r3
 8011822:	f00d f89b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011826:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801182a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801182e:	4a20      	ldr	r2, [pc, #128]	; (80118b0 <_ZN2ps11SystemState10initializeEv+0xf48>)
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011836:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801183a:	2200      	movs	r2, #0
 801183c:	605a      	str	r2, [r3, #4]
 801183e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011842:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011846:	f507 60dd 	add.w	r0, r7, #1768	; 0x6e8
 801184a:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	9200      	str	r2, [sp, #0]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4602      	mov	r2, r0
 8011856:	4620      	mov	r0, r4
 8011858:	f002 ff1d 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 801185c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8011860:	4618      	mov	r0, r3
 8011862:	f00c ff08 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011866:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801186a:	4618      	mov	r0, r3
 801186c:	e022      	b.n	80118b4 <_ZN2ps11SystemState10initializeEv+0xf4c>
 801186e:	bf00      	nop
 8011870:	2000839c 	.word	0x2000839c
 8011874:	2000893c 	.word	0x2000893c
 8011878:	08012e49 	.word	0x08012e49
 801187c:	20008954 	.word	0x20008954
 8011880:	08012e91 	.word	0x08012e91
 8011884:	2000896c 	.word	0x2000896c
 8011888:	08012ef9 	.word	0x08012ef9
 801188c:	20008984 	.word	0x20008984
 8011890:	08012f61 	.word	0x08012f61
 8011894:	2000899c 	.word	0x2000899c
 8011898:	08012fc9 	.word	0x08012fc9
 801189c:	200089b4 	.word	0x200089b4
 80118a0:	08013031 	.word	0x08013031
 80118a4:	200089cc 	.word	0x200089cc
 80118a8:	08013099 	.word	0x08013099
 80118ac:	200089e4 	.word	0x200089e4
 80118b0:	08013101 	.word	0x08013101
 80118b4:	f00c fedf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
#if defined HARDWARE_VERSION_0P2 
        commandTable_.registerMethod(CommandKey,   SetRefElectConnCmd,      &SystemState::onCommandSetRefElectConn);
 80118b8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80118bc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80118c6:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80118ca:	49db      	ldr	r1, [pc, #876]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 80118cc:	4618      	mov	r0, r3
 80118ce:	f00d f845 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80118d2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80118d6:	49d9      	ldr	r1, [pc, #868]	; (8011c3c <_ZN2ps11SystemState10initializeEv+0x12d4>)
 80118d8:	4618      	mov	r0, r3
 80118da:	f00d f83f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80118de:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80118e2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80118e6:	4ad6      	ldr	r2, [pc, #856]	; (8011c40 <_ZN2ps11SystemState10initializeEv+0x12d8>)
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80118ee:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80118f2:	2200      	movs	r2, #0
 80118f4:	605a      	str	r2, [r3, #4]
 80118f6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80118fa:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80118fe:	f507 60e4 	add.w	r0, r7, #1824	; 0x720
 8011902:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	9200      	str	r2, [sp, #0]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4602      	mov	r2, r0
 801190e:	4620      	mov	r0, r4
 8011910:	f002 fec1 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011914:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8011918:	4618      	mov	r0, r3
 801191a:	f00c feac 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801191e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8011922:	4618      	mov	r0, r3
 8011924:	f00c fea7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetRefElectConnCmd,      &SystemState::onCommandGetRefElectConn);
 8011928:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801192c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011936:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801193a:	49bf      	ldr	r1, [pc, #764]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 801193c:	4618      	mov	r0, r3
 801193e:	f00d f80d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011942:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8011946:	49bf      	ldr	r1, [pc, #764]	; (8011c44 <_ZN2ps11SystemState10initializeEv+0x12dc>)
 8011948:	4618      	mov	r0, r3
 801194a:	f00d f807 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801194e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011952:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011956:	4abc      	ldr	r2, [pc, #752]	; (8011c48 <_ZN2ps11SystemState10initializeEv+0x12e0>)
 8011958:	601a      	str	r2, [r3, #0]
 801195a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801195e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011962:	2200      	movs	r2, #0
 8011964:	605a      	str	r2, [r3, #4]
 8011966:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801196a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801196e:	f507 60eb 	add.w	r0, r7, #1880	; 0x758
 8011972:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8011976:	685a      	ldr	r2, [r3, #4]
 8011978:	9200      	str	r2, [sp, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4602      	mov	r2, r0
 801197e:	4620      	mov	r0, r4
 8011980:	f002 fe89 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011984:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8011988:	4618      	mov	r0, r3
 801198a:	f00c fe74 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801198e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8011992:	4618      	mov	r0, r3
 8011994:	f00c fe6f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetCtrElectConnCmd,      &SystemState::onCommandSetCtrElectConn);
 8011998:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801199c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 80119a6:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80119aa:	49a3      	ldr	r1, [pc, #652]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 80119ac:	4618      	mov	r0, r3
 80119ae:	f00c ffd5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80119b2:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80119b6:	49a5      	ldr	r1, [pc, #660]	; (8011c4c <_ZN2ps11SystemState10initializeEv+0x12e4>)
 80119b8:	4618      	mov	r0, r3
 80119ba:	f00c ffcf 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80119be:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80119c2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80119c6:	4aa2      	ldr	r2, [pc, #648]	; (8011c50 <_ZN2ps11SystemState10initializeEv+0x12e8>)
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80119ce:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80119d2:	2200      	movs	r2, #0
 80119d4:	605a      	str	r2, [r3, #4]
 80119d6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80119da:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80119de:	f507 60f2 	add.w	r0, r7, #1936	; 0x790
 80119e2:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 80119e6:	685a      	ldr	r2, [r3, #4]
 80119e8:	9200      	str	r2, [sp, #0]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4602      	mov	r2, r0
 80119ee:	4620      	mov	r0, r4
 80119f0:	f002 fe51 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80119f4:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80119f8:	4618      	mov	r0, r3
 80119fa:	f00c fe3c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80119fe:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8011a02:	4618      	mov	r0, r3
 8011a04:	f00c fe37 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetCtrElectConnCmd,      &SystemState::onCommandGetCtrElectConn);
 8011a08:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011a0c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011a16:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8011a1a:	4987      	ldr	r1, [pc, #540]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f00c ff9d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011a22:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8011a26:	498b      	ldr	r1, [pc, #556]	; (8011c54 <_ZN2ps11SystemState10initializeEv+0x12ec>)
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f00c ff97 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011a2e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011a32:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8011a36:	4a88      	ldr	r2, [pc, #544]	; (8011c58 <_ZN2ps11SystemState10initializeEv+0x12f0>)
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011a3e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8011a42:	2200      	movs	r2, #0
 8011a44:	605a      	str	r2, [r3, #4]
 8011a46:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011a4a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8011a4e:	f507 60f9 	add.w	r0, r7, #1992	; 0x7c8
 8011a52:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	9200      	str	r2, [sp, #0]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f002 fe19 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011a64:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f00c fe04 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011a6e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8011a72:	4618      	mov	r0, r3
 8011a74:	f00c fdff 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetWrkElectConnCmd,      &SystemState::onCommandSetWrkElectConn);
 8011a78:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011a7c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011a86:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 8011a8a:	496b      	ldr	r1, [pc, #428]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f00c ff65 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011a92:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8011a96:	4971      	ldr	r1, [pc, #452]	; (8011c5c <_ZN2ps11SystemState10initializeEv+0x12f4>)
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f00c ff5f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011a9e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011aa2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011aa6:	4a6e      	ldr	r2, [pc, #440]	; (8011c60 <_ZN2ps11SystemState10initializeEv+0x12f8>)
 8011aa8:	601a      	str	r2, [r3, #0]
 8011aaa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011aae:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	605a      	str	r2, [r3, #4]
 8011ab6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011aba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8011abe:	f507 6000 	add.w	r0, r7, #2048	; 0x800
 8011ac2:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8011ac6:	685a      	ldr	r2, [r3, #4]
 8011ac8:	9200      	str	r2, [sp, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4602      	mov	r2, r0
 8011ace:	4620      	mov	r0, r4
 8011ad0:	f002 fde1 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011ad4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f00c fdcc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011ade:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f00c fdc7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetWrkElectConnCmd,      &SystemState::onCommandGetWrkElectConn);
 8011ae8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011aec:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011af6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8011afa:	494f      	ldr	r1, [pc, #316]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 8011afc:	4618      	mov	r0, r3
 8011afe:	f00c ff2d 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011b02:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8011b06:	4957      	ldr	r1, [pc, #348]	; (8011c64 <_ZN2ps11SystemState10initializeEv+0x12fc>)
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f00c ff27 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011b0e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011b16:	4a54      	ldr	r2, [pc, #336]	; (8011c68 <_ZN2ps11SystemState10initializeEv+0x1300>)
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011b22:	2200      	movs	r2, #0
 8011b24:	605a      	str	r2, [r3, #4]
 8011b26:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8011b2e:	f607 0038 	addw	r0, r7, #2104	; 0x838
 8011b32:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8011b36:	685a      	ldr	r2, [r3, #4]
 8011b38:	9200      	str	r2, [sp, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f002 fda9 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011b44:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f00c fd94 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011b4e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8011b52:	4618      	mov	r0, r3
 8011b54:	f00c fd8f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetAllElectConnCmd,      &SystemState::onCommandSetAllElectConn);
 8011b58:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b5c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011b66:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8011b6a:	4933      	ldr	r1, [pc, #204]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f00c fef5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011b72:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8011b76:	493d      	ldr	r1, [pc, #244]	; (8011c6c <_ZN2ps11SystemState10initializeEv+0x1304>)
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f00c feef 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011b7e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b82:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011b86:	4a3a      	ldr	r2, [pc, #232]	; (8011c70 <_ZN2ps11SystemState10initializeEv+0x1308>)
 8011b88:	601a      	str	r2, [r3, #0]
 8011b8a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b8e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011b92:	2200      	movs	r2, #0
 8011b94:	605a      	str	r2, [r3, #4]
 8011b96:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011b9a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011b9e:	f507 6007 	add.w	r0, r7, #2160	; 0x870
 8011ba2:	f607 0158 	addw	r1, r7, #2136	; 0x858
 8011ba6:	685a      	ldr	r2, [r3, #4]
 8011ba8:	9200      	str	r2, [sp, #0]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4602      	mov	r2, r0
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f002 fd71 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011bb4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f00c fd5c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011bbe:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f00c fd57 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetAllElectConnCmd,      &SystemState::onCommandGetAllElectConn);
 8011bc8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011bcc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011bd6:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8011bda:	4917      	ldr	r1, [pc, #92]	; (8011c38 <_ZN2ps11SystemState10initializeEv+0x12d0>)
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f00c febd 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011be2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8011be6:	4923      	ldr	r1, [pc, #140]	; (8011c74 <_ZN2ps11SystemState10initializeEv+0x130c>)
 8011be8:	4618      	mov	r0, r3
 8011bea:	f00c feb7 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011bee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011bf2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011bf6:	4a20      	ldr	r2, [pc, #128]	; (8011c78 <_ZN2ps11SystemState10initializeEv+0x1310>)
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011bfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011c02:	2200      	movs	r2, #0
 8011c04:	605a      	str	r2, [r3, #4]
 8011c06:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011c0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011c0e:	f607 00a8 	addw	r0, r7, #2216	; 0x8a8
 8011c12:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8011c16:	685a      	ldr	r2, [r3, #4]
 8011c18:	9200      	str	r2, [sp, #0]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f002 fd39 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011c24:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f00c fd24 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011c2e:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8011c32:	4618      	mov	r0, r3
 8011c34:	e022      	b.n	8011c7c <_ZN2ps11SystemState10initializeEv+0x1314>
 8011c36:	bf00      	nop
 8011c38:	2000839c 	.word	0x2000839c
 8011c3c:	200089fc 	.word	0x200089fc
 8011c40:	08013169 	.word	0x08013169
 8011c44:	20008a14 	.word	0x20008a14
 8011c48:	08013325 	.word	0x08013325
 8011c4c:	20008a2c 	.word	0x20008a2c
 8011c50:	08013365 	.word	0x08013365
 8011c54:	20008a44 	.word	0x20008a44
 8011c58:	08013521 	.word	0x08013521
 8011c5c:	20008a5c 	.word	0x20008a5c
 8011c60:	08013561 	.word	0x08013561
 8011c64:	20008a74 	.word	0x20008a74
 8011c68:	0801371d 	.word	0x0801371d
 8011c6c:	20008a8c 	.word	0x20008a8c
 8011c70:	0801375d 	.word	0x0801375d
 8011c74:	20008aa4 	.word	0x20008aa4
 8011c78:	08013919 	.word	0x08013919
 8011c7c:	f00c fcfb 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetElectAutoConnCmd,     &SystemState::onCommandSetElectAutoConn);
 8011c80:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011c84:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011c8e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8011c92:	498f      	ldr	r1, [pc, #572]	; (8011ed0 <_ZN2ps11SystemState10initializeEv+0x1568>)
 8011c94:	4618      	mov	r0, r3
 8011c96:	f00c fe61 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011c9a:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8011c9e:	498d      	ldr	r1, [pc, #564]	; (8011ed4 <_ZN2ps11SystemState10initializeEv+0x156c>)
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f00c fe5b 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011ca6:	4b8c      	ldr	r3, [pc, #560]	; (8011ed8 <_ZN2ps11SystemState10initializeEv+0x1570>)
 8011ca8:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8011cac:	2300      	movs	r3, #0
 8011cae:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8011cb2:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8011cb6:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8011cba:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f002 fce6 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011cca:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f00c fcd1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011cd4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f00c fccc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetElectAutoConnCmd,     &SystemState::onCommandGetElectAutoConn);
 8011cde:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011ce2:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011cec:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8011cf0:	4977      	ldr	r1, [pc, #476]	; (8011ed0 <_ZN2ps11SystemState10initializeEv+0x1568>)
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f00c fe32 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011cf8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8011cfc:	4977      	ldr	r1, [pc, #476]	; (8011edc <_ZN2ps11SystemState10initializeEv+0x1574>)
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f00c fe2c 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011d04:	4b76      	ldr	r3, [pc, #472]	; (8011ee0 <_ZN2ps11SystemState10initializeEv+0x1578>)
 8011d06:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8011d10:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8011d14:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8011d18:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8011d22:	4620      	mov	r0, r4
 8011d24:	f002 fcb7 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011d28:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f00c fca2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d32:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8011d36:	4618      	mov	r0, r3
 8011d38:	f00c fc9d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   SetRefElectVoltRangeCmd, &SystemState::onCommandSetRefElectVoltRange);
 8011d3c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011d40:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011d4a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8011d4e:	4960      	ldr	r1, [pc, #384]	; (8011ed0 <_ZN2ps11SystemState10initializeEv+0x1568>)
 8011d50:	4618      	mov	r0, r3
 8011d52:	f00c fe03 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011d56:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8011d5a:	4962      	ldr	r1, [pc, #392]	; (8011ee4 <_ZN2ps11SystemState10initializeEv+0x157c>)
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f00c fdfd 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011d62:	4b61      	ldr	r3, [pc, #388]	; (8011ee8 <_ZN2ps11SystemState10initializeEv+0x1580>)
 8011d64:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8011d6e:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8011d72:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8011d76:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8011d80:	4620      	mov	r0, r4
 8011d82:	f002 fc88 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011d86:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f00c fc73 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011d90:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8011d94:	4618      	mov	r0, r3
 8011d96:	f00c fc6e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetRefElectVoltRangeCmd, &SystemState::onCommandGetRefElectVoltRange);
 8011d9a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011d9e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011da8:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8011dac:	4948      	ldr	r1, [pc, #288]	; (8011ed0 <_ZN2ps11SystemState10initializeEv+0x1568>)
 8011dae:	4618      	mov	r0, r3
 8011db0:	f00c fdd4 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011db4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8011db8:	494c      	ldr	r1, [pc, #304]	; (8011eec <_ZN2ps11SystemState10initializeEv+0x1584>)
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f00c fdce 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011dc0:	4b4b      	ldr	r3, [pc, #300]	; (8011ef0 <_ZN2ps11SystemState10initializeEv+0x1588>)
 8011dc2:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8011dcc:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8011dd0:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8011dd4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8011dd8:	9300      	str	r3, [sp, #0]
 8011dda:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8011dde:	4620      	mov	r0, r4
 8011de0:	f002 fc59 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011de4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8011de8:	4618      	mov	r0, r3
 8011dea:	f00c fc44 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011dee:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8011df2:	4618      	mov	r0, r3
 8011df4:	f00c fc3f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        commandTable_.registerMethod(CommandKey,   GetHardwareVersionCmd,   &SystemState::onCommandGetHardwareVersion);
 8011df8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011dfc:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8011e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e0a:	4931      	ldr	r1, [pc, #196]	; (8011ed0 <_ZN2ps11SystemState10initializeEv+0x1568>)
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f00c fda5 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011e12:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011e16:	4937      	ldr	r1, [pc, #220]	; (8011ef4 <_ZN2ps11SystemState10initializeEv+0x158c>)
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f00c fd9f 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8011e1e:	4b36      	ldr	r3, [pc, #216]	; (8011ef8 <_ZN2ps11SystemState10initializeEv+0x1590>)
 8011e20:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8011e24:	2300      	movs	r3, #0
 8011e26:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 8011e2a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8011e2e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8011e32:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	; 0x9d8
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f002 fc2a 	bl	8014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 8011e42:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011e46:	4618      	mov	r0, r3
 8011e48:	f00c fc15 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011e4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e50:	4618      	mov	r0, r3
 8011e52:	f00c fc10 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
#endif

        analogSubsystem_.initialize();
 8011e56:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011e5a:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	3304      	adds	r3, #4
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7f3 fc22 	bl	80056ac <_ZN2ps15AnalogSubsystem10initializeEv>
        analogSubsystem_.setVolt(0.0);
 8011e68:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011e6c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3304      	adds	r3, #4
 8011e74:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8011efc <_ZN2ps11SystemState10initializeEv+0x1594>
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f3 fc5d 	bl	8005738 <_ZN2ps15AnalogSubsystem7setVoltEf>
        messageReceiver_.reset();
 8011e7e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011e82:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	33a0      	adds	r3, #160	; 0xa0
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fa fee5 	bl	800cc5a <_ZN2ps15MessageReceiver5resetEv>

#if defined HARDWARE_VERSION_0P2 
        electrodeAutoConnect_ = true;
 8011e90:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011e94:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        electrodeSwitch_.initialize();
 8011ea0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011ea4:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	339c      	adds	r3, #156	; 0x9c
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7f8 fe8e 	bl	800abce <_ZN2ps15ElectrodeSwitch10initializeEv>
        electrodeSwitch_.setAllConnected(false);
 8011eb2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011eb6:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	339c      	adds	r3, #156	; 0x9c
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7f8 ff46 	bl	800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>
#endif

    }
 8011ec6:	bf00      	nop
 8011ec8:	f607 17e4 	addw	r7, r7, #2532	; 0x9e4
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd90      	pop	{r4, r7, pc}
 8011ed0:	2000839c 	.word	0x2000839c
 8011ed4:	20008abc 	.word	0x20008abc
 8011ed8:	08013959 	.word	0x08013959
 8011edc:	20008ad4 	.word	0x20008ad4
 8011ee0:	08013afd 	.word	0x08013afd
 8011ee4:	20008aec 	.word	0x20008aec
 8011ee8:	08013b2d 	.word	0x08013b2d
 8011eec:	20008b04 	.word	0x20008b04
 8011ef0:	08013c99 	.word	0x08013c99
 8011ef4:	20008b1c 	.word	0x20008b1c
 8011ef8:	08013ce5 	.word	0x08013ce5
 8011efc:	00000000 	.word	0x00000000

08011f00 <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandRunTest(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8011f00:	b590      	push	{r4, r7, lr}
 8011f02:	b08f      	sub	sp, #60	; 0x3c
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
 8011f0c:	603b      	str	r3, [r7, #0]
        ReturnStatus status = voltammetry_.getTest(jsonMsg,jsonDat,test_);
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8011f14:	3170      	adds	r1, #112	; 0x70
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8011f1c:	332c      	adds	r3, #44	; 0x2c
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	9300      	str	r3, [sp, #0]
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	f003 fc41 	bl	80157ac <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE>
        if (!status.success)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	f083 0301 	eor.w	r3, r3, #1
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d12d      	bne.n	8011f94 <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_+0x94>
        {
            return status;
        }

        if (test_ == nullptr)
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8011f3e:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d122      	bne.n	8011f8c <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_+0x8c>
        {
            status.success = false;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]
            status.message = string("something is wrong, test_ == nullptr");
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	1d1c      	adds	r4, r3, #4
 8011f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f54:	4618      	mov	r0, r3
 8011f56:	f00c fa8e 	bl	801e476 <_ZNSaIcEC1Ev>
 8011f5a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011f5e:	f107 0314 	add.w	r3, r7, #20
 8011f62:	490f      	ldr	r1, [pc, #60]	; (8011fa0 <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_+0xa0>)
 8011f64:	4618      	mov	r0, r3
 8011f66:	f00c fd2d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8011f6a:	f107 0314 	add.w	r3, r7, #20
 8011f6e:	4619      	mov	r1, r3
 8011f70:	4620      	mov	r0, r4
 8011f72:	f00c fb8c 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8011f76:	f107 0314 	add.w	r3, r7, #20
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f00c fb7b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f84:	4618      	mov	r0, r3
 8011f86:	f00c fa77 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8011f8a:	e004      	b.n	8011f96 <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_+0x96>
                multiplexer_.connectFirstEnabledWrkElect();
            }
        }
#endif

        startTest();
 8011f8c:	68b8      	ldr	r0, [r7, #8]
 8011f8e:	f002 f9a3 	bl	80142d8 <_ZN2ps11SystemState9startTestEv>
        return status;
 8011f92:	e000      	b.n	8011f96 <_ZN2ps11SystemState16onCommandRunTestERN11ArduinoJson10JsonObjectES3_+0x96>
            return status;
 8011f94:	bf00      	nop
    }
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	3734      	adds	r7, #52	; 0x34
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd90      	pop	{r4, r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	08021d70 	.word	0x08021d70

08011fa4 <_ZN2ps11SystemState17onCommandStopTestERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandStopTest(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	607a      	str	r2, [r7, #4]
 8011fb0:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f7ef fa04 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        stopTest();
 8011fb8:	68b8      	ldr	r0, [r7, #8]
 8011fba:	f002 fa63 	bl	8014484 <_ZN2ps11SystemState8stopTestEv>
        return status;
 8011fbe:	bf00      	nop
    }
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <_ZN2ps11SystemState16onCommandGetVoltERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetVolt(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f7ef f9f2 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        float volt = analogSubsystem_.getVolt();
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	3304      	adds	r3, #4
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f3 fbc9 	bl	8005778 <_ZNK2ps15AnalogSubsystem7getVoltEv>
 8011fe6:	eef0 7a40 	vmov.f32	s15, s0
 8011fea:	edc7 7a05 	vstr	s15, [r7, #20]
        jsonDat.set(VoltKey,volt);
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	4904      	ldr	r1, [pc, #16]	; (8012008 <_ZN2ps11SystemState16onCommandGetVoltERN11ArduinoJson10JsonObjectES3_+0x40>)
 8011ff6:	6838      	ldr	r0, [r7, #0]
 8011ff8:	f7f5 fa07 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8011ffc:	bf00      	nop
    }
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	20008414 	.word	0x20008414

0801200c <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandSetVolt(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b0a1      	sub	sp, #132	; 0x84
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
 8012018:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801201a:	68f8      	ldr	r0, [r7, #12]
 801201c:	f7ef f9d0 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(VoltKey))
 8012020:	4967      	ldr	r1, [pc, #412]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7f2 fa7d 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8012028:	4603      	mov	r3, r0
 801202a:	f083 0301 	eor.w	r3, r3, #1
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d02f      	beq.n	8012094 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2200      	movs	r2, #0
 8012038:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + VoltKey;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	1d1c      	adds	r4, r3, #4
 801203e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012042:	4618      	mov	r0, r3
 8012044:	f00c fa17 	bl	801e476 <_ZNSaIcEC1Ev>
 8012048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801204c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012050:	495c      	ldr	r1, [pc, #368]	; (80121c4 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b8>)
 8012052:	4618      	mov	r0, r3
 8012054:	f00c fcb6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012058:	f107 0318 	add.w	r3, r7, #24
 801205c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012060:	4a57      	ldr	r2, [pc, #348]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8012062:	4618      	mov	r0, r3
 8012064:	f7f4 fad5 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8012068:	f107 0318 	add.w	r3, r7, #24
 801206c:	4619      	mov	r1, r3
 801206e:	4620      	mov	r0, r4
 8012070:	f00c fb0d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012074:	f107 0318 	add.w	r3, r7, #24
 8012078:	4618      	mov	r0, r3
 801207a:	f00c fafc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801207e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012082:	4618      	mov	r0, r3
 8012084:	f00c faf7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012088:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801208c:	4618      	mov	r0, r3
 801208e:	f00c f9f3 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8012092:	e090      	b.n	80121b6 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1aa>
        }

        if ( !(jsonMsg[VoltKey].is<float>() || jsonMsg[VoltKey].is<long>()) )
 8012094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012098:	4a49      	ldr	r2, [pc, #292]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 801209a:	6879      	ldr	r1, [r7, #4]
 801209c:	4618      	mov	r0, r3
 801209e:	f7f2 fa76 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 80120a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120a6:	4611      	mov	r1, r2
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7f5 faf7 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80120ae:	4603      	mov	r3, r0
 80120b0:	bf00      	nop
 80120b2:	f083 0301 	eor.w	r3, r3, #1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d015      	beq.n	80120e8 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0xdc>
 80120bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120c0:	4a3f      	ldr	r2, [pc, #252]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f2 fa62 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80120ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7f5 fb23 	bl	800771c <_ZNK11ArduinoJson10JsonObject2isIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80120d6:	4603      	mov	r3, r0
 80120d8:	bf00      	nop
 80120da:	f083 0301 	eor.w	r3, r3, #1
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0xdc>
 80120e4:	2301      	movs	r3, #1
 80120e6:	e000      	b.n	80120ea <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0xde>
 80120e8:	2300      	movs	r3, #0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d022      	beq.n	8012134 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x128>
        {
            status.success = false;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert volt to float");
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	1d1c      	adds	r4, r3, #4
 80120f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80120fc:	4618      	mov	r0, r3
 80120fe:	f00c f9ba 	bl	801e476 <_ZNSaIcEC1Ev>
 8012102:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012106:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801210a:	492f      	ldr	r1, [pc, #188]	; (80121c8 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1bc>)
 801210c:	4618      	mov	r0, r3
 801210e:	f00c fc59 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012112:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012116:	4619      	mov	r1, r3
 8012118:	4620      	mov	r0, r4
 801211a:	f00c fab8 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801211e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012122:	4618      	mov	r0, r3
 8012124:	f00c faa7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012128:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801212c:	4618      	mov	r0, r3
 801212e:	f00c f9a3 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8012132:	e040      	b.n	80121b6 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1aa>
        }

        float volt = 0.0;
 8012134:	f04f 0300 	mov.w	r3, #0
 8012138:	617b      	str	r3, [r7, #20]
        if (jsonMsg[VoltKey].is<float>())
 801213a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801213e:	4a20      	ldr	r2, [pc, #128]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8012140:	6879      	ldr	r1, [r7, #4]
 8012142:	4618      	mov	r0, r3
 8012144:	f7f2 fa23 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8012148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801214a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801214c:	4611      	mov	r1, r2
 801214e:	4618      	mov	r0, r3
 8012150:	f7f5 faa4 	bl	800769c <_ZNK11ArduinoJson10JsonObject2isIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8012154:	4603      	mov	r3, r0
 8012156:	bf00      	nop
 8012158:	2b00      	cmp	r3, #0
 801215a:	d008      	beq.n	801216e <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x162>
        { 
            volt = jsonMsg.get<float>(VoltKey);
 801215c:	4918      	ldr	r1, [pc, #96]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f5 f973 	bl	800744a <_ZNK11ArduinoJson10JsonObject3getIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8012164:	eef0 7a40 	vmov.f32	s15, s0
 8012168:	edc7 7a05 	vstr	s15, [r7, #20]
 801216c:	e009      	b.n	8012182 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x176>
        }
        else 
        {
            volt = float(jsonMsg.get<long>(VoltKey));
 801216e:	4914      	ldr	r1, [pc, #80]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7f5 f97a 	bl	800746a <_ZNK11ArduinoJson10JsonObject3getIlNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8012176:	ee07 0a90 	vmov	s15, r0
 801217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801217e:	edc7 7a05 	vstr	s15, [r7, #20]
        }

        analogSubsystem_.setVolt(volt);
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	3304      	adds	r3, #4
 8012186:	edd7 7a05 	vldr	s15, [r7, #20]
 801218a:	eeb0 0a67 	vmov.f32	s0, s15
 801218e:	4618      	mov	r0, r3
 8012190:	f7f3 fad2 	bl	8005738 <_ZN2ps15AnalogSubsystem7setVoltEf>
        volt = analogSubsystem_.getVolt();
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	3304      	adds	r3, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f7f3 faed 	bl	8005778 <_ZNK2ps15AnalogSubsystem7getVoltEv>
 801219e:	eef0 7a40 	vmov.f32	s15, s0
 80121a2:	edc7 7a05 	vstr	s15, [r7, #20]
        jsonDat.set(VoltKey,volt);
 80121a6:	f107 0314 	add.w	r3, r7, #20
 80121aa:	461a      	mov	r2, r3
 80121ac:	4904      	ldr	r1, [pc, #16]	; (80121c0 <_ZN2ps11SystemState16onCommandSetVoltERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 80121ae:	6838      	ldr	r0, [r7, #0]
 80121b0:	f7f5 f92b 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 80121b4:	bf00      	nop
    }
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	3784      	adds	r7, #132	; 0x84
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd90      	pop	{r4, r7, pc}
 80121be:	bf00      	nop
 80121c0:	20008414 	.word	0x20008414
 80121c4:	08021d98 	.word	0x08021d98
 80121c8:	08021db4 	.word	0x08021db4

080121cc <_ZN2ps11SystemState16onCommandGetCurrERN11ArduinoJson10JsonObjectES3_>:

    
    ReturnStatus SystemState::onCommandGetCurr(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b086      	sub	sp, #24
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	607a      	str	r2, [r7, #4]
 80121d8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 80121da:	68f8      	ldr	r0, [r7, #12]
 80121dc:	f7ef f8f0 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        float curr = analogSubsystem_.getCurr();
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	3304      	adds	r3, #4
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7f3 fae1 	bl	80057ac <_ZNK2ps15AnalogSubsystem7getCurrEv>
 80121ea:	eef0 7a40 	vmov.f32	s15, s0
 80121ee:	edc7 7a05 	vstr	s15, [r7, #20]
        jsonDat.set(CurrKey,curr);
 80121f2:	f107 0314 	add.w	r3, r7, #20
 80121f6:	461a      	mov	r2, r3
 80121f8:	4904      	ldr	r1, [pc, #16]	; (801220c <_ZN2ps11SystemState16onCommandGetCurrERN11ArduinoJson10JsonObjectES3_+0x40>)
 80121fa:	6838      	ldr	r0, [r7, #0]
 80121fc:	f7f5 f905 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8012200:	bf00      	nop
    }
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	3718      	adds	r7, #24
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	2000842c 	.word	0x2000842c

08012210 <_ZN2ps11SystemState19onCommandGetRefVoltERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetRefVolt(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
 801221c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	f7ef f8ce 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        float refVolt = analogSubsystem_.getRefElectVolt();
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	3304      	adds	r3, #4
 8012228:	4618      	mov	r0, r3
 801222a:	f7f3 fadd 	bl	80057e8 <_ZNK2ps15AnalogSubsystem15getRefElectVoltEv>
 801222e:	eef0 7a40 	vmov.f32	s15, s0
 8012232:	edc7 7a05 	vstr	s15, [r7, #20]
        jsonDat.set(RefVoltKey,refVolt);
 8012236:	f107 0314 	add.w	r3, r7, #20
 801223a:	461a      	mov	r2, r3
 801223c:	4904      	ldr	r1, [pc, #16]	; (8012250 <_ZN2ps11SystemState19onCommandGetRefVoltERN11ArduinoJson10JsonObjectES3_+0x40>)
 801223e:	6838      	ldr	r0, [r7, #0]
 8012240:	f7f5 f8e3 	bl	800740a <_ZN11ArduinoJson10JsonObject3setIfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8012244:	bf00      	nop
    }
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	3718      	adds	r7, #24
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	2000845c 	.word	0x2000845c

08012254 <_ZN2ps11SystemState21onCommandSetTestParamERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandSetTestParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	607a      	str	r2, [r7, #4]
 8012260:	603b      	str	r3, [r7, #0]
        ReturnStatus status = voltammetry_.setParam(jsonMsg,jsonDat);
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8012268:	3170      	adds	r1, #112	; 0x70
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	f003 fbd8 	bl	8015a24 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_>
        return status;
 8012274:	bf00      	nop
    }
 8012276:	68f8      	ldr	r0, [r7, #12]
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <_ZN2ps11SystemState21onCommandGetTestParamERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetTestParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	60f8      	str	r0, [r7, #12]
 8012286:	60b9      	str	r1, [r7, #8]
 8012288:	607a      	str	r2, [r7, #4]
 801228a:	603b      	str	r3, [r7, #0]
        ReturnStatus status = voltammetry_.getParam(jsonMsg,jsonDat);
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8012292:	3170      	adds	r1, #112	; 0x70
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	687a      	ldr	r2, [r7, #4]
 801229a:	f003 fb53 	bl	8015944 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_>
        return status;
 801229e:	bf00      	nop
    }
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandSetVoltRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b0af      	sub	sp, #188	; 0xbc
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f7ef f882 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(VoltRangeKey))
 80122bc:	4953      	ldr	r1, [pc, #332]	; (801240c <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7f2 f92f 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80122c4:	4603      	mov	r3, r0
 80122c6:	f083 0301 	eor.w	r3, r3, #1
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d02f      	beq.n	8012330 <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2200      	movs	r2, #0
 80122d4:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + VoltRangeKey;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	1d1c      	adds	r4, r3, #4
 80122da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80122de:	4618      	mov	r0, r3
 80122e0:	f00c f8c9 	bl	801e476 <_ZNSaIcEC1Ev>
 80122e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80122e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80122ec:	4948      	ldr	r1, [pc, #288]	; (8012410 <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x168>)
 80122ee:	4618      	mov	r0, r3
 80122f0:	f00c fb68 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80122f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122f8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80122fc:	4a43      	ldr	r2, [pc, #268]	; (801240c <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80122fe:	4618      	mov	r0, r3
 8012300:	f7f4 f987 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8012304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012308:	4619      	mov	r1, r3
 801230a:	4620      	mov	r0, r4
 801230c:	f00c f9bf 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012314:	4618      	mov	r0, r3
 8012316:	f00c f9ae 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801231a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801231e:	4618      	mov	r0, r3
 8012320:	f00c f9a9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012324:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012328:	4618      	mov	r0, r3
 801232a:	f00c f8a5 	bl	801e478 <_ZNSaIcED1Ev>
        {
            string voltRangeName = string((const char *)(jsonMsg[VoltRangeKey]));
            status = analogSubsystem_.setVoltRangeByName(voltRangeName);
            jsonDat.set(VoltRangeKey,analogSubsystem_.getVoltRangeName());
        }
        return status;
 801232e:	e068      	b.n	8012402 <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x15a>
            string voltRangeName = string((const char *)(jsonMsg[VoltRangeKey]));
 8012330:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012334:	4a35      	ldr	r2, [pc, #212]	; (801240c <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8012336:	6879      	ldr	r1, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	f7f2 f928 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<T>();
 801233e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012342:	4618      	mov	r0, r3
 8012344:	f7f2 fa4f 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 8012348:	4603      	mov	r3, r0
 801234a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.get<TValue>(_key);
 801234e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	4619      	mov	r1, r3
 801235c:	4610      	mov	r0, r2
 801235e:	f002 fded 	bl	8014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8012362:	4604      	mov	r4, r0
 8012364:	bf00      	nop
    return impl()->template as<T>();
 8012366:	bf00      	nop
 8012368:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801236c:	4618      	mov	r0, r3
 801236e:	f00c f882 	bl	801e476 <_ZNSaIcEC1Ev>
 8012372:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012376:	f107 0310 	add.w	r3, r7, #16
 801237a:	4621      	mov	r1, r4
 801237c:	4618      	mov	r0, r3
 801237e:	f00c fb21 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012382:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012386:	4618      	mov	r0, r3
 8012388:	f00c f876 	bl	801e478 <_ZNSaIcED1Ev>
            status = analogSubsystem_.setVoltRangeByName(voltRangeName);
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	1d1c      	adds	r4, r3, #4
 8012390:	f107 0210 	add.w	r2, r7, #16
 8012394:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012398:	4611      	mov	r1, r2
 801239a:	4618      	mov	r0, r3
 801239c:	f00c fade 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80123a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80123a8:	4621      	mov	r1, r4
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7f3 fba4 	bl	8005af8 <_ZN2ps15AnalogSubsystem18setVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80123b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123b4:	4619      	mov	r1, r3
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7f0 faa8 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 80123bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f0 fa3b 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 80123c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123ca:	4618      	mov	r0, r3
 80123cc:	f00c f953 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            jsonDat.set(VoltRangeKey,analogSubsystem_.getVoltRangeName());
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	1d1a      	adds	r2, r3, #4
 80123d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7f3 fc4e 	bl	8005c7c <_ZNK2ps15AnalogSubsystem16getVoltRangeNameB5cxx11Ev>
 80123e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123e4:	461a      	mov	r2, r3
 80123e6:	4909      	ldr	r1, [pc, #36]	; (801240c <_ZN2ps11SystemState21onCommandSetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80123e8:	6838      	ldr	r0, [r7, #0]
 80123ea:	f7fb f92b 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 80123ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123f2:	4618      	mov	r0, r3
 80123f4:	f00c f93f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 80123f8:	f107 0310 	add.w	r3, r7, #16
 80123fc:	4618      	mov	r0, r3
 80123fe:	f00c f93a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 8012402:	bf00      	nop
    }
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	37bc      	adds	r7, #188	; 0xbc
 8012408:	46bd      	mov	sp, r7
 801240a:	bd90      	pop	{r4, r7, pc}
 801240c:	2000848c 	.word	0x2000848c
 8012410:	08021d98 	.word	0x08021d98

08012414 <_ZN2ps11SystemState21onCommandGetVoltRangeERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetVoltRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012414:	b580      	push	{r7, lr}
 8012416:	b08a      	sub	sp, #40	; 0x28
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f7ee ffcc 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(VoltRangeKey,analogSubsystem_.getVoltRangeName());
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	1d1a      	adds	r2, r3, #4
 801242c:	f107 0310 	add.w	r3, r7, #16
 8012430:	4611      	mov	r1, r2
 8012432:	4618      	mov	r0, r3
 8012434:	f7f3 fc22 	bl	8005c7c <_ZNK2ps15AnalogSubsystem16getVoltRangeNameB5cxx11Ev>
 8012438:	f107 0310 	add.w	r3, r7, #16
 801243c:	461a      	mov	r2, r3
 801243e:	4907      	ldr	r1, [pc, #28]	; (801245c <_ZN2ps11SystemState21onCommandGetVoltRangeERN11ArduinoJson10JsonObjectES3_+0x48>)
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	f7fb f8ff 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 8012446:	f107 0310 	add.w	r3, r7, #16
 801244a:	4618      	mov	r0, r3
 801244c:	f00c f913 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 8012450:	bf00      	nop
    }
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	3728      	adds	r7, #40	; 0x28
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	2000848c 	.word	0x2000848c

08012460 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandSetCurrRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012460:	b590      	push	{r4, r7, lr}
 8012462:	b0af      	sub	sp, #188	; 0xbc
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
 801246c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801246e:	68f8      	ldr	r0, [r7, #12]
 8012470:	f7ee ffa6 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(CurrRangeKey))
 8012474:	4953      	ldr	r1, [pc, #332]	; (80125c4 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7f2 f853 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 801247c:	4603      	mov	r3, r0
 801247e:	f083 0301 	eor.w	r3, r3, #1
 8012482:	b2db      	uxtb	r3, r3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d02f      	beq.n	80124e8 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2200      	movs	r2, #0
 801248c:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + CurrRangeKey;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	1d1c      	adds	r4, r3, #4
 8012492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012496:	4618      	mov	r0, r3
 8012498:	f00b ffed 	bl	801e476 <_ZNSaIcEC1Ev>
 801249c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80124a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80124a4:	4948      	ldr	r1, [pc, #288]	; (80125c8 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x168>)
 80124a6:	4618      	mov	r0, r3
 80124a8:	f00c fa8c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80124ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80124b0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80124b4:	4a43      	ldr	r2, [pc, #268]	; (80125c4 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f4 f8ab 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80124bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80124c0:	4619      	mov	r1, r3
 80124c2:	4620      	mov	r0, r4
 80124c4:	f00c f8e3 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80124c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80124cc:	4618      	mov	r0, r3
 80124ce:	f00c f8d2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80124d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80124d6:	4618      	mov	r0, r3
 80124d8:	f00c f8cd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80124dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80124e0:	4618      	mov	r0, r3
 80124e2:	f00b ffc9 	bl	801e478 <_ZNSaIcED1Ev>
        {
            string currRangeName = string((const char *)(jsonMsg[CurrRangeKey]));
            status = analogSubsystem_.setCurrRangeByName(currRangeName);
            jsonDat.set(CurrRangeKey,analogSubsystem_.getCurrRangeName());
        }
        return status;
 80124e6:	e068      	b.n	80125ba <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x15a>
            string currRangeName = string((const char *)(jsonMsg[CurrRangeKey]));
 80124e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80124ec:	4a35      	ldr	r2, [pc, #212]	; (80125c4 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80124ee:	6879      	ldr	r1, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7f2 f84c 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80124f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f2 f973 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 8012500:	4603      	mov	r3, r0
 8012502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.get<TValue>(_key);
 8012506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	4619      	mov	r1, r3
 8012514:	4610      	mov	r0, r2
 8012516:	f002 fd11 	bl	8014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 801251a:	4604      	mov	r4, r0
 801251c:	bf00      	nop
    return impl()->template as<T>();
 801251e:	bf00      	nop
 8012520:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012524:	4618      	mov	r0, r3
 8012526:	f00b ffa6 	bl	801e476 <_ZNSaIcEC1Ev>
 801252a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801252e:	f107 0310 	add.w	r3, r7, #16
 8012532:	4621      	mov	r1, r4
 8012534:	4618      	mov	r0, r3
 8012536:	f00c fa45 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801253a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801253e:	4618      	mov	r0, r3
 8012540:	f00b ff9a 	bl	801e478 <_ZNSaIcED1Ev>
            status = analogSubsystem_.setCurrRangeByName(currRangeName);
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	1d1c      	adds	r4, r3, #4
 8012548:	f107 0210 	add.w	r2, r7, #16
 801254c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f00c fa02 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8012558:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801255c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012560:	4621      	mov	r1, r4
 8012562:	4618      	mov	r0, r3
 8012564:	f7f3 fbac 	bl	8005cc0 <_ZN2ps15AnalogSubsystem18setCurrRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8012568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801256c:	4619      	mov	r1, r3
 801256e:	68f8      	ldr	r0, [r7, #12]
 8012570:	f7f0 f9cc 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8012574:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012578:	4618      	mov	r0, r3
 801257a:	f7f0 f95f 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 801257e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012582:	4618      	mov	r0, r3
 8012584:	f00c f877 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            jsonDat.set(CurrRangeKey,analogSubsystem_.getCurrRangeName());
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	1d1a      	adds	r2, r3, #4
 801258c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012590:	4611      	mov	r1, r2
 8012592:	4618      	mov	r0, r3
 8012594:	f7f3 fb82 	bl	8005c9c <_ZNK2ps15AnalogSubsystem16getCurrRangeNameB5cxx11Ev>
 8012598:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801259c:	461a      	mov	r2, r3
 801259e:	4909      	ldr	r1, [pc, #36]	; (80125c4 <_ZN2ps11SystemState21onCommandSetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 80125a0:	6838      	ldr	r0, [r7, #0]
 80125a2:	f7fb f84f 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 80125a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80125aa:	4618      	mov	r0, r3
 80125ac:	f00c f863 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 80125b0:	f107 0310 	add.w	r3, r7, #16
 80125b4:	4618      	mov	r0, r3
 80125b6:	f00c f85e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 80125ba:	bf00      	nop
    }
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	37bc      	adds	r7, #188	; 0xbc
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd90      	pop	{r4, r7, pc}
 80125c4:	200084a4 	.word	0x200084a4
 80125c8:	08021d98 	.word	0x08021d98

080125cc <_ZN2ps11SystemState21onCommandGetCurrRangeERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetCurrRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08a      	sub	sp, #40	; 0x28
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
 80125d8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f7ee fef0 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(CurrRangeKey,analogSubsystem_.getCurrRangeName());
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	1d1a      	adds	r2, r3, #4
 80125e4:	f107 0310 	add.w	r3, r7, #16
 80125e8:	4611      	mov	r1, r2
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7f3 fb56 	bl	8005c9c <_ZNK2ps15AnalogSubsystem16getCurrRangeNameB5cxx11Ev>
 80125f0:	f107 0310 	add.w	r3, r7, #16
 80125f4:	461a      	mov	r2, r3
 80125f6:	4907      	ldr	r1, [pc, #28]	; (8012614 <_ZN2ps11SystemState21onCommandGetCurrRangeERN11ArduinoJson10JsonObjectES3_+0x48>)
 80125f8:	6838      	ldr	r0, [r7, #0]
 80125fa:	f7fb f823 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 80125fe:	f107 0310 	add.w	r3, r7, #16
 8012602:	4618      	mov	r0, r3
 8012604:	f00c f837 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 8012608:	bf00      	nop
    }
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	3728      	adds	r7, #40	; 0x28
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	200084a4 	.word	0x200084a4

08012618 <_ZN2ps11SystemState20onCommandSetDeviceIdERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandSetDeviceId(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012618:	b580      	push	{r7, lr}
 801261a:	b08c      	sub	sp, #48	; 0x30
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ee feca 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        DeviceId_NVMEM deviceIdMem;
 801262c:	f107 0310 	add.w	r3, r7, #16
 8012630:	4618      	mov	r0, r3
 8012632:	f7f8 f903 	bl	800a83c <_ZN2ps14DeviceId_NVMEMC1Ev>
//#if defined DEVBOARD_TEENSY
//        DeviceId_EEPROM deviceIdMem;
//#else
//        DeviceId_Flash deviceIdMem;
//#endif
        status = deviceIdMem.set(jsonMsg,jsonDat);
 8012636:	f107 0014 	add.w	r0, r7, #20
 801263a:	f107 0110 	add.w	r1, r7, #16
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	f7f8 f907 	bl	800a854 <_ZN2ps14DeviceId_NVMEM3setERN11ArduinoJson10JsonObjectES3_>
 8012646:	f107 0314 	add.w	r3, r7, #20
 801264a:	4619      	mov	r1, r3
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7f0 f95d 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8012652:	f107 0314 	add.w	r3, r7, #20
 8012656:	4618      	mov	r0, r3
 8012658:	f7f0 f8f0 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        return status;
 801265c:	bf00      	nop
    }
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	3730      	adds	r7, #48	; 0x30
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <_ZN2ps11SystemState20onCommandGetDeviceIdERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetDeviceId(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012666:	b580      	push	{r7, lr}
 8012668:	b086      	sub	sp, #24
 801266a:	af00      	add	r7, sp, #0
 801266c:	60f8      	str	r0, [r7, #12]
 801266e:	60b9      	str	r1, [r7, #8]
 8012670:	607a      	str	r2, [r7, #4]
 8012672:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7ee fea3 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        DeviceId_NVMEM deviceIdMem;
 801267a:	f107 0314 	add.w	r3, r7, #20
 801267e:	4618      	mov	r0, r3
 8012680:	f7f8 f8dc 	bl	800a83c <_ZN2ps14DeviceId_NVMEMC1Ev>
//#if defined DEVBOARD_TEENSY
//        DeviceId_EEPROM deviceIdMem;
//#else
//        DeviceId_Flash deviceIdMem;
//#endif
        deviceIdMem.get(jsonDat);
 8012684:	f107 0314 	add.w	r3, r7, #20
 8012688:	6839      	ldr	r1, [r7, #0]
 801268a:	4618      	mov	r0, r3
 801268c:	f7f8 f97c 	bl	800a988 <_ZN2ps14DeviceId_NVMEM3getERN11ArduinoJson10JsonObjectE>
        return status;
 8012690:	bf00      	nop
    }
 8012692:	68f8      	ldr	r0, [r7, #12]
 8012694:	3718      	adds	r7, #24
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetSamplePeriod(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 801269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801269e:	b0e5      	sub	sp, #404	; 0x194
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	f507 76c8 	add.w	r6, r7, #400	; 0x190
 80126a6:	f5a6 76c2 	sub.w	r6, r6, #388	; 0x184
 80126aa:	6030      	str	r0, [r6, #0]
 80126ac:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80126b0:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 80126b4:	6001      	str	r1, [r0, #0]
 80126b6:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 80126ba:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 80126be:	600a      	str	r2, [r1, #0]
 80126c0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80126c4:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80126c8:	6013      	str	r3, [r2, #0]
        ReturnStatus status;
 80126ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80126ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	f7ee fe74 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(SamplePeriodKey))
 80126d8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80126dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80126e0:	49cf      	ldr	r1, [pc, #828]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 80126e2:	6818      	ldr	r0, [r3, #0]
 80126e4:	f7f1 ff1d 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80126e8:	4603      	mov	r3, r0
 80126ea:	f083 0301 	eor.w	r3, r3, #1
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d039      	beq.n	8012768 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0xcc>
        {
            status.success = false;
 80126f4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80126f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2200      	movs	r2, #0
 8012700:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + SamplePeriodKey;
 8012702:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012706:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	1d1c      	adds	r4, r3, #4
 801270e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012712:	4618      	mov	r0, r3
 8012714:	f00b feaf 	bl	801e476 <_ZNSaIcEC1Ev>
 8012718:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801271c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012720:	49c0      	ldr	r1, [pc, #768]	; (8012a24 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x388>)
 8012722:	4618      	mov	r0, r3
 8012724:	f00c f94e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012728:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801272c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8012730:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8012734:	4aba      	ldr	r2, [pc, #744]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 8012736:	4618      	mov	r0, r3
 8012738:	f7f3 ff6b 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 801273c:	f107 0310 	add.w	r3, r7, #16
 8012740:	4619      	mov	r1, r3
 8012742:	4620      	mov	r0, r4
 8012744:	f00b ffa3 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012748:	f107 0310 	add.w	r3, r7, #16
 801274c:	4618      	mov	r0, r3
 801274e:	f00b ff92 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012756:	4618      	mov	r0, r3
 8012758:	f00b ff8d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801275c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012760:	4618      	mov	r0, r3
 8012762:	f00b fe89 	bl	801e478 <_ZNSaIcED1Ev>
                    setSamplePeriod(samplePeriodUs);
                    jsonDat.set(SamplePeriodKey,convertUsToMs(getSamplePeriod()));
                }
            }
        }
        return status;
 8012766:	e190      	b.n	8012a8a <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3ee>
            if (!jsonMsg[SamplePeriodKey].is<uint32_t>())
 8012768:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801276c:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8012770:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012774:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012778:	4aa9      	ldr	r2, [pc, #676]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 801277a:	6819      	ldr	r1, [r3, #0]
 801277c:	f7f1 ff07 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return _object.is<TValue>(_key);
 8012780:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012784:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801278e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	4619      	mov	r1, r3
 8012796:	4610      	mov	r0, r2
 8012798:	f7f4 fffd 	bl	8007796 <_ZNK11ArduinoJson10JsonObject2isImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 801279c:	4603      	mov	r3, r0
 801279e:	bf00      	nop
 80127a0:	f083 0301 	eor.w	r3, r3, #1
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d060      	beq.n	801286c <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x1d0>
                status.success = false;
 80127aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80127ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2200      	movs	r2, #0
 80127b6:	701a      	strb	r2, [r3, #0]
                status.message = string("json ") + SamplePeriodKey + string(" value is not uin32_t");
 80127b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80127bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	1d1c      	adds	r4, r3, #4
 80127c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80127c8:	4618      	mov	r0, r3
 80127ca:	f00b fe54 	bl	801e476 <_ZNSaIcEC1Ev>
 80127ce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80127d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80127d6:	4994      	ldr	r1, [pc, #592]	; (8012a28 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x38c>)
 80127d8:	4618      	mov	r0, r3
 80127da:	f00c f8f3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80127de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80127e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80127e6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80127ea:	4a8d      	ldr	r2, [pc, #564]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f3 ff10 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80127f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80127f6:	4618      	mov	r0, r3
 80127f8:	f00b fe3d 	bl	801e476 <_ZNSaIcEC1Ev>
 80127fc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8012800:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012804:	4989      	ldr	r1, [pc, #548]	; (8012a2c <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x390>)
 8012806:	4618      	mov	r0, r3
 8012808:	f00c f8dc 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801280c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012810:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012814:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8012818:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801281c:	4618      	mov	r0, r3
 801281e:	f7f3 ff0f 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8012822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012826:	4619      	mov	r1, r3
 8012828:	4620      	mov	r0, r4
 801282a:	f00b ff30 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801282e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012832:	4618      	mov	r0, r3
 8012834:	f00b ff1f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012838:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801283c:	4618      	mov	r0, r3
 801283e:	f00b ff1a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012842:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012846:	4618      	mov	r0, r3
 8012848:	f00b fe16 	bl	801e478 <_ZNSaIcED1Ev>
 801284c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012850:	4618      	mov	r0, r3
 8012852:	f00b ff10 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801285a:	4618      	mov	r0, r3
 801285c:	f00b ff0b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012860:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012864:	4618      	mov	r0, r3
 8012866:	f00b fe07 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 801286a:	e10e      	b.n	8012a8a <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3ee>
                uint32_t samplePeriodMs = jsonMsg.get<uint32_t>(SamplePeriodKey);
 801286c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012870:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012874:	496a      	ldr	r1, [pc, #424]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 8012876:	6818      	ldr	r0, [r3, #0]
 8012878:	f7f4 fe05 	bl	8007486 <_ZNK11ArduinoJson10JsonObject3getImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 801287c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
                uint32_t samplePeriodUs = uint32_t(convertMsToUs(samplePeriodMs));
 8012880:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8012884:	f7ee ffdd 	bl	8001842 <_ZN2ps13convertMsToUsEm>
 8012888:	4602      	mov	r2, r0
 801288a:	460b      	mov	r3, r1
 801288c:	4613      	mov	r3, r2
 801288e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                if (samplePeriodUs > MaximumSamplePeriod)
 8012892:	4b67      	ldr	r3, [pc, #412]	; (8012a30 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x394>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801289a:	429a      	cmp	r2, r3
 801289c:	d95c      	bls.n	8012958 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x2bc>
                    status.success = false;
 801289e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80128a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2200      	movs	r2, #0
 80128aa:	701a      	strb	r2, [r3, #0]
                    status.message = string("json ") + SamplePeriodKey + string(" value is too large");
 80128ac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80128b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	1d1c      	adds	r4, r3, #4
 80128b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80128bc:	4618      	mov	r0, r3
 80128be:	f00b fdda 	bl	801e476 <_ZNSaIcEC1Ev>
 80128c2:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80128c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80128ca:	4957      	ldr	r1, [pc, #348]	; (8012a28 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x38c>)
 80128cc:	4618      	mov	r0, r3
 80128ce:	f00c f879 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80128d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80128d6:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80128da:	4a51      	ldr	r2, [pc, #324]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 80128dc:	4618      	mov	r0, r3
 80128de:	f7f3 fe98 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80128e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80128e6:	4618      	mov	r0, r3
 80128e8:	f00b fdc5 	bl	801e476 <_ZNSaIcEC1Ev>
 80128ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80128f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80128f4:	494f      	ldr	r1, [pc, #316]	; (8012a34 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x398>)
 80128f6:	4618      	mov	r0, r3
 80128f8:	f00c f864 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80128fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012900:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8012904:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8012908:	4618      	mov	r0, r3
 801290a:	f7f3 fe99 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 801290e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012912:	4619      	mov	r1, r3
 8012914:	4620      	mov	r0, r4
 8012916:	f00b feba 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801291a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801291e:	4618      	mov	r0, r3
 8012920:	f00b fea9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012924:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012928:	4618      	mov	r0, r3
 801292a:	f00b fea4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801292e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012932:	4618      	mov	r0, r3
 8012934:	f00b fda0 	bl	801e478 <_ZNSaIcED1Ev>
 8012938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801293c:	4618      	mov	r0, r3
 801293e:	f00b fe9a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012942:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012946:	4618      	mov	r0, r3
 8012948:	f00b fe95 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801294c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8012950:	4618      	mov	r0, r3
 8012952:	f00b fd91 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 8012956:	e098      	b.n	8012a8a <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3ee>
                else if (samplePeriodUs < MinimumSamplePeriod)
 8012958:	4b37      	ldr	r3, [pc, #220]	; (8012a38 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x39c>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8012960:	429a      	cmp	r2, r3
 8012962:	d26d      	bcs.n	8012a40 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3a4>
                    status.success = false;
 8012964:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012968:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2200      	movs	r2, #0
 8012970:	701a      	strb	r2, [r3, #0]
                    status.message = string("json ") + SamplePeriodKey + string(" value is too small");
 8012972:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012976:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	1d1c      	adds	r4, r3, #4
 801297e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8012982:	4618      	mov	r0, r3
 8012984:	f00b fd77 	bl	801e476 <_ZNSaIcEC1Ev>
 8012988:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801298c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8012990:	4925      	ldr	r1, [pc, #148]	; (8012a28 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x38c>)
 8012992:	4618      	mov	r0, r3
 8012994:	f00c f816 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012998:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801299c:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80129a0:	4a1f      	ldr	r2, [pc, #124]	; (8012a20 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x384>)
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f3 fe35 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80129a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80129ac:	4618      	mov	r0, r3
 80129ae:	f00b fd62 	bl	801e476 <_ZNSaIcEC1Ev>
 80129b2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80129b6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80129ba:	4920      	ldr	r1, [pc, #128]	; (8012a3c <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3a0>)
 80129bc:	4618      	mov	r0, r3
 80129be:	f00c f801 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80129c2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80129c6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80129ca:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7f3 fe36 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 80129d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80129d8:	4619      	mov	r1, r3
 80129da:	4620      	mov	r0, r4
 80129dc:	f00b fe57 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80129e0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80129e4:	4618      	mov	r0, r3
 80129e6:	f00b fe46 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80129ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80129ee:	4618      	mov	r0, r3
 80129f0:	f00b fe41 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80129f4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80129f8:	4618      	mov	r0, r3
 80129fa:	f00b fd3d 	bl	801e478 <_ZNSaIcED1Ev>
 80129fe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012a02:	4618      	mov	r0, r3
 8012a04:	f00b fe37 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012a08:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f00b fe32 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012a12:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8012a16:	4618      	mov	r0, r3
 8012a18:	f00b fd2e 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 8012a1c:	e035      	b.n	8012a8a <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x3ee>
 8012a1e:	bf00      	nop
 8012a20:	2000860c 	.word	0x2000860c
 8012a24:	08021d98 	.word	0x08021d98
 8012a28:	08021dd4 	.word	0x08021dd4
 8012a2c:	08021ddc 	.word	0x08021ddc
 8012a30:	08022328 	.word	0x08022328
 8012a34:	08021df4 	.word	0x08021df4
 8012a38:	08022324 	.word	0x08022324
 8012a3c:	08021e08 	.word	0x08021e08
                    setSamplePeriod(samplePeriodUs);
 8012a40:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8012a48:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8012a4c:	6818      	ldr	r0, [r3, #0]
 8012a4e:	f001 fd33 	bl	80144b8 <_ZN2ps11SystemState15setSamplePeriodEm>
                    jsonDat.set(SamplePeriodKey,convertUsToMs(getSamplePeriod()));
 8012a52:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	f001 fd64 	bl	8014528 <_ZN2ps11SystemState15getSamplePeriodEv>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2200      	movs	r2, #0
 8012a64:	461c      	mov	r4, r3
 8012a66:	4615      	mov	r5, r2
 8012a68:	4620      	mov	r0, r4
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	f7ee fed5 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8012a70:	4603      	mov	r3, r0
 8012a72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8012a76:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8012a7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8012a82:	490b      	ldr	r1, [pc, #44]	; (8012ab0 <_ZN2ps11SystemState24onCommandSetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x414>)
 8012a84:	6818      	ldr	r0, [r3, #0]
 8012a86:	f7f4 fcd0 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8012a8a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012a92:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8012a96:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8012a9a:	6812      	ldr	r2, [r2, #0]
 8012a9c:	601a      	str	r2, [r3, #0]
    }
 8012a9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012aa2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8012aa6:	6818      	ldr	r0, [r3, #0]
 8012aa8:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ab0:	2000860c 	.word	0x2000860c

08012ab4 <_ZN2ps11SystemState24onCommandGetSamplePeriodERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetSamplePeriod(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012ab4:	b5b0      	push	{r4, r5, r7, lr}
 8012ab6:	b086      	sub	sp, #24
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012ac2:	68f8      	ldr	r0, [r7, #12]
 8012ac4:	f7ee fc7c 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(SamplePeriodKey,convertUsToMs(getSamplePeriod()));
 8012ac8:	68b8      	ldr	r0, [r7, #8]
 8012aca:	f001 fd2d 	bl	8014528 <_ZN2ps11SystemState15getSamplePeriodEv>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	461c      	mov	r4, r3
 8012ad4:	4615      	mov	r5, r2
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	4629      	mov	r1, r5
 8012ada:	f7ee fe9e 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	617b      	str	r3, [r7, #20]
 8012ae2:	f107 0314 	add.w	r3, r7, #20
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	4904      	ldr	r1, [pc, #16]	; (8012afc <_ZN2ps11SystemState24onCommandGetSamplePeriodERN11ArduinoJson10JsonObjectES3_+0x48>)
 8012aea:	6838      	ldr	r0, [r7, #0]
 8012aec:	f7f4 fc9d 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8012af0:	bf00      	nop
    }
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	3718      	adds	r7, #24
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bdb0      	pop	{r4, r5, r7, pc}
 8012afa:	bf00      	nop
 8012afc:	2000860c 	.word	0x2000860c

08012b00 <_ZN2ps11SystemState24onCommandGetTestDoneTimeERN11ArduinoJson10JsonObjectES3_>:

    
    ReturnStatus SystemState::onCommandGetTestDoneTime(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b08c      	sub	sp, #48	; 0x30
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
 8012b0c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012b0e:	68f8      	ldr	r0, [r7, #12]
 8012b10:	f7ee fc56 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = voltammetry_.getTestDoneTime(jsonMsg, jsonDat);
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8012b1a:	3170      	adds	r1, #112	; 0x70
 8012b1c:	f107 0014 	add.w	r0, r7, #20
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	f003 f822 	bl	8015b6c <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_>
 8012b28:	f107 0314 	add.w	r3, r7, #20
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	68f8      	ldr	r0, [r7, #12]
 8012b30:	f7ef feec 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8012b34:	f107 0314 	add.w	r3, r7, #20
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ef fe7f 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        return status;
 8012b3e:	bf00      	nop
    }
 8012b40:	68f8      	ldr	r0, [r7, #12]
 8012b42:	3730      	adds	r7, #48	; 0x30
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <_ZN2ps11SystemState21onCommandGetTestNamesERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetTestNames(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08c      	sub	sp, #48	; 0x30
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f7ee fc32 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = voltammetry_.getTestNames(jsonMsg, jsonDat);
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8012b62:	3170      	adds	r1, #112	; 0x70
 8012b64:	f107 0014 	add.w	r0, r7, #20
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	f003 f8be 	bl	8015cec <_ZN2ps11Voltammetry12getTestNamesERN11ArduinoJson10JsonObjectES3_>
 8012b70:	f107 0314 	add.w	r3, r7, #20
 8012b74:	4619      	mov	r1, r3
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	f7ef fec8 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8012b7c:	f107 0314 	add.w	r3, r7, #20
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ef fe5b 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        return status;
 8012b86:	bf00      	nop
    }
 8012b88:	68f8      	ldr	r0, [r7, #12]
 8012b8a:	3730      	adds	r7, #48	; 0x30
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <_ZN2ps11SystemState19onCommandGetVersionERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetVersion(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f7ee fc0e 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(VersionKey,FirmwareVersion);
 8012ba4:	4a04      	ldr	r2, [pc, #16]	; (8012bb8 <_ZN2ps11SystemState19onCommandGetVersionERN11ArduinoJson10JsonObjectES3_+0x28>)
 8012ba6:	4905      	ldr	r1, [pc, #20]	; (8012bbc <_ZN2ps11SystemState19onCommandGetVersionERN11ArduinoJson10JsonObjectES3_+0x2c>)
 8012ba8:	6838      	ldr	r0, [r7, #0]
 8012baa:	f7fa fd4b 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
        return status;
 8012bae:	bf00      	nop
    }
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	2000836c 	.word	0x2000836c
 8012bbc:	2000866c 	.word	0x2000866c

08012bc0 <_ZN2ps11SystemState19onCommandGetVariantERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus SystemState::onCommandGetVariant(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
 8012bcc:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	f7ee fbf6 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(VariantKey,HardwareVariant);
 8012bd4:	4a04      	ldr	r2, [pc, #16]	; (8012be8 <_ZN2ps11SystemState19onCommandGetVariantERN11ArduinoJson10JsonObjectES3_+0x28>)
 8012bd6:	4905      	ldr	r1, [pc, #20]	; (8012bec <_ZN2ps11SystemState19onCommandGetVariantERN11ArduinoJson10JsonObjectES3_+0x2c>)
 8012bd8:	6838      	ldr	r0, [r7, #0]
 8012bda:	f7fa fd33 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
        return status;
 8012bde:	bf00      	nop
    }
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	20008fec 	.word	0x20008fec
 8012bec:	20008684 	.word	0x20008684

08012bf0 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetMuxEnabled(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012bf0:	b590      	push	{r4, r7, lr}
 8012bf2:	b0a3      	sub	sp, #140	; 0x8c
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	607a      	str	r2, [r7, #4]
 8012bfc:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012bfe:	68f8      	ldr	r0, [r7, #12]
 8012c00:	f7ee fbde 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(MuxEnabledKey))
 8012c04:	494b      	ldr	r1, [pc, #300]	; (8012d34 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x144>)
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7f1 fc8b 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	f083 0301 	eor.w	r3, r3, #1
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d02f      	beq.n	8012c78 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + MuxEnabledKey;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	1d1c      	adds	r4, r3, #4
 8012c22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012c26:	4618      	mov	r0, r3
 8012c28:	f00b fc25 	bl	801e476 <_ZNSaIcEC1Ev>
 8012c2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c34:	4940      	ldr	r1, [pc, #256]	; (8012d38 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x148>)
 8012c36:	4618      	mov	r0, r3
 8012c38:	f00b fec4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012c3c:	f107 0314 	add.w	r3, r7, #20
 8012c40:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012c44:	4a3b      	ldr	r2, [pc, #236]	; (8012d34 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x144>)
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f3 fce3 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8012c4c:	f107 0314 	add.w	r3, r7, #20
 8012c50:	4619      	mov	r1, r3
 8012c52:	4620      	mov	r0, r4
 8012c54:	f00b fd1b 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012c58:	f107 0314 	add.w	r3, r7, #20
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f00b fd0a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c66:	4618      	mov	r0, r3
 8012c68:	f00b fd05 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012c70:	4618      	mov	r0, r3
 8012c72:	f00b fc01 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8012c76:	e059      	b.n	8012d2c <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x13c>
        }

        if ( !(jsonMsg[MuxEnabledKey].is<bool>()) )
 8012c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c7c:	4a2d      	ldr	r2, [pc, #180]	; (8012d34 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x144>)
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f1 fc84 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8012c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f001 ffed 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8012c92:	4603      	mov	r3, r0
 8012c94:	bf00      	nop
 8012c96:	f083 0301 	eor.w	r3, r3, #1
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d022      	beq.n	8012ce6 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0xf6>
        {
            status.success = false;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert muxEnabled to bool");
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	1d1c      	adds	r4, r3, #4
 8012caa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f00b fbe1 	bl	801e476 <_ZNSaIcEC1Ev>
 8012cb4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8012cb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cbc:	491f      	ldr	r1, [pc, #124]	; (8012d3c <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x14c>)
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f00b fe80 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012cc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f00b fcdf 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012cd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f00b fcce 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012cda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f00b fbca 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8012ce4:	e022      	b.n	8012d2c <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x13c>
            multiplexer_.disconnectCtrElect();
            multiplexer_.clearSwitchPins();
        }
        jsonDat.set(MuxEnabledKey,multiplexer_.isRunning());
#else
        status.success = false;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	1d1c      	adds	r4, r3, #4
 8012cf0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f00b fbbe 	bl	801e476 <_ZNSaIcEC1Ev>
 8012cfa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012cfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012d02:	490f      	ldr	r1, [pc, #60]	; (8012d40 <_ZN2ps11SystemState22onCommandSetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x150>)
 8012d04:	4618      	mov	r0, r3
 8012d06:	f00b fe5d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012d0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012d0e:	4619      	mov	r1, r3
 8012d10:	4620      	mov	r0, r4
 8012d12:	f00b fcbc 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012d16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f00b fcab 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012d20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012d24:	4618      	mov	r0, r3
 8012d26:	f00b fba7 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012d2a:	bf00      	nop
    }
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	378c      	adds	r7, #140	; 0x8c
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd90      	pop	{r4, r7, pc}
 8012d34:	2000869c 	.word	0x2000869c
 8012d38:	08021d98 	.word	0x08021d98
 8012d3c:	08021e1c 	.word	0x08021e1c
 8012d40:	08021e44 	.word	0x08021e44

08012d44 <_ZN2ps11SystemState22onCommandGetMuxEnabledERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetMuxEnabled(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b086      	sub	sp, #24
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
 8012d50:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f7ee fb34 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
#if defined MUX_CAPABLE
        jsonDat.set(MuxEnabledKey,multiplexer_.isRunning());
#else
        jsonDat.set(MuxEnabledKey, false);
 8012d58:	2300      	movs	r3, #0
 8012d5a:	75fb      	strb	r3, [r7, #23]
 8012d5c:	f107 0317 	add.w	r3, r7, #23
 8012d60:	461a      	mov	r2, r3
 8012d62:	4904      	ldr	r1, [pc, #16]	; (8012d74 <_ZN2ps11SystemState22onCommandGetMuxEnabledERN11ArduinoJson10JsonObjectES3_+0x30>)
 8012d64:	6838      	ldr	r0, [r7, #0]
 8012d66:	f7fa fc5d 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
#endif
        return status;
 8012d6a:	bf00      	nop
    }
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	3718      	adds	r7, #24
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	2000869c 	.word	0x2000869c

08012d78 <_ZN2ps11SystemState26onCommandSetEnabledMuxChanERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetEnabledMuxChan(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012d78:	b590      	push	{r4, r7, lr}
 8012d7a:	b08d      	sub	sp, #52	; 0x34
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f7ee fb1a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
            {
                jsonEnabledArray.add(enabledWrkElect[i]);
            }
        }
#else
        status.success = false;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	1d1c      	adds	r4, r3, #4
 8012d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f00b fb6b 	bl	801e476 <_ZNSaIcEC1Ev>
 8012da0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012da4:	f107 0314 	add.w	r3, r7, #20
 8012da8:	490c      	ldr	r1, [pc, #48]	; (8012ddc <_ZN2ps11SystemState26onCommandSetEnabledMuxChanERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012daa:	4618      	mov	r0, r3
 8012dac:	f00b fe0a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012db0:	f107 0314 	add.w	r3, r7, #20
 8012db4:	4619      	mov	r1, r3
 8012db6:	4620      	mov	r0, r4
 8012db8:	f00b fc69 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012dbc:	f107 0314 	add.w	r3, r7, #20
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f00b fc58 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f00b fb54 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012dd0:	bf00      	nop
    }
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	3734      	adds	r7, #52	; 0x34
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd90      	pop	{r4, r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	08021e44 	.word	0x08021e44

08012de0 <_ZN2ps11SystemState26onCommandGetEnabledMuxChanERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetEnabledMuxChan(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b08d      	sub	sp, #52	; 0x34
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	f7ee fae6 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        for (size_t i=0; i<enabledWrkElect.size(); i++)
        {
            jsonEnabledArray.add(enabledWrkElect[i]);
        }
#else
        status.success = false;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2200      	movs	r2, #0
 8012df8:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	1d1c      	adds	r4, r3, #4
 8012dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e02:	4618      	mov	r0, r3
 8012e04:	f00b fb37 	bl	801e476 <_ZNSaIcEC1Ev>
 8012e08:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012e0c:	f107 0314 	add.w	r3, r7, #20
 8012e10:	490c      	ldr	r1, [pc, #48]	; (8012e44 <_ZN2ps11SystemState26onCommandGetEnabledMuxChanERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012e12:	4618      	mov	r0, r3
 8012e14:	f00b fdd6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012e18:	f107 0314 	add.w	r3, r7, #20
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f00b fc35 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012e24:	f107 0314 	add.w	r3, r7, #20
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f00b fc24 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e32:	4618      	mov	r0, r3
 8012e34:	f00b fb20 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012e38:	bf00      	nop
    }
 8012e3a:	68f8      	ldr	r0, [r7, #12]
 8012e3c:	3734      	adds	r7, #52	; 0x34
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd90      	pop	{r4, r7, pc}
 8012e42:	bf00      	nop
 8012e44:	08021e44 	.word	0x08021e44

08012e48 <_ZN2ps11SystemState24onCommandGetMuxTestNamesERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetMuxTestNames(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b08c      	sub	sp, #48	; 0x30
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f7ee fab2 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        status = voltammetry_.getMuxTestNames(jsonMsg, jsonDat);
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8012e62:	3170      	adds	r1, #112	; 0x70
 8012e64:	f107 0014 	add.w	r0, r7, #20
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	f002 ff84 	bl	8015d78 <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_>
 8012e70:	f107 0314 	add.w	r3, r7, #20
 8012e74:	4619      	mov	r1, r3
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f7ef fd48 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8012e7c:	f107 0314 	add.w	r3, r7, #20
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ef fcdb 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        return status;
 8012e86:	bf00      	nop
    } 
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	3730      	adds	r7, #48	; 0x30
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <_ZN2ps11SystemState27onCommandSetMuxRefElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetMuxRefElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012e90:	b590      	push	{r4, r7, lr}
 8012e92:	b08d      	sub	sp, #52	; 0x34
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f7ee fa8e 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
            multiplexer_.disconnectRefElect();
        }

        jsonDat.set(ConnectedKey,multiplexer_.isConnectedRef());
#else
        status.success = false;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	1d1c      	adds	r4, r3, #4
 8012eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f00b fadf 	bl	801e476 <_ZNSaIcEC1Ev>
 8012eb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012ebc:	f107 0314 	add.w	r3, r7, #20
 8012ec0:	490c      	ldr	r1, [pc, #48]	; (8012ef4 <_ZN2ps11SystemState27onCommandSetMuxRefElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f00b fd7e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012ec8:	f107 0314 	add.w	r3, r7, #20
 8012ecc:	4619      	mov	r1, r3
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f00b fbdd 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012ed4:	f107 0314 	add.w	r3, r7, #20
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f00b fbcc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f00b fac8 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012ee8:	bf00      	nop
    }
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	3734      	adds	r7, #52	; 0x34
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd90      	pop	{r4, r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	08021e44 	.word	0x08021e44

08012ef8 <_ZN2ps11SystemState27onCommandGetMuxRefElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetMuxRefElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012ef8:	b590      	push	{r4, r7, lr}
 8012efa:	b08d      	sub	sp, #52	; 0x34
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
 8012f04:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f7ee fa5a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        else
        {
            jsonDat.set(ConnectedKey,false);
        }
#else
        status.success = false;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	1d1c      	adds	r4, r3, #4
 8012f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f00b faab 	bl	801e476 <_ZNSaIcEC1Ev>
 8012f20:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012f24:	f107 0314 	add.w	r3, r7, #20
 8012f28:	490c      	ldr	r1, [pc, #48]	; (8012f5c <_ZN2ps11SystemState27onCommandGetMuxRefElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f00b fd4a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012f30:	f107 0314 	add.w	r3, r7, #20
 8012f34:	4619      	mov	r1, r3
 8012f36:	4620      	mov	r0, r4
 8012f38:	f00b fba9 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012f3c:	f107 0314 	add.w	r3, r7, #20
 8012f40:	4618      	mov	r0, r3
 8012f42:	f00b fb98 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f00b fa94 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012f50:	bf00      	nop
    }
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	3734      	adds	r7, #52	; 0x34
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd90      	pop	{r4, r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	08021e44 	.word	0x08021e44

08012f60 <_ZN2ps11SystemState27onCommandSetMuxCtrElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetMuxCtrElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012f60:	b590      	push	{r4, r7, lr}
 8012f62:	b08d      	sub	sp, #52	; 0x34
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f7ee fa26 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
            multiplexer_.disconnectCtrElect();
        }

        jsonDat.set(ConnectedKey,multiplexer_.isConnectedCtr());
#else
        status.success = false;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2200      	movs	r2, #0
 8012f78:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	1d1c      	adds	r4, r3, #4
 8012f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f82:	4618      	mov	r0, r3
 8012f84:	f00b fa77 	bl	801e476 <_ZNSaIcEC1Ev>
 8012f88:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012f8c:	f107 0314 	add.w	r3, r7, #20
 8012f90:	490c      	ldr	r1, [pc, #48]	; (8012fc4 <_ZN2ps11SystemState27onCommandSetMuxCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012f92:	4618      	mov	r0, r3
 8012f94:	f00b fd16 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012f98:	f107 0314 	add.w	r3, r7, #20
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f00b fb75 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8012fa4:	f107 0314 	add.w	r3, r7, #20
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f00b fb64 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f00b fa60 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8012fb8:	bf00      	nop
    }
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	3734      	adds	r7, #52	; 0x34
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd90      	pop	{r4, r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	08021e44 	.word	0x08021e44

08012fc8 <_ZN2ps11SystemState27onCommandGetMuxCtrElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetMuxCtrElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b08d      	sub	sp, #52	; 0x34
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
 8012fd4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f7ee f9f2 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        else
        {
            jsonDat.set(ConnectedKey,false);
        }
#else
        status.success = false;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	1d1c      	adds	r4, r3, #4
 8012fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fea:	4618      	mov	r0, r3
 8012fec:	f00b fa43 	bl	801e476 <_ZNSaIcEC1Ev>
 8012ff0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012ff4:	f107 0314 	add.w	r3, r7, #20
 8012ff8:	490c      	ldr	r1, [pc, #48]	; (801302c <_ZN2ps11SystemState27onCommandGetMuxCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f00b fce2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013000:	f107 0314 	add.w	r3, r7, #20
 8013004:	4619      	mov	r1, r3
 8013006:	4620      	mov	r0, r4
 8013008:	f00b fb41 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801300c:	f107 0314 	add.w	r3, r7, #20
 8013010:	4618      	mov	r0, r3
 8013012:	f00b fb30 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801301a:	4618      	mov	r0, r3
 801301c:	f00b fa2c 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8013020:	bf00      	nop
    }
 8013022:	68f8      	ldr	r0, [r7, #12]
 8013024:	3734      	adds	r7, #52	; 0x34
 8013026:	46bd      	mov	sp, r7
 8013028:	bd90      	pop	{r4, r7, pc}
 801302a:	bf00      	nop
 801302c:	08021e44 	.word	0x08021e44

08013030 <_ZN2ps11SystemState27onCommandSetMuxWrkElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandSetMuxWrkElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b08d      	sub	sp, #52	; 0x34
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	f7ee f9be 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>

            multiplexer_.connectWrkElect(electNum);
            jsonDat.set(ConnectedKey,multiplexer_.currentWrkElect());
        }
#else
        status.success = false;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2200      	movs	r2, #0
 8013048:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	1d1c      	adds	r4, r3, #4
 801304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013052:	4618      	mov	r0, r3
 8013054:	f00b fa0f 	bl	801e476 <_ZNSaIcEC1Ev>
 8013058:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801305c:	f107 0314 	add.w	r3, r7, #20
 8013060:	490c      	ldr	r1, [pc, #48]	; (8013094 <_ZN2ps11SystemState27onCommandSetMuxWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 8013062:	4618      	mov	r0, r3
 8013064:	f00b fcae 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013068:	f107 0314 	add.w	r3, r7, #20
 801306c:	4619      	mov	r1, r3
 801306e:	4620      	mov	r0, r4
 8013070:	f00b fb0d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013074:	f107 0314 	add.w	r3, r7, #20
 8013078:	4618      	mov	r0, r3
 801307a:	f00b fafc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801307e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013082:	4618      	mov	r0, r3
 8013084:	f00b f9f8 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8013088:	bf00      	nop
    }
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	3734      	adds	r7, #52	; 0x34
 801308e:	46bd      	mov	sp, r7
 8013090:	bd90      	pop	{r4, r7, pc}
 8013092:	bf00      	nop
 8013094:	08021e44 	.word	0x08021e44

08013098 <_ZN2ps11SystemState27onCommandGetMuxWrkElectConnERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandGetMuxWrkElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013098:	b590      	push	{r4, r7, lr}
 801309a:	b08d      	sub	sp, #52	; 0x34
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
 80130a4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ee f98a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        else
        {
            jsonDat.set(ConnectedKey, false);
        }
#else
        status.success = false;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2200      	movs	r2, #0
 80130b0:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	1d1c      	adds	r4, r3, #4
 80130b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130ba:	4618      	mov	r0, r3
 80130bc:	f00b f9db 	bl	801e476 <_ZNSaIcEC1Ev>
 80130c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80130c4:	f107 0314 	add.w	r3, r7, #20
 80130c8:	490c      	ldr	r1, [pc, #48]	; (80130fc <_ZN2ps11SystemState27onCommandGetMuxWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x64>)
 80130ca:	4618      	mov	r0, r3
 80130cc:	f00b fc7a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80130d0:	f107 0314 	add.w	r3, r7, #20
 80130d4:	4619      	mov	r1, r3
 80130d6:	4620      	mov	r0, r4
 80130d8:	f00b fad9 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80130dc:	f107 0314 	add.w	r3, r7, #20
 80130e0:	4618      	mov	r0, r3
 80130e2:	f00b fac8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80130e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130ea:	4618      	mov	r0, r3
 80130ec:	f00b f9c4 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 80130f0:	bf00      	nop
    }
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	3734      	adds	r7, #52	; 0x34
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd90      	pop	{r4, r7, pc}
 80130fa:	bf00      	nop
 80130fc:	08021e44 	.word	0x08021e44

08013100 <_ZN2ps11SystemState27onCommandDisconnAllMuxElectERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus SystemState::onCommandDisconnAllMuxElect(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013100:	b590      	push	{r4, r7, lr}
 8013102:	b08d      	sub	sp, #52	; 0x34
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801310e:	68f8      	ldr	r0, [r7, #12]
 8013110:	f7ee f956 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
            multiplexer_.disconnectWrkElect();
            multiplexer_.disconnectRefElect();
            multiplexer_.disconnectCtrElect();
        }
#else
        status.success = false;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2200      	movs	r2, #0
 8013118:	701a      	strb	r2, [r3, #0]
        status.message = string("multiplexer hardware not supported");
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	1d1c      	adds	r4, r3, #4
 801311e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013122:	4618      	mov	r0, r3
 8013124:	f00b f9a7 	bl	801e476 <_ZNSaIcEC1Ev>
 8013128:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801312c:	f107 0314 	add.w	r3, r7, #20
 8013130:	490c      	ldr	r1, [pc, #48]	; (8013164 <_ZN2ps11SystemState27onCommandDisconnAllMuxElectERN11ArduinoJson10JsonObjectES3_+0x64>)
 8013132:	4618      	mov	r0, r3
 8013134:	f00b fc46 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013138:	f107 0314 	add.w	r3, r7, #20
 801313c:	4619      	mov	r1, r3
 801313e:	4620      	mov	r0, r4
 8013140:	f00b faa5 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013144:	f107 0314 	add.w	r3, r7, #20
 8013148:	4618      	mov	r0, r3
 801314a:	f00b fa94 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801314e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013152:	4618      	mov	r0, r3
 8013154:	f00b f990 	bl	801e478 <_ZNSaIcED1Ev>
#endif
        return status;
 8013158:	bf00      	nop
    }
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	3734      	adds	r7, #52	; 0x34
 801315e:	46bd      	mov	sp, r7
 8013160:	bd90      	pop	{r4, r7, pc}
 8013162:	bf00      	nop
 8013164:	08021e44 	.word	0x08021e44

08013168 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_>:

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetRefElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b0af      	sub	sp, #188	; 0xbc
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f7ee f922 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(ConnectedKey))
 801317c:	4965      	ldr	r1, [pc, #404]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7f1 f9cf 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8013184:	4603      	mov	r3, r0
 8013186:	f083 0301 	eor.w	r3, r3, #1
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b00      	cmp	r3, #0
 801318e:	d02f      	beq.n	80131f0 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + ConnectedKey;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	1d1c      	adds	r4, r3, #4
 801319a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801319e:	4618      	mov	r0, r3
 80131a0:	f00b f969 	bl	801e476 <_ZNSaIcEC1Ev>
 80131a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80131a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131ac:	495a      	ldr	r1, [pc, #360]	; (8013318 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1b0>)
 80131ae:	4618      	mov	r0, r3
 80131b0:	f00b fc08 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80131b4:	f107 0314 	add.w	r3, r7, #20
 80131b8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80131bc:	4a55      	ldr	r2, [pc, #340]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80131be:	4618      	mov	r0, r3
 80131c0:	f7f3 fa27 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80131c4:	f107 0314 	add.w	r3, r7, #20
 80131c8:	4619      	mov	r1, r3
 80131ca:	4620      	mov	r0, r4
 80131cc:	f00b fa5f 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80131d0:	f107 0314 	add.w	r3, r7, #20
 80131d4:	4618      	mov	r0, r3
 80131d6:	f00b fa4e 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80131da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131de:	4618      	mov	r0, r3
 80131e0:	f00b fa49 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80131e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131e8:	4618      	mov	r0, r3
 80131ea:	f00b f945 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80131ee:	e08c      	b.n	801330a <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if ( !(jsonMsg[ConnectedKey].is<bool>()) )
 80131f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80131f4:	4a47      	ldr	r2, [pc, #284]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80131f6:	6879      	ldr	r1, [r7, #4]
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f1 f9c8 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80131fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013202:	4611      	mov	r1, r2
 8013204:	4618      	mov	r0, r3
 8013206:	f001 fd31 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 801320a:	4603      	mov	r3, r0
 801320c:	bf00      	nop
 801320e:	f083 0301 	eor.w	r3, r3, #1
 8013212:	b2db      	uxtb	r3, r3
 8013214:	2b00      	cmp	r3, #0
 8013216:	d054      	beq.n	80132c2 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x15a>
        {
            status.success = false;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2200      	movs	r2, #0
 801321c:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert '") + ConnectedKey + string("' to bool");
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	1d1c      	adds	r4, r3, #4
 8013222:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013226:	4618      	mov	r0, r3
 8013228:	f00b f925 	bl	801e476 <_ZNSaIcEC1Ev>
 801322c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013230:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013234:	4939      	ldr	r1, [pc, #228]	; (801331c <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8013236:	4618      	mov	r0, r3
 8013238:	f00b fbc4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801323c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013240:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8013244:	4a33      	ldr	r2, [pc, #204]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 8013246:	4618      	mov	r0, r3
 8013248:	f7f3 f9e3 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 801324c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013250:	4618      	mov	r0, r3
 8013252:	f00b f910 	bl	801e476 <_ZNSaIcEC1Ev>
 8013256:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801325a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801325e:	4930      	ldr	r1, [pc, #192]	; (8013320 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1b8>)
 8013260:	4618      	mov	r0, r3
 8013262:	f00b fbaf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801326a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801326e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8013272:	4618      	mov	r0, r3
 8013274:	f7f3 f9e4 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8013278:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801327c:	4619      	mov	r1, r3
 801327e:	4620      	mov	r0, r4
 8013280:	f00b fa05 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013284:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013288:	4618      	mov	r0, r3
 801328a:	f00b f9f4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801328e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013292:	4618      	mov	r0, r3
 8013294:	f00b f9ef 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801329c:	4618      	mov	r0, r3
 801329e:	f00b f8eb 	bl	801e478 <_ZNSaIcED1Ev>
 80132a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80132a6:	4618      	mov	r0, r3
 80132a8:	f00b f9e5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80132ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80132b0:	4618      	mov	r0, r3
 80132b2:	f00b f9e0 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80132b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80132ba:	4618      	mov	r0, r3
 80132bc:	f00b f8dc 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80132c0:	e023      	b.n	801330a <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if (jsonMsg.get<bool>(ConnectedKey))
 80132c2:	4914      	ldr	r1, [pc, #80]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f001 fa25 	bl	8014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d006      	beq.n	80132de <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x176>
        {
            electrodeSwitch_.setRefConnected(true);
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	339c      	adds	r3, #156	; 0x9c
 80132d4:	2101      	movs	r1, #1
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7f7 fcea 	bl	800acb0 <_ZN2ps15ElectrodeSwitch15setRefConnectedEb>
 80132dc:	e005      	b.n	80132ea <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x182>
        }
        else
        {
            electrodeSwitch_.setRefConnected(false);
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	339c      	adds	r3, #156	; 0x9c
 80132e2:	2100      	movs	r1, #0
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f7 fce3 	bl	800acb0 <_ZN2ps15ElectrodeSwitch15setRefConnectedEb>
        }

        jsonDat.set(ConnectedKey, electrodeSwitch_.refConnected());
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	339c      	adds	r3, #156	; 0x9c
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f7 fcce 	bl	800ac90 <_ZN2ps15ElectrodeSwitch12refConnectedEv>
 80132f4:	4603      	mov	r3, r0
 80132f6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80132fa:	f107 03b7 	add.w	r3, r7, #183	; 0xb7
 80132fe:	461a      	mov	r2, r3
 8013300:	4904      	ldr	r1, [pc, #16]	; (8013314 <_ZN2ps11SystemState24onCommandSetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 8013302:	6838      	ldr	r0, [r7, #0]
 8013304:	f7fa f98e 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013308:	bf00      	nop
    }
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	37bc      	adds	r7, #188	; 0xbc
 801330e:	46bd      	mov	sp, r7
 8013310:	bd90      	pop	{r4, r7, pc}
 8013312:	bf00      	nop
 8013314:	200086cc 	.word	0x200086cc
 8013318:	08021d98 	.word	0x08021d98
 801331c:	08021e68 	.word	0x08021e68
 8013320:	08021e7c 	.word	0x08021e7c

08013324 <_ZN2ps11SystemState24onCommandGetRefElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetRefElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013324:	b580      	push	{r7, lr}
 8013326:	b086      	sub	sp, #24
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	60b9      	str	r1, [r7, #8]
 801332e:	607a      	str	r2, [r7, #4]
 8013330:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013332:	68f8      	ldr	r0, [r7, #12]
 8013334:	f7ee f844 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(ConnectedKey, electrodeSwitch_.refConnected());
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	339c      	adds	r3, #156	; 0x9c
 801333c:	4618      	mov	r0, r3
 801333e:	f7f7 fca7 	bl	800ac90 <_ZN2ps15ElectrodeSwitch12refConnectedEv>
 8013342:	4603      	mov	r3, r0
 8013344:	75fb      	strb	r3, [r7, #23]
 8013346:	f107 0317 	add.w	r3, r7, #23
 801334a:	461a      	mov	r2, r3
 801334c:	4904      	ldr	r1, [pc, #16]	; (8013360 <_ZN2ps11SystemState24onCommandGetRefElectConnERN11ArduinoJson10JsonObjectES3_+0x3c>)
 801334e:	6838      	ldr	r0, [r7, #0]
 8013350:	f7fa f968 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013354:	bf00      	nop
    }
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	3718      	adds	r7, #24
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	200086cc 	.word	0x200086cc

08013364 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetCtrElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b0af      	sub	sp, #188	; 0xbc
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
 8013370:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013372:	68f8      	ldr	r0, [r7, #12]
 8013374:	f7ee f824 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(ConnectedKey))
 8013378:	4965      	ldr	r1, [pc, #404]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7f1 f8d1 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8013380:	4603      	mov	r3, r0
 8013382:	f083 0301 	eor.w	r3, r3, #1
 8013386:	b2db      	uxtb	r3, r3
 8013388:	2b00      	cmp	r3, #0
 801338a:	d02f      	beq.n	80133ec <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2200      	movs	r2, #0
 8013390:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + ConnectedKey;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	1d1c      	adds	r4, r3, #4
 8013396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801339a:	4618      	mov	r0, r3
 801339c:	f00b f86b 	bl	801e476 <_ZNSaIcEC1Ev>
 80133a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80133a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133a8:	495a      	ldr	r1, [pc, #360]	; (8013514 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1b0>)
 80133aa:	4618      	mov	r0, r3
 80133ac:	f00b fb0a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80133b0:	f107 0314 	add.w	r3, r7, #20
 80133b4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80133b8:	4a55      	ldr	r2, [pc, #340]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7f3 f929 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80133c0:	f107 0314 	add.w	r3, r7, #20
 80133c4:	4619      	mov	r1, r3
 80133c6:	4620      	mov	r0, r4
 80133c8:	f00b f961 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80133cc:	f107 0314 	add.w	r3, r7, #20
 80133d0:	4618      	mov	r0, r3
 80133d2:	f00b f950 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80133d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133da:	4618      	mov	r0, r3
 80133dc:	f00b f94b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80133e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80133e4:	4618      	mov	r0, r3
 80133e6:	f00b f847 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80133ea:	e08c      	b.n	8013506 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if ( !(jsonMsg[ConnectedKey].is<bool>()) )
 80133ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133f0:	4a47      	ldr	r2, [pc, #284]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80133f2:	6879      	ldr	r1, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7f1 f8ca 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80133fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f001 fc33 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8013406:	4603      	mov	r3, r0
 8013408:	bf00      	nop
 801340a:	f083 0301 	eor.w	r3, r3, #1
 801340e:	b2db      	uxtb	r3, r3
 8013410:	2b00      	cmp	r3, #0
 8013412:	d054      	beq.n	80134be <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x15a>
        {
            status.success = false;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2200      	movs	r2, #0
 8013418:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert '") + ConnectedKey + string("' to bool");
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	1d1c      	adds	r4, r3, #4
 801341e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013422:	4618      	mov	r0, r3
 8013424:	f00b f827 	bl	801e476 <_ZNSaIcEC1Ev>
 8013428:	f107 0298 	add.w	r2, r7, #152	; 0x98
 801342c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013430:	4939      	ldr	r1, [pc, #228]	; (8013518 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 8013432:	4618      	mov	r0, r3
 8013434:	f00b fac6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013438:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801343c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8013440:	4a33      	ldr	r2, [pc, #204]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 8013442:	4618      	mov	r0, r3
 8013444:	f7f3 f8e5 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8013448:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801344c:	4618      	mov	r0, r3
 801344e:	f00b f812 	bl	801e476 <_ZNSaIcEC1Ev>
 8013452:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801345a:	4930      	ldr	r1, [pc, #192]	; (801351c <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1b8>)
 801345c:	4618      	mov	r0, r3
 801345e:	f00b fab1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013462:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013466:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801346a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801346e:	4618      	mov	r0, r3
 8013470:	f7f3 f8e6 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8013474:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013478:	4619      	mov	r1, r3
 801347a:	4620      	mov	r0, r4
 801347c:	f00b f907 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013484:	4618      	mov	r0, r3
 8013486:	f00b f8f6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801348a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801348e:	4618      	mov	r0, r3
 8013490:	f00b f8f1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013494:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013498:	4618      	mov	r0, r3
 801349a:	f00a ffed 	bl	801e478 <_ZNSaIcED1Ev>
 801349e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80134a2:	4618      	mov	r0, r3
 80134a4:	f00b f8e7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80134a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80134ac:	4618      	mov	r0, r3
 80134ae:	f00b f8e2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80134b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80134b6:	4618      	mov	r0, r3
 80134b8:	f00a ffde 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80134bc:	e023      	b.n	8013506 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if (jsonMsg.get<bool>(ConnectedKey))
 80134be:	4914      	ldr	r1, [pc, #80]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f001 f927 	bl	8014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d006      	beq.n	80134da <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x176>
        {
            electrodeSwitch_.setCtrConnected(true);
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	339c      	adds	r3, #156	; 0x9c
 80134d0:	2101      	movs	r1, #1
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f7 fbca 	bl	800ac6c <_ZN2ps15ElectrodeSwitch15setCtrConnectedEb>
 80134d8:	e005      	b.n	80134e6 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x182>
        }
        else
        {
            electrodeSwitch_.setCtrConnected(false);
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	339c      	adds	r3, #156	; 0x9c
 80134de:	2100      	movs	r1, #0
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7f7 fbc3 	bl	800ac6c <_ZN2ps15ElectrodeSwitch15setCtrConnectedEb>
        }

        jsonDat.set(ConnectedKey, electrodeSwitch_.ctrConnected());
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	339c      	adds	r3, #156	; 0x9c
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7f7 fbae 	bl	800ac4c <_ZN2ps15ElectrodeSwitch12ctrConnectedEv>
 80134f0:	4603      	mov	r3, r0
 80134f2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80134f6:	f107 03b7 	add.w	r3, r7, #183	; 0xb7
 80134fa:	461a      	mov	r2, r3
 80134fc:	4904      	ldr	r1, [pc, #16]	; (8013510 <_ZN2ps11SystemState24onCommandSetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80134fe:	6838      	ldr	r0, [r7, #0]
 8013500:	f7fa f890 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013504:	bf00      	nop
    }
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	37bc      	adds	r7, #188	; 0xbc
 801350a:	46bd      	mov	sp, r7
 801350c:	bd90      	pop	{r4, r7, pc}
 801350e:	bf00      	nop
 8013510:	200086cc 	.word	0x200086cc
 8013514:	08021d98 	.word	0x08021d98
 8013518:	08021e68 	.word	0x08021e68
 801351c:	08021e7c 	.word	0x08021e7c

08013520 <_ZN2ps11SystemState24onCommandGetCtrElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetCtrElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	60b9      	str	r1, [r7, #8]
 801352a:	607a      	str	r2, [r7, #4]
 801352c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7ed ff46 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(ConnectedKey, electrodeSwitch_.ctrConnected());
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	339c      	adds	r3, #156	; 0x9c
 8013538:	4618      	mov	r0, r3
 801353a:	f7f7 fb87 	bl	800ac4c <_ZN2ps15ElectrodeSwitch12ctrConnectedEv>
 801353e:	4603      	mov	r3, r0
 8013540:	75fb      	strb	r3, [r7, #23]
 8013542:	f107 0317 	add.w	r3, r7, #23
 8013546:	461a      	mov	r2, r3
 8013548:	4904      	ldr	r1, [pc, #16]	; (801355c <_ZN2ps11SystemState24onCommandGetCtrElectConnERN11ArduinoJson10JsonObjectES3_+0x3c>)
 801354a:	6838      	ldr	r0, [r7, #0]
 801354c:	f7fa f86a 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013550:	bf00      	nop
    }
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	3718      	adds	r7, #24
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	200086cc 	.word	0x200086cc

08013560 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetWrkElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b0af      	sub	sp, #188	; 0xbc
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	607a      	str	r2, [r7, #4]
 801356c:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f7ed ff26 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(ConnectedKey))
 8013574:	4965      	ldr	r1, [pc, #404]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f7f0 ffd3 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 801357c:	4603      	mov	r3, r0
 801357e:	f083 0301 	eor.w	r3, r3, #1
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b00      	cmp	r3, #0
 8013586:	d02f      	beq.n	80135e8 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2200      	movs	r2, #0
 801358c:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + ConnectedKey;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	1d1c      	adds	r4, r3, #4
 8013592:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013596:	4618      	mov	r0, r3
 8013598:	f00a ff6d 	bl	801e476 <_ZNSaIcEC1Ev>
 801359c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80135a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135a4:	495a      	ldr	r1, [pc, #360]	; (8013710 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1b0>)
 80135a6:	4618      	mov	r0, r3
 80135a8:	f00b fa0c 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80135ac:	f107 0314 	add.w	r3, r7, #20
 80135b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80135b4:	4a55      	ldr	r2, [pc, #340]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7f3 f82b 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80135bc:	f107 0314 	add.w	r3, r7, #20
 80135c0:	4619      	mov	r1, r3
 80135c2:	4620      	mov	r0, r4
 80135c4:	f00b f863 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80135c8:	f107 0314 	add.w	r3, r7, #20
 80135cc:	4618      	mov	r0, r3
 80135ce:	f00b f852 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80135d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135d6:	4618      	mov	r0, r3
 80135d8:	f00b f84d 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80135dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80135e0:	4618      	mov	r0, r3
 80135e2:	f00a ff49 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80135e6:	e08c      	b.n	8013702 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if ( !(jsonMsg[ConnectedKey].is<bool>()) )
 80135e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135ec:	4a47      	ldr	r2, [pc, #284]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80135ee:	6879      	ldr	r1, [r7, #4]
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f0 ffcc 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80135f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135fa:	4611      	mov	r1, r2
 80135fc:	4618      	mov	r0, r3
 80135fe:	f001 fb35 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 8013602:	4603      	mov	r3, r0
 8013604:	bf00      	nop
 8013606:	f083 0301 	eor.w	r3, r3, #1
 801360a:	b2db      	uxtb	r3, r3
 801360c:	2b00      	cmp	r3, #0
 801360e:	d054      	beq.n	80136ba <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x15a>
        {
            status.success = false;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2200      	movs	r2, #0
 8013614:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert '") + ConnectedKey + string("' to bool");
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	1d1c      	adds	r4, r3, #4
 801361a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801361e:	4618      	mov	r0, r3
 8013620:	f00a ff29 	bl	801e476 <_ZNSaIcEC1Ev>
 8013624:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013628:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801362c:	4939      	ldr	r1, [pc, #228]	; (8013714 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 801362e:	4618      	mov	r0, r3
 8013630:	f00b f9c8 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013634:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013638:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801363c:	4a33      	ldr	r2, [pc, #204]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 801363e:	4618      	mov	r0, r3
 8013640:	f7f2 ffe7 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8013644:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013648:	4618      	mov	r0, r3
 801364a:	f00a ff14 	bl	801e476 <_ZNSaIcEC1Ev>
 801364e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013656:	4930      	ldr	r1, [pc, #192]	; (8013718 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1b8>)
 8013658:	4618      	mov	r0, r3
 801365a:	f00b f9b3 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801365e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013662:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013666:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801366a:	4618      	mov	r0, r3
 801366c:	f7f2 ffe8 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8013670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013674:	4619      	mov	r1, r3
 8013676:	4620      	mov	r0, r4
 8013678:	f00b f809 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801367c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013680:	4618      	mov	r0, r3
 8013682:	f00a fff8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801368a:	4618      	mov	r0, r3
 801368c:	f00a fff3 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013690:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013694:	4618      	mov	r0, r3
 8013696:	f00a feef 	bl	801e478 <_ZNSaIcED1Ev>
 801369a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801369e:	4618      	mov	r0, r3
 80136a0:	f00a ffe9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80136a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80136a8:	4618      	mov	r0, r3
 80136aa:	f00a ffe4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80136ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80136b2:	4618      	mov	r0, r3
 80136b4:	f00a fee0 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80136b8:	e023      	b.n	8013702 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if (jsonMsg.get<bool>(ConnectedKey))
 80136ba:	4914      	ldr	r1, [pc, #80]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f001 f829 	bl	8014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x176>
        {
            electrodeSwitch_.setWrkConnected(true);
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	339c      	adds	r3, #156	; 0x9c
 80136cc:	2101      	movs	r1, #1
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7f7 fb10 	bl	800acf4 <_ZN2ps15ElectrodeSwitch15setWrkConnectedEb>
 80136d4:	e005      	b.n	80136e2 <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x182>
        }
        else
        {
            electrodeSwitch_.setWrkConnected(false);
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	339c      	adds	r3, #156	; 0x9c
 80136da:	2100      	movs	r1, #0
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f7 fb09 	bl	800acf4 <_ZN2ps15ElectrodeSwitch15setWrkConnectedEb>
        }

        jsonDat.set(ConnectedKey, electrodeSwitch_.wrkConnected());
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	339c      	adds	r3, #156	; 0x9c
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7f7 faf4 	bl	800acd4 <_ZN2ps15ElectrodeSwitch12wrkConnectedEv>
 80136ec:	4603      	mov	r3, r0
 80136ee:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80136f2:	f107 03b7 	add.w	r3, r7, #183	; 0xb7
 80136f6:	461a      	mov	r2, r3
 80136f8:	4904      	ldr	r1, [pc, #16]	; (801370c <_ZN2ps11SystemState24onCommandSetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80136fa:	6838      	ldr	r0, [r7, #0]
 80136fc:	f7f9 ff92 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013700:	bf00      	nop
    }
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	37bc      	adds	r7, #188	; 0xbc
 8013706:	46bd      	mov	sp, r7
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	bf00      	nop
 801370c:	200086cc 	.word	0x200086cc
 8013710:	08021d98 	.word	0x08021d98
 8013714:	08021e68 	.word	0x08021e68
 8013718:	08021e7c 	.word	0x08021e7c

0801371c <_ZN2ps11SystemState24onCommandGetWrkElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif


#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetWrkElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f7ed fe48 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(ConnectedKey, electrodeSwitch_.wrkConnected());
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	339c      	adds	r3, #156	; 0x9c
 8013734:	4618      	mov	r0, r3
 8013736:	f7f7 facd 	bl	800acd4 <_ZN2ps15ElectrodeSwitch12wrkConnectedEv>
 801373a:	4603      	mov	r3, r0
 801373c:	75fb      	strb	r3, [r7, #23]
 801373e:	f107 0317 	add.w	r3, r7, #23
 8013742:	461a      	mov	r2, r3
 8013744:	4904      	ldr	r1, [pc, #16]	; (8013758 <_ZN2ps11SystemState24onCommandGetWrkElectConnERN11ArduinoJson10JsonObjectES3_+0x3c>)
 8013746:	6838      	ldr	r0, [r7, #0]
 8013748:	f7f9 ff6c 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 801374c:	bf00      	nop
    }
 801374e:	68f8      	ldr	r0, [r7, #12]
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	200086cc 	.word	0x200086cc

0801375c <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetAllElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 801375c:	b590      	push	{r4, r7, lr}
 801375e:	b0af      	sub	sp, #188	; 0xbc
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 801376a:	68f8      	ldr	r0, [r7, #12]
 801376c:	f7ed fe28 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(ConnectedKey))
 8013770:	4965      	ldr	r1, [pc, #404]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7f0 fed5 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8013778:	4603      	mov	r3, r0
 801377a:	f083 0301 	eor.w	r3, r3, #1
 801377e:	b2db      	uxtb	r3, r3
 8013780:	2b00      	cmp	r3, #0
 8013782:	d02f      	beq.n	80137e4 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2200      	movs	r2, #0
 8013788:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + ConnectedKey;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	1d1c      	adds	r4, r3, #4
 801378e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013792:	4618      	mov	r0, r3
 8013794:	f00a fe6f 	bl	801e476 <_ZNSaIcEC1Ev>
 8013798:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801379c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137a0:	495a      	ldr	r1, [pc, #360]	; (801390c <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1b0>)
 80137a2:	4618      	mov	r0, r3
 80137a4:	f00b f90e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80137a8:	f107 0314 	add.w	r3, r7, #20
 80137ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80137b0:	4a55      	ldr	r2, [pc, #340]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7f2 ff2d 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80137b8:	f107 0314 	add.w	r3, r7, #20
 80137bc:	4619      	mov	r1, r3
 80137be:	4620      	mov	r0, r4
 80137c0:	f00a ff65 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80137c4:	f107 0314 	add.w	r3, r7, #20
 80137c8:	4618      	mov	r0, r3
 80137ca:	f00a ff54 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80137ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137d2:	4618      	mov	r0, r3
 80137d4:	f00a ff4f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80137d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137dc:	4618      	mov	r0, r3
 80137de:	f00a fe4b 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80137e2:	e08c      	b.n	80138fe <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if ( !(jsonMsg[ConnectedKey].is<bool>()) )
 80137e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137e8:	4a47      	ldr	r2, [pc, #284]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80137ea:	6879      	ldr	r1, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f0 fece 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80137f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137f6:	4611      	mov	r1, r2
 80137f8:	4618      	mov	r0, r3
 80137fa:	f001 fa37 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80137fe:	4603      	mov	r3, r0
 8013800:	bf00      	nop
 8013802:	f083 0301 	eor.w	r3, r3, #1
 8013806:	b2db      	uxtb	r3, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	d054      	beq.n	80138b6 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x15a>
        {
            status.success = false;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert '") + ConnectedKey + string("' to bool");
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	1d1c      	adds	r4, r3, #4
 8013816:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801381a:	4618      	mov	r0, r3
 801381c:	f00a fe2b 	bl	801e476 <_ZNSaIcEC1Ev>
 8013820:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013824:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013828:	4939      	ldr	r1, [pc, #228]	; (8013910 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1b4>)
 801382a:	4618      	mov	r0, r3
 801382c:	f00b f8ca 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013830:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013834:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8013838:	4a33      	ldr	r2, [pc, #204]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 801383a:	4618      	mov	r0, r3
 801383c:	f7f2 fee9 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8013840:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013844:	4618      	mov	r0, r3
 8013846:	f00a fe16 	bl	801e476 <_ZNSaIcEC1Ev>
 801384a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801384e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013852:	4930      	ldr	r1, [pc, #192]	; (8013914 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1b8>)
 8013854:	4618      	mov	r0, r3
 8013856:	f00b f8b5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801385a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801385e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013862:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8013866:	4618      	mov	r0, r3
 8013868:	f7f2 feea 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 801386c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013870:	4619      	mov	r1, r3
 8013872:	4620      	mov	r0, r4
 8013874:	f00a ff0b 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013878:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801387c:	4618      	mov	r0, r3
 801387e:	f00a fefa 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013886:	4618      	mov	r0, r3
 8013888:	f00a fef5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801388c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013890:	4618      	mov	r0, r3
 8013892:	f00a fdf1 	bl	801e478 <_ZNSaIcED1Ev>
 8013896:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801389a:	4618      	mov	r0, r3
 801389c:	f00a feeb 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80138a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138a4:	4618      	mov	r0, r3
 80138a6:	f00a fee6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80138aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80138ae:	4618      	mov	r0, r3
 80138b0:	f00a fde2 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80138b4:	e023      	b.n	80138fe <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1a2>
        }

        if (jsonMsg.get<bool>(ConnectedKey))
 80138b6:	4914      	ldr	r1, [pc, #80]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 ff2b 	bl	8014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d006      	beq.n	80138d2 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x176>
        {
            electrodeSwitch_.setAllConnected(true);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	339c      	adds	r3, #156	; 0x9c
 80138c8:	2101      	movs	r1, #1
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f7 fa41 	bl	800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>
 80138d0:	e005      	b.n	80138de <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x182>
        }
        else
        {
            electrodeSwitch_.setAllConnected(false);
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	339c      	adds	r3, #156	; 0x9c
 80138d6:	2100      	movs	r1, #0
 80138d8:	4618      	mov	r0, r3
 80138da:	f7f7 fa3a 	bl	800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>
        }

        jsonDat.set(ConnectedKey, electrodeSwitch_.allConnected());
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	339c      	adds	r3, #156	; 0x9c
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f7 fa18 	bl	800ad18 <_ZN2ps15ElectrodeSwitch12allConnectedEv>
 80138e8:	4603      	mov	r3, r0
 80138ea:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80138ee:	f107 03b7 	add.w	r3, r7, #183	; 0xb7
 80138f2:	461a      	mov	r2, r3
 80138f4:	4904      	ldr	r1, [pc, #16]	; (8013908 <_ZN2ps11SystemState24onCommandSetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x1ac>)
 80138f6:	6838      	ldr	r0, [r7, #0]
 80138f8:	f7f9 fe94 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 80138fc:	bf00      	nop
    }
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	37bc      	adds	r7, #188	; 0xbc
 8013902:	46bd      	mov	sp, r7
 8013904:	bd90      	pop	{r4, r7, pc}
 8013906:	bf00      	nop
 8013908:	200086cc 	.word	0x200086cc
 801390c:	08021d98 	.word	0x08021d98
 8013910:	08021e68 	.word	0x08021e68
 8013914:	08021e7c 	.word	0x08021e7c

08013918 <_ZN2ps11SystemState24onCommandGetAllElectConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetAllElectConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
 8013924:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013926:	68f8      	ldr	r0, [r7, #12]
 8013928:	f7ed fd4a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(ConnectedKey, electrodeSwitch_.allConnected());
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	339c      	adds	r3, #156	; 0x9c
 8013930:	4618      	mov	r0, r3
 8013932:	f7f7 f9f1 	bl	800ad18 <_ZN2ps15ElectrodeSwitch12allConnectedEv>
 8013936:	4603      	mov	r3, r0
 8013938:	75fb      	strb	r3, [r7, #23]
 801393a:	f107 0317 	add.w	r3, r7, #23
 801393e:	461a      	mov	r2, r3
 8013940:	4904      	ldr	r1, [pc, #16]	; (8013954 <_ZN2ps11SystemState24onCommandGetAllElectConnERN11ArduinoJson10JsonObjectES3_+0x3c>)
 8013942:	6838      	ldr	r0, [r7, #0]
 8013944:	f7f9 fe6e 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013948:	bf00      	nop
    }
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	3718      	adds	r7, #24
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
 8013952:	bf00      	nop
 8013954:	200086cc 	.word	0x200086cc

08013958 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetElectAutoConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013958:	b590      	push	{r4, r7, lr}
 801395a:	b0af      	sub	sp, #188	; 0xbc
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f7ed fd2a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(ElectAutoConnectKey))
 801396c:	495f      	ldr	r1, [pc, #380]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7f0 fdd7 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8013974:	4603      	mov	r3, r0
 8013976:	f083 0301 	eor.w	r3, r3, #1
 801397a:	b2db      	uxtb	r3, r3
 801397c:	2b00      	cmp	r3, #0
 801397e:	d02f      	beq.n	80139e0 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + ElectAutoConnectKey;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	1d1c      	adds	r4, r3, #4
 801398a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801398e:	4618      	mov	r0, r3
 8013990:	f00a fd71 	bl	801e476 <_ZNSaIcEC1Ev>
 8013994:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801399c:	4954      	ldr	r1, [pc, #336]	; (8013af0 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x198>)
 801399e:	4618      	mov	r0, r3
 80139a0:	f00b f810 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80139a4:	f107 0314 	add.w	r3, r7, #20
 80139a8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80139ac:	4a4f      	ldr	r2, [pc, #316]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7f2 fe2f 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80139b4:	f107 0314 	add.w	r3, r7, #20
 80139b8:	4619      	mov	r1, r3
 80139ba:	4620      	mov	r0, r4
 80139bc:	f00a fe67 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80139c0:	f107 0314 	add.w	r3, r7, #20
 80139c4:	4618      	mov	r0, r3
 80139c6:	f00a fe56 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80139ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80139ce:	4618      	mov	r0, r3
 80139d0:	f00a fe51 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80139d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80139d8:	4618      	mov	r0, r3
 80139da:	f00a fd4d 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 80139de:	e080      	b.n	8013ae2 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x18a>
        }

        if ( !(jsonMsg[ElectAutoConnectKey].is<bool>()) )
 80139e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139e4:	4a41      	ldr	r2, [pc, #260]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 80139e6:	6879      	ldr	r1, [r7, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7f0 fdd0 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 80139ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139f2:	4611      	mov	r1, r2
 80139f4:	4618      	mov	r0, r3
 80139f6:	f001 f939 	bl	8014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>
 80139fa:	4603      	mov	r3, r0
 80139fc:	bf00      	nop
 80139fe:	f083 0301 	eor.w	r3, r3, #1
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d054      	beq.n	8013ab2 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x15a>
        {
            status.success = false;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	701a      	strb	r2, [r3, #0]
            status.message = string("unable to convert '") + ElectAutoConnectKey + string("' to bool");
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	1d1c      	adds	r4, r3, #4
 8013a12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013a16:	4618      	mov	r0, r3
 8013a18:	f00a fd2d 	bl	801e476 <_ZNSaIcEC1Ev>
 8013a1c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013a20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013a24:	4933      	ldr	r1, [pc, #204]	; (8013af4 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x19c>)
 8013a26:	4618      	mov	r0, r3
 8013a28:	f00a ffcc 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013a2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013a30:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8013a34:	4a2d      	ldr	r2, [pc, #180]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f2 fdeb 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8013a3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013a40:	4618      	mov	r0, r3
 8013a42:	f00a fd18 	bl	801e476 <_ZNSaIcEC1Ev>
 8013a46:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013a4e:	492a      	ldr	r1, [pc, #168]	; (8013af8 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x1a0>)
 8013a50:	4618      	mov	r0, r3
 8013a52:	f00a ffb7 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013a56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a5a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013a5e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7f2 fdec 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8013a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f00a fe0d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013a74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f00a fdfc 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013a7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013a82:	4618      	mov	r0, r3
 8013a84:	f00a fdf7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013a88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f00a fcf3 	bl	801e478 <_ZNSaIcED1Ev>
 8013a92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013a96:	4618      	mov	r0, r3
 8013a98:	f00a fded 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013a9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f00a fde8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013aa6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f00a fce4 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8013ab0:	e017      	b.n	8013ae2 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x18a>
        }

        if (jsonMsg.get<bool>(ElectAutoConnectKey))
 8013ab2:	490e      	ldr	r1, [pc, #56]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fe2d 	bl	8014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d004      	beq.n	8013aca <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x172>
        {
            electrodeAutoConnect_ = true;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8013ac8:	e003      	b.n	8013ad2 <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x17a>
        }
        else
        { 
            electrodeAutoConnect_ = false;
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	2200      	movs	r2, #0
 8013ace:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        }

        jsonDat.set(ElectAutoConnectKey, electrodeAutoConnect_);
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	339d      	adds	r3, #157	; 0x9d
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	4904      	ldr	r1, [pc, #16]	; (8013aec <_ZN2ps11SystemState25onCommandSetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x194>)
 8013ada:	6838      	ldr	r0, [r7, #0]
 8013adc:	f7f9 fda2 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013ae0:	bf00      	nop
    }
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	37bc      	adds	r7, #188	; 0xbc
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd90      	pop	{r4, r7, pc}
 8013aea:	bf00      	nop
 8013aec:	200086e4 	.word	0x200086e4
 8013af0:	08021d98 	.word	0x08021d98
 8013af4:	08021e68 	.word	0x08021e68
 8013af8:	08021e7c 	.word	0x08021e7c

08013afc <_ZN2ps11SystemState25onCommandGetElectAutoConnERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetElectAutoConn(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	f7ed fc58 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(ElectAutoConnectKey, electrodeAutoConnect_);
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	339d      	adds	r3, #157	; 0x9d
 8013b14:	461a      	mov	r2, r3
 8013b16:	4904      	ldr	r1, [pc, #16]	; (8013b28 <_ZN2ps11SystemState25onCommandGetElectAutoConnERN11ArduinoJson10JsonObjectES3_+0x2c>)
 8013b18:	6838      	ldr	r0, [r7, #0]
 8013b1a:	f7f9 fd83 	bl	800d624 <_ZN11ArduinoJson10JsonObject3setIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>
        return status;
 8013b1e:	bf00      	nop
    }
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	3710      	adds	r7, #16
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	200086e4 	.word	0x200086e4

08013b2c <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandSetRefElectVoltRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013b2c:	b590      	push	{r4, r7, lr}
 8013b2e:	b0af      	sub	sp, #188	; 0xbc
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	607a      	str	r2, [r7, #4]
 8013b38:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f7ed fc40 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (!jsonMsg.containsKey(VoltRangeKey))
 8013b40:	4953      	ldr	r1, [pc, #332]	; (8013c90 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f7f0 fced 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	f083 0301 	eor.w	r3, r3, #1
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d02f      	beq.n	8013bb4 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2200      	movs	r2, #0
 8013b58:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + VoltRangeKey;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	1d1c      	adds	r4, r3, #4
 8013b5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b62:	4618      	mov	r0, r3
 8013b64:	f00a fc87 	bl	801e476 <_ZNSaIcEC1Ev>
 8013b68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b70:	4948      	ldr	r1, [pc, #288]	; (8013c94 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x168>)
 8013b72:	4618      	mov	r0, r3
 8013b74:	f00a ff26 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b7c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013b80:	4a43      	ldr	r2, [pc, #268]	; (8013c90 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7f2 fd45 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8013b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f00a fd7d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8013b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f00a fd6c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f00a fd67 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013ba8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013bac:	4618      	mov	r0, r3
 8013bae:	f00a fc63 	bl	801e478 <_ZNSaIcED1Ev>
        {
            string voltRangeName = string((const char *)(jsonMsg[VoltRangeKey]));
            status = analogSubsystem_.setRefElectVoltRangeByName(voltRangeName);
            jsonDat.set(VoltRangeKey,analogSubsystem_.getRefElectVoltRangeName());
        }
        return status;
 8013bb2:	e068      	b.n	8013c86 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x15a>
            string voltRangeName = string((const char *)(jsonMsg[VoltRangeKey]));
 8013bb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013bb8:	4a35      	ldr	r2, [pc, #212]	; (8013c90 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8013bba:	6879      	ldr	r1, [r7, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7f0 fce6 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<T>();
 8013bc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7f0 fe0d 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.get<TValue>(_key);
 8013bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	4619      	mov	r1, r3
 8013be0:	4610      	mov	r0, r2
 8013be2:	f001 f9ab 	bl	8014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8013be6:	4604      	mov	r4, r0
 8013be8:	bf00      	nop
    return impl()->template as<T>();
 8013bea:	bf00      	nop
 8013bec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f00a fc40 	bl	801e476 <_ZNSaIcEC1Ev>
 8013bf6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013bfa:	f107 0310 	add.w	r3, r7, #16
 8013bfe:	4621      	mov	r1, r4
 8013c00:	4618      	mov	r0, r3
 8013c02:	f00a fedf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8013c06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f00a fc34 	bl	801e478 <_ZNSaIcED1Ev>
            status = analogSubsystem_.setRefElectVoltRangeByName(voltRangeName);
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	1d1c      	adds	r4, r3, #4
 8013c14:	f107 0210 	add.w	r2, r7, #16
 8013c18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013c1c:	4611      	mov	r1, r2
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f00a fe9c 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013c24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013c28:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013c2c:	4621      	mov	r1, r4
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f2 f932 	bl	8005e98 <_ZN2ps15AnalogSubsystem26setRefElectVoltRangeByNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8013c34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013c38:	4619      	mov	r1, r3
 8013c3a:	68f8      	ldr	r0, [r7, #12]
 8013c3c:	f7ee fe66 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8013c40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7ee fdf9 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 8013c4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f00a fd11 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            jsonDat.set(VoltRangeKey,analogSubsystem_.getRefElectVoltRangeName());
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	1d1a      	adds	r2, r3, #4
 8013c58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013c5c:	4611      	mov	r1, r2
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7f2 f9dc 	bl	800601c <_ZNK2ps15AnalogSubsystem24getRefElectVoltRangeNameB5cxx11Ev>
 8013c64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4909      	ldr	r1, [pc, #36]	; (8013c90 <_ZN2ps11SystemState29onCommandSetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x164>)
 8013c6c:	6838      	ldr	r0, [r7, #0]
 8013c6e:	f7f9 fce9 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 8013c72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013c76:	4618      	mov	r0, r3
 8013c78:	f00a fcfd 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
 8013c7c:	f107 0310 	add.w	r3, r7, #16
 8013c80:	4618      	mov	r0, r3
 8013c82:	f00a fcf8 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 8013c86:	bf00      	nop
    }
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	37bc      	adds	r7, #188	; 0xbc
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd90      	pop	{r4, r7, pc}
 8013c90:	2000848c 	.word	0x2000848c
 8013c94:	08021d98 	.word	0x08021d98

08013c98 <_ZN2ps11SystemState29onCommandGetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetRefElectVoltRange(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b08a      	sub	sp, #40	; 0x28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ed fb8a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(VoltRangeKey,analogSubsystem_.getRefElectVoltRangeName());
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	1d1a      	adds	r2, r3, #4
 8013cb0:	f107 0310 	add.w	r3, r7, #16
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7f2 f9b0 	bl	800601c <_ZNK2ps15AnalogSubsystem24getRefElectVoltRangeNameB5cxx11Ev>
 8013cbc:	f107 0310 	add.w	r3, r7, #16
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	4907      	ldr	r1, [pc, #28]	; (8013ce0 <_ZN2ps11SystemState29onCommandGetRefElectVoltRangeERN11ArduinoJson10JsonObjectES3_+0x48>)
 8013cc4:	6838      	ldr	r0, [r7, #0]
 8013cc6:	f7f9 fcbd 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
 8013cca:	f107 0310 	add.w	r3, r7, #16
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f00a fcd1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        return status;
 8013cd4:	bf00      	nop
    }
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	3728      	adds	r7, #40	; 0x28
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	2000848c 	.word	0x2000848c

08013ce4 <_ZN2ps11SystemState27onCommandGetHardwareVersionERN11ArduinoJson10JsonObjectES3_>:
#endif

#if defined HARDWARE_VERSION_0P2 
    ReturnStatus SystemState::onCommandGetHardwareVersion(JsonObject &jsonMsg, JsonObject &jsonDat) 
    {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8013cf2:	68f8      	ldr	r0, [r7, #12]
 8013cf4:	f7ed fb64 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        jsonDat.set(VersionKey,HardwareVersion);
 8013cf8:	4a04      	ldr	r2, [pc, #16]	; (8013d0c <_ZN2ps11SystemState27onCommandGetHardwareVersionERN11ArduinoJson10JsonObjectES3_+0x28>)
 8013cfa:	4905      	ldr	r1, [pc, #20]	; (8013d10 <_ZN2ps11SystemState27onCommandGetHardwareVersionERN11ArduinoJson10JsonObjectES3_+0x2c>)
 8013cfc:	6838      	ldr	r0, [r7, #0]
 8013cfe:	f7f9 fca1 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
        return status;
 8013d02:	bf00      	nop
    }
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20008384 	.word	0x20008384
 8013d10:	2000866c 	.word	0x2000866c

08013d14 <_ZN2ps11SystemState17updateMessageDataEv>:

    // ------------------------------------------------------------------------------------------


    void SystemState::updateMessageData()
    {
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
        messageReceiver_.readData();
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	33a0      	adds	r3, #160	; 0xa0
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f8 ffac 	bl	800cc7e <_ZN2ps15MessageReceiver8readDataEv>
    }
 8013d26:	bf00      	nop
 8013d28:	3708      	adds	r7, #8
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <_ZN2ps12ReturnStatusC1ERKS0_>:
    class ReturnStatus
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b082      	sub	sp, #8
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	6039      	str	r1, [r7, #0]
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	781a      	ldrb	r2, [r3, #0]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	701a      	strb	r2, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	1d1a      	adds	r2, r3, #4
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	3304      	adds	r3, #4
 8013d48:	4619      	mov	r1, r3
 8013d4a:	4610      	mov	r0, r2
 8013d4c:	f00a fe06 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	4618      	mov	r0, r3
 8013d54:	3708      	adds	r7, #8
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
	...

08013d5c <_ZN2ps11SystemState15processMessagesEv>:


    void SystemState::processMessages()
    {
 8013d5c:	b590      	push	{r4, r7, lr}
 8013d5e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8013d62:	b081      	sub	sp, #4
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013d6a:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013d6e:	6018      	str	r0, [r3, #0]

        if (messageReceiver_.available())
 8013d70:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013d74:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	33a0      	adds	r3, #160	; 0xa0
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7f9 f81b 	bl	800cdb8 <_ZNK2ps15MessageReceiver9availableEv>
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 80d8 	beq.w	8013f3a <_ZN2ps11SystemState15processMessagesEv+0x1de>
        {
            ReturnStatus status;
 8013d8a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013d8e:	f103 0304 	add.w	r3, r3, #4
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7ed fb14 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
            StaticJsonBuffer<JsonMessageBufferSize> messageJsonBuffer;
 8013d98:	f107 0318 	add.w	r3, r7, #24
 8013d9c:	3b0c      	subs	r3, #12
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7f9 fc2a 	bl	800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>
            StaticJsonBuffer<JsonMessageBufferSize> commandRespJsonBuffer;
 8013da4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8013da8:	3b1c      	subs	r3, #28
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f9 fc24 	bl	800d5f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EEC1Ev>

            string message = messageReceiver_.next();
 8013db0:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013db4:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8013dbe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013dc2:	f103 030c 	add.w	r3, r3, #12
 8013dc6:	4611      	mov	r1, r2
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f8 ff93 	bl	800ccf4 <_ZN2ps15MessageReceiver4nextB5cxx11Ev>
            JsonObject &jsonMsg = messageParser_.parse(message,messageJsonBuffer);
 8013dce:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013dd2:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f603 008c 	addw	r0, r3, #2188	; 0x88c
 8013ddc:	f107 0318 	add.w	r3, r7, #24
 8013de0:	3b0c      	subs	r3, #12
 8013de2:	f507 51fb 	add.w	r1, r7, #8032	; 0x1f60
 8013de6:	f101 010c 	add.w	r1, r1, #12
 8013dea:	461a      	mov	r2, r3
 8013dec:	f7f7 ffab 	bl	800bd46 <_ZN2ps13MessageParser5parseERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson16StaticJsonBufferILj4000EEE>
 8013df0:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8013df4:	f103 0314 	add.w	r3, r3, #20
 8013df8:	6018      	str	r0, [r3, #0]

            JsonObject &jsonDat = commandRespJsonBuffer.createObject();
 8013dfa:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8013dfe:	3b1c      	subs	r3, #28
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7f2 fe54 	bl	8006aae <_ZN11ArduinoJson10JsonBuffer12createObjectEv>
 8013e06:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8013e0a:	f103 0310 	add.w	r3, r3, #16
 8013e0e:	6018      	str	r0, [r3, #0]
            if (jsonMsg.success())
 8013e10:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8013e14:	f103 0314 	add.w	r3, r3, #20
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7f3 fad6 	bl	80073cc <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE7successEv>
 8013e20:	4603      	mov	r3, r0
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d039      	beq.n	8013e9a <_ZN2ps11SystemState15processMessagesEv+0x13e>
            {
                status = commandTable_.apply(CommandKey,jsonMsg,jsonDat);
 8013e26:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013e2a:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f503 6409 	add.w	r4, r3, #2192	; 0x890
 8013e34:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8013e38:	f103 031c 	add.w	r3, r3, #28
 8013e3c:	4942      	ldr	r1, [pc, #264]	; (8013f48 <_ZN2ps11SystemState15processMessagesEv+0x1ec>)
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f00a fd8c 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013e44:	f507 50fd 	add.w	r0, r7, #8096	; 0x1fa0
 8013e48:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8013e4c:	f102 021c 	add.w	r2, r2, #28
 8013e50:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8013e54:	f103 0310 	add.w	r3, r3, #16
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	9300      	str	r3, [sp, #0]
 8013e5c:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8013e60:	f103 0314 	add.w	r3, r3, #20
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	4621      	mov	r1, r4
 8013e68:	f000 fc62 	bl	8014730 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_>
 8013e6c:	f507 52fd 	add.w	r2, r7, #8096	; 0x1fa0
 8013e70:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013e74:	f103 0304 	add.w	r3, r3, #4
 8013e78:	4611      	mov	r1, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7ee fd46 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8013e80:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7ee fcd9 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 8013e8a:	f507 53fd 	add.w	r3, r7, #8096	; 0x1fa0
 8013e8e:	f103 031c 	add.w	r3, r3, #28
 8013e92:	4618      	mov	r0, r3
 8013e94:	f00a fbef 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013e98:	e00e      	b.n	8013eb8 <_ZN2ps11SystemState15processMessagesEv+0x15c>
            }
            else
            {
                status.success = false;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8013ea0:	f102 0204 	add.w	r2, r2, #4
 8013ea4:	7013      	strb	r3, [r2, #0]
                status.message = "unable to parse json";
 8013ea6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013eaa:	f103 0304 	add.w	r3, r3, #4
 8013eae:	3304      	adds	r3, #4
 8013eb0:	4926      	ldr	r1, [pc, #152]	; (8013f4c <_ZN2ps11SystemState15processMessagesEv+0x1f0>)
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f00a fcaf 	bl	801e816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            }
            messageSender_.sendCommandResponse(status,jsonDat);
 8013eb8:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8013ebc:	f6a3 73f4 	subw	r3, r3, #4084	; 0xff4
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f603 048d 	addw	r4, r3, #2189	; 0x88d
 8013ec6:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8013eca:	f102 0204 	add.w	r2, r2, #4
 8013ece:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8013ed2:	f103 0314 	add.w	r3, r3, #20
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7ff ff28 	bl	8013d2e <_ZN2ps12ReturnStatusC1ERKS0_>
 8013ede:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8013ee2:	f103 0314 	add.w	r3, r3, #20
 8013ee6:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 8013eea:	f102 0210 	add.w	r2, r2, #16
 8013eee:	6812      	ldr	r2, [r2, #0]
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7f9 fa92 	bl	800d41c <_ZN2ps13MessageSender19sendCommandResponseENS_12ReturnStatusERN11ArduinoJson10JsonObjectE>
 8013ef8:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8013efc:	f103 0314 	add.w	r3, r3, #20
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7ee fc9b 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        }
 8013f06:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013f0a:	f103 030c 	add.w	r3, r3, #12
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f00a fbb1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013f14:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8013f18:	3b1c      	subs	r3, #28
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7f9 fa6c 	bl	800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>
 8013f20:	f107 0318 	add.w	r3, r7, #24
 8013f24:	3b0c      	subs	r3, #12
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7f9 fa66 	bl	800d3f8 <_ZN11ArduinoJson16StaticJsonBufferILj4000EED1Ev>
 8013f2c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013f30:	f103 0304 	add.w	r3, r3, #4
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7ee fc81 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
    }
 8013f3a:	bf00      	nop
 8013f3c:	f507 57ff 	add.w	r7, r7, #8160	; 0x1fe0
 8013f40:	371c      	adds	r7, #28
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd90      	pop	{r4, r7, pc}
 8013f46:	bf00      	nop
 8013f48:	2000839c 	.word	0x2000839c
 8013f4c:	08021e88 	.word	0x08021e88

08013f50 <_ZN2ps11SystemState17serviceDataBufferEv>:


    void SystemState::serviceDataBuffer()
    {
 8013f50:	b5b0      	push	{r4, r5, r7, lr}
 8013f52:	b08e      	sub	sp, #56	; 0x38
 8013f54:	af04      	add	r7, sp, #16
 8013f56:	6078      	str	r0, [r7, #4]
        // Check for last sample flag to see if done
        bool run_complete = false;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (lastSampleFlag_)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	785b      	ldrb	r3, [r3, #1]
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d002      	beq.n	8013f6e <_ZN2ps11SystemState17serviceDataBufferEv+0x1e>
        {
            run_complete = true;
 8013f68:	2301      	movs	r3, #1
 8013f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  __ASM volatile ("cpsid i" : : : "memory");
 8013f6e:	b672      	cpsid	i
}
 8013f70:	bf00      	nop

        // Empty data buffer
        size_t buffer_size;
        { // Begin atomic block
        	__disable_irq();
            buffer_size = dataBuffer_.size();
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013f78:	3308      	adds	r3, #8
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 fd14 	bl	80149a8 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv>
 8013f80:	6238      	str	r0, [r7, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8013f82:	b662      	cpsie	i
}
 8013f84:	bf00      	nop
            __enable_irq();
            
        } // End atomic block

        while (buffer_size > 0)
 8013f86:	e032      	b.n	8013fee <_ZN2ps11SystemState17serviceDataBufferEv+0x9e>
  __ASM volatile ("cpsid i" : : : "memory");
 8013f88:	b672      	cpsid	i
}
 8013f8a:	bf00      	nop
        {
            Sample sample;
            { // Begin atomic block
            	__disable_irq();
                sample = dataBuffer_.front();
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013f92:	3308      	adds	r3, #8
 8013f94:	4618      	mov	r0, r3
 8013f96:	f000 fd3b 	bl	8014a10 <_ZN2ps14CircularBufferINS_6SampleELj1000EE5frontEv>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	f107 0408 	add.w	r4, r7, #8
 8013fa0:	461d      	mov	r5, r3
 8013fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013faa:	e884 0003 	stmia.w	r4, {r0, r1}
                dataBuffer_.pop_front();
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 fd3e 	bl	8014a38 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9pop_frontEv>
                buffer_size = dataBuffer_.size();
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013fc2:	3308      	adds	r3, #8
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f000 fcef 	bl	80149a8 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv>
 8013fca:	6238      	str	r0, [r7, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8013fcc:	b662      	cpsie	i
}
 8013fce:	bf00      	nop
                __enable_irq();
            } // End atomic block
            messageSender_.sendSample(sample);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f603 058d 	addw	r5, r3, #2189	; 0x88d
 8013fd6:	466c      	mov	r4, sp
 8013fd8:	f107 0310 	add.w	r3, r7, #16
 8013fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013fe2:	f107 0308 	add.w	r3, r7, #8
 8013fe6:	cb0c      	ldmia	r3, {r2, r3}
 8013fe8:	4628      	mov	r0, r5
 8013fea:	f7f9 fa77 	bl	800d4dc <_ZN2ps13MessageSender10sendSampleENS_6SampleE>
        while (buffer_size > 0)
 8013fee:	6a3b      	ldr	r3, [r7, #32]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d1c9      	bne.n	8013f88 <_ZN2ps11SystemState17serviceDataBufferEv+0x38>
        }

        // Send indication that the run is complete 
        if (run_complete)
 8013ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d008      	beq.n	801400e <_ZN2ps11SystemState17serviceDataBufferEv+0xbe>
        {
            messageSender_.sendSampleEnd();
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f603 038d 	addw	r3, r3, #2189	; 0x88d
 8014002:	4618      	mov	r0, r3
 8014004:	f7f9 fac8 	bl	800d598 <_ZN2ps13MessageSender13sendSampleEndEv>
            lastSampleFlag_ = false;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2200      	movs	r2, #0
 801400c:	705a      	strb	r2, [r3, #1]
        }
    }
 801400e:	bf00      	nop
 8014010:	3728      	adds	r7, #40	; 0x28
 8014012:	46bd      	mov	sp, r7
 8014014:	bdb0      	pop	{r4, r5, r7, pc}

08014016 <_ZN2ps11SystemState20setTestTimerCallbackEPFvvE>:


    void SystemState::setTestTimerCallback(void(*callback)())
    {
 8014016:	b480      	push	{r7}
 8014018:	b083      	sub	sp, #12
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
 801401e:	6039      	str	r1, [r7, #0]
        testTimerCallback_ = callback;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014026:	461a      	mov	r2, r3
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	f8c2 3be0 	str.w	r3, [r2, #3040]	; 0xbe0
    }
 801402e:	bf00      	nop
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr
	...

0801403c <_ZN2ps11SystemState17updateTestOnTimerEv>:


    void SystemState::updateTestOnTimer()
    {
 801403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014040:	b0a3      	sub	sp, #140	; 0x8c
 8014042:	af06      	add	r7, sp, #24
 8014044:	6078      	str	r0, [r7, #4]
        bool done = false;
 8014046:	2100      	movs	r1, #0
 8014048:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f

        if (test_ == nullptr)
 801404c:	6879      	ldr	r1, [r7, #4]
 801404e:	f501 41e0 	add.w	r1, r1, #28672	; 0x7000
 8014052:	f8d1 1c2c 	ldr.w	r1, [r1, #3116]	; 0xc2c
 8014056:	2900      	cmp	r1, #0
 8014058:	d103      	bne.n	8014062 <_ZN2ps11SystemState17updateTestOnTimerEv+0x26>
        {
            done = true;
 801405a:	2301      	movs	r3, #1
 801405c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8014060:	e129      	b.n	80142b6 <_ZN2ps11SystemState17updateTestOnTimerEv+0x27a>
        }
        else
        {
            uint64_t t = uint64_t(TestTimerPeriod)*timerCnt_;
 8014062:	499b      	ldr	r1, [pc, #620]	; (80142d0 <_ZN2ps11SystemState17updateTestOnTimerEv+0x294>)
 8014064:	6809      	ldr	r1, [r1, #0]
 8014066:	2000      	movs	r0, #0
 8014068:	460c      	mov	r4, r1
 801406a:	4605      	mov	r5, r0
 801406c:	6879      	ldr	r1, [r7, #4]
 801406e:	f501 41f7 	add.w	r1, r1, #31616	; 0x7b80
 8014072:	3170      	adds	r1, #112	; 0x70
 8014074:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8014078:	fb00 fc05 	mul.w	ip, r0, r5
 801407c:	fb04 f601 	mul.w	r6, r4, r1
 8014080:	4466      	add	r6, ip
 8014082:	fba4 2300 	umull	r2, r3, r4, r0
 8014086:	18f1      	adds	r1, r6, r3
 8014088:	460b      	mov	r3, r1
 801408a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 801408e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
            float volt = test_ -> getValue(t);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014098:	f8d3 0c2c 	ldr.w	r0, [r3, #3116]	; 0xc2c
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80140a2:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	330c      	adds	r3, #12
 80140aa:	6819      	ldr	r1, [r3, #0]
 80140ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80140b0:	4788      	blx	r1
 80140b2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
            analogSubsystem_.setVolt(volt);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	3304      	adds	r3, #4
 80140ba:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 80140be:	4618      	mov	r0, r3
 80140c0:	f7f1 fb3a 	bl	8005738 <_ZN2ps15AnalogSubsystem7setVoltEf>
            float curr = analogSubsystem_.getCurr();
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	3304      	adds	r3, #4
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7f1 fb6f 	bl	80057ac <_ZNK2ps15AnalogSubsystem7getCurrEv>
 80140ce:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

            int electNum = 0; // Default value (0 is non mux channel)
 80140d2:	2300      	movs	r3, #0
 80140d4:	657b      	str	r3, [r7, #84]	; 0x54
            int electInd = 0; // Default value 
 80140d6:	2300      	movs	r3, #0
 80140d8:	653b      	str	r3, [r7, #80]	; 0x50
                electNum = multiplexer_.currentWrkElect();
                electInd = multiplexer_.electNumToIndex(electNum);
            }
#endif

            currLowPass_[electInd].update(curr,lowPassDtSec_);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80140e0:	3378      	adds	r3, #120	; 0x78
 80140e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140e4:	4611      	mov	r1, r2
 80140e6:	4618      	mov	r0, r3
 80140e8:	f000 fcd2 	bl	8014a90 <_ZN5ArrayIN2ps7LowPassELj1EEixEj>
 80140ec:	4602      	mov	r2, r0
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80140f4:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80140f8:	edd3 7a00 	vldr	s15, [r3]
 80140fc:	eef0 0a67 	vmov.f32	s1, s15
 8014100:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8014104:	4610      	mov	r0, r2
 8014106:	f7f6 ff2d 	bl	800af64 <_ZN2ps7LowPass6updateEff>

            if (timerCnt_ > 0)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8014110:	3370      	adds	r3, #112	; 0x70
 8014112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014116:	4313      	orrs	r3, r2
 8014118:	2b00      	cmp	r3, #0
 801411a:	bf14      	ite	ne
 801411c:	2301      	movne	r3, #1
 801411e:	2300      	moveq	r3, #0
 8014120:	b2db      	uxtb	r3, r3
 8014122:	2b00      	cmp	r3, #0
 8014124:	f000 80a5 	beq.w	8014272 <_ZN2ps11SystemState17updateTestOnTimerEv+0x236>
            {
                if (test_ -> getSampleMethod() == SampleGeneric)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 801412e:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014138:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	3340      	adds	r3, #64	; 0x40
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4610      	mov	r0, r2
 8014144:	4798      	blx	r3
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	bf0c      	ite	eq
 801414c:	2301      	moveq	r3, #1
 801414e:	2300      	movne	r3, #0
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d03f      	beq.n	80141d6 <_ZN2ps11SystemState17updateTestOnTimerEv+0x19a>
                {
                    // ------------------------------------------------------------------
                    // Send sample data for tests which use normal sampling 
                    // ------------------------------------------------------------------
                    if (timerCnt_%sampleModulus_ == 0)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 801415c:	3370      	adds	r3, #112	; 0x70
 801415e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014168:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 801416c:	2200      	movs	r2, #0
 801416e:	469a      	mov	sl, r3
 8014170:	4693      	mov	fp, r2
 8014172:	4652      	mov	r2, sl
 8014174:	465b      	mov	r3, fp
 8014176:	f7ec fe53 	bl	8000e20 <__aeabi_uldivmod>
 801417a:	4313      	orrs	r3, r2
 801417c:	2b00      	cmp	r3, #0
 801417e:	bf0c      	ite	eq
 8014180:	2301      	moveq	r3, #1
 8014182:	2300      	movne	r3, #0
 8014184:	b2db      	uxtb	r3, r3
 8014186:	2b00      	cmp	r3, #0
 8014188:	d073      	beq.n	8014272 <_ZN2ps11SystemState17updateTestOnTimerEv+0x236>
                    {
                        Sample sample = {t, volt, currLowPass_[electInd].value(),uint8_t(electNum)};
 801418a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801418e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8014192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014194:	643b      	str	r3, [r7, #64]	; 0x40
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 801419c:	3378      	adds	r3, #120	; 0x78
 801419e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141a0:	4611      	mov	r1, r2
 80141a2:	4618      	mov	r0, r3
 80141a4:	f000 fc74 	bl	8014a90 <_ZN5ArrayIN2ps7LowPassELj1EEixEj>
 80141a8:	4603      	mov	r3, r0
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7f6 ff57 	bl	800b05e <_ZNK2ps7LowPass5valueEv>
 80141b0:	eef0 7a40 	vmov.f32	s15, s0
 80141b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80141b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                        dataBuffer_.push_back(sample);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80141c6:	3308      	adds	r3, #8
 80141c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80141cc:	4611      	mov	r1, r2
 80141ce:	4618      	mov	r0, r3
 80141d0:	f000 fc70 	bl	8014ab4 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9push_backERKS1_>
 80141d4:	e04d      	b.n	8014272 <_ZN2ps11SystemState17updateTestOnTimerEv+0x236>
                else
                {
                    // ------------------------------------------------------------------
                    // Send sample for tests which use custom sampling methods
                    // ------------------------------------------------------------------
                    Sample sampleRaw  = {t, volt, currLowPass_[0].value(),uint8_t(electNum)}; // Raw sample data
 80141d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80141da:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80141de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80141e8:	3378      	adds	r3, #120	; 0x78
 80141ea:	2100      	movs	r1, #0
 80141ec:	4618      	mov	r0, r3
 80141ee:	f000 fc4f 	bl	8014a90 <_ZN5ArrayIN2ps7LowPassELj1EEixEj>
 80141f2:	4603      	mov	r3, r0
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7f6 ff32 	bl	800b05e <_ZNK2ps7LowPass5valueEv>
 80141fa:	eef0 7a40 	vmov.f32	s15, s0
 80141fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8014202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014204:	b2db      	uxtb	r3, r3
 8014206:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                    Sample sampleTest = {0, 0.0, 0.0, uint8_t(electNum)}; // Custom sample data (set in updateSample)
 801420a:	f107 0308 	add.w	r3, r7, #8
 801420e:	2200      	movs	r2, #0
 8014210:	601a      	str	r2, [r3, #0]
 8014212:	605a      	str	r2, [r3, #4]
 8014214:	609a      	str	r2, [r3, #8]
 8014216:	60da      	str	r2, [r3, #12]
 8014218:	611a      	str	r2, [r3, #16]
 801421a:	615a      	str	r2, [r3, #20]
 801421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801421e:	b2db      	uxtb	r3, r3
 8014220:	763b      	strb	r3, [r7, #24]
                    if (test_ -> updateSample(sampleRaw, sampleTest))
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014228:	f8d3 6c2c 	ldr.w	r6, [r3, #3116]	; 0xc2c
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014232:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	3344      	adds	r3, #68	; 0x44
 801423a:	681d      	ldr	r5, [r3, #0]
 801423c:	f107 0308 	add.w	r3, r7, #8
 8014240:	9304      	str	r3, [sp, #16]
 8014242:	466c      	mov	r4, sp
 8014244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801424a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801424e:	f107 0320 	add.w	r3, r7, #32
 8014252:	cb0c      	ldmia	r3, {r2, r3}
 8014254:	4630      	mov	r0, r6
 8014256:	47a8      	blx	r5
 8014258:	4603      	mov	r3, r0
 801425a:	2b00      	cmp	r3, #0
 801425c:	d009      	beq.n	8014272 <_ZN2ps11SystemState17updateTestOnTimerEv+0x236>
                    {
                        dataBuffer_.push_back(sampleTest);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8014264:	3308      	adds	r3, #8
 8014266:	f107 0208 	add.w	r2, r7, #8
 801426a:	4611      	mov	r1, r2
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fc21 	bl	8014ab4 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9push_backERKS1_>
                        }
#endif
                    }
                }
            }
            done = test_ -> isDone(t);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014278:	f8d3 0c2c 	ldr.w	r0, [r3, #3116]	; 0xc2c
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014282:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	6819      	ldr	r1, [r3, #0]
 801428a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801428e:	4788      	blx	r1
 8014290:	4603      	mov	r3, r0
 8014292:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            timerCnt_++;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 801429c:	3370      	adds	r3, #112	; 0x70
 801429e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80142a2:	f112 0801 	adds.w	r8, r2, #1
 80142a6:	f143 0900 	adc.w	r9, r3, #0
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80142b0:	3370      	adds	r3, #112	; 0x70
 80142b2:	e943 8902 	strd	r8, r9, [r3, #-8]
        }

        if (done) 
 80142b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d002      	beq.n	80142c4 <_ZN2ps11SystemState17updateTestOnTimerEv+0x288>
        {
            stopTest();
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f8e0 	bl	8014484 <_ZN2ps11SystemState8stopTestEv>
        }
    }
 80142c4:	bf00      	nop
 80142c6:	3774      	adds	r7, #116	; 0x74
 80142c8:	46bd      	mov	sp, r7
 80142ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ce:	bf00      	nop
 80142d0:	0802231c 	.word	0x0802231c
 80142d4:	00000000 	.word	0x00000000

080142d8 <_ZN2ps11SystemState9startTestEv>:


    void SystemState::startTest()
    {
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	ed2d 8b02 	vpush	{d8}
 80142de:	b085      	sub	sp, #20
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
        if (test_ != nullptr)
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80142ea:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	f000 80bc 	beq.w	801446c <_ZN2ps11SystemState9startTestEv+0x194>
        {
            timerCnt_ = 0;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 80142fa:	3370      	adds	r3, #112	; 0x70
 80142fc:	4619      	mov	r1, r3
 80142fe:	f04f 0200 	mov.w	r2, #0
 8014302:	f04f 0300 	mov.w	r3, #0
 8014306:	e941 2302 	strd	r2, r3, [r1, #-8]
            analogSubsystem_.autoVoltRange(test_ -> getMinValue(), test_ -> getMaxValue());
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	1d1c      	adds	r4, r3, #4
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014314:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 801431e:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	3314      	adds	r3, #20
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	4610      	mov	r0, r2
 801432a:	4798      	blx	r3
 801432c:	eeb0 8a40 	vmov.f32	s16, s0
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014336:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014340:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	3310      	adds	r3, #16
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4610      	mov	r0, r2
 801434c:	4798      	blx	r3
 801434e:	eef0 7a40 	vmov.f32	s15, s0
 8014352:	eef0 0a67 	vmov.f32	s1, s15
 8014356:	eeb0 0a48 	vmov.f32	s0, s16
 801435a:	4620      	mov	r0, r4
 801435c:	f7f1 fabe 	bl	80058dc <_ZN2ps15AnalogSubsystem13autoVoltRangeEff>

#if defined HARDWARE_VERSION_0P2 
            analogSubsystem_.autoRefElectVoltRange(test_ -> getMinValue(), test_ -> getMaxValue());
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	1d1c      	adds	r4, r3, #4
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 801436a:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014374:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3314      	adds	r3, #20
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	4610      	mov	r0, r2
 8014380:	4798      	blx	r3
 8014382:	eeb0 8a40 	vmov.f32	s16, s0
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 801438c:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014396:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	3310      	adds	r3, #16
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4610      	mov	r0, r2
 80143a2:	4798      	blx	r3
 80143a4:	eef0 7a40 	vmov.f32	s15, s0
 80143a8:	eef0 0a67 	vmov.f32	s1, s15
 80143ac:	eeb0 0a48 	vmov.f32	s0, s16
 80143b0:	4620      	mov	r0, r4
 80143b2:	f7f1 fe45 	bl	8006040 <_ZN2ps15AnalogSubsystem21autoRefElectVoltRangeEff>
#endif
            test_ -> reset();
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80143bc:	f8d3 2c2c 	ldr.w	r2, [r3, #3116]	; 0xc2c
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80143c6:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	3308      	adds	r3, #8
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4610      	mov	r0, r2
 80143d2:	4798      	blx	r3
            float volt = test_ -> getValue(0.0);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80143da:	f8d3 0c2c 	ldr.w	r0, [r3, #3116]	; 0xc2c
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80143e4:	f8d3 3c2c 	ldr.w	r3, [r3, #3116]	; 0xc2c
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	330c      	adds	r3, #12
 80143ec:	6819      	ldr	r1, [r3, #0]
 80143ee:	f04f 0200 	mov.w	r2, #0
 80143f2:	f04f 0300 	mov.w	r3, #0
 80143f6:	4788      	blx	r1
 80143f8:	ed87 0a03 	vstr	s0, [r7, #12]
            analogSubsystem_.setVolt(volt);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	3304      	adds	r3, #4
 8014400:	ed97 0a03 	vldr	s0, [r7, #12]
 8014404:	4618      	mov	r0, r3
 8014406:	f7f1 f997 	bl	8005738 <_ZN2ps15AnalogSubsystem7setVoltEf>

#if defined HARDWARE_VERSION_0P2 
            if (electrodeAutoConnect_)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8014410:	2b00      	cmp	r3, #0
 8014412:	d005      	beq.n	8014420 <_ZN2ps11SystemState9startTestEv+0x148>
            {
                electrodeSwitch_.setAllConnected(true);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	339c      	adds	r3, #156	; 0x9c
 8014418:	2101      	movs	r1, #1
 801441a:	4618      	mov	r0, r3
 801441c:	f7f6 fc99 	bl	800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>
            {
                currLowPass_[0].reset();
                lowPassDtSec_ = 1.0e-6*TestTimerPeriod;    
            }
#else
            currLowPass_[0].reset();
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8014426:	3378      	adds	r3, #120	; 0x78
 8014428:	2100      	movs	r1, #0
 801442a:	4618      	mov	r0, r3
 801442c:	f000 fb30 	bl	8014a90 <_ZN5ArrayIN2ps7LowPassELj1EEixEj>
 8014430:	4603      	mov	r3, r0
 8014432:	4618      	mov	r0, r3
 8014434:	f7f6 fe08 	bl	800b048 <_ZN2ps7LowPass5resetEv>
            lowPassDtSec_ = 1.0e-6*TestTimerPeriod;    
 8014438:	4b11      	ldr	r3, [pc, #68]	; (8014480 <_ZN2ps11SystemState9startTestEv+0x1a8>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4618      	mov	r0, r3
 801443e:	f7ec f81f 	bl	8000480 <__aeabi_ui2d>
 8014442:	a30d      	add	r3, pc, #52	; (adr r3, 8014478 <_ZN2ps11SystemState9startTestEv+0x1a0>)
 8014444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014448:	f7ec f894 	bl	8000574 <__aeabi_dmul>
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	4610      	mov	r0, r2
 8014452:	4619      	mov	r1, r3
 8014454:	f7ec fb86 	bl	8000b64 <__aeabi_d2f>
 8014458:	4602      	mov	r2, r0
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014460:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8014464:	601a      	str	r2, [r3, #0]
#endif
            testInProgress_ = true;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2201      	movs	r2, #1
 801446a:	701a      	strb	r2, [r3, #0]
#elif defined DEVBOARD_ITSY_BITSY
            //TC.startTimer(TestTimerPeriod, testTimerCallback_);
#endif

        }
    }
 801446c:	bf00      	nop
 801446e:	3714      	adds	r7, #20
 8014470:	46bd      	mov	sp, r7
 8014472:	ecbd 8b02 	vpop	{d8}
 8014476:	bd90      	pop	{r4, r7, pc}
 8014478:	a0b5ed8d 	.word	0xa0b5ed8d
 801447c:	3eb0c6f7 	.word	0x3eb0c6f7
 8014480:	0802231c 	.word	0x0802231c

08014484 <_ZN2ps11SystemState8stopTestEv>:


    void SystemState::stopTest()
    {
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
#if defined DEVBOARD_TEENSY
        testTimer_.end();
#elif defined DEVBOARD_ITSY_BITSY
        //TC.stopTimer();
#endif
        testInProgress_ = false;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	701a      	strb	r2, [r3, #0]
        lastSampleFlag_ = true;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2201      	movs	r2, #1
 8014496:	705a      	strb	r2, [r3, #1]

#if defined HARDWARE_VERSION_0P2 
        if (electrodeAutoConnect_)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d005      	beq.n	80144ae <_ZN2ps11SystemState8stopTestEv+0x2a>
        {
            electrodeSwitch_.setAllConnected(false);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	339c      	adds	r3, #156	; 0x9c
 80144a6:	2100      	movs	r1, #0
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f6 fc52 	bl	800ad52 <_ZN2ps15ElectrodeSwitch15setAllConnectedEb>
            multiplexer_.disconnectWrkElect();
            multiplexer_.disconnectRefElect();
            multiplexer_.disconnectCtrElect();
        }
#endif
    }
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
	...

080144b8 <_ZN2ps11SystemState15setSamplePeriodEm>:


    void SystemState::setSamplePeriod(uint32_t samplePeriod)
    {
 80144b8:	b5b0      	push	{r4, r5, r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
        samplePeriod_ = constrain(samplePeriod, MinimumSamplePeriod, MaximumSamplePeriod);
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	4b16      	ldr	r3, [pc, #88]	; (8014520 <_ZN2ps11SystemState15setSamplePeriodEm+0x68>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d30a      	bcc.n	80144e2 <_ZN2ps11SystemState15setSamplePeriodEm+0x2a>
 80144cc:	683a      	ldr	r2, [r7, #0]
 80144ce:	4b15      	ldr	r3, [pc, #84]	; (8014524 <_ZN2ps11SystemState15setSamplePeriodEm+0x6c>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d802      	bhi.n	80144dc <_ZN2ps11SystemState15setSamplePeriodEm+0x24>
 80144d6:	463b      	mov	r3, r7
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	e004      	b.n	80144e6 <_ZN2ps11SystemState15setSamplePeriodEm+0x2e>
 80144dc:	4b11      	ldr	r3, [pc, #68]	; (8014524 <_ZN2ps11SystemState15setSamplePeriodEm+0x6c>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	e001      	b.n	80144e6 <_ZN2ps11SystemState15setSamplePeriodEm+0x2e>
 80144e2:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <_ZN2ps11SystemState15setSamplePeriodEm+0x68>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 80144ec:	f8c2 3bf0 	str.w	r3, [r2, #3056]	; 0xbf0
        updateSampleModulus();
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 f829 	bl	8014548 <_ZN2ps11SystemState19updateSampleModulusEv>
        voltammetry_.setSamplePeriod(uint64_t(samplePeriod_));
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 80144fc:	3170      	adds	r1, #112	; 0x70
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014504:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
 8014508:	2200      	movs	r2, #0
 801450a:	461c      	mov	r4, r3
 801450c:	4615      	mov	r5, r2
 801450e:	4622      	mov	r2, r4
 8014510:	462b      	mov	r3, r5
 8014512:	4608      	mov	r0, r1
 8014514:	f001 fc88 	bl	8015e28 <_ZN2ps11Voltammetry15setSamplePeriodEy>
    }
 8014518:	bf00      	nop
 801451a:	3708      	adds	r7, #8
 801451c:	46bd      	mov	sp, r7
 801451e:	bdb0      	pop	{r4, r5, r7, pc}
 8014520:	08022324 	.word	0x08022324
 8014524:	08022328 	.word	0x08022328

08014528 <_ZN2ps11SystemState15getSamplePeriodEv>:


    uint32_t SystemState::getSamplePeriod()
    {
 8014528:	b480      	push	{r7}
 801452a:	b083      	sub	sp, #12
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
        return samplePeriod_;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014536:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	; 0xbf0
    }
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
	...

08014548 <_ZN2ps11SystemState19updateSampleModulusEv>:


    void SystemState::updateSampleModulus()
    {
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
        sampleModulus_ = samplePeriod_/TestTimerPeriod;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8014556:	f8d3 2bf0 	ldr.w	r2, [r3, #3056]	; 0xbf0
 801455a:	4b07      	ldr	r3, [pc, #28]	; (8014578 <_ZN2ps11SystemState19updateSampleModulusEv+0x30>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8014568:	f8c2 3bf4 	str.w	r3, [r2, #3060]	; 0xbf4
    }
 801456c:	bf00      	nop
 801456e:	370c      	adds	r7, #12
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr
 8014578:	0802231c 	.word	0x0802231c

0801457c <_ZN2ps12CommandTableINS_11SystemStateELj50EEC1EPS1_>:

    };


    template<typename T, size_t MAX_SIZE>
    CommandTable<T,MAX_SIZE>::CommandTable(T *client) : client_(client) {}
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	683a      	ldr	r2, [r7, #0]
 801458a:	601a      	str	r2, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	3304      	adds	r3, #4
 8014590:	4618      	mov	r0, r3
 8014592:	f000 facf 	bl	8014b34 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEC1Ev>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_ZN2ps14CircularBufferINS_6SampleELj1000EEC1Ev>:
    CircularBuffer<T,MAX_SIZE>::CircularBuffer() 
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b088      	sub	sp, #32
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	4618      	mov	r0, r3
 80145ac:	f000 fada 	bl	8014b64 <_ZN5ArrayIN2ps6SampleELj1001EEC1Ev>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80145b6:	461a      	mov	r2, r3
 80145b8:	2300      	movs	r3, #0
 80145ba:	f8c2 3de0 	str.w	r3, [r2, #3552]	; 0xde0
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80145c4:	461a      	mov	r2, r3
 80145c6:	2300      	movs	r3, #0
 80145c8:	f8c2 3de4 	str.w	r3, [r2, #3556]	; 0xde4
        T dummy = T();
 80145cc:	f107 0308 	add.w	r3, r7, #8
 80145d0:	2200      	movs	r2, #0
 80145d2:	601a      	str	r2, [r3, #0]
 80145d4:	605a      	str	r2, [r3, #4]
 80145d6:	609a      	str	r2, [r3, #8]
 80145d8:	60da      	str	r2, [r3, #12]
 80145da:	611a      	str	r2, [r3, #16]
 80145dc:	615a      	str	r2, [r3, #20]
        data_.fill(dummy);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f107 0208 	add.w	r2, r7, #8
 80145e4:	4611      	mov	r1, r2
 80145e6:	4618      	mov	r0, r3
 80145e8:	f000 face 	bl	8014b88 <_ZN5ArrayIN2ps6SampleELj1001EE4fillIS1_EEvRKT_>
    };
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	4618      	mov	r0, r3
 80145f0:	3720      	adds	r7, #32
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
	...

080145f8 <_ZN5ArrayIN2ps7LowPassELj1EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 80145f8:	b5b0      	push	{r4, r5, r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2400      	movs	r4, #0
 8014604:	461d      	mov	r5, r3
 8014606:	e009      	b.n	801461c <_ZN5ArrayIN2ps7LowPassELj1EEC1Ev+0x24>
 8014608:	eddf 0a09 	vldr	s1, [pc, #36]	; 8014630 <_ZN5ArrayIN2ps7LowPassELj1EEC1Ev+0x38>
 801460c:	2101      	movs	r1, #1
 801460e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014612:	4628      	mov	r0, r5
 8014614:	f7f6 fbb6 	bl	800ad84 <_ZN2ps7LowPassC1Efjf>
 8014618:	352c      	adds	r5, #44	; 0x2c
 801461a:	3c01      	subs	r4, #1
 801461c:	2c00      	cmp	r4, #0
 801461e:	daf3      	bge.n	8014608 <_ZN5ArrayIN2ps7LowPassELj1EEC1Ev+0x10>
  size_ = 0;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	4618      	mov	r0, r3
 801462a:	3708      	adds	r7, #8
 801462c:	46bd      	mov	sp, r7
 801462e:	bdb0      	pop	{r4, r5, r7, pc}
 8014630:	00000000 	.word	0x00000000

08014634 <_ZN5ArrayIN2ps7LowPassELj1EE9push_backERKS1_>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 8014634:	b4b0      	push	{r4, r5, r7}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014642:	2b00      	cmp	r3, #0
 8014644:	d114      	bne.n	8014670 <_ZN5ArrayIN2ps7LowPassELj1EE9push_backERKS1_+0x3c>
    values_[size_++] = value;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464a:	1c59      	adds	r1, r3, #1
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	212c      	movs	r1, #44	; 0x2c
 8014654:	fb01 f303 	mul.w	r3, r1, r3
 8014658:	441a      	add	r2, r3
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	4614      	mov	r4, r2
 801465e:	461d      	mov	r5, r3
 8014660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801466c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014670:	bf00      	nop
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	bcb0      	pop	{r4, r5, r7}
 8014678:	4770      	bx	lr

0801467a <_ZN2ps12CommandTableINS_11SystemStateELj50EE9setClientEPS1_>:
        return MAX_SIZE;
    }


    template<typename T, size_t MAX_SIZE>
    void CommandTable<T,MAX_SIZE>::setClient(T* client)
 801467a:	b480      	push	{r7}
 801467c:	b083      	sub	sp, #12
 801467e:	af00      	add	r7, sp, #0
 8014680:	6078      	str	r0, [r7, #4]
 8014682:	6039      	str	r1, [r7, #0]
    {
        client_ = client;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	683a      	ldr	r2, [r7, #0]
 8014688:	601a      	str	r2, [r3, #0]
    }
 801468a:	bf00      	nop
 801468c:	370c      	adds	r7, #12
 801468e:	46bd      	mov	sp, r7
 8014690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014694:	4770      	bx	lr

08014696 <_ZN2ps12CommandTableINS_11SystemStateELj50EE14registerMethodENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>:


    template<typename T, size_t MAX_SIZE>
    void CommandTable<T,MAX_SIZE>::registerMethod(string key, string value, ReturnStatus (T::*method)(JsonObject&,JsonObject&))
 8014696:	b082      	sub	sp, #8
 8014698:	b580      	push	{r7, lr}
 801469a:	b0a0      	sub	sp, #128	; 0x80
 801469c:	af02      	add	r7, sp, #8
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	607a      	str	r2, [r7, #4]
 80146a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    {
        KeyValueCommand<T> kvCommand(key,value,method);
 80146a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	4618      	mov	r0, r3
 80146b0:	f00a f954 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80146b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80146b8:	6879      	ldr	r1, [r7, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	f00a f94e 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80146c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80146c4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80146c8:	f107 0010 	add.w	r0, r7, #16
 80146cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80146d0:	9300      	str	r3, [sp, #0]
 80146d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80146d6:	f000 fa66 	bl	8014ba6 <_ZN2ps15KeyValueCommandINS_11SystemStateEEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>
 80146da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80146de:	4618      	mov	r0, r3
 80146e0:	f009 ffc9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80146e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146e8:	4618      	mov	r0, r3
 80146ea:	f009 ffc4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        table_.push_back(kvCommand);
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	3304      	adds	r3, #4
 80146f2:	f107 0210 	add.w	r2, r7, #16
 80146f6:	4611      	mov	r1, r2
 80146f8:	4618      	mov	r0, r3
 80146fa:	f000 fa98 	bl	8014c2e <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EE9push_backERKS3_>
    }
 80146fe:	f107 0310 	add.w	r3, r7, #16
 8014702:	4618      	mov	r0, r3
 8014704:	f7ed fd6c 	bl	80021e0 <_ZN2ps15KeyValueCommandINS_11SystemStateEED1Ev>
 8014708:	3778      	adds	r7, #120	; 0x78
 801470a:	46bd      	mov	sp, r7
 801470c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014710:	b002      	add	sp, #8
 8014712:	4770      	bx	lr

08014714 <_ZNK11ArduinoJson10JsonObject3getIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 fab1 	bl	8014c88 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 8014726:	4603      	mov	r3, r0
  }
 8014728:	4618      	mov	r0, r3
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_>:

    template<typename T, size_t MAX_SIZE>
    ReturnStatus CommandTable<T,MAX_SIZE>::apply(string key, JsonObject &jsonMsg, JsonObject &jsonDat)
 8014730:	b590      	push	{r4, r7, lr}
 8014732:	b0bd      	sub	sp, #244	; 0xf4
 8014734:	af02      	add	r7, sp, #8
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
 801473c:	603b      	str	r3, [r7, #0]
    {
        ReturnStatus status;
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f7ec fe3e 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (client_!= nullptr)
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	f000 8114 	beq.w	8014976 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x246>
        {
            if ( jsonMsg.containsKey(key.c_str()) )
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f00a f8ce 	bl	801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8014754:	4603      	mov	r3, r0
 8014756:	4619      	mov	r1, r3
 8014758:	6838      	ldr	r0, [r7, #0]
 801475a:	f000 face 	bl	8014cfa <_ZNK11ArduinoJson10JsonObject11containsKeyIKcEEbPT_>
 801475e:	4603      	mov	r3, r0
 8014760:	2b00      	cmp	r3, #0
 8014762:	f000 80fe 	beq.w	8014962 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x232>
            {
                string cmd = string((const char *)(jsonMsg[key]));
 8014766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	6839      	ldr	r1, [r7, #0]
 801476e:	4618      	mov	r0, r3
 8014770:	f7ef ff0d 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<T>();
 8014774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014778:	4618      	mov	r0, r3
 801477a:	f7f0 f834 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 801477e:	4603      	mov	r3, r0
 8014780:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    return _object.get<TValue>(_key);
 8014784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	4619      	mov	r1, r3
 8014792:	4610      	mov	r0, r2
 8014794:	f000 fbd2 	bl	8014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8014798:	4604      	mov	r4, r0
 801479a:	bf00      	nop
    return impl()->template as<T>();
 801479c:	bf00      	nop
 801479e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147a2:	4618      	mov	r0, r3
 80147a4:	f009 fe67 	bl	801e476 <_ZNSaIcEC1Ev>
 80147a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80147ac:	f107 0314 	add.w	r3, r7, #20
 80147b0:	4621      	mov	r1, r4
 80147b2:	4618      	mov	r0, r3
 80147b4:	f00a f906 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80147b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147bc:	4618      	mov	r0, r3
 80147be:	f009 fe5b 	bl	801e478 <_ZNSaIcED1Ev>
                //cmd.trim();
                bool found = false;
 80147c2:	2300      	movs	r3, #0
 80147c4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
                for (size_t i=0; i<table_.size(); i++)
 80147c8:	2300      	movs	r3, #0
 80147ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80147ce:	e057      	b.n	8014880 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x150>
                {
                    if (cmd.compare(table_[i].value()))
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	3304      	adds	r3, #4
 80147d4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80147d8:	4618      	mov	r0, r3
 80147da:	f000 fab9 	bl	8014d50 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEixEj>
 80147de:	4602      	mov	r2, r0
 80147e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80147e4:	4611      	mov	r1, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 fac4 	bl	8014d74 <_ZN2ps15KeyValueCommandINS_11SystemStateEE5valueB5cxx11Ev>
 80147ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80147f0:	f107 0314 	add.w	r3, r7, #20
 80147f4:	4611      	mov	r1, r2
 80147f6:	4618      	mov	r0, r3
 80147f8:	f00a f87d 	bl	801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80147fc:	4603      	mov	r3, r0
 80147fe:	2b00      	cmp	r3, #0
 8014800:	bf14      	ite	ne
 8014802:	2301      	movne	r3, #1
 8014804:	2300      	moveq	r3, #0
 8014806:	b2dc      	uxtb	r4, r3
 8014808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801480c:	4618      	mov	r0, r3
 801480e:	f009 ff32 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014812:	2c00      	cmp	r4, #0
 8014814:	d02f      	beq.n	8014876 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x146>
                    {
                        found = true;
 8014816:	2301      	movs	r3, #1
 8014818:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
                        jsonDat.set(CommandKey,jsonMsg[key]);
 801481c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	4618      	mov	r0, r3
 8014826:	f7ef feb2 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 801482a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801482e:	461a      	mov	r2, r3
 8014830:	4958      	ldr	r1, [pc, #352]	; (8014994 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x264>)
 8014832:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8014836:	f000 faac 	bl	8014d92 <_ZN11ArduinoJson10JsonObject3setINS_9Internals19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES9_EEbRKT0_RKT_>
                        status = table_[i].applyMethod(client_,jsonMsg,jsonDat);
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	3304      	adds	r3, #4
 801483e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8014842:	4618      	mov	r0, r3
 8014844:	f000 fa84 	bl	8014d50 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEixEj>
 8014848:	4601      	mov	r1, r0
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014856:	9300      	str	r3, [sp, #0]
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	f000 faab 	bl	8014db4 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_>
 801485e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014862:	4619      	mov	r1, r3
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f7ee f851 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 801486a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801486e:	4618      	mov	r0, r3
 8014870:	f7ed ffe4 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
                        break;
 8014874:	e013      	b.n	801489e <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x16e>
                for (size_t i=0; i<table_.size(); i++)
 8014876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801487a:	3301      	adds	r3, #1
 801487c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	3304      	adds	r3, #4
 8014884:	4618      	mov	r0, r3
 8014886:	f000 fa56 	bl	8014d36 <_ZNK5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EE4sizeEv>
 801488a:	4602      	mov	r2, r0
 801488c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014890:	4293      	cmp	r3, r2
 8014892:	bf34      	ite	cc
 8014894:	2301      	movcc	r3, #1
 8014896:	2300      	movcs	r3, #0
 8014898:	b2db      	uxtb	r3, r3
 801489a:	2b00      	cmp	r3, #0
 801489c:	d198      	bne.n	80147d0 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0xa0>
                    }
                }
                if (!found)
 801489e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80148a2:	f083 0301 	eor.w	r3, r3, #1
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d054      	beq.n	8014956 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x226>
                {
                    status.success = false;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	701a      	strb	r2, [r3, #0]
                    status.message = string("command, ") + cmd + string(", not found");;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	1d1c      	adds	r4, r3, #4
 80148b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80148ba:	4618      	mov	r0, r3
 80148bc:	f009 fddb 	bl	801e476 <_ZNSaIcEC1Ev>
 80148c0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80148c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80148c8:	4933      	ldr	r1, [pc, #204]	; (8014998 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x268>)
 80148ca:	4618      	mov	r0, r3
 80148cc:	f00a f87a 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80148d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80148d4:	f107 0214 	add.w	r2, r7, #20
 80148d8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80148dc:	4618      	mov	r0, r3
 80148de:	f7f1 fe98 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80148e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80148e6:	4618      	mov	r0, r3
 80148e8:	f009 fdc5 	bl	801e476 <_ZNSaIcEC1Ev>
 80148ec:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80148f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80148f4:	4929      	ldr	r1, [pc, #164]	; (801499c <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x26c>)
 80148f6:	4618      	mov	r0, r3
 80148f8:	f00a f864 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80148fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014900:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8014904:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8014908:	4618      	mov	r0, r3
 801490a:	f7f1 fe99 	bl	8006640 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 801490e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014912:	4619      	mov	r1, r3
 8014914:	4620      	mov	r0, r4
 8014916:	f009 feba 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801491a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801491e:	4618      	mov	r0, r3
 8014920:	f009 fea9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014924:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014928:	4618      	mov	r0, r3
 801492a:	f009 fea4 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801492e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014932:	4618      	mov	r0, r3
 8014934:	f009 fda0 	bl	801e478 <_ZNSaIcED1Ev>
 8014938:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801493c:	4618      	mov	r0, r3
 801493e:	f009 fe9a 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014942:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014946:	4618      	mov	r0, r3
 8014948:	f009 fe95 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801494c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014950:	4618      	mov	r0, r3
 8014952:	f009 fd91 	bl	801e478 <_ZNSaIcED1Ev>
                }
            }
 8014956:	f107 0314 	add.w	r3, r7, #20
 801495a:	4618      	mov	r0, r3
 801495c:	f009 fe8b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        else
        {
            status.success = false;
            status.message = "CommandTable: client is nullptr";
        }
        return status;
 8014960:	e012      	b.n	8014988 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x258>
                status.success = false;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2200      	movs	r2, #0
 8014966:	701a      	strb	r2, [r3, #0]
                status.message = "CommandTable: command not found";
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	3304      	adds	r3, #4
 801496c:	490c      	ldr	r1, [pc, #48]	; (80149a0 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x270>)
 801496e:	4618      	mov	r0, r3
 8014970:	f009 ff51 	bl	801e816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        return status;
 8014974:	e008      	b.n	8014988 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x258>
            status.success = false;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2200      	movs	r2, #0
 801497a:	701a      	strb	r2, [r3, #0]
            status.message = "CommandTable: client is nullptr";
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	3304      	adds	r3, #4
 8014980:	4908      	ldr	r1, [pc, #32]	; (80149a4 <_ZN2ps12CommandTableINS_11SystemStateELj50EE5applyENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN11ArduinoJson10JsonObjectESB_+0x274>)
 8014982:	4618      	mov	r0, r3
 8014984:	f009 ff47 	bl	801e816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        return status;
 8014988:	bf00      	nop
    }
 801498a:	68f8      	ldr	r0, [r7, #12]
 801498c:	37ec      	adds	r7, #236	; 0xec
 801498e:	46bd      	mov	sp, r7
 8014990:	bd90      	pop	{r4, r7, pc}
 8014992:	bf00      	nop
 8014994:	2000839c 	.word	0x2000839c
 8014998:	08021ea0 	.word	0x08021ea0
 801499c:	08021eac 	.word	0x08021eac
 80149a0:	08021eb8 	.word	0x08021eb8
 80149a4:	08021ed8 	.word	0x08021ed8

080149a8 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv>:
    size_t CircularBuffer<T,MAX_SIZE>::size() const
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
        if (pos_front_ <= pos_back_)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149b6:	f8d3 2de0 	ldr.w	r2, [r3, #3552]	; 0xde0
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149c0:	f8d3 3de4 	ldr.w	r3, [r3, #3556]	; 0xde4
 80149c4:	429a      	cmp	r2, r3
 80149c6:	bf94      	ite	ls
 80149c8:	2301      	movls	r3, #1
 80149ca:	2300      	movhi	r3, #0
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d00b      	beq.n	80149ea <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv+0x42>
            return pos_back_ - pos_front_;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149d8:	f8d3 2de4 	ldr.w	r2, [r3, #3556]	; 0xde4
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149e2:	f8d3 3de0 	ldr.w	r3, [r3, #3552]	; 0xde0
 80149e6:	1ad3      	subs	r3, r2, r3
 80149e8:	e00c      	b.n	8014a04 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv+0x5c>
            return MAX_SIZE - pos_front_ + pos_back_ + 1;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149f0:	f8d3 2de4 	ldr.w	r2, [r3, #3556]	; 0xde4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80149fa:	f8d3 3de0 	ldr.w	r3, [r3, #3552]	; 0xde0
 80149fe:	1ad3      	subs	r3, r2, r3
 8014a00:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
    }
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <_ZN2ps14CircularBufferINS_6SampleELj1000EE5frontEv>:
    T& CircularBuffer<T,MAX_SIZE>::front()
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
        return data_[pos_front_];
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014a20:	f8d3 3de0 	ldr.w	r3, [r3, #3552]	; 0xde0
 8014a24:	4619      	mov	r1, r3
 8014a26:	4610      	mov	r0, r2
 8014a28:	f000 fa18 	bl	8014e5c <_ZN5ArrayIN2ps6SampleELj1001EEixEj>
 8014a2c:	4603      	mov	r3, r0
    }
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9pop_frontEv>:
    void CircularBuffer<T,MAX_SIZE>::pop_front()
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
        if (size() > 0)
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f7ff ffb1 	bl	80149a8 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	bf14      	ite	ne
 8014a4c:	2301      	movne	r3, #1
 8014a4e:	2300      	moveq	r3, #0
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d016      	beq.n	8014a84 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9pop_frontEv+0x4c>
            pos_front_ = (pos_front_ + 1)%(MAX_SIZE+1); 
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014a5c:	f8d3 3de0 	ldr.w	r3, [r3, #3552]	; 0xde0
 8014a60:	1c5a      	adds	r2, r3, #1
 8014a62:	4b0a      	ldr	r3, [pc, #40]	; (8014a8c <_ZN2ps14CircularBufferINS_6SampleELj1000EE9pop_frontEv+0x54>)
 8014a64:	fba3 1302 	umull	r1, r3, r3, r2
 8014a68:	1ad1      	subs	r1, r2, r3
 8014a6a:	0849      	lsrs	r1, r1, #1
 8014a6c:	440b      	add	r3, r1
 8014a6e:	0a5b      	lsrs	r3, r3, #9
 8014a70:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8014a74:	fb01 f303 	mul.w	r3, r1, r3
 8014a78:	1ad3      	subs	r3, r2, r3
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8014a80:	f8c2 3de0 	str.w	r3, [r2, #3552]	; 0xde0
    }
 8014a84:	bf00      	nop
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	05e1d27b 	.word	0x05e1d27b

08014a90 <_ZN5ArrayIN2ps7LowPassELj1EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
  return values_[index];
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	222c      	movs	r2, #44	; 0x2c
 8014a9e:	fb02 f303 	mul.w	r3, r2, r3
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	4413      	add	r3, r2
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	370c      	adds	r7, #12
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr
	...

08014ab4 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9push_backERKS1_>:
    void CircularBuffer<T,MAX_SIZE>::push_back(const T &value)
 8014ab4:	b5b0      	push	{r4, r5, r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	6039      	str	r1, [r7, #0]
        if (!full()) 
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f000 f9de 	bl	8014e80 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4fullEv>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	f083 0301 	eor.w	r3, r3, #1
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d02a      	beq.n	8014b26 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9push_backERKS1_+0x72>
            data_[pos_back_] = value;
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014ad8:	f8d3 3de4 	ldr.w	r3, [r3, #3556]	; 0xde4
 8014adc:	4619      	mov	r1, r3
 8014ade:	4610      	mov	r0, r2
 8014ae0:	f000 f9bc 	bl	8014e5c <_ZN5ArrayIN2ps6SampleELj1001EEixEj>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	4614      	mov	r4, r2
 8014aea:	461d      	mov	r5, r3
 8014aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014af4:	e884 0003 	stmia.w	r4, {r0, r1}
            pos_back_ = (pos_back_ + 1)%(MAX_SIZE+1); 
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014afe:	f8d3 3de4 	ldr.w	r3, [r3, #3556]	; 0xde4
 8014b02:	1c5a      	adds	r2, r3, #1
 8014b04:	4b0a      	ldr	r3, [pc, #40]	; (8014b30 <_ZN2ps14CircularBufferINS_6SampleELj1000EE9push_backERKS1_+0x7c>)
 8014b06:	fba3 1302 	umull	r1, r3, r3, r2
 8014b0a:	1ad1      	subs	r1, r2, r3
 8014b0c:	0849      	lsrs	r1, r1, #1
 8014b0e:	440b      	add	r3, r1
 8014b10:	0a5b      	lsrs	r3, r3, #9
 8014b12:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8014b16:	fb01 f303 	mul.w	r3, r1, r3
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8014b22:	f8c2 3de4 	str.w	r3, [r2, #3556]	; 0xde4
    }
 8014b26:	bf00      	nop
 8014b28:	3708      	adds	r7, #8
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	05e1d27b 	.word	0x05e1d27b

08014b34 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 8014b34:	b5b0      	push	{r4, r5, r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2431      	movs	r4, #49	; 0x31
 8014b40:	461d      	mov	r5, r3
 8014b42:	e004      	b.n	8014b4e <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEC1Ev+0x1a>
 8014b44:	4628      	mov	r0, r5
 8014b46:	f000 f9ad 	bl	8014ea4 <_ZN2ps15KeyValueCommandINS_11SystemStateEEC1Ev>
 8014b4a:	3538      	adds	r5, #56	; 0x38
 8014b4c:	3c01      	subs	r4, #1
 8014b4e:	2c00      	cmp	r4, #0
 8014b50:	daf8      	bge.n	8014b44 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEC1Ev+0x10>
  size_ = 0;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
}
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3708      	adds	r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bdb0      	pop	{r4, r5, r7, pc}

08014b64 <_ZN5ArrayIN2ps6SampleELj1001EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  size_ = 0;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014b72:	461a      	mov	r2, r3
 8014b74:	2300      	movs	r3, #0
 8014b76:	f8c2 3dd8 	str.w	r3, [r2, #3544]	; 0xdd8
}
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <_ZN5ArrayIN2ps6SampleELj1001EE4fillIS1_EEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 8014b92:	683a      	ldr	r2, [r7, #0]
 8014b94:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f000 f99b 	bl	8014ed4 <_ZN5ArrayIN2ps6SampleELj1001EE6assignIS1_EEvjRKT_>
}
 8014b9e:	bf00      	nop
 8014ba0:	3708      	adds	r7, #8
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}

08014ba6 <_ZN2ps15KeyValueCommandINS_11SystemStateEEC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_MS1_FNS_12ReturnStatusERN11ArduinoJson10JsonObjectESC_E>:
            ReturnStatus (T::*method_)(JsonObject&,JsonObject&) = nullptr;
    };


    template<typename T>
    KeyValueCommand<T>::KeyValueCommand(string key, string value, ReturnStatus (T::*method)(JsonObject&,JsonObject&))
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	61fb      	str	r3, [r7, #28]
        : key_(key), value_(value), method_(method) 
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	68b9      	ldr	r1, [r7, #8]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f009 fece 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	3318      	adds	r3, #24
 8014bc4:	6879      	ldr	r1, [r7, #4]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f009 fec8 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	3330      	adds	r3, #48	; 0x30
 8014bd0:	f107 021c 	add.w	r2, r7, #28
 8014bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bd8:	e883 0003 	stmia.w	r3, {r0, r1}
    {}
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	4618      	mov	r0, r3
 8014be0:	3710      	adds	r7, #16
 8014be2:	46bd      	mov	sp, r7
 8014be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014be8:	b002      	add	sp, #8
 8014bea:	4770      	bx	lr

08014bec <_ZN2ps15KeyValueCommandINS_11SystemStateEEaSERKS2_>:
    class KeyValueCommand
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	6039      	str	r1, [r7, #0]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	683a      	ldr	r2, [r7, #0]
 8014bfa:	4611      	mov	r1, r2
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f009 fd40 	bl	801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f103 0218 	add.w	r2, r3, #24
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	3318      	adds	r3, #24
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	4610      	mov	r0, r2
 8014c10:	f009 fd37 	bl	801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	683a      	ldr	r2, [r7, #0]
 8014c18:	3330      	adds	r3, #48	; 0x30
 8014c1a:	3230      	adds	r2, #48	; 0x30
 8014c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c20:	e883 0003 	stmia.w	r3, {r0, r1}
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	4618      	mov	r0, r3
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}

08014c2e <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EE9push_backERKS3_>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b082      	sub	sp, #8
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
 8014c36:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
 8014c3e:	2b31      	cmp	r3, #49	; 0x31
 8014c40:	d810      	bhi.n	8014c64 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EE9push_backERKS3_+0x36>
    values_[size_++] = value;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 2af0 	ldr.w	r2, [r3, #2800]	; 0xaf0
 8014c48:	1c51      	adds	r1, r2, #1
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8c3 1af0 	str.w	r1, [r3, #2800]	; 0xaf0
 8014c50:	4613      	mov	r3, r2
 8014c52:	00db      	lsls	r3, r3, #3
 8014c54:	1a9b      	subs	r3, r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	6839      	ldr	r1, [r7, #0]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7ff ffc4 	bl	8014bec <_ZN2ps15KeyValueCommandINS_11SystemStateEEaSERKS2_>
}
 8014c64:	bf00      	nop
 8014c66:	3708      	adds	r7, #8
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <_ZNK11ArduinoJson10JsonObject2isIbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_>:
  bool is(const TString& key) const {
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
    return is_impl<const TString&, TValue>(key);
 8014c76:	6839      	ldr	r1, [r7, #0]
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 f96d 	bl	8014f58 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEbT_>
 8014c7e:	4603      	mov	r3, r0
  }
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8014c92:	6839      	ldr	r1, [r7, #0]
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ef fd83 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7ed f9fb 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	60fb      	str	r3, [r7, #12]
 8014caa:	f107 020c 	add.w	r2, r7, #12
 8014cae:	f107 0308 	add.w	r3, r7, #8
 8014cb2:	4611      	mov	r1, r2
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ed f9dd 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d010      	beq.n	8014ce2 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x5a>
 8014cc0:	f107 0308 	add.w	r3, r7, #8
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7ed f9f8 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	3308      	adds	r3, #8
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f000 f974 	bl	8014fbc <_ZNK11ArduinoJson11JsonVariant2asIbEEKNS_9Internals8EnableIfIXsrNS2_6IsSameIT_bEE5valueES5_E4typeEv>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	bf14      	ite	ne
 8014cda:	2301      	movne	r3, #1
 8014cdc:	2300      	moveq	r3, #0
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	e007      	b.n	8014cf2 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x6a>
                       : Internals::JsonVariantDefault<TValue>::get();
 8014ce2:	f000 f97c 	bl	8014fde <_ZN11ArduinoJson9Internals18JsonVariantDefaultIbE3getEv>
 8014ce6:	4603      	mov	r3, r0
    return it != end() ? it->value.as<TValue>()
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	bf14      	ite	ne
 8014cec:	2301      	movne	r3, #1
 8014cee:	2300      	moveq	r3, #0
 8014cf0:	b2db      	uxtb	r3, r3
  }
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <_ZNK11ArduinoJson10JsonObject11containsKeyIKcEEbPT_>:
  bool containsKey(TString* key) const {
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b084      	sub	sp, #16
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
 8014d02:	6039      	str	r1, [r7, #0]
    return findKey<TString*>(key) != end();
 8014d04:	6839      	ldr	r1, [r7, #0]
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f000 f971 	bl	8014fee <_ZNK11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	60bb      	str	r3, [r7, #8]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7ed f9c2 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	60fb      	str	r3, [r7, #12]
 8014d1c:	f107 020c 	add.w	r2, r7, #12
 8014d20:	f107 0308 	add.w	r3, r7, #8
 8014d24:	4611      	mov	r1, r2
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7ed f9a4 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8014d2c:	4603      	mov	r3, r0
  }
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <_ZNK5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EE4sizeEv>:
size_t Array<T, MAX_SIZE>::size() const
 8014d36:	b480      	push	{r7}
 8014d38:	b083      	sub	sp, #12
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
  return size_;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr

08014d50 <_ZN5ArrayIN2ps15KeyValueCommandINS0_11SystemStateEEELj50EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  return values_[index];
 8014d5a:	683a      	ldr	r2, [r7, #0]
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	1a9b      	subs	r3, r3, r2
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	4413      	add	r3, r2
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr

08014d74 <_ZN2ps15KeyValueCommandINS_11SystemStateEE5valueB5cxx11Ev>:
        key_ = key;
    }


    template<typename T>
    string KeyValueCommand<T>::value()
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
    {
        return value_;
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	3318      	adds	r3, #24
 8014d82:	4619      	mov	r1, r3
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f009 fde9 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    }
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	3708      	adds	r7, #8
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <_ZN11ArduinoJson10JsonObject3setINS_9Internals19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES9_EEbRKT0_RKT_>:
  bool set(const TString& key, const TValue& value) {
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	60b9      	str	r1, [r7, #8]
 8014d9c:	607a      	str	r2, [r7, #4]
    return set_impl<const TString&, const TValue&>(key, value);
 8014d9e:	687a      	ldr	r2, [r7, #4]
 8014da0:	68b9      	ldr	r1, [r7, #8]
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f000 f938 	bl	8015018 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_>
 8014da8:	4603      	mov	r3, r0
  }
 8014daa:	4618      	mov	r0, r3
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
	...

08014db4 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_>:
        method_ = method;
    }


    template<typename T>
    ReturnStatus KeyValueCommand<T>::applyMethod(T *client, JsonObject &jsonMsg, JsonObject &jsonDat)
 8014db4:	b590      	push	{r4, r7, lr}
 8014db6:	b08d      	sub	sp, #52	; 0x34
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
 8014dc0:	603b      	str	r3, [r7, #0]
    {
        ReturnStatus status;
 8014dc2:	68f8      	ldr	r0, [r7, #12]
 8014dc4:	f7ec fafc 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (method_ != nullptr)
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d107      	bne.n	8014de0 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x2c>
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dd4:	f003 0301 	and.w	r3, r3, #1
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d101      	bne.n	8014de0 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x2c>
 8014ddc:	2301      	movs	r3, #1
 8014dde:	e000      	b.n	8014de2 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x2e>
 8014de0:	2300      	movs	r3, #0
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d02a      	beq.n	8014e3c <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x88>
        {
            status = ((*client).*(method_))(jsonMsg,jsonDat);
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dea:	105b      	asrs	r3, r3, #1
 8014dec:	461a      	mov	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	1899      	adds	r1, r3, r2
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00b      	beq.n	8014e16 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x62>
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e02:	105b      	asrs	r3, r3, #1
 8014e04:	461a      	mov	r2, r3
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4413      	add	r3, r2
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68ba      	ldr	r2, [r7, #8]
 8014e0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8014e10:	4413      	add	r3, r2
 8014e12:	681c      	ldr	r4, [r3, #0]
 8014e14:	e001      	b.n	8014e1a <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x66>
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8014e1a:	f107 0014 	add.w	r0, r7, #20
 8014e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e20:	683a      	ldr	r2, [r7, #0]
 8014e22:	47a0      	blx	r4
 8014e24:	f107 0314 	add.w	r3, r7, #20
 8014e28:	4619      	mov	r1, r3
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f7ed fd6e 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8014e30:	f107 0314 	add.w	r3, r7, #20
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7ed fd01 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        else
        {
            status.success = false;
            status.message = "KeyValueCommand: method is nullptr";
        }
        return status;
 8014e3a:	e008      	b.n	8014e4e <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0x9a>
            status.success = false;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	701a      	strb	r2, [r3, #0]
            status.message = "KeyValueCommand: method is nullptr";
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	3304      	adds	r3, #4
 8014e46:	4904      	ldr	r1, [pc, #16]	; (8014e58 <_ZN2ps15KeyValueCommandINS_11SystemStateEE11applyMethodEPS1_RN11ArduinoJson10JsonObjectES6_+0xa4>)
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f009 fce4 	bl	801e816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        return status;
 8014e4e:	bf00      	nop
    }
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	3734      	adds	r7, #52	; 0x34
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd90      	pop	{r4, r7, pc}
 8014e58:	08021ef8 	.word	0x08021ef8

08014e5c <_ZN5ArrayIN2ps6SampleELj1001EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 8014e5c:	b480      	push	{r7}
 8014e5e:	b083      	sub	sp, #12
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
  return values_[index];
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	4613      	mov	r3, r2
 8014e6a:	005b      	lsls	r3, r3, #1
 8014e6c:	4413      	add	r3, r2
 8014e6e:	00db      	lsls	r3, r3, #3
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	4413      	add	r3, r2
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	370c      	adds	r7, #12
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr

08014e80 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4fullEv>:
    bool CircularBuffer<T,MAX_SIZE>::full() const
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
        return (size() == MAX_SIZE);
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f7ff fd8d 	bl	80149a8 <_ZNK2ps14CircularBufferINS_6SampleELj1000EE4sizeEv>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e94:	bf0c      	ite	eq
 8014e96:	2301      	moveq	r3, #1
 8014e98:	2300      	movne	r3, #0
 8014e9a:	b2db      	uxtb	r3, r3
    }
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <_ZN2ps15KeyValueCommandINS_11SystemStateEEC1Ev>:
            KeyValueCommand() {};
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f009 fbc0 	bl	801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	3318      	adds	r3, #24
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f009 fbbb 	bl	801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <_ZN5ArrayIN2ps6SampleELj1001EE6assignIS1_EEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 8014ed4:	b4b0      	push	{r4, r5, r7}
 8014ed6:	b087      	sub	sp, #28
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	60b9      	str	r1, [r7, #8]
 8014ede:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	bf28      	it	cs
 8014eea:	4613      	movcs	r3, r2
 8014eec:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	f8c2 3dd8 	str.w	r3, [r2, #3544]	; 0xdd8
  for (size_t i=0; i<assign_size; ++i)
 8014efc:	2300      	movs	r3, #0
 8014efe:	617b      	str	r3, [r7, #20]
 8014f00:	e012      	b.n	8014f28 <_ZN5ArrayIN2ps6SampleELj1001EE6assignIS1_EEvjRKT_+0x54>
    values_[i] = value;
 8014f02:	68f9      	ldr	r1, [r7, #12]
 8014f04:	697a      	ldr	r2, [r7, #20]
 8014f06:	4613      	mov	r3, r2
 8014f08:	005b      	lsls	r3, r3, #1
 8014f0a:	4413      	add	r3, r2
 8014f0c:	00db      	lsls	r3, r3, #3
 8014f0e:	18ca      	adds	r2, r1, r3
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4614      	mov	r4, r2
 8014f14:	461d      	mov	r5, r3
 8014f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f1e:	e884 0003 	stmia.w	r4, {r0, r1}
  for (size_t i=0; i<assign_size; ++i)
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	3301      	adds	r3, #1
 8014f26:	617b      	str	r3, [r7, #20]
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d3e8      	bcc.n	8014f02 <_ZN5ArrayIN2ps6SampleELj1001EE6assignIS1_EEvjRKT_+0x2e>
}
 8014f30:	bf00      	nop
 8014f32:	bf00      	nop
 8014f34:	371c      	adds	r7, #28
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bcb0      	pop	{r4, r5, r7}
 8014f3a:	4770      	bx	lr

08014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
    return get_impl<const TString&, TValue>(key);
 8014f46:	6839      	ldr	r1, [r7, #0]
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f000 f8ce 	bl	80150ea <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 8014f4e:	4603      	mov	r3, r0
  }
 8014f50:	4618      	mov	r0, r3
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEbT_>:
  bool is_impl(TStringRef key) const {
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 8014f62:	6839      	ldr	r1, [r7, #0]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7ef fc1b 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.is<TValue>() : false;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7ed f893 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8014f76:	4603      	mov	r3, r0
 8014f78:	60fb      	str	r3, [r7, #12]
 8014f7a:	f107 020c 	add.w	r2, r7, #12
 8014f7e:	f107 0308 	add.w	r3, r7, #8
 8014f82:	4611      	mov	r1, r2
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7ed f875 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d010      	beq.n	8014fb2 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEbT_+0x5a>
 8014f90:	f107 0308 	add.w	r3, r7, #8
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7ed f890 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f000 f8d2 	bl	8015148 <_ZNK11ArduinoJson11JsonVariant2isIbEENS_9Internals8EnableIfIXsrNS2_6IsSameIT_bEE5valueEbE4typeEv>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	bf14      	ite	ne
 8014faa:	2301      	movne	r3, #1
 8014fac:	2300      	moveq	r3, #0
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	e000      	b.n	8014fb4 <_ZNK11ArduinoJson10JsonObject7is_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEbT_+0x5c>
 8014fb2:	2300      	movs	r3, #0
  }
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3710      	adds	r7, #16
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <_ZNK11ArduinoJson11JsonVariant2asIbEEKNS_9Internals8EnableIfIXsrNS2_6IsSameIT_bEE5valueES5_E4typeEv>:
  as() const {
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    return variantAsInteger<int>() != 0;
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f000 f8cb 	bl	8015160 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	bf14      	ite	ne
 8014fd0:	2301      	movne	r3, #1
 8014fd2:	2300      	moveq	r3, #0
 8014fd4:	b2db      	uxtb	r3, r3
  }
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <_ZN11ArduinoJson9Internals18JsonVariantDefaultIbE3getEv>:
  static T get() {
 8014fde:	b480      	push	{r7}
 8014fe0:	af00      	add	r7, sp, #0
    return T();
 8014fe2:	2300      	movs	r3, #0
  }
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr

08014fee <_ZNK11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>:
  const_iterator findKey(TStringRef key) const {
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
 8014ff6:	6039      	str	r1, [r7, #0]
    return const_cast<JsonObject*>(this)->findKey<TStringRef>(key);
 8014ff8:	6839      	ldr	r1, [r7, #0]
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7f7 fc47 	bl	800c88e <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 8015000:	4603      	mov	r3, r0
 8015002:	60fb      	str	r3, [r7, #12]
 8015004:	f107 030c 	add.w	r3, r7, #12
 8015008:	4618      	mov	r0, r3
 801500a:	f7ef fd8f 	bl	8004b2c <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEcvNS0_17ListConstIteratorIS2_EEEv>
 801500e:	4603      	mov	r3, r0
  }
 8015010:	4618      	mov	r0, r3
 8015012:	3710      	adds	r7, #16
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}

08015018 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_>:
  bool set_impl(TStringRef key, TValueRef value) {
 8015018:	b590      	push	{r4, r7, lr}
 801501a:	b089      	sub	sp, #36	; 0x24
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 8015024:	68b8      	ldr	r0, [r7, #8]
 8015026:	f7ef feab 	bl	8004d80 <_ZN11ArduinoJson9Internals15StdStringTraitsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7is_nullERKS7_>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d001      	beq.n	8015034 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0x1c>
 8015030:	2300      	movs	r3, #0
 8015032:	e056      	b.n	80150e2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0xca>
    iterator it = findKey<TStringRef>(key);
 8015034:	68b9      	ldr	r1, [r7, #8]
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f7ef fd3b 	bl	8004ab2 <_ZN11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
 801503c:	4603      	mov	r3, r0
 801503e:	613b      	str	r3, [r7, #16]
    if (it == end()) {
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4618      	mov	r0, r3
 8015044:	f7ef fec1 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8015048:	4603      	mov	r3, r0
 801504a:	617b      	str	r3, [r7, #20]
 801504c:	f107 0214 	add.w	r2, r7, #20
 8015050:	f107 0310 	add.w	r3, r7, #16
 8015054:	4611      	mov	r1, r2
 8015056:	4618      	mov	r0, r3
 8015058:	f7ef fea3 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d02f      	beq.n	80150c2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0xaa>
      it = Internals::List<JsonPair>::add();
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	4618      	mov	r0, r3
 8015066:	f7ef febf 	bl	8004de8 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
 801506a:	4603      	mov	r3, r0
 801506c:	613b      	str	r3, [r7, #16]
      if (it == end()) return false;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	4618      	mov	r0, r3
 8015072:	f7ef feaa 	bl	8004dca <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8015076:	4603      	mov	r3, r0
 8015078:	61bb      	str	r3, [r7, #24]
 801507a:	f107 0218 	add.w	r2, r7, #24
 801507e:	f107 0310 	add.w	r3, r7, #16
 8015082:	4611      	mov	r1, r2
 8015084:	4618      	mov	r0, r3
 8015086:	f7ef fe8c 	bl	8004da2 <_ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d001      	beq.n	8015094 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0x7c>
 8015090:	2300      	movs	r3, #0
 8015092:	e026      	b.n	80150e2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0xca>
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	681c      	ldr	r4, [r3, #0]
 8015098:	f107 0310 	add.w	r3, r7, #16
 801509c:	4618      	mov	r0, r3
 801509e:	f7ef fed5 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 80150a2:	4603      	mov	r3, r0
 80150a4:	68ba      	ldr	r2, [r7, #8]
 80150a6:	4619      	mov	r1, r3
 80150a8:	4620      	mov	r0, r4
 80150aa:	f7ef fedc 	bl	8004e66 <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveIPKcEEbPNS_10JsonBufferERT_S9_>
 80150ae:	4603      	mov	r3, r0
 80150b0:	77fb      	strb	r3, [r7, #31]
      if (!key_ok) return false;
 80150b2:	7ffb      	ldrb	r3, [r7, #31]
 80150b4:	f083 0301 	eor.w	r3, r3, #1
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d001      	beq.n	80150c2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0xaa>
 80150be:	2300      	movs	r3, #0
 80150c0:	e00f      	b.n	80150e2 <_ZN11ArduinoJson10JsonObject8set_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_9Internals19JsonObjectSubscriptIS9_EEEEbT_T0_+0xca>
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	681c      	ldr	r4, [r3, #0]
 80150c6:	f107 0310 	add.w	r3, r7, #16
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7ef febe 	bl	8004e4c <_ZN11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEptEv>
 80150d0:	4603      	mov	r3, r0
 80150d2:	3308      	adds	r3, #8
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	4619      	mov	r1, r3
 80150d8:	4620      	mov	r0, r4
 80150da:	f000 f879 	bl	80151d0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_SD_>
 80150de:	4603      	mov	r3, r0
 80150e0:	bf00      	nop
  }
 80150e2:	4618      	mov	r0, r3
 80150e4:	3724      	adds	r7, #36	; 0x24
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd90      	pop	{r4, r7, pc}

080150ea <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 80150ea:	b580      	push	{r7, lr}
 80150ec:	b084      	sub	sp, #16
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
 80150f2:	6039      	str	r1, [r7, #0]
    const_iterator it = findKey<TStringRef>(key);
 80150f4:	6839      	ldr	r1, [r7, #0]
 80150f6:	6878      	ldr	r0, [r7, #4]
 80150f8:	f7ef fb52 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 80150fc:	4603      	mov	r3, r0
 80150fe:	60bb      	str	r3, [r7, #8]
    return it != end() ? it->value.as<TValue>()
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	4618      	mov	r0, r3
 8015104:	f7ec ffca 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8015108:	4603      	mov	r3, r0
 801510a:	60fb      	str	r3, [r7, #12]
 801510c:	f107 020c 	add.w	r2, r7, #12
 8015110:	f107 0308 	add.w	r3, r7, #8
 8015114:	4611      	mov	r1, r2
 8015116:	4618      	mov	r0, r3
 8015118:	f7ec ffac 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00b      	beq.n	801513a <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x50>
 8015122:	f107 0308 	add.w	r3, r7, #8
 8015126:	4618      	mov	r0, r3
 8015128:	f7ec ffc7 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 801512c:	4603      	mov	r3, r0
 801512e:	3308      	adds	r3, #8
 8015130:	4618      	mov	r0, r3
 8015132:	f000 f871 	bl	8015218 <_ZNK11ArduinoJson11JsonVariant2asIPKcEENS_9Internals8EnableIfIXoosrNS4_6IsSameIT_S3_EE5valuesrNS6_IS7_PcEE5valueES3_E4typeEv>
 8015136:	4603      	mov	r3, r0
 8015138:	e002      	b.n	8015140 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
                       : Internals::JsonVariantDefault<TValue>::get();
 801513a:	f000 f879 	bl	8015230 <_ZN11ArduinoJson9Internals18JsonVariantDefaultIPKcE3getEv>
 801513e:	4603      	mov	r3, r0
  }
 8015140:	4618      	mov	r0, r3
 8015142:	3710      	adds	r7, #16
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <_ZNK11ArduinoJson11JsonVariant2isIbEENS_9Internals8EnableIfIXsrNS2_6IsSameIT_bEE5valueEbE4typeEv>:
  is() const {
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
    return variantIsBoolean();
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f7fb fb4b 	bl	80107ec <_ZNK11ArduinoJson11JsonVariant16variantIsBooleanEv>
 8015156:	4603      	mov	r3, r0
  }
 8015158:	4618      	mov	r0, r3
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v>:
inline T JsonVariant::variantAsInteger() const {
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  switch (_type) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	2b05      	cmp	r3, #5
 801516e:	d823      	bhi.n	80151b8 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x58>
 8015170:	a201      	add	r2, pc, #4	; (adr r2, 8015178 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x18>)
 8015172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015176:	bf00      	nop
 8015178:	08015191 	.word	0x08015191
 801517c:	080151ab 	.word	0x080151ab
 8015180:	080151ab 	.word	0x080151ab
 8015184:	08015195 	.word	0x08015195
 8015188:	08015195 	.word	0x08015195
 801518c:	0801519f 	.word	0x0801519f
      return 0;
 8015190:	2300      	movs	r3, #0
 8015192:	e019      	b.n	80151c8 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x68>
      return T(_content.asInteger);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801519a:	4613      	mov	r3, r2
 801519c:	e014      	b.n	80151c8 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x68>
      return T(~_content.asInteger + 1);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80151a4:	4613      	mov	r3, r2
 80151a6:	425b      	negs	r3, r3
 80151a8:	e00e      	b.n	80151c8 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x68>
      return parseInteger<T>(_content.asString);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	689b      	ldr	r3, [r3, #8]
 80151ae:	4618      	mov	r0, r3
 80151b0:	f000 f846 	bl	8015240 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc>
 80151b4:	4603      	mov	r3, r0
 80151b6:	e007      	b.n	80151c8 <_ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v+0x68>
      return T(_content.asFloat);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80151be:	4610      	mov	r0, r2
 80151c0:	4619      	mov	r1, r3
 80151c2:	f7eb fc87 	bl	8000ad4 <__aeabi_d2iz>
 80151c6:	4603      	mov	r3, r0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_SD_>:
  static bool save(JsonBuffer*, Destination& destination, Source source) {
 80151d0:	b590      	push	{r4, r7, lr}
 80151d2:	b08b      	sub	sp, #44	; 0x2c
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	60f8      	str	r0, [r7, #12]
 80151d8:	60b9      	str	r1, [r7, #8]
 80151da:	607a      	str	r2, [r7, #4]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	627b      	str	r3, [r7, #36]	; 0x24
    return impl()->template as<T>();
 80151e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151e2:	f7ef fb00 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 80151e6:	4603      	mov	r3, r0
 80151e8:	623b      	str	r3, [r7, #32]
    return _object.get<TValue>(_key);
 80151ea:	6a3b      	ldr	r3, [r7, #32]
 80151ec:	6819      	ldr	r1, [r3, #0]
 80151ee:	6a3b      	ldr	r3, [r7, #32]
 80151f0:	685a      	ldr	r2, [r3, #4]
 80151f2:	f107 0310 	add.w	r3, r7, #16
 80151f6:	4618      	mov	r0, r3
 80151f8:	f000 f883 	bl	8015302 <_ZNK11ArduinoJson10JsonObject3getINS_11JsonVariantENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 80151fc:	bf00      	nop
    return impl()->template as<T>();
 80151fe:	bf00      	nop
    destination = source;
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	461c      	mov	r4, r3
 8015204:	f107 0310 	add.w	r3, r7, #16
 8015208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801520a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return true;
 801520e:	2301      	movs	r3, #1
  }
 8015210:	4618      	mov	r0, r3
 8015212:	372c      	adds	r7, #44	; 0x2c
 8015214:	46bd      	mov	sp, r7
 8015216:	bd90      	pop	{r4, r7, pc}

08015218 <_ZNK11ArduinoJson11JsonVariant2asIPKcEENS_9Internals8EnableIfIXoosrNS4_6IsSameIT_S3_EE5valuesrNS6_IS7_PcEE5valueES3_E4typeEv>:
  as() const {
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
    return variantAsString();
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7fb fab9 	bl	8010798 <_ZNK11ArduinoJson11JsonVariant15variantAsStringEv>
 8015226:	4603      	mov	r3, r0
  }
 8015228:	4618      	mov	r0, r3
 801522a:	3708      	adds	r7, #8
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}

08015230 <_ZN11ArduinoJson9Internals18JsonVariantDefaultIPKcE3getEv>:
  static T get() {
 8015230:	b480      	push	{r7}
 8015232:	af00      	add	r7, sp, #0
    return T();
 8015234:	2300      	movs	r3, #0
  }
 8015236:	4618      	mov	r0, r3
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc>:
T parseInteger(const char *s) {
 8015240:	b580      	push	{r7, lr}
 8015242:	b084      	sub	sp, #16
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  if (!s) return 0;  // NULL
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d101      	bne.n	8015252 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x12>
 801524e:	2300      	movs	r3, #0
 8015250:	e038      	b.n	80152c4 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x84>
  if (*s == 't') return 1;  // "true"
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	2b74      	cmp	r3, #116	; 0x74
 8015258:	d101      	bne.n	801525e <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x1e>
 801525a:	2301      	movs	r3, #1
 801525c:	e032      	b.n	80152c4 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x84>
  T result = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	60fb      	str	r3, [r7, #12]
  bool negative_result = false;
 8015262:	2300      	movs	r3, #0
 8015264:	72fb      	strb	r3, [r7, #11]
  switch (*s) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	2b2b      	cmp	r3, #43	; 0x2b
 801526c:	d007      	beq.n	801527e <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x3e>
 801526e:	2b2d      	cmp	r3, #45	; 0x2d
 8015270:	d118      	bne.n	80152a4 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x64>
      negative_result = true;
 8015272:	2301      	movs	r3, #1
 8015274:	72fb      	strb	r3, [r7, #11]
      s++;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	3301      	adds	r3, #1
 801527a:	607b      	str	r3, [r7, #4]
      break;
 801527c:	e003      	b.n	8015286 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x46>
      s++;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	3301      	adds	r3, #1
 8015282:	607b      	str	r3, [r7, #4]
      break;
 8015284:	bf00      	nop
  while (isdigit(*s)) {
 8015286:	e00d      	b.n	80152a4 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x64>
    result = T(result * 10 + T(*s - '0'));
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	4613      	mov	r3, r2
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	4413      	add	r3, r2
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	461a      	mov	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	3b30      	subs	r3, #48	; 0x30
 801529a:	4413      	add	r3, r2
 801529c:	60fb      	str	r3, [r7, #12]
    s++;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	3301      	adds	r3, #1
 80152a2:	607b      	str	r3, [r7, #4]
  while (isdigit(*s)) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	781b      	ldrb	r3, [r3, #0]
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7ec f96a 	bl	8001582 <_ZN11ArduinoJson9Internals7isdigitEc>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1e9      	bne.n	8015288 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x48>
  return negative_result ? T(~result + 1) : result;
 80152b4:	7afb      	ldrb	r3, [r7, #11]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d002      	beq.n	80152c0 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x80>
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	425b      	negs	r3, r3
 80152be:	e000      	b.n	80152c2 <_ZN11ArduinoJson9Internals12parseIntegerIiEET_PKc+0x82>
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	bf00      	nop
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <_ZNK11ArduinoJson11JsonVariant2asIS0_EENS_9Internals8EnableIfIXsrNS2_6IsSameIT_S0_EE5valueES5_E4typeEv>:
  as() const {
 80152cc:	b490      	push	{r4, r7}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
    return *this;
 80152d6:	687a      	ldr	r2, [r7, #4]
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	4614      	mov	r4, r2
 80152dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80152de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	3708      	adds	r7, #8
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bc90      	pop	{r4, r7}
 80152ea:	4770      	bx	lr

080152ec <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_11JsonVariantEE3getEv>:
  static T get() {
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
    return T();
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ec f87f 	bl	80013f8 <_ZN11ArduinoJson11JsonVariantC1Ev>
  }
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <_ZNK11ArduinoJson10JsonObject3getINS_11JsonVariantENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>:
  typename Internals::JsonVariantAs<TValue>::type get(
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	60f8      	str	r0, [r7, #12]
 801530a:	60b9      	str	r1, [r7, #8]
 801530c:	607a      	str	r2, [r7, #4]
    return get_impl<const TString&, TValue>(key);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	4618      	mov	r0, r3
 8015316:	f000 f805 	bl	8015324 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_11JsonVariantEEENS_9Internals13JsonVariantAsIT0_E4typeET_>
 801531a:	bf00      	nop
  }
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_11JsonVariantEEENS_9Internals13JsonVariantAsIT0_E4typeET_>:
  typename Internals::JsonVariantAs<TValue>::type get_impl(
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
    const_iterator it = findKey<TStringRef>(key);
 8015330:	6879      	ldr	r1, [r7, #4]
 8015332:	68b8      	ldr	r0, [r7, #8]
 8015334:	f7ef fa34 	bl	80047a0 <_ZNK11ArduinoJson10JsonObject7findKeyIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_>
 8015338:	4603      	mov	r3, r0
 801533a:	613b      	str	r3, [r7, #16]
    return it != end() ? it->value.as<TValue>()
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	4618      	mov	r0, r3
 8015340:	f7ec feac 	bl	800209c <_ZNK11ArduinoJson9Internals4ListINS_8JsonPairEE3endEv>
 8015344:	4603      	mov	r3, r0
 8015346:	617b      	str	r3, [r7, #20]
 8015348:	f107 0214 	add.w	r2, r7, #20
 801534c:	f107 0310 	add.w	r3, r7, #16
 8015350:	4611      	mov	r1, r2
 8015352:	4618      	mov	r0, r3
 8015354:	f7ec fe8e 	bl	8002074 <_ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_>
 8015358:	4603      	mov	r3, r0
                       : Internals::JsonVariantDefault<TValue>::get();
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00d      	beq.n	801537a <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_11JsonVariantEEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x56>
    return it != end() ? it->value.as<TValue>()
 801535e:	f107 0310 	add.w	r3, r7, #16
 8015362:	4618      	mov	r0, r3
 8015364:	f7ec fea9 	bl	80020ba <_ZN11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEptEv>
 8015368:	4603      	mov	r3, r0
 801536a:	f103 0208 	add.w	r2, r3, #8
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	4611      	mov	r1, r2
 8015372:	4618      	mov	r0, r3
 8015374:	f7ff ffaa 	bl	80152cc <_ZNK11ArduinoJson11JsonVariant2asIS0_EENS_9Internals8EnableIfIXsrNS2_6IsSameIT_S0_EE5valueES5_E4typeEv>
                       : Internals::JsonVariantDefault<TValue>::get();
 8015378:	e003      	b.n	8015382 <_ZNK11ArduinoJson10JsonObject8get_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_11JsonVariantEEENS_9Internals13JsonVariantAsIT0_E4typeET_+0x5e>
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	4618      	mov	r0, r3
 801537e:	f7ff ffb5 	bl	80152ec <_ZN11ArduinoJson9Internals18JsonVariantDefaultINS_11JsonVariantEE3getEv>
 8015382:	bf00      	nop
  }
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	3718      	adds	r7, #24
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <_Z41__static_initialization_and_destruction_0ii>:

}
 801538c:	b5b0      	push	{r4, r5, r7, lr}
 801538e:	b08c      	sub	sp, #48	; 0x30
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2b01      	cmp	r3, #1
 801539a:	f040 80aa 	bne.w	80154f2 <_Z41__static_initialization_and_destruction_0ii+0x166>
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153a4:	4293      	cmp	r3, r2
 80153a6:	f040 80a4 	bne.w	80154f2 <_Z41__static_initialization_and_destruction_0ii+0x166>
    };
 80153aa:	4c61      	ldr	r4, [pc, #388]	; (8015530 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80153ac:	4625      	mov	r5, r4
 80153ae:	f107 030c 	add.w	r3, r7, #12
 80153b2:	4618      	mov	r0, r3
 80153b4:	f009 f85f 	bl	801e476 <_ZNSaIcEC1Ev>
 80153b8:	f107 030c 	add.w	r3, r7, #12
 80153bc:	461a      	mov	r2, r3
 80153be:	495d      	ldr	r1, [pc, #372]	; (8015534 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80153c0:	4628      	mov	r0, r5
 80153c2:	f009 faff 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80153c6:	f107 030c 	add.w	r3, r7, #12
 80153ca:	4618      	mov	r0, r3
 80153cc:	f009 f854 	bl	801e478 <_ZNSaIcED1Ev>
 80153d0:	3418      	adds	r4, #24
 80153d2:	f107 0310 	add.w	r3, r7, #16
 80153d6:	4618      	mov	r0, r3
 80153d8:	f009 f84d 	bl	801e476 <_ZNSaIcEC1Ev>
 80153dc:	f107 0310 	add.w	r3, r7, #16
 80153e0:	461a      	mov	r2, r3
 80153e2:	4955      	ldr	r1, [pc, #340]	; (8015538 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80153e4:	4620      	mov	r0, r4
 80153e6:	f009 faed 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80153ea:	f107 0310 	add.w	r3, r7, #16
 80153ee:	4618      	mov	r0, r3
 80153f0:	f009 f842 	bl	801e478 <_ZNSaIcED1Ev>
 80153f4:	3418      	adds	r4, #24
 80153f6:	f107 0314 	add.w	r3, r7, #20
 80153fa:	4618      	mov	r0, r3
 80153fc:	f009 f83b 	bl	801e476 <_ZNSaIcEC1Ev>
 8015400:	f107 0314 	add.w	r3, r7, #20
 8015404:	461a      	mov	r2, r3
 8015406:	494d      	ldr	r1, [pc, #308]	; (801553c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8015408:	4620      	mov	r0, r4
 801540a:	f009 fadb 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801540e:	f107 0314 	add.w	r3, r7, #20
 8015412:	4618      	mov	r0, r3
 8015414:	f009 f830 	bl	801e478 <_ZNSaIcED1Ev>
 8015418:	3418      	adds	r4, #24
 801541a:	f107 0318 	add.w	r3, r7, #24
 801541e:	4618      	mov	r0, r3
 8015420:	f009 f829 	bl	801e476 <_ZNSaIcEC1Ev>
 8015424:	f107 0318 	add.w	r3, r7, #24
 8015428:	461a      	mov	r2, r3
 801542a:	4945      	ldr	r1, [pc, #276]	; (8015540 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 801542c:	4620      	mov	r0, r4
 801542e:	f009 fac9 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015432:	f107 0318 	add.w	r3, r7, #24
 8015436:	4618      	mov	r0, r3
 8015438:	f009 f81e 	bl	801e478 <_ZNSaIcED1Ev>
    };
 801543c:	4c41      	ldr	r4, [pc, #260]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 801543e:	4625      	mov	r5, r4
 8015440:	f107 031c 	add.w	r3, r7, #28
 8015444:	4618      	mov	r0, r3
 8015446:	f009 f816 	bl	801e476 <_ZNSaIcEC1Ev>
 801544a:	f107 031c 	add.w	r3, r7, #28
 801544e:	461a      	mov	r2, r3
 8015450:	493d      	ldr	r1, [pc, #244]	; (8015548 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8015452:	4628      	mov	r0, r5
 8015454:	f009 fab6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015458:	f107 031c 	add.w	r3, r7, #28
 801545c:	4618      	mov	r0, r3
 801545e:	f009 f80b 	bl	801e478 <_ZNSaIcED1Ev>
 8015462:	3418      	adds	r4, #24
 8015464:	f107 0320 	add.w	r3, r7, #32
 8015468:	4618      	mov	r0, r3
 801546a:	f009 f804 	bl	801e476 <_ZNSaIcEC1Ev>
 801546e:	f107 0320 	add.w	r3, r7, #32
 8015472:	461a      	mov	r2, r3
 8015474:	4935      	ldr	r1, [pc, #212]	; (801554c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8015476:	4620      	mov	r0, r4
 8015478:	f009 faa4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801547c:	f107 0320 	add.w	r3, r7, #32
 8015480:	4618      	mov	r0, r3
 8015482:	f008 fff9 	bl	801e478 <_ZNSaIcED1Ev>
 8015486:	3418      	adds	r4, #24
 8015488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801548c:	4618      	mov	r0, r3
 801548e:	f008 fff2 	bl	801e476 <_ZNSaIcEC1Ev>
 8015492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015496:	461a      	mov	r2, r3
 8015498:	492d      	ldr	r1, [pc, #180]	; (8015550 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 801549a:	4620      	mov	r0, r4
 801549c:	f009 fa92 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80154a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154a4:	4618      	mov	r0, r3
 80154a6:	f008 ffe7 	bl	801e478 <_ZNSaIcED1Ev>
 80154aa:	3418      	adds	r4, #24
 80154ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80154b0:	4618      	mov	r0, r3
 80154b2:	f008 ffe0 	bl	801e476 <_ZNSaIcEC1Ev>
 80154b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80154ba:	461a      	mov	r2, r3
 80154bc:	4925      	ldr	r1, [pc, #148]	; (8015554 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80154be:	4620      	mov	r0, r4
 80154c0:	f009 fa80 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80154c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80154c8:	4618      	mov	r0, r3
 80154ca:	f008 ffd5 	bl	801e478 <_ZNSaIcED1Ev>
 80154ce:	3418      	adds	r4, #24
 80154d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154d4:	4618      	mov	r0, r3
 80154d6:	f008 ffce 	bl	801e476 <_ZNSaIcEC1Ev>
 80154da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154de:	461a      	mov	r2, r3
 80154e0:	491d      	ldr	r1, [pc, #116]	; (8015558 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80154e2:	4620      	mov	r0, r4
 80154e4:	f009 fa6e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80154e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154ec:	4618      	mov	r0, r3
 80154ee:	f008 ffc3 	bl	801e478 <_ZNSaIcED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d116      	bne.n	8015526 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154fe:	4293      	cmp	r3, r2
 8015500:	d111      	bne.n	8015526 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 8015502:	4c16      	ldr	r4, [pc, #88]	; (801555c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8015504:	4b0f      	ldr	r3, [pc, #60]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8015506:	429c      	cmp	r4, r3
 8015508:	d004      	beq.n	8015514 <_Z41__static_initialization_and_destruction_0ii+0x188>
 801550a:	3c18      	subs	r4, #24
 801550c:	4620      	mov	r0, r4
 801550e:	f009 f8b2 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015512:	e7f7      	b.n	8015504 <_Z41__static_initialization_and_destruction_0ii+0x178>
    const string VoltGainStringArray[NumVoltGain] =
 8015514:	4c12      	ldr	r4, [pc, #72]	; (8015560 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8015516:	4b06      	ldr	r3, [pc, #24]	; (8015530 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8015518:	429c      	cmp	r4, r3
 801551a:	d004      	beq.n	8015526 <_Z41__static_initialization_and_destruction_0ii+0x19a>
 801551c:	3c18      	subs	r4, #24
 801551e:	4620      	mov	r0, r4
 8015520:	f009 f8a9 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015524:	e7f7      	b.n	8015516 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8015526:	bf00      	nop
 8015528:	3730      	adds	r7, #48	; 0x30
 801552a:	46bd      	mov	sp, r7
 801552c:	bdb0      	pop	{r4, r5, r7, pc}
 801552e:	bf00      	nop
 8015530:	200099e0 	.word	0x200099e0
 8015534:	08021f1c 	.word	0x08021f1c
 8015538:	08021f28 	.word	0x08021f28
 801553c:	08021f34 	.word	0x08021f34
 8015540:	08021f40 	.word	0x08021f40
 8015544:	20009a40 	.word	0x20009a40
 8015548:	08021f4c 	.word	0x08021f4c
 801554c:	08021f5c 	.word	0x08021f5c
 8015550:	08021f6c 	.word	0x08021f6c
 8015554:	08021f7c 	.word	0x08021f7c
 8015558:	08021f8c 	.word	0x08021f8c
 801555c:	20009ab8 	.word	0x20009ab8
 8015560:	20009a40 	.word	0x20009a40

08015564 <_GLOBAL__sub_I__ZN2ps11SystemStateC2Ev>:
 8015564:	b580      	push	{r7, lr}
 8015566:	af00      	add	r7, sp, #0
 8015568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801556c:	2001      	movs	r0, #1
 801556e:	f7ff ff0d 	bl	801538c <_Z41__static_initialization_and_destruction_0ii>
 8015572:	bd80      	pop	{r7, pc}

08015574 <_GLOBAL__sub_D__ZN2ps11SystemStateC2Ev>:
 8015574:	b580      	push	{r7, lr}
 8015576:	af00      	add	r7, sp, #0
 8015578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801557c:	2000      	movs	r0, #0
 801557e:	f7ff ff05 	bl	801538c <_Z41__static_initialization_and_destruction_0ii>
 8015582:	bd80      	pop	{r7, pc}

08015584 <_ZN2ps11VoltammetryC1Ev>:
namespace ps
{

    const string Voltammetry::TestKey("test");

    Voltammetry::Voltammetry()
 8015584:	b590      	push	{r4, r7, lr}
 8015586:	b091      	sub	sp, #68	; 0x44
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	f7f1 fad8 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	3340      	adds	r3, #64	; 0x40
 8015598:	4618      	mov	r0, r3
 801559a:	f7f4 ff23 	bl	800a3e4 <_ZN2ps10CyclicTestC1Ev>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	33a0      	adds	r3, #160	; 0xa0
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7f9 fb28 	bl	800ebf8 <_ZN2ps12SinusoidTestC1Ev>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f2 fc76 	bl	8007ea0 <_ZN2ps12ConstantTestC1Ev>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7f9 fe86 	bl	800f2cc <_ZN2ps14SquareWaveTestC1Ev>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7f5 fea0 	bl	800b30c <_ZN2ps15LinearSweepTestC1Ev>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80155d2:	2105      	movs	r1, #5
 80155d4:	4618      	mov	r0, r3
 80155d6:	f000 fc57 	bl	8015e88 <_ZN2ps13MultiStepTestILj2EEC1Ej>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80155e0:	2105      	movs	r1, #5
 80155e2:	4618      	mov	r0, r3
 80155e4:	f000 fcae 	bl	8015f44 <_ZN2ps13MultiStepTestILj50EEC1Ej>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80155ee:	4618      	mov	r0, r3
 80155f0:	f000 fd08 	bl	8016004 <_ZN5ArrayIPN2ps8BaseTestELj20EEC1Ev>
    {
        chronoampTest.setNumStep(2);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80155fa:	2102      	movs	r1, #2
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7ed fd35 	bl	800306c <_ZN2ps13MultiStepTestILj2EE10setNumStepEj>
        chronoampTest.setName("chronoamp");
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f503 64df 	add.w	r4, r3, #1784	; 0x6f8
 8015608:	f107 0320 	add.w	r3, r7, #32
 801560c:	4618      	mov	r0, r3
 801560e:	f008 ff32 	bl	801e476 <_ZNSaIcEC1Ev>
 8015612:	f107 0220 	add.w	r2, r7, #32
 8015616:	f107 0308 	add.w	r3, r7, #8
 801561a:	4939      	ldr	r1, [pc, #228]	; (8015700 <_ZN2ps11VoltammetryC1Ev+0x17c>)
 801561c:	4618      	mov	r0, r3
 801561e:	f009 f9d1 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015622:	f107 0308 	add.w	r3, r7, #8
 8015626:	4619      	mov	r1, r3
 8015628:	4620      	mov	r0, r4
 801562a:	f7f1 fbcd 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801562e:	f107 0308 	add.w	r3, r7, #8
 8015632:	4618      	mov	r0, r3
 8015634:	f009 f81f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015638:	f107 0320 	add.w	r3, r7, #32
 801563c:	4618      	mov	r0, r3
 801563e:	f008 ff1b 	bl	801e478 <_ZNSaIcED1Ev>

        availableTests_.push_back(&cyclicTest);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	3340      	adds	r3, #64	; 0x40
 801564c:	627b      	str	r3, [r7, #36]	; 0x24
 801564e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015652:	4619      	mov	r1, r3
 8015654:	4610      	mov	r0, r2
 8015656:	f000 fce3 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&sinusoidTest);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	33a0      	adds	r3, #160	; 0xa0
 8015664:	62bb      	str	r3, [r7, #40]	; 0x28
 8015666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801566a:	4619      	mov	r1, r3
 801566c:	4610      	mov	r0, r2
 801566e:	f000 fcd7 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&constantTest);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 801567e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015684:	4619      	mov	r1, r3
 8015686:	4610      	mov	r0, r2
 8015688:	f000 fcca 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&squareWaveTest);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8015698:	633b      	str	r3, [r7, #48]	; 0x30
 801569a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801569e:	4619      	mov	r1, r3
 80156a0:	4610      	mov	r0, r2
 80156a2:	f000 fcbd 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&linearSweepTest);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 80156b2:	637b      	str	r3, [r7, #52]	; 0x34
 80156b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80156b8:	4619      	mov	r1, r3
 80156ba:	4610      	mov	r0, r2
 80156bc:	f000 fcb0 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&chronoampTest);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80156cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80156ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80156d2:	4619      	mov	r1, r3
 80156d4:	4610      	mov	r0, r2
 80156d6:	f000 fca3 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
        availableTests_.push_back(&multiStepTest);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 80156e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80156e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80156ec:	4619      	mov	r1, r3
 80156ee:	4610      	mov	r0, r2
 80156f0:	f000 fc96 	bl	8016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>
    }
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	4618      	mov	r0, r3
 80156f8:	3744      	adds	r7, #68	; 0x44
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd90      	pop	{r4, r7, pc}
 80156fe:	bf00      	nop
 8015700:	08021fb4 	.word	0x08021fb4

08015704 <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
            

    BaseTest *Voltammetry::getTest(string name)
    {
 8015704:	b590      	push	{r4, r7, lr}
 8015706:	b08b      	sub	sp, #44	; 0x2c
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
        BaseTest *testPtr = nullptr;
 801570e:	2300      	movs	r3, #0
 8015710:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i=0; i<availableTests_.size(); i++)
 8015712:	2300      	movs	r3, #0
 8015714:	623b      	str	r3, [r7, #32]
 8015716:	e034      	b.n	8015782 <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
        {
            string currName = availableTests_[i] -> getName();
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 801571e:	6a39      	ldr	r1, [r7, #32]
 8015720:	4618      	mov	r0, r3
 8015722:	f000 fca2 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015726:	4603      	mov	r3, r0
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	3238      	adds	r2, #56	; 0x38
 801572e:	6812      	ldr	r2, [r2, #0]
 8015730:	f107 0008 	add.w	r0, r7, #8
 8015734:	4619      	mov	r1, r3
 8015736:	4790      	blx	r2
            //currName.trim();
            if (name.compare(currName))
 8015738:	f107 0308 	add.w	r3, r7, #8
 801573c:	4619      	mov	r1, r3
 801573e:	6838      	ldr	r0, [r7, #0]
 8015740:	f009 f8d9 	bl	801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8015744:	4603      	mov	r3, r0
 8015746:	2b00      	cmp	r3, #0
 8015748:	bf14      	ite	ne
 801574a:	2301      	movne	r3, #1
 801574c:	2300      	moveq	r3, #0
 801574e:	b2db      	uxtb	r3, r3
 8015750:	2b00      	cmp	r3, #0
 8015752:	d00b      	beq.n	801576c <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
            {
                testPtr = availableTests_[i];
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 801575a:	6a39      	ldr	r1, [r7, #32]
 801575c:	4618      	mov	r0, r3
 801575e:	f000 fc84 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015762:	4603      	mov	r3, r0
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8015768:	2400      	movs	r4, #0
 801576a:	e000      	b.n	801576e <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
            }
        }
 801576c:	2401      	movs	r4, #1
 801576e:	f107 0308 	add.w	r3, r7, #8
 8015772:	4618      	mov	r0, r3
 8015774:	f008 ff7f 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015778:	2c01      	cmp	r4, #1
 801577a:	d111      	bne.n	80157a0 <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
        for (size_t i=0; i<availableTests_.size(); i++)
 801577c:	6a3b      	ldr	r3, [r7, #32]
 801577e:	3301      	adds	r3, #1
 8015780:	623b      	str	r3, [r7, #32]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015788:	4618      	mov	r0, r3
 801578a:	f000 fc62 	bl	8016052 <_ZNK5ArrayIPN2ps8BaseTestELj20EE4sizeEv>
 801578e:	4602      	mov	r2, r0
 8015790:	6a3b      	ldr	r3, [r7, #32]
 8015792:	4293      	cmp	r3, r2
 8015794:	bf34      	ite	cc
 8015796:	2301      	movcc	r3, #1
 8015798:	2300      	movcs	r3, #0
 801579a:	b2db      	uxtb	r3, r3
 801579c:	2b00      	cmp	r3, #0
 801579e:	d1bb      	bne.n	8015718 <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14>
        return testPtr;
 80157a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80157a2:	4618      	mov	r0, r3
 80157a4:	372c      	adds	r7, #44	; 0x2c
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd90      	pop	{r4, r7, pc}
	...

080157ac <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE>:

    
    ReturnStatus Voltammetry::getTest(JsonObject &jsonMsg, JsonObject &jsonDat, BaseTest* &testPtr)
    {
 80157ac:	b590      	push	{r4, r7, lr}
 80157ae:	b0ab      	sub	sp, #172	; 0xac
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 80157ba:	68f8      	ldr	r0, [r7, #12]
 80157bc:	f7eb fe00 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        if (jsonMsg.containsKey(TestKey))
 80157c0:	495d      	ldr	r1, [pc, #372]	; (8015938 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x18c>)
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f7ee fead 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 80157c8:	4603      	mov	r3, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d07f      	beq.n	80158ce <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x122>
        {
            string testName = string((const char *)(jsonMsg[TestKey]));
 80157ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80157d2:	4a59      	ldr	r2, [pc, #356]	; (8015938 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x18c>)
 80157d4:	6879      	ldr	r1, [r7, #4]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7ee fed9 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
    return impl()->template as<T>();
 80157dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7ef f800 	bl	80047e6 <_ZNK11ArduinoJson9Internals16JsonVariantCastsINS0_19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4implEv>
 80157e6:	4603      	mov	r3, r0
 80157e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return _object.get<TValue>(_key);
 80157ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80157f0:	681a      	ldr	r2, [r3, #0]
 80157f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	4619      	mov	r1, r3
 80157fa:	4610      	mov	r0, r2
 80157fc:	f7ff fb9e 	bl	8014f3c <_ZNK11ArduinoJson10JsonObject3getIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals13JsonVariantAsIT_E4typeERKT0_>
 8015800:	4604      	mov	r4, r0
 8015802:	bf00      	nop
    return impl()->template as<T>();
 8015804:	bf00      	nop
 8015806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801580a:	4618      	mov	r0, r3
 801580c:	f008 fe33 	bl	801e476 <_ZNSaIcEC1Ev>
 8015810:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015814:	f107 0310 	add.w	r3, r7, #16
 8015818:	4621      	mov	r1, r4
 801581a:	4618      	mov	r0, r3
 801581c:	f009 f8d2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015824:	4618      	mov	r0, r3
 8015826:	f008 fe27 	bl	801e478 <_ZNSaIcED1Ev>
            jsonDat.set(TestKey,jsonMsg[TestKey]);
 801582a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801582e:	4a42      	ldr	r2, [pc, #264]	; (8015938 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x18c>)
 8015830:	6879      	ldr	r1, [r7, #4]
 8015832:	4618      	mov	r0, r3
 8015834:	f7ee feab 	bl	800458e <_ZN11ArduinoJson10JsonObjectixINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_9Internals19JsonObjectSubscriptIRKT_EESC_>
 8015838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801583c:	461a      	mov	r2, r3
 801583e:	493e      	ldr	r1, [pc, #248]	; (8015938 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x18c>)
 8015840:	6838      	ldr	r0, [r7, #0]
 8015842:	f7ff faa6 	bl	8014d92 <_ZN11ArduinoJson10JsonObject3setINS_9Internals19JsonObjectSubscriptIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES9_EEbRKT0_RKT_>
            testPtr = getTest(testName);
 8015846:	f107 0210 	add.w	r2, r7, #16
 801584a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801584e:	4611      	mov	r1, r2
 8015850:	4618      	mov	r0, r3
 8015852:	f009 f883 	bl	801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8015856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801585a:	4619      	mov	r1, r3
 801585c:	68b8      	ldr	r0, [r7, #8]
 801585e:	f7ff ff51 	bl	8015704 <_ZN2ps11Voltammetry7getTestENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8015862:	4602      	mov	r2, r0
 8015864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015868:	601a      	str	r2, [r3, #0]
 801586a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801586e:	4618      	mov	r0, r3
 8015870:	f008 ff01 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            if (testPtr == nullptr)
 8015874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d121      	bne.n	80158c2 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x116>
            {
                status.success = false;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2200      	movs	r2, #0
 8015882:	701a      	strb	r2, [r3, #0]
                status.message = string("test not found");
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	1d1c      	adds	r4, r3, #4
 8015888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801588c:	4618      	mov	r0, r3
 801588e:	f008 fdf2 	bl	801e476 <_ZNSaIcEC1Ev>
 8015892:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8015896:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801589a:	4928      	ldr	r1, [pc, #160]	; (801593c <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x190>)
 801589c:	4618      	mov	r0, r3
 801589e:	f009 f891 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80158a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80158a6:	4619      	mov	r1, r3
 80158a8:	4620      	mov	r0, r4
 80158aa:	f008 fef0 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80158ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80158b2:	4618      	mov	r0, r3
 80158b4:	f008 fedf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80158b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80158bc:	4618      	mov	r0, r3
 80158be:	f008 fddb 	bl	801e478 <_ZNSaIcED1Ev>
            }
        }
 80158c2:	f107 0310 	add.w	r3, r7, #16
 80158c6:	4618      	mov	r0, r3
 80158c8:	f008 fed5 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        else
        {
            status.success = false;
            status.message = string("json does not contain key: ") + TestKey;
        }
        return status;
 80158cc:	e02e      	b.n	801592c <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x180>
            status.success = false;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2200      	movs	r2, #0
 80158d2:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + TestKey;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	1d1c      	adds	r4, r3, #4
 80158d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80158dc:	4618      	mov	r0, r3
 80158de:	f008 fdca 	bl	801e476 <_ZNSaIcEC1Ev>
 80158e2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80158e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80158ea:	4915      	ldr	r1, [pc, #84]	; (8015940 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x194>)
 80158ec:	4618      	mov	r0, r3
 80158ee:	f009 f869 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80158f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80158f6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80158fa:	4a0f      	ldr	r2, [pc, #60]	; (8015938 <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE+0x18c>)
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f0 fe88 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8015902:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015906:	4619      	mov	r1, r3
 8015908:	4620      	mov	r0, r4
 801590a:	f008 fec0 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 801590e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015912:	4618      	mov	r0, r3
 8015914:	f008 feaf 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015918:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801591c:	4618      	mov	r0, r3
 801591e:	f008 feaa 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015926:	4618      	mov	r0, r3
 8015928:	f008 fda6 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 801592c:	bf00      	nop
    }
 801592e:	68f8      	ldr	r0, [r7, #12]
 8015930:	37ac      	adds	r7, #172	; 0xac
 8015932:	46bd      	mov	sp, r7
 8015934:	bd90      	pop	{r4, r7, pc}
 8015936:	bf00      	nop
 8015938:	20009b90 	.word	0x20009b90
 801593c:	08021fc0 	.word	0x08021fc0
 8015940:	08021fd0 	.word	0x08021fd0

08015944 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus Voltammetry::getParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8015944:	b590      	push	{r4, r7, lr}
 8015946:	b09d      	sub	sp, #116	; 0x74
 8015948:	af02      	add	r7, sp, #8
 801594a:	60f8      	str	r0, [r7, #12]
 801594c:	60b9      	str	r1, [r7, #8]
 801594e:	607a      	str	r2, [r7, #4]
 8015950:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8015952:	68f8      	ldr	r0, [r7, #12]
 8015954:	f7eb fd34 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>

        if (jsonMsg.containsKey(TestKey))
 8015958:	4930      	ldr	r1, [pc, #192]	; (8015a1c <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xd8>)
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f7ee fde1 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8015960:	4603      	mov	r3, r0
 8015962:	2b00      	cmp	r3, #0
 8015964:	d026      	beq.n	80159b4 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0x70>
        {
            BaseTest *testPtr = nullptr;
 8015966:	2300      	movs	r3, #0
 8015968:	617b      	str	r3, [r7, #20]
            status = getTest(jsonMsg,jsonDat,testPtr);
 801596a:	f107 0018 	add.w	r0, r7, #24
 801596e:	f107 0314 	add.w	r3, r7, #20
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	687a      	ldr	r2, [r7, #4]
 8015978:	68b9      	ldr	r1, [r7, #8]
 801597a:	f7ff ff17 	bl	80157ac <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE>
 801597e:	f107 0318 	add.w	r3, r7, #24
 8015982:	4619      	mov	r1, r3
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f7ec ffc1 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 801598a:	f107 0318 	add.w	r3, r7, #24
 801598e:	4618      	mov	r0, r3
 8015990:	f7ec ff54 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
            if (status.success && (testPtr != nullptr))
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d03a      	beq.n	8015a12 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xce>
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d037      	beq.n	8015a12 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xce>
            {
                testPtr -> getParam(jsonDat);
 80159a2:	697a      	ldr	r2, [r7, #20]
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	3348      	adds	r3, #72	; 0x48
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	4610      	mov	r0, r2
 80159b0:	4798      	blx	r3
        else
        {
            status.success = false;
            status.message = string("json does not contain key: ") + TestKey;
        }
        return status;
 80159b2:	e02e      	b.n	8015a12 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xce>
            status.success = false;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2200      	movs	r2, #0
 80159b8:	701a      	strb	r2, [r3, #0]
            status.message = string("json does not contain key: ") + TestKey;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	1d1c      	adds	r4, r3, #4
 80159be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80159c2:	4618      	mov	r0, r3
 80159c4:	f008 fd57 	bl	801e476 <_ZNSaIcEC1Ev>
 80159c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80159cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80159d0:	4913      	ldr	r1, [pc, #76]	; (8015a20 <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xdc>)
 80159d2:	4618      	mov	r0, r3
 80159d4:	f008 fff6 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80159d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159dc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80159e0:	4a0e      	ldr	r2, [pc, #56]	; (8015a1c <_ZN2ps11Voltammetry8getParamERN11ArduinoJson10JsonObjectES3_+0xd8>)
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f0 fe15 	bl	8006612 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80159e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159ec:	4619      	mov	r1, r3
 80159ee:	4620      	mov	r0, r4
 80159f0:	f008 fe4d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80159f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159f8:	4618      	mov	r0, r3
 80159fa:	f008 fe3c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015a02:	4618      	mov	r0, r3
 8015a04:	f008 fe37 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015a08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f008 fd33 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 8015a12:	bf00      	nop
    }
 8015a14:	68f8      	ldr	r0, [r7, #12]
 8015a16:	376c      	adds	r7, #108	; 0x6c
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd90      	pop	{r4, r7, pc}
 8015a1c:	20009b90 	.word	0x20009b90
 8015a20:	08021fd0 	.word	0x08021fd0

08015a24 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_>:
    
    
    ReturnStatus Voltammetry::setParam(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8015a24:	b590      	push	{r4, r7, lr}
 8015a26:	b0ab      	sub	sp, #172	; 0xac
 8015a28:	af02      	add	r7, sp, #8
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
 8015a30:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7eb fcc4 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>

        if (jsonMsg.containsKey(TestKey))
 8015a38:	4949      	ldr	r1, [pc, #292]	; (8015b60 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x13c>)
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7ee fd71 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d057      	beq.n	8015af6 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0xd2>
        {
            BaseTest *testPtr = nullptr;
 8015a46:	2300      	movs	r3, #0
 8015a48:	617b      	str	r3, [r7, #20]
            status = getTest(jsonMsg,jsonDat,testPtr);
 8015a4a:	f107 0018 	add.w	r0, r7, #24
 8015a4e:	f107 0314 	add.w	r3, r7, #20
 8015a52:	9300      	str	r3, [sp, #0]
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	68b9      	ldr	r1, [r7, #8]
 8015a5a:	f7ff fea7 	bl	80157ac <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE>
 8015a5e:	f107 0318 	add.w	r3, r7, #24
 8015a62:	4619      	mov	r1, r3
 8015a64:	68f8      	ldr	r0, [r7, #12]
 8015a66:	f7ec ff51 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8015a6a:	f107 0318 	add.w	r3, r7, #24
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7ec fee4 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
            if (status.success && (testPtr != nullptr))
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d019      	beq.n	8015ab0 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x8c>
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d016      	beq.n	8015ab0 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x8c>
            {
                status = testPtr -> setParam(jsonMsg,jsonDat);
 8015a82:	6979      	ldr	r1, [r7, #20]
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	334c      	adds	r3, #76	; 0x4c
 8015a8a:	681c      	ldr	r4, [r3, #0]
 8015a8c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	47a0      	blx	r4
 8015a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f7ec ff35 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8015aa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7ec fec8 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
 8015aac:	bf00      	nop
        else
        {
            status.success = false;
            status.message = TestKey + string(" key not found");
        }
        return status;
 8015aae:	e051      	b.n	8015b54 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x130>
                status.success = false;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	701a      	strb	r2, [r3, #0]
                status.message = string("test not found");
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	1d1c      	adds	r4, r3, #4
 8015aba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f008 fcd9 	bl	801e476 <_ZNSaIcEC1Ev>
 8015ac4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015ac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015acc:	4925      	ldr	r1, [pc, #148]	; (8015b64 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x140>)
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f008 ff78 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015ad8:	4619      	mov	r1, r3
 8015ada:	4620      	mov	r0, r4
 8015adc:	f008 fdd7 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8015ae0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f008 fdc6 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015aee:	4618      	mov	r0, r3
 8015af0:	f008 fcc2 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 8015af4:	e02e      	b.n	8015b54 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x130>
            status.success = false;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2200      	movs	r2, #0
 8015afa:	701a      	strb	r2, [r3, #0]
            status.message = TestKey + string(" key not found");
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	1d1c      	adds	r4, r3, #4
 8015b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015b04:	4618      	mov	r0, r3
 8015b06:	f008 fcb6 	bl	801e476 <_ZNSaIcEC1Ev>
 8015b0a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8015b0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015b12:	4915      	ldr	r1, [pc, #84]	; (8015b68 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x144>)
 8015b14:	4618      	mov	r0, r3
 8015b16:	f008 ff55 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015b1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b1e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8015b22:	490f      	ldr	r1, [pc, #60]	; (8015b60 <_ZN2ps11Voltammetry8setParamERN11ArduinoJson10JsonObjectES3_+0x13c>)
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7ee fd1a 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8015b2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b2e:	4619      	mov	r1, r3
 8015b30:	4620      	mov	r0, r4
 8015b32:	f008 fdac 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8015b36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f008 fd9b 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015b40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015b44:	4618      	mov	r0, r3
 8015b46:	f008 fd96 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015b4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f008 fc92 	bl	801e478 <_ZNSaIcED1Ev>
        return status;
 8015b54:	bf00      	nop
    } 
 8015b56:	68f8      	ldr	r0, [r7, #12]
 8015b58:	37a4      	adds	r7, #164	; 0xa4
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd90      	pop	{r4, r7, pc}
 8015b5e:	bf00      	nop
 8015b60:	20009b90 	.word	0x20009b90
 8015b64:	08021fc0 	.word	0x08021fc0
 8015b68:	08021fec 	.word	0x08021fec

08015b6c <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_>:
    
    
    ReturnStatus Voltammetry::getTestDoneTime(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8015b6c:	b590      	push	{r4, r7, lr}
 8015b6e:	b0ad      	sub	sp, #180	; 0xb4
 8015b70:	af02      	add	r7, sp, #8
 8015b72:	60f8      	str	r0, [r7, #12]
 8015b74:	60b9      	str	r1, [r7, #8]
 8015b76:	607a      	str	r2, [r7, #4]
 8015b78:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f7eb fc20 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>

        if (!jsonMsg.containsKey(TestKey))
 8015b80:	4956      	ldr	r1, [pc, #344]	; (8015cdc <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x170>)
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7ee fccd 	bl	8004522 <_ZNK11ArduinoJson10JsonObject11containsKeyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	f083 0301 	eor.w	r3, r3, #1
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d02f      	beq.n	8015bf4 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x88>
        {
            status.success = false;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2200      	movs	r2, #0
 8015b98:	701a      	strb	r2, [r3, #0]
            status.message = TestKey + string(" key not found");
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	1d1c      	adds	r4, r3, #4
 8015b9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f008 fc67 	bl	801e476 <_ZNSaIcEC1Ev>
 8015ba8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015bb0:	494b      	ldr	r1, [pc, #300]	; (8015ce0 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x174>)
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f008 ff06 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015bbc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015bc0:	4946      	ldr	r1, [pc, #280]	; (8015cdc <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x170>)
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ee fccb 	bl	800455e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_>
 8015bc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015bcc:	4619      	mov	r1, r3
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f008 fd5d 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8015bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f008 fd4c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015bde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015be2:	4618      	mov	r0, r3
 8015be4:	f008 fd47 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015be8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015bec:	4618      	mov	r0, r3
 8015bee:	f008 fc43 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8015bf2:	e06f      	b.n	8015cd4 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x168>
        }

        BaseTest *testPtr = nullptr;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	633b      	str	r3, [r7, #48]	; 0x30
        status = getTest(jsonMsg,jsonDat,testPtr);
 8015bf8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8015bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015c00:	9300      	str	r3, [sp, #0]
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	68b9      	ldr	r1, [r7, #8]
 8015c08:	f7ff fdd0 	bl	80157ac <_ZN2ps11Voltammetry7getTestERN11ArduinoJson10JsonObjectES3_RPNS_8BaseTestE>
 8015c0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015c10:	4619      	mov	r1, r3
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7ec fe7a 	bl	800290c <_ZN2ps12ReturnStatusaSEOS0_>
 8015c18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7ec fe0d 	bl	800283c <_ZN2ps12ReturnStatusD1Ev>
        if ((!status.success) || (testPtr == nullptr))
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	f083 0301 	eor.w	r3, r3, #1
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d102      	bne.n	8015c36 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0xca>
 8015c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d122      	bne.n	8015c7c <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x110>
        {
            status.success = false;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	701a      	strb	r2, [r3, #0]
            status.message = string("test not found");
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	1d1c      	adds	r4, r3, #4
 8015c40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015c44:	4618      	mov	r0, r3
 8015c46:	f008 fc16 	bl	801e476 <_ZNSaIcEC1Ev>
 8015c4a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8015c4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015c52:	4924      	ldr	r1, [pc, #144]	; (8015ce4 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x178>)
 8015c54:	4618      	mov	r0, r3
 8015c56:	f008 feb5 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015c5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015c5e:	4619      	mov	r1, r3
 8015c60:	4620      	mov	r0, r4
 8015c62:	f008 fd14 	bl	801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8015c66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f008 fd03 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015c74:	4618      	mov	r0, r3
 8015c76:	f008 fbff 	bl	801e478 <_ZNSaIcED1Ev>
            return status;
 8015c7a:	e02b      	b.n	8015cd4 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x168>
        }

        string testName = testPtr -> getName();
 8015c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3338      	adds	r3, #56	; 0x38
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f107 0218 	add.w	r2, r7, #24
 8015c8a:	4610      	mov	r0, r2
 8015c8c:	4798      	blx	r3
        uint64_t doneTimeUs = testPtr -> getDoneTime();
 8015c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	3304      	adds	r3, #4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	4610      	mov	r0, r2
 8015c9a:	4798      	blx	r3
 8015c9c:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
        uint32_t doneTimeMs = convertUsToMs(doneTimeUs);
 8015ca0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8015ca4:	f7eb fdb9 	bl	800181a <_ZN2ps13convertUsToMsEy>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	617b      	str	r3, [r7, #20]

        jsonDat.set(TestKey, testName);
 8015cac:	f107 0318 	add.w	r3, r7, #24
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	490a      	ldr	r1, [pc, #40]	; (8015cdc <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x170>)
 8015cb4:	6838      	ldr	r0, [r7, #0]
 8015cb6:	f7f7 fcc5 	bl	800d644 <_ZN11ArduinoJson10JsonObject3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEbRKT0_RKT_>
        jsonDat.set(TestDoneTimeKey, doneTimeMs);
 8015cba:	f107 0314 	add.w	r3, r7, #20
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	4909      	ldr	r1, [pc, #36]	; (8015ce8 <_ZN2ps11Voltammetry15getTestDoneTimeERN11ArduinoJson10JsonObjectES3_+0x17c>)
 8015cc2:	6838      	ldr	r0, [r7, #0]
 8015cc4:	f7f1 fbb1 	bl	800742a <_ZN11ArduinoJson10JsonObject3setImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT0_RKT_>

        return status;
 8015cc8:	bf00      	nop
    }
 8015cca:	f107 0318 	add.w	r3, r7, #24
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f008 fcd1 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	37ac      	adds	r7, #172	; 0xac
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd90      	pop	{r4, r7, pc}
 8015cdc:	20009b90 	.word	0x20009b90
 8015ce0:	08021fec 	.word	0x08021fec
 8015ce4:	08021fc0 	.word	0x08021fc0
 8015ce8:	20008624 	.word	0x20008624

08015cec <_ZN2ps11Voltammetry12getTestNamesERN11ArduinoJson10JsonObjectES3_>:

    ReturnStatus Voltammetry::getTestNames(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b08c      	sub	sp, #48	; 0x30
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	607a      	str	r2, [r7, #4]
 8015cf8:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8015cfa:	68f8      	ldr	r0, [r7, #12]
 8015cfc:	f7eb fb60 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonArray &jsonNameArray = jsonDat.createNestedArray(TestNameArrayKey);
 8015d00:	491c      	ldr	r1, [pc, #112]	; (8015d74 <_ZN2ps11Voltammetry12getTestNamesERN11ArduinoJson10JsonObjectES3_+0x88>)
 8015d02:	6838      	ldr	r0, [r7, #0]
 8015d04:	f7ed fa74 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 8015d08:	62b8      	str	r0, [r7, #40]	; 0x28
        for (size_t i=0; i<availableTests_.size(); i++)
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d0e:	e01d      	b.n	8015d4c <_ZN2ps11Voltammetry12getTestNamesERN11ArduinoJson10JsonObjectES3_+0x60>
        {
            jsonNameArray.add(availableTests_[i] -> getName());
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f000 f9a6 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	3238      	adds	r2, #56	; 0x38
 8015d26:	6812      	ldr	r2, [r2, #0]
 8015d28:	f107 0010 	add.w	r0, r7, #16
 8015d2c:	4619      	mov	r1, r3
 8015d2e:	4790      	blx	r2
 8015d30:	f107 0310 	add.w	r3, r7, #16
 8015d34:	4619      	mov	r1, r3
 8015d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d38:	f000 f9a6 	bl	8016088 <_ZN11ArduinoJson9JsonArray3addINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8015d3c:	f107 0310 	add.w	r3, r7, #16
 8015d40:	4618      	mov	r0, r3
 8015d42:	f008 fc98 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        for (size_t i=0; i<availableTests_.size(); i++)
 8015d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d48:	3301      	adds	r3, #1
 8015d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015d52:	4618      	mov	r0, r3
 8015d54:	f000 f97d 	bl	8016052 <_ZNK5ArrayIPN2ps8BaseTestELj20EE4sizeEv>
 8015d58:	4602      	mov	r2, r0
 8015d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	bf34      	ite	cc
 8015d60:	2301      	movcc	r3, #1
 8015d62:	2300      	movcs	r3, #0
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d1d2      	bne.n	8015d10 <_ZN2ps11Voltammetry12getTestNamesERN11ArduinoJson10JsonObjectES3_+0x24>
        }
        return status;
 8015d6a:	bf00      	nop
    }
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	3730      	adds	r7, #48	; 0x30
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	20008654 	.word	0x20008654

08015d78 <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_>:


    ReturnStatus Voltammetry::getMuxTestNames(JsonObject &jsonMsg, JsonObject &jsonDat)
    {
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b08c      	sub	sp, #48	; 0x30
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	607a      	str	r2, [r7, #4]
 8015d84:	603b      	str	r3, [r7, #0]
        ReturnStatus status;
 8015d86:	68f8      	ldr	r0, [r7, #12]
 8015d88:	f7eb fb1a 	bl	80013c0 <_ZN2ps12ReturnStatusC1Ev>
        JsonArray &jsonNameArray = jsonDat.createNestedArray(TestNameArrayKey);
 8015d8c:	4925      	ldr	r1, [pc, #148]	; (8015e24 <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_+0xac>)
 8015d8e:	6838      	ldr	r0, [r7, #0]
 8015d90:	f7ed fa2e 	bl	80031f0 <_ZN11ArduinoJson10JsonObject17createNestedArrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS_9JsonArrayERKT_>
 8015d94:	62b8      	str	r0, [r7, #40]	; 0x28
        for (size_t i=0; i<availableTests_.size(); i++)
 8015d96:	2300      	movs	r3, #0
 8015d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d9a:	e02e      	b.n	8015dfa <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_+0x82>
        {
            if (availableTests_[i] -> isMuxCompatible())
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015da4:	4618      	mov	r0, r3
 8015da6:	f000 f960 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015daa:	4603      	mov	r3, r0
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	3250      	adds	r2, #80	; 0x50
 8015db2:	6812      	ldr	r2, [r2, #0]
 8015db4:	4618      	mov	r0, r3
 8015db6:	4790      	blx	r2
 8015db8:	4603      	mov	r3, r0
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d01a      	beq.n	8015df4 <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_+0x7c>
            {
                jsonNameArray.add(availableTests_[i] -> getName());
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f000 f94f 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	3238      	adds	r2, #56	; 0x38
 8015dd4:	6812      	ldr	r2, [r2, #0]
 8015dd6:	f107 0010 	add.w	r0, r7, #16
 8015dda:	4619      	mov	r1, r3
 8015ddc:	4790      	blx	r2
 8015dde:	f107 0310 	add.w	r3, r7, #16
 8015de2:	4619      	mov	r1, r3
 8015de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015de6:	f000 f94f 	bl	8016088 <_ZN11ArduinoJson9JsonArray3addINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>
 8015dea:	f107 0310 	add.w	r3, r7, #16
 8015dee:	4618      	mov	r0, r3
 8015df0:	f008 fc41 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        for (size_t i=0; i<availableTests_.size(); i++)
 8015df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df6:	3301      	adds	r3, #1
 8015df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015e00:	4618      	mov	r0, r3
 8015e02:	f000 f926 	bl	8016052 <_ZNK5ArrayIPN2ps8BaseTestELj20EE4sizeEv>
 8015e06:	4602      	mov	r2, r0
 8015e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	bf34      	ite	cc
 8015e0e:	2301      	movcc	r3, #1
 8015e10:	2300      	movcs	r3, #0
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1c1      	bne.n	8015d9c <_ZN2ps11Voltammetry15getMuxTestNamesERN11ArduinoJson10JsonObjectES3_+0x24>
            }
        }
        return status;
 8015e18:	bf00      	nop
    }
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	3730      	adds	r7, #48	; 0x30
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	20008654 	.word	0x20008654

08015e28 <_ZN2ps11Voltammetry15setSamplePeriodEy>:


    void Voltammetry::setSamplePeriod(uint64_t samplePeriod)
    {
 8015e28:	b590      	push	{r4, r7, lr}
 8015e2a:	b087      	sub	sp, #28
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	e9c7 2300 	strd	r2, r3, [r7]
        for (size_t i=0; i<availableTests_.size(); i++)
 8015e34:	2300      	movs	r3, #0
 8015e36:	617b      	str	r3, [r7, #20]
 8015e38:	e012      	b.n	8015e60 <_ZN2ps11Voltammetry15setSamplePeriodEy+0x38>
        {
            availableTests_[i] -> setSamplePeriod(samplePeriod);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015e40:	6979      	ldr	r1, [r7, #20]
 8015e42:	4618      	mov	r0, r3
 8015e44:	f000 f911 	bl	801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	6819      	ldr	r1, [r3, #0]
 8015e4c:	680b      	ldr	r3, [r1, #0]
 8015e4e:	332c      	adds	r3, #44	; 0x2c
 8015e50:	681c      	ldr	r4, [r3, #0]
 8015e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e56:	4608      	mov	r0, r1
 8015e58:	47a0      	blx	r4
        for (size_t i=0; i<availableTests_.size(); i++)
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	617b      	str	r3, [r7, #20]
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8015e66:	4618      	mov	r0, r3
 8015e68:	f000 f8f3 	bl	8016052 <_ZNK5ArrayIPN2ps8BaseTestELj20EE4sizeEv>
 8015e6c:	4602      	mov	r2, r0
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	4293      	cmp	r3, r2
 8015e72:	bf34      	ite	cc
 8015e74:	2301      	movcc	r3, #1
 8015e76:	2300      	movcs	r3, #0
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d1dd      	bne.n	8015e3a <_ZN2ps11Voltammetry15setSamplePeriodEy+0x12>
        }
    }
 8015e7e:	bf00      	nop
 8015e80:	bf00      	nop
 8015e82:	371c      	adds	r7, #28
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd90      	pop	{r4, r7, pc}

08015e88 <_ZN2ps13MultiStepTestILj2EEC1Ej>:
    MultiStepTest<MAX_SIZE>::MultiStepTest(size_t numStep) 
 8015e88:	b590      	push	{r4, r7, lr}
 8015e8a:	b08d      	sub	sp, #52	; 0x34
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	6039      	str	r1, [r7, #0]
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7f0 fe55 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 8015e9a:	4a28      	ldr	r2, [pc, #160]	; (8015f3c <_ZN2ps13MultiStepTestILj2EEC1Ej+0xb4>)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	601a      	str	r2, [r3, #0]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	3340      	adds	r3, #64	; 0x40
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7ee fc26 	bl	80046f6 <_ZN5ArrayIfLj2EEC1Ev>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	3350      	adds	r3, #80	; 0x50
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7ee fc13 	bl	80046da <_ZN5ArrayIyLj2EEC1Ev>
        valueArray_.fill(0.0);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015eba:	f04f 0200 	mov.w	r2, #0
 8015ebe:	f04f 0300 	mov.w	r3, #0
 8015ec2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8015ec6:	f107 0308 	add.w	r3, r7, #8
 8015eca:	4619      	mov	r1, r3
 8015ecc:	f000 f8ea 	bl	80160a4 <_ZN5ArrayIfLj2EE4fillIdEEvRKT_>
        durationArray_.fill(0);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	3350      	adds	r3, #80	; 0x50
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	613a      	str	r2, [r7, #16]
 8015ed8:	f107 0210 	add.w	r2, r7, #16
 8015edc:	4611      	mov	r1, r2
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f000 f8ee 	bl	80160c0 <_ZN5ArrayIyLj2EE4fillIiEEvRKT_>
        setNumStep(numStep);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f7ed f8c0 	bl	800306c <_ZN2ps13MultiStepTestILj2EE10setNumStepEj>
        setName("multiStep");
 8015eec:	687c      	ldr	r4, [r7, #4]
 8015eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f008 fabf 	bl	801e476 <_ZNSaIcEC1Ev>
 8015ef8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015efc:	f107 0314 	add.w	r3, r7, #20
 8015f00:	490f      	ldr	r1, [pc, #60]	; (8015f40 <_ZN2ps13MultiStepTestILj2EEC1Ej+0xb8>)
 8015f02:	4618      	mov	r0, r3
 8015f04:	f008 fd5e 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015f08:	f107 0314 	add.w	r3, r7, #20
 8015f0c:	4619      	mov	r1, r3
 8015f0e:	4620      	mov	r0, r4
 8015f10:	f7f0 ff5a 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8015f14:	f107 0314 	add.w	r3, r7, #20
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f008 fbac 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015f22:	4618      	mov	r0, r3
 8015f24:	f008 faa8 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f1 f800 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    }
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	4618      	mov	r0, r3
 8015f36:	3734      	adds	r7, #52	; 0x34
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd90      	pop	{r4, r7, pc}
 8015f3c:	080221d4 	.word	0x080221d4
 8015f40:	08021ffc 	.word	0x08021ffc

08015f44 <_ZN2ps13MultiStepTestILj50EEC1Ej>:
    MultiStepTest<MAX_SIZE>::MultiStepTest(size_t numStep) 
 8015f44:	b590      	push	{r4, r7, lr}
 8015f46:	b08d      	sub	sp, #52	; 0x34
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7f0 fdf7 	bl	8006b44 <_ZN2ps8BaseTestC1Ev>
 8015f56:	4a29      	ldr	r2, [pc, #164]	; (8015ffc <_ZN2ps13MultiStepTestILj50EEC1Ej+0xb8>)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	601a      	str	r2, [r3, #0]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	3340      	adds	r3, #64	; 0x40
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7ee fb3a 	bl	80045da <_ZN5ArrayIfLj50EEC1Ev>
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7ee fb25 	bl	80045bc <_ZN5ArrayIyLj50EEC1Ev>
        valueArray_.fill(0.0);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015f78:	f04f 0200 	mov.w	r2, #0
 8015f7c:	f04f 0300 	mov.w	r3, #0
 8015f80:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8015f84:	f107 0308 	add.w	r3, r7, #8
 8015f88:	4619      	mov	r1, r3
 8015f8a:	f000 f8a7 	bl	80160dc <_ZN5ArrayIfLj50EE4fillIdEEvRKT_>
        durationArray_.fill(0);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8015f94:	2200      	movs	r2, #0
 8015f96:	613a      	str	r2, [r7, #16]
 8015f98:	f107 0210 	add.w	r2, r7, #16
 8015f9c:	4611      	mov	r1, r2
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f000 f8aa 	bl	80160f8 <_ZN5ArrayIyLj50EE4fillIiEEvRKT_>
        setNumStep(numStep);
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f7ec fdae 	bl	8002b08 <_ZN2ps13MultiStepTestILj50EE10setNumStepEj>
        setName("multiStep");
 8015fac:	687c      	ldr	r4, [r7, #4]
 8015fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f008 fa5f 	bl	801e476 <_ZNSaIcEC1Ev>
 8015fb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015fbc:	f107 0314 	add.w	r3, r7, #20
 8015fc0:	490f      	ldr	r1, [pc, #60]	; (8016000 <_ZN2ps13MultiStepTestILj50EEC1Ej+0xbc>)
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f008 fcfe 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8015fc8:	f107 0314 	add.w	r3, r7, #20
 8015fcc:	4619      	mov	r1, r3
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f7f0 fefa 	bl	8006dc8 <_ZN2ps8BaseTest7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8015fd4:	f107 0314 	add.w	r3, r7, #20
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f008 fb4c 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f008 fa48 	bl	801e478 <_ZNSaIcED1Ev>
        setMuxCompatible(true);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2101      	movs	r1, #1
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7f0 ffa0 	bl	8006f32 <_ZN2ps8BaseTest16setMuxCompatibleEb>
    }
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3734      	adds	r7, #52	; 0x34
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd90      	pop	{r4, r7, pc}
 8015ffc:	08022154 	.word	0x08022154
 8016000:	08021ffc 	.word	0x08021ffc

08016004 <_ZN5ArrayIPN2ps8BaseTestELj20EEC1Ev>:
Array<T, MAX_SIZE>::Array()
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  size_ = 0;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2200      	movs	r2, #0
 8016010:	651a      	str	r2, [r3, #80]	; 0x50
}
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	4618      	mov	r0, r3
 8016016:	370c      	adds	r7, #12
 8016018:	46bd      	mov	sp, r7
 801601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601e:	4770      	bx	lr

08016020 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_>:
void Array<T, MAX_SIZE>::push_back(const T & value)
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
 8016028:	6039      	str	r1, [r7, #0]
  if (size_ < MAX_SIZE)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801602e:	2b13      	cmp	r3, #19
 8016030:	d809      	bhi.n	8016046 <_ZN5ArrayIPN2ps8BaseTestELj20EE9push_backERKS2_+0x26>
    values_[size_++] = value;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016036:	1c59      	adds	r1, r3, #1
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	6511      	str	r1, [r2, #80]	; 0x50
 801603c:	683a      	ldr	r2, [r7, #0]
 801603e:	6811      	ldr	r1, [r2, #0]
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8016046:	bf00      	nop
 8016048:	370c      	adds	r7, #12
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr

08016052 <_ZNK5ArrayIPN2ps8BaseTestELj20EE4sizeEv>:
size_t Array<T, MAX_SIZE>::size() const
 8016052:	b480      	push	{r7}
 8016054:	b083      	sub	sp, #12
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]
  return size_;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 801605e:	4618      	mov	r0, r3
 8016060:	370c      	adds	r7, #12
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr

0801606a <_ZN5ArrayIPN2ps8BaseTestELj20EEixEj>:
T & Array<T, MAX_SIZE>::operator[](const size_t index)
 801606a:	b480      	push	{r7}
 801606c:	b083      	sub	sp, #12
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
 8016072:	6039      	str	r1, [r7, #0]
  return values_[index];
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	4413      	add	r3, r2
}
 801607c:	4618      	mov	r0, r3
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <_ZN11ArduinoJson9JsonArray3addINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_>:
  bool add(const T &value) {
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
    return add_impl<const T &>(value);
 8016092:	6839      	ldr	r1, [r7, #0]
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 f83d 	bl	8016114 <_ZN11ArduinoJson9JsonArray8add_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbT_>
 801609a:	4603      	mov	r3, r0
  }
 801609c:	4618      	mov	r0, r3
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <_ZN5ArrayIfLj2EE4fillIdEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 80160ae:	683a      	ldr	r2, [r7, #0]
 80160b0:	2102      	movs	r1, #2
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f000 f85f 	bl	8016176 <_ZN5ArrayIfLj2EE6assignIdEEvjRKT_>
}
 80160b8:	bf00      	nop
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <_ZN5ArrayIyLj2EE4fillIiEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	2102      	movs	r1, #2
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 f87b 	bl	80161ca <_ZN5ArrayIyLj2EE6assignIiEEvjRKT_>
}
 80160d4:	bf00      	nop
 80160d6:	3708      	adds	r7, #8
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <_ZN5ArrayIfLj50EE4fillIdEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 80160dc:	b580      	push	{r7, lr}
 80160de:	b082      	sub	sp, #8
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 80160e6:	683a      	ldr	r2, [r7, #0]
 80160e8:	2132      	movs	r1, #50	; 0x32
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f000 f896 	bl	801621c <_ZN5ArrayIfLj50EE6assignIdEEvjRKT_>
}
 80160f0:	bf00      	nop
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <_ZN5ArrayIyLj50EE4fillIiEEvRKT_>:
void Array<T, MAX_SIZE>::fill(const U & value)
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]
  assign(MAX_SIZE,value);
 8016102:	683a      	ldr	r2, [r7, #0]
 8016104:	2132      	movs	r1, #50	; 0x32
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f000 f8b3 	bl	8016272 <_ZN5ArrayIyLj50EE6assignIiEEvjRKT_>
}
 801610c:	bf00      	nop
 801610e:	3708      	adds	r7, #8
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <_ZN11ArduinoJson9JsonArray8add_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbT_>:
  bool add_impl(TValueRef value) {
 8016114:	b590      	push	{r4, r7, lr}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
    iterator it = Internals::List<JsonVariant>::add();
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	4618      	mov	r0, r3
 8016122:	f7eb ff0d 	bl	8001f40 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3addEv>
 8016126:	4603      	mov	r3, r0
 8016128:	60bb      	str	r3, [r7, #8]
    if (it == end()) return false;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	4618      	mov	r0, r3
 801612e:	f7eb feeb 	bl	8001f08 <_ZN11ArduinoJson9Internals4ListINS_11JsonVariantEE3endEv>
 8016132:	4603      	mov	r3, r0
 8016134:	60fb      	str	r3, [r7, #12]
 8016136:	f107 020c 	add.w	r2, r7, #12
 801613a:	f107 0308 	add.w	r3, r7, #8
 801613e:	4611      	mov	r1, r2
 8016140:	4618      	mov	r0, r3
 8016142:	f7eb fecd 	bl	8001ee0 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEeqERKS3_>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d001      	beq.n	8016150 <_ZN11ArduinoJson9JsonArray8add_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbT_+0x3c>
 801614c:	2300      	movs	r3, #0
 801614e:	e00e      	b.n	801616e <_ZN11ArduinoJson9JsonArray8add_implIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbT_+0x5a>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681c      	ldr	r4, [r3, #0]
 8016154:	f107 0308 	add.w	r3, r7, #8
 8016158:	4618      	mov	r0, r3
 801615a:	f7eb fee4 	bl	8001f26 <_ZNK11ArduinoJson9Internals12ListIteratorINS_11JsonVariantEEdeEv>
 801615e:	4603      	mov	r3, r0
 8016160:	683a      	ldr	r2, [r7, #0]
 8016162:	4619      	mov	r1, r3
 8016164:	4620      	mov	r0, r4
 8016166:	f7f7 fbe2 	bl	800d92e <_ZN11ArduinoJson9Internals10ValueSaverIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S9_>
 801616a:	4603      	mov	r3, r0
 801616c:	bf00      	nop
  }
 801616e:	4618      	mov	r0, r3
 8016170:	3714      	adds	r7, #20
 8016172:	46bd      	mov	sp, r7
 8016174:	bd90      	pop	{r4, r7, pc}

08016176 <_ZN5ArrayIfLj2EE6assignIdEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 8016176:	b580      	push	{r7, lr}
 8016178:	b086      	sub	sp, #24
 801617a:	af00      	add	r7, sp, #0
 801617c:	60f8      	str	r0, [r7, #12]
 801617e:	60b9      	str	r1, [r7, #8]
 8016180:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	2b02      	cmp	r3, #2
 8016186:	bf28      	it	cs
 8016188:	2302      	movcs	r3, #2
 801618a:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	693a      	ldr	r2, [r7, #16]
 8016190:	609a      	str	r2, [r3, #8]
  for (size_t i=0; i<assign_size; ++i)
 8016192:	2300      	movs	r3, #0
 8016194:	617b      	str	r3, [r7, #20]
 8016196:	e00f      	b.n	80161b8 <_ZN5ArrayIfLj2EE6assignIdEEvjRKT_+0x42>
    values_[i] = value;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619e:	4610      	mov	r0, r2
 80161a0:	4619      	mov	r1, r3
 80161a2:	f7ea fcdf 	bl	8000b64 <__aeabi_d2f>
 80161a6:	4601      	mov	r1, r0
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	009b      	lsls	r3, r3, #2
 80161ae:	4413      	add	r3, r2
 80161b0:	6019      	str	r1, [r3, #0]
  for (size_t i=0; i<assign_size; ++i)
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	3301      	adds	r3, #1
 80161b6:	617b      	str	r3, [r7, #20]
 80161b8:	697a      	ldr	r2, [r7, #20]
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d3eb      	bcc.n	8016198 <_ZN5ArrayIfLj2EE6assignIdEEvjRKT_+0x22>
}
 80161c0:	bf00      	nop
 80161c2:	bf00      	nop
 80161c4:	3718      	adds	r7, #24
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <_ZN5ArrayIyLj2EE6assignIiEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 80161ca:	b4b0      	push	{r4, r5, r7}
 80161cc:	b087      	sub	sp, #28
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	60f8      	str	r0, [r7, #12]
 80161d2:	60b9      	str	r1, [r7, #8]
 80161d4:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	2b02      	cmp	r3, #2
 80161da:	bf28      	it	cs
 80161dc:	2302      	movcs	r3, #2
 80161de:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	693a      	ldr	r2, [r7, #16]
 80161e4:	611a      	str	r2, [r3, #16]
  for (size_t i=0; i<assign_size; ++i)
 80161e6:	2300      	movs	r3, #0
 80161e8:	617b      	str	r3, [r7, #20]
 80161ea:	e00d      	b.n	8016208 <_ZN5ArrayIyLj2EE6assignIiEEvjRKT_+0x3e>
    values_[i] = value;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	17da      	asrs	r2, r3, #31
 80161f2:	461c      	mov	r4, r3
 80161f4:	4615      	mov	r5, r2
 80161f6:	68fa      	ldr	r2, [r7, #12]
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	4413      	add	r3, r2
 80161fe:	e9c3 4500 	strd	r4, r5, [r3]
  for (size_t i=0; i<assign_size; ++i)
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	3301      	adds	r3, #1
 8016206:	617b      	str	r3, [r7, #20]
 8016208:	697a      	ldr	r2, [r7, #20]
 801620a:	693b      	ldr	r3, [r7, #16]
 801620c:	429a      	cmp	r2, r3
 801620e:	d3ed      	bcc.n	80161ec <_ZN5ArrayIyLj2EE6assignIiEEvjRKT_+0x22>
}
 8016210:	bf00      	nop
 8016212:	bf00      	nop
 8016214:	371c      	adds	r7, #28
 8016216:	46bd      	mov	sp, r7
 8016218:	bcb0      	pop	{r4, r5, r7}
 801621a:	4770      	bx	lr

0801621c <_ZN5ArrayIfLj50EE6assignIdEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 801621c:	b580      	push	{r7, lr}
 801621e:	b086      	sub	sp, #24
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	2b32      	cmp	r3, #50	; 0x32
 801622c:	bf28      	it	cs
 801622e:	2332      	movcs	r3, #50	; 0x32
 8016230:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	693a      	ldr	r2, [r7, #16]
 8016236:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  for (size_t i=0; i<assign_size; ++i)
 801623a:	2300      	movs	r3, #0
 801623c:	617b      	str	r3, [r7, #20]
 801623e:	e00f      	b.n	8016260 <_ZN5ArrayIfLj50EE6assignIdEEvjRKT_+0x44>
    values_[i] = value;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016246:	4610      	mov	r0, r2
 8016248:	4619      	mov	r1, r3
 801624a:	f7ea fc8b 	bl	8000b64 <__aeabi_d2f>
 801624e:	4601      	mov	r1, r0
 8016250:	68fa      	ldr	r2, [r7, #12]
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	009b      	lsls	r3, r3, #2
 8016256:	4413      	add	r3, r2
 8016258:	6019      	str	r1, [r3, #0]
  for (size_t i=0; i<assign_size; ++i)
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	3301      	adds	r3, #1
 801625e:	617b      	str	r3, [r7, #20]
 8016260:	697a      	ldr	r2, [r7, #20]
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	429a      	cmp	r2, r3
 8016266:	d3eb      	bcc.n	8016240 <_ZN5ArrayIfLj50EE6assignIdEEvjRKT_+0x24>
}
 8016268:	bf00      	nop
 801626a:	bf00      	nop
 801626c:	3718      	adds	r7, #24
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}

08016272 <_ZN5ArrayIyLj50EE6assignIiEEvjRKT_>:
void Array<T, MAX_SIZE>::assign(const size_t n, const U & value)
 8016272:	b4b0      	push	{r4, r5, r7}
 8016274:	b087      	sub	sp, #28
 8016276:	af00      	add	r7, sp, #0
 8016278:	60f8      	str	r0, [r7, #12]
 801627a:	60b9      	str	r1, [r7, #8]
 801627c:	607a      	str	r2, [r7, #4]
  size_t assign_size = ((n < MAX_SIZE) ? n : MAX_SIZE);
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	2b32      	cmp	r3, #50	; 0x32
 8016282:	bf28      	it	cs
 8016284:	2332      	movcs	r3, #50	; 0x32
 8016286:	613b      	str	r3, [r7, #16]
  size_ = assign_size;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	693a      	ldr	r2, [r7, #16]
 801628c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  for (size_t i=0; i<assign_size; ++i)
 8016290:	2300      	movs	r3, #0
 8016292:	617b      	str	r3, [r7, #20]
 8016294:	e00d      	b.n	80162b2 <_ZN5ArrayIyLj50EE6assignIiEEvjRKT_+0x40>
    values_[i] = value;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	17da      	asrs	r2, r3, #31
 801629c:	461c      	mov	r4, r3
 801629e:	4615      	mov	r5, r2
 80162a0:	68fa      	ldr	r2, [r7, #12]
 80162a2:	697b      	ldr	r3, [r7, #20]
 80162a4:	00db      	lsls	r3, r3, #3
 80162a6:	4413      	add	r3, r2
 80162a8:	e9c3 4500 	strd	r4, r5, [r3]
  for (size_t i=0; i<assign_size; ++i)
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	3301      	adds	r3, #1
 80162b0:	617b      	str	r3, [r7, #20]
 80162b2:	697a      	ldr	r2, [r7, #20]
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d3ed      	bcc.n	8016296 <_ZN5ArrayIyLj50EE6assignIiEEvjRKT_+0x24>
}
 80162ba:	bf00      	nop
 80162bc:	bf00      	nop
 80162be:	371c      	adds	r7, #28
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bcb0      	pop	{r4, r5, r7}
 80162c4:	4770      	bx	lr
	...

080162c8 <_Z41__static_initialization_and_destruction_0ii>:


} // namespace ps
 80162c8:	b5b0      	push	{r4, r5, r7, lr}
 80162ca:	b08c      	sub	sp, #48	; 0x30
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	f040 80bb 	bne.w	8016450 <_Z41__static_initialization_and_destruction_0ii+0x188>
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162e0:	4293      	cmp	r3, r2
 80162e2:	f040 80b5 	bne.w	8016450 <_Z41__static_initialization_and_destruction_0ii+0x188>
    };
 80162e6:	4c6b      	ldr	r4, [pc, #428]	; (8016494 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80162e8:	4625      	mov	r5, r4
 80162ea:	f107 0308 	add.w	r3, r7, #8
 80162ee:	4618      	mov	r0, r3
 80162f0:	f008 f8c1 	bl	801e476 <_ZNSaIcEC1Ev>
 80162f4:	f107 0308 	add.w	r3, r7, #8
 80162f8:	461a      	mov	r2, r3
 80162fa:	4967      	ldr	r1, [pc, #412]	; (8016498 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80162fc:	4628      	mov	r0, r5
 80162fe:	f008 fb61 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016302:	f107 0308 	add.w	r3, r7, #8
 8016306:	4618      	mov	r0, r3
 8016308:	f008 f8b6 	bl	801e478 <_ZNSaIcED1Ev>
 801630c:	3418      	adds	r4, #24
 801630e:	f107 030c 	add.w	r3, r7, #12
 8016312:	4618      	mov	r0, r3
 8016314:	f008 f8af 	bl	801e476 <_ZNSaIcEC1Ev>
 8016318:	f107 030c 	add.w	r3, r7, #12
 801631c:	461a      	mov	r2, r3
 801631e:	495f      	ldr	r1, [pc, #380]	; (801649c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8016320:	4620      	mov	r0, r4
 8016322:	f008 fb4f 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016326:	f107 030c 	add.w	r3, r7, #12
 801632a:	4618      	mov	r0, r3
 801632c:	f008 f8a4 	bl	801e478 <_ZNSaIcED1Ev>
 8016330:	3418      	adds	r4, #24
 8016332:	f107 0310 	add.w	r3, r7, #16
 8016336:	4618      	mov	r0, r3
 8016338:	f008 f89d 	bl	801e476 <_ZNSaIcEC1Ev>
 801633c:	f107 0310 	add.w	r3, r7, #16
 8016340:	461a      	mov	r2, r3
 8016342:	4957      	ldr	r1, [pc, #348]	; (80164a0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8016344:	4620      	mov	r0, r4
 8016346:	f008 fb3d 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801634a:	f107 0310 	add.w	r3, r7, #16
 801634e:	4618      	mov	r0, r3
 8016350:	f008 f892 	bl	801e478 <_ZNSaIcED1Ev>
 8016354:	3418      	adds	r4, #24
 8016356:	f107 0314 	add.w	r3, r7, #20
 801635a:	4618      	mov	r0, r3
 801635c:	f008 f88b 	bl	801e476 <_ZNSaIcEC1Ev>
 8016360:	f107 0314 	add.w	r3, r7, #20
 8016364:	461a      	mov	r2, r3
 8016366:	494f      	ldr	r1, [pc, #316]	; (80164a4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8016368:	4620      	mov	r0, r4
 801636a:	f008 fb2b 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 801636e:	f107 0314 	add.w	r3, r7, #20
 8016372:	4618      	mov	r0, r3
 8016374:	f008 f880 	bl	801e478 <_ZNSaIcED1Ev>
    };
 8016378:	4c4b      	ldr	r4, [pc, #300]	; (80164a8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 801637a:	4625      	mov	r5, r4
 801637c:	f107 0318 	add.w	r3, r7, #24
 8016380:	4618      	mov	r0, r3
 8016382:	f008 f878 	bl	801e476 <_ZNSaIcEC1Ev>
 8016386:	f107 0318 	add.w	r3, r7, #24
 801638a:	461a      	mov	r2, r3
 801638c:	4947      	ldr	r1, [pc, #284]	; (80164ac <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 801638e:	4628      	mov	r0, r5
 8016390:	f008 fb18 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016394:	f107 0318 	add.w	r3, r7, #24
 8016398:	4618      	mov	r0, r3
 801639a:	f008 f86d 	bl	801e478 <_ZNSaIcED1Ev>
 801639e:	3418      	adds	r4, #24
 80163a0:	f107 031c 	add.w	r3, r7, #28
 80163a4:	4618      	mov	r0, r3
 80163a6:	f008 f866 	bl	801e476 <_ZNSaIcEC1Ev>
 80163aa:	f107 031c 	add.w	r3, r7, #28
 80163ae:	461a      	mov	r2, r3
 80163b0:	493f      	ldr	r1, [pc, #252]	; (80164b0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80163b2:	4620      	mov	r0, r4
 80163b4:	f008 fb06 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80163b8:	f107 031c 	add.w	r3, r7, #28
 80163bc:	4618      	mov	r0, r3
 80163be:	f008 f85b 	bl	801e478 <_ZNSaIcED1Ev>
 80163c2:	3418      	adds	r4, #24
 80163c4:	f107 0320 	add.w	r3, r7, #32
 80163c8:	4618      	mov	r0, r3
 80163ca:	f008 f854 	bl	801e476 <_ZNSaIcEC1Ev>
 80163ce:	f107 0320 	add.w	r3, r7, #32
 80163d2:	461a      	mov	r2, r3
 80163d4:	4937      	ldr	r1, [pc, #220]	; (80164b4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80163d6:	4620      	mov	r0, r4
 80163d8:	f008 faf4 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80163dc:	f107 0320 	add.w	r3, r7, #32
 80163e0:	4618      	mov	r0, r3
 80163e2:	f008 f849 	bl	801e478 <_ZNSaIcED1Ev>
 80163e6:	3418      	adds	r4, #24
 80163e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163ec:	4618      	mov	r0, r3
 80163ee:	f008 f842 	bl	801e476 <_ZNSaIcEC1Ev>
 80163f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163f6:	461a      	mov	r2, r3
 80163f8:	492f      	ldr	r1, [pc, #188]	; (80164b8 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80163fa:	4620      	mov	r0, r4
 80163fc:	f008 fae2 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016404:	4618      	mov	r0, r3
 8016406:	f008 f837 	bl	801e478 <_ZNSaIcED1Ev>
 801640a:	3418      	adds	r4, #24
 801640c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016410:	4618      	mov	r0, r3
 8016412:	f008 f830 	bl	801e476 <_ZNSaIcEC1Ev>
 8016416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801641a:	461a      	mov	r2, r3
 801641c:	4927      	ldr	r1, [pc, #156]	; (80164bc <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 801641e:	4620      	mov	r0, r4
 8016420:	f008 fad0 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016428:	4618      	mov	r0, r3
 801642a:	f008 f825 	bl	801e478 <_ZNSaIcED1Ev>
    const string Voltammetry::TestKey("test");
 801642e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016432:	4618      	mov	r0, r3
 8016434:	f008 f81f 	bl	801e476 <_ZNSaIcEC1Ev>
 8016438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801643c:	461a      	mov	r2, r3
 801643e:	4920      	ldr	r1, [pc, #128]	; (80164c0 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8016440:	4820      	ldr	r0, [pc, #128]	; (80164c4 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8016442:	f008 fabf 	bl	801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8016446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801644a:	4618      	mov	r0, r3
 801644c:	f008 f814 	bl	801e478 <_ZNSaIcED1Ev>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d119      	bne.n	801648a <_Z41__static_initialization_and_destruction_0ii+0x1c2>
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801645c:	4293      	cmp	r3, r2
 801645e:	d114      	bne.n	801648a <_Z41__static_initialization_and_destruction_0ii+0x1c2>
 8016460:	4818      	ldr	r0, [pc, #96]	; (80164c4 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8016462:	f008 f908 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    const string CurrGainPathStringArray[NumCurrGainPath] =
 8016466:	4c18      	ldr	r4, [pc, #96]	; (80164c8 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8016468:	4b0f      	ldr	r3, [pc, #60]	; (80164a8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 801646a:	429c      	cmp	r4, r3
 801646c:	d004      	beq.n	8016478 <_Z41__static_initialization_and_destruction_0ii+0x1b0>
 801646e:	3c18      	subs	r4, #24
 8016470:	4620      	mov	r0, r4
 8016472:	f008 f900 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8016476:	e7f7      	b.n	8016468 <_Z41__static_initialization_and_destruction_0ii+0x1a0>
    const string VoltGainStringArray[NumVoltGain] =
 8016478:	4c14      	ldr	r4, [pc, #80]	; (80164cc <_Z41__static_initialization_and_destruction_0ii+0x204>)
 801647a:	4b06      	ldr	r3, [pc, #24]	; (8016494 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 801647c:	429c      	cmp	r4, r3
 801647e:	d004      	beq.n	801648a <_Z41__static_initialization_and_destruction_0ii+0x1c2>
 8016480:	3c18      	subs	r4, #24
 8016482:	4620      	mov	r0, r4
 8016484:	f008 f8f7 	bl	801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8016488:	e7f7      	b.n	801647a <_Z41__static_initialization_and_destruction_0ii+0x1b2>
} // namespace ps
 801648a:	bf00      	nop
 801648c:	3730      	adds	r7, #48	; 0x30
 801648e:	46bd      	mov	sp, r7
 8016490:	bdb0      	pop	{r4, r5, r7, pc}
 8016492:	bf00      	nop
 8016494:	20009ab8 	.word	0x20009ab8
 8016498:	08022008 	.word	0x08022008
 801649c:	08022014 	.word	0x08022014
 80164a0:	08022020 	.word	0x08022020
 80164a4:	0802202c 	.word	0x0802202c
 80164a8:	20009b18 	.word	0x20009b18
 80164ac:	08022038 	.word	0x08022038
 80164b0:	08022048 	.word	0x08022048
 80164b4:	08022058 	.word	0x08022058
 80164b8:	08022068 	.word	0x08022068
 80164bc:	08022078 	.word	0x08022078
 80164c0:	08022088 	.word	0x08022088
 80164c4:	20009b90 	.word	0x20009b90
 80164c8:	20009b90 	.word	0x20009b90
 80164cc:	20009b18 	.word	0x20009b18

080164d0 <_GLOBAL__sub_I__ZN2ps11Voltammetry7TestKeyB5cxx11E>:
 80164d0:	b580      	push	{r7, lr}
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80164d8:	2001      	movs	r0, #1
 80164da:	f7ff fef5 	bl	80162c8 <_Z41__static_initialization_and_destruction_0ii>
 80164de:	bd80      	pop	{r7, pc}

080164e0 <_GLOBAL__sub_D__ZN2ps11Voltammetry7TestKeyB5cxx11E>:
 80164e0:	b580      	push	{r7, lr}
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80164e8:	2000      	movs	r0, #0
 80164ea:	f7ff feed 	bl	80162c8 <_Z41__static_initialization_and_destruction_0ii>
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b083      	sub	sp, #12
 80164f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80164f6:	2300      	movs	r3, #0
 80164f8:	607b      	str	r3, [r7, #4]
 80164fa:	4b10      	ldr	r3, [pc, #64]	; (801653c <HAL_MspInit+0x4c>)
 80164fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164fe:	4a0f      	ldr	r2, [pc, #60]	; (801653c <HAL_MspInit+0x4c>)
 8016500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016504:	6453      	str	r3, [r2, #68]	; 0x44
 8016506:	4b0d      	ldr	r3, [pc, #52]	; (801653c <HAL_MspInit+0x4c>)
 8016508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801650a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801650e:	607b      	str	r3, [r7, #4]
 8016510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8016512:	2300      	movs	r3, #0
 8016514:	603b      	str	r3, [r7, #0]
 8016516:	4b09      	ldr	r3, [pc, #36]	; (801653c <HAL_MspInit+0x4c>)
 8016518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801651a:	4a08      	ldr	r2, [pc, #32]	; (801653c <HAL_MspInit+0x4c>)
 801651c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016520:	6413      	str	r3, [r2, #64]	; 0x40
 8016522:	4b06      	ldr	r3, [pc, #24]	; (801653c <HAL_MspInit+0x4c>)
 8016524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801652a:	603b      	str	r3, [r7, #0]
 801652c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801652e:	bf00      	nop
 8016530:	370c      	adds	r7, #12
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	40023800 	.word	0x40023800

08016540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b08a      	sub	sp, #40	; 0x28
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016548:	f107 0314 	add.w	r3, r7, #20
 801654c:	2200      	movs	r2, #0
 801654e:	601a      	str	r2, [r3, #0]
 8016550:	605a      	str	r2, [r3, #4]
 8016552:	609a      	str	r2, [r3, #8]
 8016554:	60da      	str	r2, [r3, #12]
 8016556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4a28      	ldr	r2, [pc, #160]	; (8016600 <HAL_SPI_MspInit+0xc0>)
 801655e:	4293      	cmp	r3, r2
 8016560:	d14a      	bne.n	80165f8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8016562:	2300      	movs	r3, #0
 8016564:	613b      	str	r3, [r7, #16]
 8016566:	4b27      	ldr	r3, [pc, #156]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 8016568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801656a:	4a26      	ldr	r2, [pc, #152]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 801656c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016570:	6413      	str	r3, [r2, #64]	; 0x40
 8016572:	4b24      	ldr	r3, [pc, #144]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 8016574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801657a:	613b      	str	r3, [r7, #16]
 801657c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801657e:	2300      	movs	r3, #0
 8016580:	60fb      	str	r3, [r7, #12]
 8016582:	4b20      	ldr	r3, [pc, #128]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 8016584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016586:	4a1f      	ldr	r2, [pc, #124]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 8016588:	f043 0304 	orr.w	r3, r3, #4
 801658c:	6313      	str	r3, [r2, #48]	; 0x30
 801658e:	4b1d      	ldr	r3, [pc, #116]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 8016590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016592:	f003 0304 	and.w	r3, r3, #4
 8016596:	60fb      	str	r3, [r7, #12]
 8016598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801659a:	2300      	movs	r3, #0
 801659c:	60bb      	str	r3, [r7, #8]
 801659e:	4b19      	ldr	r3, [pc, #100]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 80165a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165a2:	4a18      	ldr	r2, [pc, #96]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 80165a4:	f043 0302 	orr.w	r3, r3, #2
 80165a8:	6313      	str	r3, [r2, #48]	; 0x30
 80165aa:	4b16      	ldr	r3, [pc, #88]	; (8016604 <HAL_SPI_MspInit+0xc4>)
 80165ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ae:	f003 0302 	and.w	r3, r3, #2
 80165b2:	60bb      	str	r3, [r7, #8]
 80165b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80165b6:	230c      	movs	r3, #12
 80165b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165ba:	2302      	movs	r3, #2
 80165bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165be:	2300      	movs	r3, #0
 80165c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165c2:	2303      	movs	r3, #3
 80165c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80165c6:	2305      	movs	r3, #5
 80165c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80165ca:	f107 0314 	add.w	r3, r7, #20
 80165ce:	4619      	mov	r1, r3
 80165d0:	480d      	ldr	r0, [pc, #52]	; (8016608 <HAL_SPI_MspInit+0xc8>)
 80165d2:	f000 fcd3 	bl	8016f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80165d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165dc:	2302      	movs	r3, #2
 80165de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165e0:	2300      	movs	r3, #0
 80165e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165e4:	2303      	movs	r3, #3
 80165e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80165e8:	2305      	movs	r3, #5
 80165ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80165ec:	f107 0314 	add.w	r3, r7, #20
 80165f0:	4619      	mov	r1, r3
 80165f2:	4806      	ldr	r0, [pc, #24]	; (801660c <HAL_SPI_MspInit+0xcc>)
 80165f4:	f000 fcc2 	bl	8016f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80165f8:	bf00      	nop
 80165fa:	3728      	adds	r7, #40	; 0x28
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}
 8016600:	40003800 	.word	0x40003800
 8016604:	40023800 	.word	0x40023800
 8016608:	40020800 	.word	0x40020800
 801660c:	40020400 	.word	0x40020400

08016610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016620:	d10e      	bne.n	8016640 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8016622:	2300      	movs	r3, #0
 8016624:	60fb      	str	r3, [r7, #12]
 8016626:	4b16      	ldr	r3, [pc, #88]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 8016628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801662a:	4a15      	ldr	r2, [pc, #84]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 801662c:	f043 0301 	orr.w	r3, r3, #1
 8016630:	6413      	str	r3, [r2, #64]	; 0x40
 8016632:	4b13      	ldr	r3, [pc, #76]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 8016634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016636:	f003 0301 	and.w	r3, r3, #1
 801663a:	60fb      	str	r3, [r7, #12]
 801663c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 801663e:	e01a      	b.n	8016676 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	4a0f      	ldr	r2, [pc, #60]	; (8016684 <HAL_TIM_Base_MspInit+0x74>)
 8016646:	4293      	cmp	r3, r2
 8016648:	d115      	bne.n	8016676 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801664a:	2300      	movs	r3, #0
 801664c:	60bb      	str	r3, [r7, #8]
 801664e:	4b0c      	ldr	r3, [pc, #48]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 8016650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016652:	4a0b      	ldr	r2, [pc, #44]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 8016654:	f043 0302 	orr.w	r3, r3, #2
 8016658:	6413      	str	r3, [r2, #64]	; 0x40
 801665a:	4b09      	ldr	r3, [pc, #36]	; (8016680 <HAL_TIM_Base_MspInit+0x70>)
 801665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801665e:	f003 0302 	and.w	r3, r3, #2
 8016662:	60bb      	str	r3, [r7, #8]
 8016664:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8016666:	2200      	movs	r2, #0
 8016668:	2100      	movs	r1, #0
 801666a:	201d      	movs	r0, #29
 801666c:	f000 fa89 	bl	8016b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8016670:	201d      	movs	r0, #29
 8016672:	f000 faa2 	bl	8016bba <HAL_NVIC_EnableIRQ>
}
 8016676:	bf00      	nop
 8016678:	3710      	adds	r7, #16
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	40023800 	.word	0x40023800
 8016684:	40000400 	.word	0x40000400

08016688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b088      	sub	sp, #32
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016690:	f107 030c 	add.w	r3, r7, #12
 8016694:	2200      	movs	r2, #0
 8016696:	601a      	str	r2, [r3, #0]
 8016698:	605a      	str	r2, [r3, #4]
 801669a:	609a      	str	r2, [r3, #8]
 801669c:	60da      	str	r2, [r3, #12]
 801669e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80166a8:	d11d      	bne.n	80166e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166aa:	2300      	movs	r3, #0
 80166ac:	60bb      	str	r3, [r7, #8]
 80166ae:	4b10      	ldr	r3, [pc, #64]	; (80166f0 <HAL_TIM_MspPostInit+0x68>)
 80166b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166b2:	4a0f      	ldr	r2, [pc, #60]	; (80166f0 <HAL_TIM_MspPostInit+0x68>)
 80166b4:	f043 0301 	orr.w	r3, r3, #1
 80166b8:	6313      	str	r3, [r2, #48]	; 0x30
 80166ba:	4b0d      	ldr	r3, [pc, #52]	; (80166f0 <HAL_TIM_MspPostInit+0x68>)
 80166bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166be:	f003 0301 	and.w	r3, r3, #1
 80166c2:	60bb      	str	r3, [r7, #8]
 80166c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80166c6:	2301      	movs	r3, #1
 80166c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166ca:	2302      	movs	r3, #2
 80166cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80166d2:	2300      	movs	r3, #0
 80166d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80166d6:	2301      	movs	r3, #1
 80166d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166da:	f107 030c 	add.w	r3, r7, #12
 80166de:	4619      	mov	r1, r3
 80166e0:	4804      	ldr	r0, [pc, #16]	; (80166f4 <HAL_TIM_MspPostInit+0x6c>)
 80166e2:	f000 fc4b 	bl	8016f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80166e6:	bf00      	nop
 80166e8:	3720      	adds	r7, #32
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	40023800 	.word	0x40023800
 80166f4:	40020000 	.word	0x40020000

080166f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80166f8:	b480      	push	{r7}
 80166fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80166fc:	e7fe      	b.n	80166fc <NMI_Handler+0x4>

080166fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80166fe:	b480      	push	{r7}
 8016700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016702:	e7fe      	b.n	8016702 <HardFault_Handler+0x4>

08016704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016704:	b480      	push	{r7}
 8016706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016708:	e7fe      	b.n	8016708 <MemManage_Handler+0x4>

0801670a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801670a:	b480      	push	{r7}
 801670c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801670e:	e7fe      	b.n	801670e <BusFault_Handler+0x4>

08016710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016710:	b480      	push	{r7}
 8016712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016714:	e7fe      	b.n	8016714 <UsageFault_Handler+0x4>

08016716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016716:	b480      	push	{r7}
 8016718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801671a:	bf00      	nop
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	4770      	bx	lr

08016724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016724:	b480      	push	{r7}
 8016726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016728:	bf00      	nop
 801672a:	46bd      	mov	sp, r7
 801672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016730:	4770      	bx	lr

08016732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8016732:	b480      	push	{r7}
 8016734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016736:	bf00      	nop
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr

08016740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016744:	f000 f8fe 	bl	8016944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016748:	bf00      	nop
 801674a:	bd80      	pop	{r7, pc}

0801674c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  timerCallback();
 8016750:	f7eb f8b4 	bl	80018bc <timerCallback>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8016754:	4802      	ldr	r0, [pc, #8]	; (8016760 <TIM3_IRQHandler+0x14>)
 8016756:	f002 ffe9 	bl	801972c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801675a:	bf00      	nop
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	20000388 	.word	0x20000388

08016764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016768:	4802      	ldr	r0, [pc, #8]	; (8016774 <OTG_FS_IRQHandler+0x10>)
 801676a:	f000 ff0c 	bl	8017586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801676e:	bf00      	nop
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	2000a8b0 	.word	0x2000a8b0

08016778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016778:	b480      	push	{r7}
 801677a:	af00      	add	r7, sp, #0
	return 1;
 801677c:	2301      	movs	r3, #1
}
 801677e:	4618      	mov	r0, r3
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <_kill>:

int _kill(int pid, int sig)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016792:	f00a faab 	bl	8020cec <__errno>
 8016796:	4603      	mov	r3, r0
 8016798:	2216      	movs	r2, #22
 801679a:	601a      	str	r2, [r3, #0]
	return -1;
 801679c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <_exit>:

void _exit (int status)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b082      	sub	sp, #8
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80167b0:	f04f 31ff 	mov.w	r1, #4294967295
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7ff ffe7 	bl	8016788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80167ba:	e7fe      	b.n	80167ba <_exit+0x12>

080167bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b086      	sub	sp, #24
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80167c4:	4a14      	ldr	r2, [pc, #80]	; (8016818 <_sbrk+0x5c>)
 80167c6:	4b15      	ldr	r3, [pc, #84]	; (801681c <_sbrk+0x60>)
 80167c8:	1ad3      	subs	r3, r2, r3
 80167ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80167d0:	4b13      	ldr	r3, [pc, #76]	; (8016820 <_sbrk+0x64>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d102      	bne.n	80167de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80167d8:	4b11      	ldr	r3, [pc, #68]	; (8016820 <_sbrk+0x64>)
 80167da:	4a12      	ldr	r2, [pc, #72]	; (8016824 <_sbrk+0x68>)
 80167dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80167de:	4b10      	ldr	r3, [pc, #64]	; (8016820 <_sbrk+0x64>)
 80167e0:	681a      	ldr	r2, [r3, #0]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	4413      	add	r3, r2
 80167e6:	693a      	ldr	r2, [r7, #16]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d207      	bcs.n	80167fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80167ec:	f00a fa7e 	bl	8020cec <__errno>
 80167f0:	4603      	mov	r3, r0
 80167f2:	220c      	movs	r2, #12
 80167f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80167f6:	f04f 33ff 	mov.w	r3, #4294967295
 80167fa:	e009      	b.n	8016810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80167fc:	4b08      	ldr	r3, [pc, #32]	; (8016820 <_sbrk+0x64>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016802:	4b07      	ldr	r3, [pc, #28]	; (8016820 <_sbrk+0x64>)
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	4413      	add	r3, r2
 801680a:	4a05      	ldr	r2, [pc, #20]	; (8016820 <_sbrk+0x64>)
 801680c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801680e:	68fb      	ldr	r3, [r7, #12]
}
 8016810:	4618      	mov	r0, r3
 8016812:	3718      	adds	r7, #24
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	20010000 	.word	0x20010000
 801681c:	00000400 	.word	0x00000400
 8016820:	20009ba8 	.word	0x20009ba8
 8016824:	2000b128 	.word	0x2000b128

08016828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016828:	b480      	push	{r7}
 801682a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801682c:	4b06      	ldr	r3, [pc, #24]	; (8016848 <SystemInit+0x20>)
 801682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016832:	4a05      	ldr	r2, [pc, #20]	; (8016848 <SystemInit+0x20>)
 8016834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801683c:	bf00      	nop
 801683e:	46bd      	mov	sp, r7
 8016840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	e000ed00 	.word	0xe000ed00

0801684c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801684c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016850:	480d      	ldr	r0, [pc, #52]	; (8016888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8016852:	490e      	ldr	r1, [pc, #56]	; (801688c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016854:	4a0e      	ldr	r2, [pc, #56]	; (8016890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016858:	e002      	b.n	8016860 <LoopCopyDataInit>

0801685a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801685a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801685c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801685e:	3304      	adds	r3, #4

08016860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8016862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016864:	d3f9      	bcc.n	801685a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016866:	4a0b      	ldr	r2, [pc, #44]	; (8016894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016868:	4c0b      	ldr	r4, [pc, #44]	; (8016898 <LoopFillZerobss+0x26>)
  movs r3, #0
 801686a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801686c:	e001      	b.n	8016872 <LoopFillZerobss>

0801686e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801686e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016870:	3204      	adds	r2, #4

08016872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8016872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016874:	d3fb      	bcc.n	801686e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8016876:	f7ff ffd7 	bl	8016828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801687a:	f00a fa3d 	bl	8020cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801687e:	f7eb f827 	bl	80018d0 <main>
  bx  lr    
 8016882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8016884:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8016888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801688c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8016890:	080229c0 	.word	0x080229c0
  ldr r2, =_sbss
 8016894:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8016898:	2000b128 	.word	0x2000b128

0801689c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801689c:	e7fe      	b.n	801689c <ADC_IRQHandler>
	...

080168a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80168a4:	4b0e      	ldr	r3, [pc, #56]	; (80168e0 <HAL_Init+0x40>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	4a0d      	ldr	r2, [pc, #52]	; (80168e0 <HAL_Init+0x40>)
 80168aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80168ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80168b0:	4b0b      	ldr	r3, [pc, #44]	; (80168e0 <HAL_Init+0x40>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	4a0a      	ldr	r2, [pc, #40]	; (80168e0 <HAL_Init+0x40>)
 80168b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80168ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80168bc:	4b08      	ldr	r3, [pc, #32]	; (80168e0 <HAL_Init+0x40>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	4a07      	ldr	r2, [pc, #28]	; (80168e0 <HAL_Init+0x40>)
 80168c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80168c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80168c8:	2003      	movs	r0, #3
 80168ca:	f000 f94f 	bl	8016b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80168ce:	200f      	movs	r0, #15
 80168d0:	f000 f808 	bl	80168e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80168d4:	f7ff fe0c 	bl	80164f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80168d8:	2300      	movs	r3, #0
}
 80168da:	4618      	mov	r0, r3
 80168dc:	bd80      	pop	{r7, pc}
 80168de:	bf00      	nop
 80168e0:	40023c00 	.word	0x40023c00

080168e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80168ec:	4b12      	ldr	r3, [pc, #72]	; (8016938 <HAL_InitTick+0x54>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	4b12      	ldr	r3, [pc, #72]	; (801693c <HAL_InitTick+0x58>)
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	4619      	mov	r1, r3
 80168f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80168fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80168fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016902:	4618      	mov	r0, r3
 8016904:	f000 f967 	bl	8016bd6 <HAL_SYSTICK_Config>
 8016908:	4603      	mov	r3, r0
 801690a:	2b00      	cmp	r3, #0
 801690c:	d001      	beq.n	8016912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801690e:	2301      	movs	r3, #1
 8016910:	e00e      	b.n	8016930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2b0f      	cmp	r3, #15
 8016916:	d80a      	bhi.n	801692e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016918:	2200      	movs	r2, #0
 801691a:	6879      	ldr	r1, [r7, #4]
 801691c:	f04f 30ff 	mov.w	r0, #4294967295
 8016920:	f000 f92f 	bl	8016b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016924:	4a06      	ldr	r2, [pc, #24]	; (8016940 <HAL_InitTick+0x5c>)
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	e000      	b.n	8016930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801692e:	2301      	movs	r3, #1
}
 8016930:	4618      	mov	r0, r3
 8016932:	3708      	adds	r7, #8
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}
 8016938:	20000034 	.word	0x20000034
 801693c:	2000003c 	.word	0x2000003c
 8016940:	20000038 	.word	0x20000038

08016944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016944:	b480      	push	{r7}
 8016946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016948:	4b06      	ldr	r3, [pc, #24]	; (8016964 <HAL_IncTick+0x20>)
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	461a      	mov	r2, r3
 801694e:	4b06      	ldr	r3, [pc, #24]	; (8016968 <HAL_IncTick+0x24>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4413      	add	r3, r2
 8016954:	4a04      	ldr	r2, [pc, #16]	; (8016968 <HAL_IncTick+0x24>)
 8016956:	6013      	str	r3, [r2, #0]
}
 8016958:	bf00      	nop
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	2000003c 	.word	0x2000003c
 8016968:	20009bac 	.word	0x20009bac

0801696c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801696c:	b480      	push	{r7}
 801696e:	af00      	add	r7, sp, #0
  return uwTick;
 8016970:	4b03      	ldr	r3, [pc, #12]	; (8016980 <HAL_GetTick+0x14>)
 8016972:	681b      	ldr	r3, [r3, #0]
}
 8016974:	4618      	mov	r0, r3
 8016976:	46bd      	mov	sp, r7
 8016978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop
 8016980:	20009bac 	.word	0x20009bac

08016984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801698c:	f7ff ffee 	bl	801696c <HAL_GetTick>
 8016990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801699c:	d005      	beq.n	80169aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801699e:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <HAL_Delay+0x44>)
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	461a      	mov	r2, r3
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	4413      	add	r3, r2
 80169a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80169aa:	bf00      	nop
 80169ac:	f7ff ffde 	bl	801696c <HAL_GetTick>
 80169b0:	4602      	mov	r2, r0
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	1ad3      	subs	r3, r2, r3
 80169b6:	68fa      	ldr	r2, [r7, #12]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d8f7      	bhi.n	80169ac <HAL_Delay+0x28>
  {
  }
}
 80169bc:	bf00      	nop
 80169be:	bf00      	nop
 80169c0:	3710      	adds	r7, #16
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	2000003c 	.word	0x2000003c

080169cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80169cc:	b480      	push	{r7}
 80169ce:	b085      	sub	sp, #20
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f003 0307 	and.w	r3, r3, #7
 80169da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80169dc:	4b0c      	ldr	r3, [pc, #48]	; (8016a10 <__NVIC_SetPriorityGrouping+0x44>)
 80169de:	68db      	ldr	r3, [r3, #12]
 80169e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80169e2:	68ba      	ldr	r2, [r7, #8]
 80169e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80169e8:	4013      	ands	r3, r2
 80169ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80169f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80169f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80169fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80169fe:	4a04      	ldr	r2, [pc, #16]	; (8016a10 <__NVIC_SetPriorityGrouping+0x44>)
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	60d3      	str	r3, [r2, #12]
}
 8016a04:	bf00      	nop
 8016a06:	3714      	adds	r7, #20
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0e:	4770      	bx	lr
 8016a10:	e000ed00 	.word	0xe000ed00

08016a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016a14:	b480      	push	{r7}
 8016a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016a18:	4b04      	ldr	r3, [pc, #16]	; (8016a2c <__NVIC_GetPriorityGrouping+0x18>)
 8016a1a:	68db      	ldr	r3, [r3, #12]
 8016a1c:	0a1b      	lsrs	r3, r3, #8
 8016a1e:	f003 0307 	and.w	r3, r3, #7
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr
 8016a2c:	e000ed00 	.word	0xe000ed00

08016a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b083      	sub	sp, #12
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	4603      	mov	r3, r0
 8016a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	db0b      	blt.n	8016a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a42:	79fb      	ldrb	r3, [r7, #7]
 8016a44:	f003 021f 	and.w	r2, r3, #31
 8016a48:	4907      	ldr	r1, [pc, #28]	; (8016a68 <__NVIC_EnableIRQ+0x38>)
 8016a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a4e:	095b      	lsrs	r3, r3, #5
 8016a50:	2001      	movs	r0, #1
 8016a52:	fa00 f202 	lsl.w	r2, r0, r2
 8016a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016a5a:	bf00      	nop
 8016a5c:	370c      	adds	r7, #12
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a64:	4770      	bx	lr
 8016a66:	bf00      	nop
 8016a68:	e000e100 	.word	0xe000e100

08016a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016a6c:	b480      	push	{r7}
 8016a6e:	b083      	sub	sp, #12
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	4603      	mov	r3, r0
 8016a74:	6039      	str	r1, [r7, #0]
 8016a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	db0a      	blt.n	8016a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	b2da      	uxtb	r2, r3
 8016a84:	490c      	ldr	r1, [pc, #48]	; (8016ab8 <__NVIC_SetPriority+0x4c>)
 8016a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a8a:	0112      	lsls	r2, r2, #4
 8016a8c:	b2d2      	uxtb	r2, r2
 8016a8e:	440b      	add	r3, r1
 8016a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016a94:	e00a      	b.n	8016aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	b2da      	uxtb	r2, r3
 8016a9a:	4908      	ldr	r1, [pc, #32]	; (8016abc <__NVIC_SetPriority+0x50>)
 8016a9c:	79fb      	ldrb	r3, [r7, #7]
 8016a9e:	f003 030f 	and.w	r3, r3, #15
 8016aa2:	3b04      	subs	r3, #4
 8016aa4:	0112      	lsls	r2, r2, #4
 8016aa6:	b2d2      	uxtb	r2, r2
 8016aa8:	440b      	add	r3, r1
 8016aaa:	761a      	strb	r2, [r3, #24]
}
 8016aac:	bf00      	nop
 8016aae:	370c      	adds	r7, #12
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr
 8016ab8:	e000e100 	.word	0xe000e100
 8016abc:	e000ed00 	.word	0xe000ed00

08016ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b089      	sub	sp, #36	; 0x24
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f003 0307 	and.w	r3, r3, #7
 8016ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	f1c3 0307 	rsb	r3, r3, #7
 8016ada:	2b04      	cmp	r3, #4
 8016adc:	bf28      	it	cs
 8016ade:	2304      	movcs	r3, #4
 8016ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016ae2:	69fb      	ldr	r3, [r7, #28]
 8016ae4:	3304      	adds	r3, #4
 8016ae6:	2b06      	cmp	r3, #6
 8016ae8:	d902      	bls.n	8016af0 <NVIC_EncodePriority+0x30>
 8016aea:	69fb      	ldr	r3, [r7, #28]
 8016aec:	3b03      	subs	r3, #3
 8016aee:	e000      	b.n	8016af2 <NVIC_EncodePriority+0x32>
 8016af0:	2300      	movs	r3, #0
 8016af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016af4:	f04f 32ff 	mov.w	r2, #4294967295
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	fa02 f303 	lsl.w	r3, r2, r3
 8016afe:	43da      	mvns	r2, r3
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	401a      	ands	r2, r3
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016b08:	f04f 31ff 	mov.w	r1, #4294967295
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b12:	43d9      	mvns	r1, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016b18:	4313      	orrs	r3, r2
         );
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3724      	adds	r7, #36	; 0x24
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr
	...

08016b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	3b01      	subs	r3, #1
 8016b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016b38:	d301      	bcc.n	8016b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	e00f      	b.n	8016b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016b3e:	4a0a      	ldr	r2, [pc, #40]	; (8016b68 <SysTick_Config+0x40>)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	3b01      	subs	r3, #1
 8016b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016b46:	210f      	movs	r1, #15
 8016b48:	f04f 30ff 	mov.w	r0, #4294967295
 8016b4c:	f7ff ff8e 	bl	8016a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016b50:	4b05      	ldr	r3, [pc, #20]	; (8016b68 <SysTick_Config+0x40>)
 8016b52:	2200      	movs	r2, #0
 8016b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016b56:	4b04      	ldr	r3, [pc, #16]	; (8016b68 <SysTick_Config+0x40>)
 8016b58:	2207      	movs	r2, #7
 8016b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	e000e010 	.word	0xe000e010

08016b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7ff ff29 	bl	80169cc <__NVIC_SetPriorityGrouping>
}
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b086      	sub	sp, #24
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	4603      	mov	r3, r0
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	607a      	str	r2, [r7, #4]
 8016b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016b90:	2300      	movs	r3, #0
 8016b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016b94:	f7ff ff3e 	bl	8016a14 <__NVIC_GetPriorityGrouping>
 8016b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	68b9      	ldr	r1, [r7, #8]
 8016b9e:	6978      	ldr	r0, [r7, #20]
 8016ba0:	f7ff ff8e 	bl	8016ac0 <NVIC_EncodePriority>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016baa:	4611      	mov	r1, r2
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7ff ff5d 	bl	8016a6c <__NVIC_SetPriority>
}
 8016bb2:	bf00      	nop
 8016bb4:	3718      	adds	r7, #24
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}

08016bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016bba:	b580      	push	{r7, lr}
 8016bbc:	b082      	sub	sp, #8
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7ff ff31 	bl	8016a30 <__NVIC_EnableIRQ>
}
 8016bce:	bf00      	nop
 8016bd0:	3708      	adds	r7, #8
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b082      	sub	sp, #8
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7ff ffa2 	bl	8016b28 <SysTick_Config>
 8016be4:	4603      	mov	r3, r0
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3708      	adds	r7, #8
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
	...

08016bf0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b086      	sub	sp, #24
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016bfe:	2301      	movs	r3, #1
 8016c00:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8016c02:	4b23      	ldr	r3, [pc, #140]	; (8016c90 <HAL_FLASH_Program+0xa0>)
 8016c04:	7e1b      	ldrb	r3, [r3, #24]
 8016c06:	2b01      	cmp	r3, #1
 8016c08:	d101      	bne.n	8016c0e <HAL_FLASH_Program+0x1e>
 8016c0a:	2302      	movs	r3, #2
 8016c0c:	e03b      	b.n	8016c86 <HAL_FLASH_Program+0x96>
 8016c0e:	4b20      	ldr	r3, [pc, #128]	; (8016c90 <HAL_FLASH_Program+0xa0>)
 8016c10:	2201      	movs	r2, #1
 8016c12:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8016c14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8016c18:	f000 f870 	bl	8016cfc <FLASH_WaitForLastOperation>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8016c20:	7dfb      	ldrb	r3, [r7, #23]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d12b      	bne.n	8016c7e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d105      	bne.n	8016c38 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8016c2c:	783b      	ldrb	r3, [r7, #0]
 8016c2e:	4619      	mov	r1, r3
 8016c30:	68b8      	ldr	r0, [r7, #8]
 8016c32:	f000 f91b 	bl	8016e6c <FLASH_Program_Byte>
 8016c36:	e016      	b.n	8016c66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b01      	cmp	r3, #1
 8016c3c:	d105      	bne.n	8016c4a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8016c3e:	883b      	ldrh	r3, [r7, #0]
 8016c40:	4619      	mov	r1, r3
 8016c42:	68b8      	ldr	r0, [r7, #8]
 8016c44:	f000 f8ee 	bl	8016e24 <FLASH_Program_HalfWord>
 8016c48:	e00d      	b.n	8016c66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	2b02      	cmp	r3, #2
 8016c4e:	d105      	bne.n	8016c5c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	4619      	mov	r1, r3
 8016c54:	68b8      	ldr	r0, [r7, #8]
 8016c56:	f000 f8c3 	bl	8016de0 <FLASH_Program_Word>
 8016c5a:	e004      	b.n	8016c66 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8016c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c60:	68b8      	ldr	r0, [r7, #8]
 8016c62:	f000 f88b 	bl	8016d7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8016c66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8016c6a:	f000 f847 	bl	8016cfc <FLASH_WaitForLastOperation>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8016c72:	4b08      	ldr	r3, [pc, #32]	; (8016c94 <HAL_FLASH_Program+0xa4>)
 8016c74:	691b      	ldr	r3, [r3, #16]
 8016c76:	4a07      	ldr	r2, [pc, #28]	; (8016c94 <HAL_FLASH_Program+0xa4>)
 8016c78:	f023 0301 	bic.w	r3, r3, #1
 8016c7c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8016c7e:	4b04      	ldr	r3, [pc, #16]	; (8016c90 <HAL_FLASH_Program+0xa0>)
 8016c80:	2200      	movs	r2, #0
 8016c82:	761a      	strb	r2, [r3, #24]
  
  return status;
 8016c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3718      	adds	r7, #24
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20009bb0 	.word	0x20009bb0
 8016c94:	40023c00 	.word	0x40023c00

08016c98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b083      	sub	sp, #12
 8016c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8016ca2:	4b0b      	ldr	r3, [pc, #44]	; (8016cd0 <HAL_FLASH_Unlock+0x38>)
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	da0b      	bge.n	8016cc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8016caa:	4b09      	ldr	r3, [pc, #36]	; (8016cd0 <HAL_FLASH_Unlock+0x38>)
 8016cac:	4a09      	ldr	r2, [pc, #36]	; (8016cd4 <HAL_FLASH_Unlock+0x3c>)
 8016cae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8016cb0:	4b07      	ldr	r3, [pc, #28]	; (8016cd0 <HAL_FLASH_Unlock+0x38>)
 8016cb2:	4a09      	ldr	r2, [pc, #36]	; (8016cd8 <HAL_FLASH_Unlock+0x40>)
 8016cb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8016cb6:	4b06      	ldr	r3, [pc, #24]	; (8016cd0 <HAL_FLASH_Unlock+0x38>)
 8016cb8:	691b      	ldr	r3, [r3, #16]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	da01      	bge.n	8016cc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8016cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	370c      	adds	r7, #12
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cce:	4770      	bx	lr
 8016cd0:	40023c00 	.word	0x40023c00
 8016cd4:	45670123 	.word	0x45670123
 8016cd8:	cdef89ab 	.word	0xcdef89ab

08016cdc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8016cdc:	b480      	push	{r7}
 8016cde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8016ce0:	4b05      	ldr	r3, [pc, #20]	; (8016cf8 <HAL_FLASH_Lock+0x1c>)
 8016ce2:	691b      	ldr	r3, [r3, #16]
 8016ce4:	4a04      	ldr	r2, [pc, #16]	; (8016cf8 <HAL_FLASH_Lock+0x1c>)
 8016ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016cea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8016cec:	2300      	movs	r3, #0
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr
 8016cf8:	40023c00 	.word	0x40023c00

08016cfc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016d04:	2300      	movs	r3, #0
 8016d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8016d08:	4b1a      	ldr	r3, [pc, #104]	; (8016d74 <FLASH_WaitForLastOperation+0x78>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8016d0e:	f7ff fe2d 	bl	801696c <HAL_GetTick>
 8016d12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8016d14:	e010      	b.n	8016d38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d1c:	d00c      	beq.n	8016d38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d007      	beq.n	8016d34 <FLASH_WaitForLastOperation+0x38>
 8016d24:	f7ff fe22 	bl	801696c <HAL_GetTick>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	1ad3      	subs	r3, r2, r3
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d201      	bcs.n	8016d38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8016d34:	2303      	movs	r3, #3
 8016d36:	e019      	b.n	8016d6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8016d38:	4b0f      	ldr	r3, [pc, #60]	; (8016d78 <FLASH_WaitForLastOperation+0x7c>)
 8016d3a:	68db      	ldr	r3, [r3, #12]
 8016d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d1e8      	bne.n	8016d16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8016d44:	4b0c      	ldr	r3, [pc, #48]	; (8016d78 <FLASH_WaitForLastOperation+0x7c>)
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	f003 0301 	and.w	r3, r3, #1
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d002      	beq.n	8016d56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8016d50:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <FLASH_WaitForLastOperation+0x7c>)
 8016d52:	2201      	movs	r2, #1
 8016d54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8016d56:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <FLASH_WaitForLastOperation+0x7c>)
 8016d58:	68db      	ldr	r3, [r3, #12]
 8016d5a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d003      	beq.n	8016d6a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8016d62:	f000 f8a5 	bl	8016eb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8016d66:	2301      	movs	r3, #1
 8016d68:	e000      	b.n	8016d6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8016d6a:	2300      	movs	r3, #0
  
}  
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	20009bb0 	.word	0x20009bb0
 8016d78:	40023c00 	.word	0x40023c00

08016d7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b085      	sub	sp, #20
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	60f8      	str	r0, [r7, #12]
 8016d84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8016d88:	4b14      	ldr	r3, [pc, #80]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016d8a:	691b      	ldr	r3, [r3, #16]
 8016d8c:	4a13      	ldr	r2, [pc, #76]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8016d94:	4b11      	ldr	r3, [pc, #68]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016d96:	691b      	ldr	r3, [r3, #16]
 8016d98:	4a10      	ldr	r2, [pc, #64]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016d9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016d9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8016da0:	4b0e      	ldr	r3, [pc, #56]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016da2:	691b      	ldr	r3, [r3, #16]
 8016da4:	4a0d      	ldr	r2, [pc, #52]	; (8016ddc <FLASH_Program_DoubleWord+0x60>)
 8016da6:	f043 0301 	orr.w	r3, r3, #1
 8016daa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	683a      	ldr	r2, [r7, #0]
 8016db0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8016db2:	f3bf 8f6f 	isb	sy
}
 8016db6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8016db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016dbc:	f04f 0200 	mov.w	r2, #0
 8016dc0:	f04f 0300 	mov.w	r3, #0
 8016dc4:	000a      	movs	r2, r1
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	68f9      	ldr	r1, [r7, #12]
 8016dca:	3104      	adds	r1, #4
 8016dcc:	4613      	mov	r3, r2
 8016dce:	600b      	str	r3, [r1, #0]
}
 8016dd0:	bf00      	nop
 8016dd2:	3714      	adds	r7, #20
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dda:	4770      	bx	lr
 8016ddc:	40023c00 	.word	0x40023c00

08016de0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8016de0:	b480      	push	{r7}
 8016de2:	b083      	sub	sp, #12
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8016dea:	4b0d      	ldr	r3, [pc, #52]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016dec:	691b      	ldr	r3, [r3, #16]
 8016dee:	4a0c      	ldr	r2, [pc, #48]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016df4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8016df6:	4b0a      	ldr	r3, [pc, #40]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016df8:	691b      	ldr	r3, [r3, #16]
 8016dfa:	4a09      	ldr	r2, [pc, #36]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8016e02:	4b07      	ldr	r3, [pc, #28]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016e04:	691b      	ldr	r3, [r3, #16]
 8016e06:	4a06      	ldr	r2, [pc, #24]	; (8016e20 <FLASH_Program_Word+0x40>)
 8016e08:	f043 0301 	orr.w	r3, r3, #1
 8016e0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	683a      	ldr	r2, [r7, #0]
 8016e12:	601a      	str	r2, [r3, #0]
}
 8016e14:	bf00      	nop
 8016e16:	370c      	adds	r7, #12
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr
 8016e20:	40023c00 	.word	0x40023c00

08016e24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8016e30:	4b0d      	ldr	r3, [pc, #52]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e32:	691b      	ldr	r3, [r3, #16]
 8016e34:	4a0c      	ldr	r2, [pc, #48]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8016e3c:	4b0a      	ldr	r3, [pc, #40]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e3e:	691b      	ldr	r3, [r3, #16]
 8016e40:	4a09      	ldr	r2, [pc, #36]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8016e48:	4b07      	ldr	r3, [pc, #28]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e4a:	691b      	ldr	r3, [r3, #16]
 8016e4c:	4a06      	ldr	r2, [pc, #24]	; (8016e68 <FLASH_Program_HalfWord+0x44>)
 8016e4e:	f043 0301 	orr.w	r3, r3, #1
 8016e52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	887a      	ldrh	r2, [r7, #2]
 8016e58:	801a      	strh	r2, [r3, #0]
}
 8016e5a:	bf00      	nop
 8016e5c:	370c      	adds	r7, #12
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e64:	4770      	bx	lr
 8016e66:	bf00      	nop
 8016e68:	40023c00 	.word	0x40023c00

08016e6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8016e6c:	b480      	push	{r7}
 8016e6e:	b083      	sub	sp, #12
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	460b      	mov	r3, r1
 8016e76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8016e78:	4b0c      	ldr	r3, [pc, #48]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e7a:	691b      	ldr	r3, [r3, #16]
 8016e7c:	4a0b      	ldr	r2, [pc, #44]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8016e84:	4b09      	ldr	r3, [pc, #36]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e86:	4a09      	ldr	r2, [pc, #36]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e88:	691b      	ldr	r3, [r3, #16]
 8016e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8016e8c:	4b07      	ldr	r3, [pc, #28]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e8e:	691b      	ldr	r3, [r3, #16]
 8016e90:	4a06      	ldr	r2, [pc, #24]	; (8016eac <FLASH_Program_Byte+0x40>)
 8016e92:	f043 0301 	orr.w	r3, r3, #1
 8016e96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	78fa      	ldrb	r2, [r7, #3]
 8016e9c:	701a      	strb	r2, [r3, #0]
}
 8016e9e:	bf00      	nop
 8016ea0:	370c      	adds	r7, #12
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea8:	4770      	bx	lr
 8016eaa:	bf00      	nop
 8016eac:	40023c00 	.word	0x40023c00

08016eb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8016eb0:	b480      	push	{r7}
 8016eb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8016eb4:	4b2f      	ldr	r3, [pc, #188]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	f003 0310 	and.w	r3, r3, #16
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d008      	beq.n	8016ed2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8016ec0:	4b2d      	ldr	r3, [pc, #180]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016ec2:	69db      	ldr	r3, [r3, #28]
 8016ec4:	f043 0310 	orr.w	r3, r3, #16
 8016ec8:	4a2b      	ldr	r2, [pc, #172]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016eca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8016ecc:	4b29      	ldr	r3, [pc, #164]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016ece:	2210      	movs	r2, #16
 8016ed0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8016ed2:	4b28      	ldr	r3, [pc, #160]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	f003 0320 	and.w	r3, r3, #32
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d008      	beq.n	8016ef0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8016ede:	4b26      	ldr	r3, [pc, #152]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016ee0:	69db      	ldr	r3, [r3, #28]
 8016ee2:	f043 0308 	orr.w	r3, r3, #8
 8016ee6:	4a24      	ldr	r2, [pc, #144]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016ee8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8016eea:	4b22      	ldr	r3, [pc, #136]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016eec:	2220      	movs	r2, #32
 8016eee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8016ef0:	4b20      	ldr	r3, [pc, #128]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d008      	beq.n	8016f0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8016efc:	4b1e      	ldr	r3, [pc, #120]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016efe:	69db      	ldr	r3, [r3, #28]
 8016f00:	f043 0304 	orr.w	r3, r3, #4
 8016f04:	4a1c      	ldr	r2, [pc, #112]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8016f08:	4b1a      	ldr	r3, [pc, #104]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f0a:	2240      	movs	r2, #64	; 0x40
 8016f0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8016f0e:	4b19      	ldr	r3, [pc, #100]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d008      	beq.n	8016f2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8016f1a:	4b17      	ldr	r3, [pc, #92]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f1c:	69db      	ldr	r3, [r3, #28]
 8016f1e:	f043 0302 	orr.w	r3, r3, #2
 8016f22:	4a15      	ldr	r2, [pc, #84]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8016f26:	4b13      	ldr	r3, [pc, #76]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f28:	2280      	movs	r2, #128	; 0x80
 8016f2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8016f2c:	4b11      	ldr	r3, [pc, #68]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f2e:	68db      	ldr	r3, [r3, #12]
 8016f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d009      	beq.n	8016f4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8016f38:	4b0f      	ldr	r3, [pc, #60]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f3a:	69db      	ldr	r3, [r3, #28]
 8016f3c:	f043 0301 	orr.w	r3, r3, #1
 8016f40:	4a0d      	ldr	r2, [pc, #52]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8016f44:	4b0b      	ldr	r3, [pc, #44]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016f4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8016f4c:	4b09      	ldr	r3, [pc, #36]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	f003 0302 	and.w	r3, r3, #2
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d008      	beq.n	8016f6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8016f58:	4b07      	ldr	r3, [pc, #28]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f5a:	69db      	ldr	r3, [r3, #28]
 8016f5c:	f043 0320 	orr.w	r3, r3, #32
 8016f60:	4a05      	ldr	r2, [pc, #20]	; (8016f78 <FLASH_SetErrorCode+0xc8>)
 8016f62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8016f64:	4b03      	ldr	r3, [pc, #12]	; (8016f74 <FLASH_SetErrorCode+0xc4>)
 8016f66:	2202      	movs	r2, #2
 8016f68:	60da      	str	r2, [r3, #12]
  }
}
 8016f6a:	bf00      	nop
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr
 8016f74:	40023c00 	.word	0x40023c00
 8016f78:	20009bb0 	.word	0x20009bb0

08016f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b089      	sub	sp, #36	; 0x24
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016f86:	2300      	movs	r3, #0
 8016f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016f92:	2300      	movs	r3, #0
 8016f94:	61fb      	str	r3, [r7, #28]
 8016f96:	e159      	b.n	801724c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016f98:	2201      	movs	r2, #1
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8016fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	697a      	ldr	r2, [r7, #20]
 8016fa8:	4013      	ands	r3, r2
 8016faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016fac:	693a      	ldr	r2, [r7, #16]
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	f040 8148 	bne.w	8017246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	f003 0303 	and.w	r3, r3, #3
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d005      	beq.n	8016fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016fca:	2b02      	cmp	r3, #2
 8016fcc:	d130      	bne.n	8017030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	689b      	ldr	r3, [r3, #8]
 8016fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	005b      	lsls	r3, r3, #1
 8016fd8:	2203      	movs	r2, #3
 8016fda:	fa02 f303 	lsl.w	r3, r2, r3
 8016fde:	43db      	mvns	r3, r3
 8016fe0:	69ba      	ldr	r2, [r7, #24]
 8016fe2:	4013      	ands	r3, r2
 8016fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	68da      	ldr	r2, [r3, #12]
 8016fea:	69fb      	ldr	r3, [r7, #28]
 8016fec:	005b      	lsls	r3, r3, #1
 8016fee:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff2:	69ba      	ldr	r2, [r7, #24]
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	69ba      	ldr	r2, [r7, #24]
 8016ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017004:	2201      	movs	r2, #1
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	fa02 f303 	lsl.w	r3, r2, r3
 801700c:	43db      	mvns	r3, r3
 801700e:	69ba      	ldr	r2, [r7, #24]
 8017010:	4013      	ands	r3, r2
 8017012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	091b      	lsrs	r3, r3, #4
 801701a:	f003 0201 	and.w	r2, r3, #1
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	fa02 f303 	lsl.w	r3, r2, r3
 8017024:	69ba      	ldr	r2, [r7, #24]
 8017026:	4313      	orrs	r3, r2
 8017028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	69ba      	ldr	r2, [r7, #24]
 801702e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	f003 0303 	and.w	r3, r3, #3
 8017038:	2b03      	cmp	r3, #3
 801703a:	d017      	beq.n	801706c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017042:	69fb      	ldr	r3, [r7, #28]
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	2203      	movs	r2, #3
 8017048:	fa02 f303 	lsl.w	r3, r2, r3
 801704c:	43db      	mvns	r3, r3
 801704e:	69ba      	ldr	r2, [r7, #24]
 8017050:	4013      	ands	r3, r2
 8017052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	689a      	ldr	r2, [r3, #8]
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	fa02 f303 	lsl.w	r3, r2, r3
 8017060:	69ba      	ldr	r2, [r7, #24]
 8017062:	4313      	orrs	r3, r2
 8017064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	69ba      	ldr	r2, [r7, #24]
 801706a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	f003 0303 	and.w	r3, r3, #3
 8017074:	2b02      	cmp	r3, #2
 8017076:	d123      	bne.n	80170c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017078:	69fb      	ldr	r3, [r7, #28]
 801707a:	08da      	lsrs	r2, r3, #3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	3208      	adds	r2, #8
 8017080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	f003 0307 	and.w	r3, r3, #7
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	220f      	movs	r2, #15
 8017090:	fa02 f303 	lsl.w	r3, r2, r3
 8017094:	43db      	mvns	r3, r3
 8017096:	69ba      	ldr	r2, [r7, #24]
 8017098:	4013      	ands	r3, r2
 801709a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	691a      	ldr	r2, [r3, #16]
 80170a0:	69fb      	ldr	r3, [r7, #28]
 80170a2:	f003 0307 	and.w	r3, r3, #7
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	fa02 f303 	lsl.w	r3, r2, r3
 80170ac:	69ba      	ldr	r2, [r7, #24]
 80170ae:	4313      	orrs	r3, r2
 80170b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	08da      	lsrs	r2, r3, #3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	3208      	adds	r2, #8
 80170ba:	69b9      	ldr	r1, [r7, #24]
 80170bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	005b      	lsls	r3, r3, #1
 80170ca:	2203      	movs	r2, #3
 80170cc:	fa02 f303 	lsl.w	r3, r2, r3
 80170d0:	43db      	mvns	r3, r3
 80170d2:	69ba      	ldr	r2, [r7, #24]
 80170d4:	4013      	ands	r3, r2
 80170d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	f003 0203 	and.w	r2, r3, #3
 80170e0:	69fb      	ldr	r3, [r7, #28]
 80170e2:	005b      	lsls	r3, r3, #1
 80170e4:	fa02 f303 	lsl.w	r3, r2, r3
 80170e8:	69ba      	ldr	r2, [r7, #24]
 80170ea:	4313      	orrs	r3, r2
 80170ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	69ba      	ldr	r2, [r7, #24]
 80170f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f000 80a2 	beq.w	8017246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017102:	2300      	movs	r3, #0
 8017104:	60fb      	str	r3, [r7, #12]
 8017106:	4b57      	ldr	r3, [pc, #348]	; (8017264 <HAL_GPIO_Init+0x2e8>)
 8017108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801710a:	4a56      	ldr	r2, [pc, #344]	; (8017264 <HAL_GPIO_Init+0x2e8>)
 801710c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017110:	6453      	str	r3, [r2, #68]	; 0x44
 8017112:	4b54      	ldr	r3, [pc, #336]	; (8017264 <HAL_GPIO_Init+0x2e8>)
 8017114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801711a:	60fb      	str	r3, [r7, #12]
 801711c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801711e:	4a52      	ldr	r2, [pc, #328]	; (8017268 <HAL_GPIO_Init+0x2ec>)
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	089b      	lsrs	r3, r3, #2
 8017124:	3302      	adds	r3, #2
 8017126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801712a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	f003 0303 	and.w	r3, r3, #3
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	220f      	movs	r2, #15
 8017136:	fa02 f303 	lsl.w	r3, r2, r3
 801713a:	43db      	mvns	r3, r3
 801713c:	69ba      	ldr	r2, [r7, #24]
 801713e:	4013      	ands	r3, r2
 8017140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4a49      	ldr	r2, [pc, #292]	; (801726c <HAL_GPIO_Init+0x2f0>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d019      	beq.n	801717e <HAL_GPIO_Init+0x202>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4a48      	ldr	r2, [pc, #288]	; (8017270 <HAL_GPIO_Init+0x2f4>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d013      	beq.n	801717a <HAL_GPIO_Init+0x1fe>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4a47      	ldr	r2, [pc, #284]	; (8017274 <HAL_GPIO_Init+0x2f8>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d00d      	beq.n	8017176 <HAL_GPIO_Init+0x1fa>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a46      	ldr	r2, [pc, #280]	; (8017278 <HAL_GPIO_Init+0x2fc>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d007      	beq.n	8017172 <HAL_GPIO_Init+0x1f6>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	4a45      	ldr	r2, [pc, #276]	; (801727c <HAL_GPIO_Init+0x300>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d101      	bne.n	801716e <HAL_GPIO_Init+0x1f2>
 801716a:	2304      	movs	r3, #4
 801716c:	e008      	b.n	8017180 <HAL_GPIO_Init+0x204>
 801716e:	2307      	movs	r3, #7
 8017170:	e006      	b.n	8017180 <HAL_GPIO_Init+0x204>
 8017172:	2303      	movs	r3, #3
 8017174:	e004      	b.n	8017180 <HAL_GPIO_Init+0x204>
 8017176:	2302      	movs	r3, #2
 8017178:	e002      	b.n	8017180 <HAL_GPIO_Init+0x204>
 801717a:	2301      	movs	r3, #1
 801717c:	e000      	b.n	8017180 <HAL_GPIO_Init+0x204>
 801717e:	2300      	movs	r3, #0
 8017180:	69fa      	ldr	r2, [r7, #28]
 8017182:	f002 0203 	and.w	r2, r2, #3
 8017186:	0092      	lsls	r2, r2, #2
 8017188:	4093      	lsls	r3, r2
 801718a:	69ba      	ldr	r2, [r7, #24]
 801718c:	4313      	orrs	r3, r2
 801718e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017190:	4935      	ldr	r1, [pc, #212]	; (8017268 <HAL_GPIO_Init+0x2ec>)
 8017192:	69fb      	ldr	r3, [r7, #28]
 8017194:	089b      	lsrs	r3, r3, #2
 8017196:	3302      	adds	r3, #2
 8017198:	69ba      	ldr	r2, [r7, #24]
 801719a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801719e:	4b38      	ldr	r3, [pc, #224]	; (8017280 <HAL_GPIO_Init+0x304>)
 80171a0:	689b      	ldr	r3, [r3, #8]
 80171a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	43db      	mvns	r3, r3
 80171a8:	69ba      	ldr	r2, [r7, #24]
 80171aa:	4013      	ands	r3, r2
 80171ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	685b      	ldr	r3, [r3, #4]
 80171b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d003      	beq.n	80171c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80171ba:	69ba      	ldr	r2, [r7, #24]
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	4313      	orrs	r3, r2
 80171c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80171c2:	4a2f      	ldr	r2, [pc, #188]	; (8017280 <HAL_GPIO_Init+0x304>)
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80171c8:	4b2d      	ldr	r3, [pc, #180]	; (8017280 <HAL_GPIO_Init+0x304>)
 80171ca:	68db      	ldr	r3, [r3, #12]
 80171cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	43db      	mvns	r3, r3
 80171d2:	69ba      	ldr	r2, [r7, #24]
 80171d4:	4013      	ands	r3, r2
 80171d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	685b      	ldr	r3, [r3, #4]
 80171dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d003      	beq.n	80171ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80171e4:	69ba      	ldr	r2, [r7, #24]
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	4313      	orrs	r3, r2
 80171ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80171ec:	4a24      	ldr	r2, [pc, #144]	; (8017280 <HAL_GPIO_Init+0x304>)
 80171ee:	69bb      	ldr	r3, [r7, #24]
 80171f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80171f2:	4b23      	ldr	r3, [pc, #140]	; (8017280 <HAL_GPIO_Init+0x304>)
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	43db      	mvns	r3, r3
 80171fc:	69ba      	ldr	r2, [r7, #24]
 80171fe:	4013      	ands	r3, r2
 8017200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801720a:	2b00      	cmp	r3, #0
 801720c:	d003      	beq.n	8017216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801720e:	69ba      	ldr	r2, [r7, #24]
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	4313      	orrs	r3, r2
 8017214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017216:	4a1a      	ldr	r2, [pc, #104]	; (8017280 <HAL_GPIO_Init+0x304>)
 8017218:	69bb      	ldr	r3, [r7, #24]
 801721a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801721c:	4b18      	ldr	r3, [pc, #96]	; (8017280 <HAL_GPIO_Init+0x304>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	43db      	mvns	r3, r3
 8017226:	69ba      	ldr	r2, [r7, #24]
 8017228:	4013      	ands	r3, r2
 801722a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017234:	2b00      	cmp	r3, #0
 8017236:	d003      	beq.n	8017240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	4313      	orrs	r3, r2
 801723e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017240:	4a0f      	ldr	r2, [pc, #60]	; (8017280 <HAL_GPIO_Init+0x304>)
 8017242:	69bb      	ldr	r3, [r7, #24]
 8017244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	3301      	adds	r3, #1
 801724a:	61fb      	str	r3, [r7, #28]
 801724c:	69fb      	ldr	r3, [r7, #28]
 801724e:	2b0f      	cmp	r3, #15
 8017250:	f67f aea2 	bls.w	8016f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017254:	bf00      	nop
 8017256:	bf00      	nop
 8017258:	3724      	adds	r7, #36	; 0x24
 801725a:	46bd      	mov	sp, r7
 801725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017260:	4770      	bx	lr
 8017262:	bf00      	nop
 8017264:	40023800 	.word	0x40023800
 8017268:	40013800 	.word	0x40013800
 801726c:	40020000 	.word	0x40020000
 8017270:	40020400 	.word	0x40020400
 8017274:	40020800 	.word	0x40020800
 8017278:	40020c00 	.word	0x40020c00
 801727c:	40021000 	.word	0x40021000
 8017280:	40013c00 	.word	0x40013c00

08017284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017284:	b480      	push	{r7}
 8017286:	b085      	sub	sp, #20
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	460b      	mov	r3, r1
 801728e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	691a      	ldr	r2, [r3, #16]
 8017294:	887b      	ldrh	r3, [r7, #2]
 8017296:	4013      	ands	r3, r2
 8017298:	2b00      	cmp	r3, #0
 801729a:	d002      	beq.n	80172a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801729c:	2301      	movs	r3, #1
 801729e:	73fb      	strb	r3, [r7, #15]
 80172a0:	e001      	b.n	80172a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80172a2:	2300      	movs	r3, #0
 80172a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80172a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3714      	adds	r7, #20
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b083      	sub	sp, #12
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	460b      	mov	r3, r1
 80172be:	807b      	strh	r3, [r7, #2]
 80172c0:	4613      	mov	r3, r2
 80172c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80172c4:	787b      	ldrb	r3, [r7, #1]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d003      	beq.n	80172d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80172ca:	887a      	ldrh	r2, [r7, #2]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80172d0:	e003      	b.n	80172da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80172d2:	887b      	ldrh	r3, [r7, #2]
 80172d4:	041a      	lsls	r2, r3, #16
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	619a      	str	r2, [r3, #24]
}
 80172da:	bf00      	nop
 80172dc:	370c      	adds	r7, #12
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr

080172e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80172e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172e8:	b08f      	sub	sp, #60	; 0x3c
 80172ea:	af0a      	add	r7, sp, #40	; 0x28
 80172ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d101      	bne.n	80172f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80172f4:	2301      	movs	r3, #1
 80172f6:	e10f      	b.n	8017518 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8017304:	b2db      	uxtb	r3, r3
 8017306:	2b00      	cmp	r3, #0
 8017308:	d106      	bne.n	8017318 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2200      	movs	r2, #0
 801730e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f006 fd96 	bl	801de44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2203      	movs	r2, #3
 801731c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017328:	2b00      	cmp	r3, #0
 801732a:	d102      	bne.n	8017332 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2200      	movs	r2, #0
 8017330:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4618      	mov	r0, r3
 8017338:	f003 f8e9 	bl	801a50e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	603b      	str	r3, [r7, #0]
 8017342:	687e      	ldr	r6, [r7, #4]
 8017344:	466d      	mov	r5, sp
 8017346:	f106 0410 	add.w	r4, r6, #16
 801734a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801734c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801734e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017356:	e885 0003 	stmia.w	r5, {r0, r1}
 801735a:	1d33      	adds	r3, r6, #4
 801735c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801735e:	6838      	ldr	r0, [r7, #0]
 8017360:	f002 ffc0 	bl	801a2e4 <USB_CoreInit>
 8017364:	4603      	mov	r3, r0
 8017366:	2b00      	cmp	r3, #0
 8017368:	d005      	beq.n	8017376 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2202      	movs	r2, #2
 801736e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8017372:	2301      	movs	r3, #1
 8017374:	e0d0      	b.n	8017518 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	2100      	movs	r1, #0
 801737c:	4618      	mov	r0, r3
 801737e:	f003 f8d7 	bl	801a530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017382:	2300      	movs	r3, #0
 8017384:	73fb      	strb	r3, [r7, #15]
 8017386:	e04a      	b.n	801741e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017388:	7bfa      	ldrb	r2, [r7, #15]
 801738a:	6879      	ldr	r1, [r7, #4]
 801738c:	4613      	mov	r3, r2
 801738e:	00db      	lsls	r3, r3, #3
 8017390:	4413      	add	r3, r2
 8017392:	009b      	lsls	r3, r3, #2
 8017394:	440b      	add	r3, r1
 8017396:	333d      	adds	r3, #61	; 0x3d
 8017398:	2201      	movs	r2, #1
 801739a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801739c:	7bfa      	ldrb	r2, [r7, #15]
 801739e:	6879      	ldr	r1, [r7, #4]
 80173a0:	4613      	mov	r3, r2
 80173a2:	00db      	lsls	r3, r3, #3
 80173a4:	4413      	add	r3, r2
 80173a6:	009b      	lsls	r3, r3, #2
 80173a8:	440b      	add	r3, r1
 80173aa:	333c      	adds	r3, #60	; 0x3c
 80173ac:	7bfa      	ldrb	r2, [r7, #15]
 80173ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80173b0:	7bfa      	ldrb	r2, [r7, #15]
 80173b2:	7bfb      	ldrb	r3, [r7, #15]
 80173b4:	b298      	uxth	r0, r3
 80173b6:	6879      	ldr	r1, [r7, #4]
 80173b8:	4613      	mov	r3, r2
 80173ba:	00db      	lsls	r3, r3, #3
 80173bc:	4413      	add	r3, r2
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	440b      	add	r3, r1
 80173c2:	3344      	adds	r3, #68	; 0x44
 80173c4:	4602      	mov	r2, r0
 80173c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80173c8:	7bfa      	ldrb	r2, [r7, #15]
 80173ca:	6879      	ldr	r1, [r7, #4]
 80173cc:	4613      	mov	r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	4413      	add	r3, r2
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	440b      	add	r3, r1
 80173d6:	3340      	adds	r3, #64	; 0x40
 80173d8:	2200      	movs	r2, #0
 80173da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80173dc:	7bfa      	ldrb	r2, [r7, #15]
 80173de:	6879      	ldr	r1, [r7, #4]
 80173e0:	4613      	mov	r3, r2
 80173e2:	00db      	lsls	r3, r3, #3
 80173e4:	4413      	add	r3, r2
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	440b      	add	r3, r1
 80173ea:	3348      	adds	r3, #72	; 0x48
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80173f0:	7bfa      	ldrb	r2, [r7, #15]
 80173f2:	6879      	ldr	r1, [r7, #4]
 80173f4:	4613      	mov	r3, r2
 80173f6:	00db      	lsls	r3, r3, #3
 80173f8:	4413      	add	r3, r2
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	440b      	add	r3, r1
 80173fe:	334c      	adds	r3, #76	; 0x4c
 8017400:	2200      	movs	r2, #0
 8017402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8017404:	7bfa      	ldrb	r2, [r7, #15]
 8017406:	6879      	ldr	r1, [r7, #4]
 8017408:	4613      	mov	r3, r2
 801740a:	00db      	lsls	r3, r3, #3
 801740c:	4413      	add	r3, r2
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	440b      	add	r3, r1
 8017412:	3354      	adds	r3, #84	; 0x54
 8017414:	2200      	movs	r2, #0
 8017416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017418:	7bfb      	ldrb	r3, [r7, #15]
 801741a:	3301      	adds	r3, #1
 801741c:	73fb      	strb	r3, [r7, #15]
 801741e:	7bfa      	ldrb	r2, [r7, #15]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	429a      	cmp	r2, r3
 8017426:	d3af      	bcc.n	8017388 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017428:	2300      	movs	r3, #0
 801742a:	73fb      	strb	r3, [r7, #15]
 801742c:	e044      	b.n	80174b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801742e:	7bfa      	ldrb	r2, [r7, #15]
 8017430:	6879      	ldr	r1, [r7, #4]
 8017432:	4613      	mov	r3, r2
 8017434:	00db      	lsls	r3, r3, #3
 8017436:	4413      	add	r3, r2
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	440b      	add	r3, r1
 801743c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8017440:	2200      	movs	r2, #0
 8017442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017444:	7bfa      	ldrb	r2, [r7, #15]
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	4613      	mov	r3, r2
 801744a:	00db      	lsls	r3, r3, #3
 801744c:	4413      	add	r3, r2
 801744e:	009b      	lsls	r3, r3, #2
 8017450:	440b      	add	r3, r1
 8017452:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8017456:	7bfa      	ldrb	r2, [r7, #15]
 8017458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801745a:	7bfa      	ldrb	r2, [r7, #15]
 801745c:	6879      	ldr	r1, [r7, #4]
 801745e:	4613      	mov	r3, r2
 8017460:	00db      	lsls	r3, r3, #3
 8017462:	4413      	add	r3, r2
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	440b      	add	r3, r1
 8017468:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801746c:	2200      	movs	r2, #0
 801746e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8017470:	7bfa      	ldrb	r2, [r7, #15]
 8017472:	6879      	ldr	r1, [r7, #4]
 8017474:	4613      	mov	r3, r2
 8017476:	00db      	lsls	r3, r3, #3
 8017478:	4413      	add	r3, r2
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	440b      	add	r3, r1
 801747e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017482:	2200      	movs	r2, #0
 8017484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017486:	7bfa      	ldrb	r2, [r7, #15]
 8017488:	6879      	ldr	r1, [r7, #4]
 801748a:	4613      	mov	r3, r2
 801748c:	00db      	lsls	r3, r3, #3
 801748e:	4413      	add	r3, r2
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	440b      	add	r3, r1
 8017494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017498:	2200      	movs	r2, #0
 801749a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801749c:	7bfa      	ldrb	r2, [r7, #15]
 801749e:	6879      	ldr	r1, [r7, #4]
 80174a0:	4613      	mov	r3, r2
 80174a2:	00db      	lsls	r3, r3, #3
 80174a4:	4413      	add	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	440b      	add	r3, r1
 80174aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80174ae:	2200      	movs	r2, #0
 80174b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80174b2:	7bfb      	ldrb	r3, [r7, #15]
 80174b4:	3301      	adds	r3, #1
 80174b6:	73fb      	strb	r3, [r7, #15]
 80174b8:	7bfa      	ldrb	r2, [r7, #15]
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	429a      	cmp	r2, r3
 80174c0:	d3b5      	bcc.n	801742e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	603b      	str	r3, [r7, #0]
 80174c8:	687e      	ldr	r6, [r7, #4]
 80174ca:	466d      	mov	r5, sp
 80174cc:	f106 0410 	add.w	r4, r6, #16
 80174d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80174dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80174e0:	1d33      	adds	r3, r6, #4
 80174e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80174e4:	6838      	ldr	r0, [r7, #0]
 80174e6:	f003 f86f 	bl	801a5c8 <USB_DevInit>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d005      	beq.n	80174fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2202      	movs	r2, #2
 80174f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80174f8:	2301      	movs	r3, #1
 80174fa:	e00d      	b.n	8017518 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2200      	movs	r2, #0
 8017500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2201      	movs	r2, #1
 8017508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4618      	mov	r0, r3
 8017512:	f004 f9be 	bl	801b892 <USB_DevDisconnect>

  return HAL_OK;
 8017516:	2300      	movs	r3, #0
}
 8017518:	4618      	mov	r0, r3
 801751a:	3714      	adds	r7, #20
 801751c:	46bd      	mov	sp, r7
 801751e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017520 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8017534:	2b01      	cmp	r3, #1
 8017536:	d101      	bne.n	801753c <HAL_PCD_Start+0x1c>
 8017538:	2302      	movs	r3, #2
 801753a:	e020      	b.n	801757e <HAL_PCD_Start+0x5e>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2201      	movs	r2, #1
 8017540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017548:	2b01      	cmp	r3, #1
 801754a:	d109      	bne.n	8017560 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8017550:	2b01      	cmp	r3, #1
 8017552:	d005      	beq.n	8017560 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017558:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	4618      	mov	r0, r3
 8017566:	f002 ffc1 	bl	801a4ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	4618      	mov	r0, r3
 8017570:	f004 f96e 	bl	801b850 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2200      	movs	r2, #0
 8017578:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801757c:	2300      	movs	r3, #0
}
 801757e:	4618      	mov	r0, r3
 8017580:	3710      	adds	r7, #16
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}

08017586 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8017586:	b590      	push	{r4, r7, lr}
 8017588:	b08d      	sub	sp, #52	; 0x34
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017594:	6a3b      	ldr	r3, [r7, #32]
 8017596:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4618      	mov	r0, r3
 801759e:	f004 fa2c 	bl	801b9fa <USB_GetMode>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	f040 848a 	bne.w	8017ebe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	4618      	mov	r0, r3
 80175b0:	f004 f990 	bl	801b8d4 <USB_ReadInterrupts>
 80175b4:	4603      	mov	r3, r0
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f000 8480 	beq.w	8017ebc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80175c2:	689b      	ldr	r3, [r3, #8]
 80175c4:	0a1b      	lsrs	r3, r3, #8
 80175c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	4618      	mov	r0, r3
 80175d6:	f004 f97d 	bl	801b8d4 <USB_ReadInterrupts>
 80175da:	4603      	mov	r3, r0
 80175dc:	f003 0302 	and.w	r3, r3, #2
 80175e0:	2b02      	cmp	r3, #2
 80175e2:	d107      	bne.n	80175f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	695a      	ldr	r2, [r3, #20]
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	f002 0202 	and.w	r2, r2, #2
 80175f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	4618      	mov	r0, r3
 80175fa:	f004 f96b 	bl	801b8d4 <USB_ReadInterrupts>
 80175fe:	4603      	mov	r3, r0
 8017600:	f003 0310 	and.w	r3, r3, #16
 8017604:	2b10      	cmp	r3, #16
 8017606:	d161      	bne.n	80176cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	699a      	ldr	r2, [r3, #24]
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	f022 0210 	bic.w	r2, r2, #16
 8017616:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8017618:	6a3b      	ldr	r3, [r7, #32]
 801761a:	6a1b      	ldr	r3, [r3, #32]
 801761c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	f003 020f 	and.w	r2, r3, #15
 8017624:	4613      	mov	r3, r2
 8017626:	00db      	lsls	r3, r3, #3
 8017628:	4413      	add	r3, r2
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	4413      	add	r3, r2
 8017634:	3304      	adds	r3, #4
 8017636:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8017638:	69bb      	ldr	r3, [r7, #24]
 801763a:	0c5b      	lsrs	r3, r3, #17
 801763c:	f003 030f 	and.w	r3, r3, #15
 8017640:	2b02      	cmp	r3, #2
 8017642:	d124      	bne.n	801768e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8017644:	69ba      	ldr	r2, [r7, #24]
 8017646:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801764a:	4013      	ands	r3, r2
 801764c:	2b00      	cmp	r3, #0
 801764e:	d035      	beq.n	80176bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8017654:	69bb      	ldr	r3, [r7, #24]
 8017656:	091b      	lsrs	r3, r3, #4
 8017658:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801765a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801765e:	b29b      	uxth	r3, r3
 8017660:	461a      	mov	r2, r3
 8017662:	6a38      	ldr	r0, [r7, #32]
 8017664:	f003 ffa2 	bl	801b5ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	691a      	ldr	r2, [r3, #16]
 801766c:	69bb      	ldr	r3, [r7, #24]
 801766e:	091b      	lsrs	r3, r3, #4
 8017670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017674:	441a      	add	r2, r3
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	6a1a      	ldr	r2, [r3, #32]
 801767e:	69bb      	ldr	r3, [r7, #24]
 8017680:	091b      	lsrs	r3, r3, #4
 8017682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017686:	441a      	add	r2, r3
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	621a      	str	r2, [r3, #32]
 801768c:	e016      	b.n	80176bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801768e:	69bb      	ldr	r3, [r7, #24]
 8017690:	0c5b      	lsrs	r3, r3, #17
 8017692:	f003 030f 	and.w	r3, r3, #15
 8017696:	2b06      	cmp	r3, #6
 8017698:	d110      	bne.n	80176bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80176a0:	2208      	movs	r2, #8
 80176a2:	4619      	mov	r1, r3
 80176a4:	6a38      	ldr	r0, [r7, #32]
 80176a6:	f003 ff81 	bl	801b5ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	6a1a      	ldr	r2, [r3, #32]
 80176ae:	69bb      	ldr	r3, [r7, #24]
 80176b0:	091b      	lsrs	r3, r3, #4
 80176b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80176b6:	441a      	add	r2, r3
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	699a      	ldr	r2, [r3, #24]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f042 0210 	orr.w	r2, r2, #16
 80176ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	4618      	mov	r0, r3
 80176d2:	f004 f8ff 	bl	801b8d4 <USB_ReadInterrupts>
 80176d6:	4603      	mov	r3, r0
 80176d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80176dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80176e0:	f040 80a7 	bne.w	8017832 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80176e4:	2300      	movs	r3, #0
 80176e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f004 f904 	bl	801b8fa <USB_ReadDevAllOutEpInterrupt>
 80176f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80176f4:	e099      	b.n	801782a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80176f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f8:	f003 0301 	and.w	r3, r3, #1
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f000 808e 	beq.w	801781e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017708:	b2d2      	uxtb	r2, r2
 801770a:	4611      	mov	r1, r2
 801770c:	4618      	mov	r0, r3
 801770e:	f004 f928 	bl	801b962 <USB_ReadDevOutEPInterrupt>
 8017712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	f003 0301 	and.w	r3, r3, #1
 801771a:	2b00      	cmp	r3, #0
 801771c:	d00c      	beq.n	8017738 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017720:	015a      	lsls	r2, r3, #5
 8017722:	69fb      	ldr	r3, [r7, #28]
 8017724:	4413      	add	r3, r2
 8017726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801772a:	461a      	mov	r2, r3
 801772c:	2301      	movs	r3, #1
 801772e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8017730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f000 fec2 	bl	80184bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	f003 0308 	and.w	r3, r3, #8
 801773e:	2b00      	cmp	r3, #0
 8017740:	d00c      	beq.n	801775c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8017742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017744:	015a      	lsls	r2, r3, #5
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	4413      	add	r3, r2
 801774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801774e:	461a      	mov	r2, r3
 8017750:	2308      	movs	r3, #8
 8017752:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8017754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f000 ff98 	bl	801868c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	f003 0310 	and.w	r3, r3, #16
 8017762:	2b00      	cmp	r3, #0
 8017764:	d008      	beq.n	8017778 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8017766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017768:	015a      	lsls	r2, r3, #5
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	4413      	add	r3, r2
 801776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017772:	461a      	mov	r2, r3
 8017774:	2310      	movs	r3, #16
 8017776:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	f003 0302 	and.w	r3, r3, #2
 801777e:	2b00      	cmp	r3, #0
 8017780:	d030      	beq.n	80177e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8017782:	6a3b      	ldr	r3, [r7, #32]
 8017784:	695b      	ldr	r3, [r3, #20]
 8017786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801778a:	2b80      	cmp	r3, #128	; 0x80
 801778c:	d109      	bne.n	80177a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801778e:	69fb      	ldr	r3, [r7, #28]
 8017790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	69fa      	ldr	r2, [r7, #28]
 8017798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801779c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80177a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80177a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177a4:	4613      	mov	r3, r2
 80177a6:	00db      	lsls	r3, r3, #3
 80177a8:	4413      	add	r3, r2
 80177aa:	009b      	lsls	r3, r3, #2
 80177ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80177b0:	687a      	ldr	r2, [r7, #4]
 80177b2:	4413      	add	r3, r2
 80177b4:	3304      	adds	r3, #4
 80177b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	78db      	ldrb	r3, [r3, #3]
 80177bc:	2b01      	cmp	r3, #1
 80177be:	d108      	bne.n	80177d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	2200      	movs	r2, #0
 80177c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	b2db      	uxtb	r3, r3
 80177ca:	4619      	mov	r1, r3
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f006 fc35 	bl	801e03c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80177d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d4:	015a      	lsls	r2, r3, #5
 80177d6:	69fb      	ldr	r3, [r7, #28]
 80177d8:	4413      	add	r3, r2
 80177da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177de:	461a      	mov	r2, r3
 80177e0:	2302      	movs	r3, #2
 80177e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	f003 0320 	and.w	r3, r3, #32
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d008      	beq.n	8017800 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80177ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f0:	015a      	lsls	r2, r3, #5
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	4413      	add	r3, r2
 80177f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177fa:	461a      	mov	r2, r3
 80177fc:	2320      	movs	r3, #32
 80177fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017806:	2b00      	cmp	r3, #0
 8017808:	d009      	beq.n	801781e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780c:	015a      	lsls	r2, r3, #5
 801780e:	69fb      	ldr	r3, [r7, #28]
 8017810:	4413      	add	r3, r2
 8017812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017816:	461a      	mov	r2, r3
 8017818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801781c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017820:	3301      	adds	r3, #1
 8017822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8017824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017826:	085b      	lsrs	r3, r3, #1
 8017828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801782c:	2b00      	cmp	r3, #0
 801782e:	f47f af62 	bne.w	80176f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	4618      	mov	r0, r3
 8017838:	f004 f84c 	bl	801b8d4 <USB_ReadInterrupts>
 801783c:	4603      	mov	r3, r0
 801783e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017846:	f040 80db 	bne.w	8017a00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4618      	mov	r0, r3
 8017850:	f004 f86d 	bl	801b92e <USB_ReadDevAllInEpInterrupt>
 8017854:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8017856:	2300      	movs	r3, #0
 8017858:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801785a:	e0cd      	b.n	80179f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801785e:	f003 0301 	and.w	r3, r3, #1
 8017862:	2b00      	cmp	r3, #0
 8017864:	f000 80c2 	beq.w	80179ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801786e:	b2d2      	uxtb	r2, r2
 8017870:	4611      	mov	r1, r2
 8017872:	4618      	mov	r0, r3
 8017874:	f004 f893 	bl	801b99e <USB_ReadDevInEPInterrupt>
 8017878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	f003 0301 	and.w	r3, r3, #1
 8017880:	2b00      	cmp	r3, #0
 8017882:	d057      	beq.n	8017934 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8017884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017886:	f003 030f 	and.w	r3, r3, #15
 801788a:	2201      	movs	r2, #1
 801788c:	fa02 f303 	lsl.w	r3, r2, r3
 8017890:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8017892:	69fb      	ldr	r3, [r7, #28]
 8017894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	43db      	mvns	r3, r3
 801789e:	69f9      	ldr	r1, [r7, #28]
 80178a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80178a4:	4013      	ands	r3, r2
 80178a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80178a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178aa:	015a      	lsls	r2, r3, #5
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	4413      	add	r3, r2
 80178b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80178b4:	461a      	mov	r2, r3
 80178b6:	2301      	movs	r3, #1
 80178b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	691b      	ldr	r3, [r3, #16]
 80178be:	2b01      	cmp	r3, #1
 80178c0:	d132      	bne.n	8017928 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80178c2:	6879      	ldr	r1, [r7, #4]
 80178c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178c6:	4613      	mov	r3, r2
 80178c8:	00db      	lsls	r3, r3, #3
 80178ca:	4413      	add	r3, r2
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	440b      	add	r3, r1
 80178d0:	334c      	adds	r3, #76	; 0x4c
 80178d2:	6819      	ldr	r1, [r3, #0]
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178d8:	4613      	mov	r3, r2
 80178da:	00db      	lsls	r3, r3, #3
 80178dc:	4413      	add	r3, r2
 80178de:	009b      	lsls	r3, r3, #2
 80178e0:	4403      	add	r3, r0
 80178e2:	3348      	adds	r3, #72	; 0x48
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	4419      	add	r1, r3
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178ec:	4613      	mov	r3, r2
 80178ee:	00db      	lsls	r3, r3, #3
 80178f0:	4413      	add	r3, r2
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	4403      	add	r3, r0
 80178f6:	334c      	adds	r3, #76	; 0x4c
 80178f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80178fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d113      	bne.n	8017928 <HAL_PCD_IRQHandler+0x3a2>
 8017900:	6879      	ldr	r1, [r7, #4]
 8017902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017904:	4613      	mov	r3, r2
 8017906:	00db      	lsls	r3, r3, #3
 8017908:	4413      	add	r3, r2
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	440b      	add	r3, r1
 801790e:	3354      	adds	r3, #84	; 0x54
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d108      	bne.n	8017928 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6818      	ldr	r0, [r3, #0]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017920:	461a      	mov	r2, r3
 8017922:	2101      	movs	r1, #1
 8017924:	f004 f89a 	bl	801ba5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8017928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801792a:	b2db      	uxtb	r3, r3
 801792c:	4619      	mov	r1, r3
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f006 fb09 	bl	801df46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8017934:	693b      	ldr	r3, [r7, #16]
 8017936:	f003 0308 	and.w	r3, r3, #8
 801793a:	2b00      	cmp	r3, #0
 801793c:	d008      	beq.n	8017950 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	015a      	lsls	r2, r3, #5
 8017942:	69fb      	ldr	r3, [r7, #28]
 8017944:	4413      	add	r3, r2
 8017946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801794a:	461a      	mov	r2, r3
 801794c:	2308      	movs	r3, #8
 801794e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	f003 0310 	and.w	r3, r3, #16
 8017956:	2b00      	cmp	r3, #0
 8017958:	d008      	beq.n	801796c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795c:	015a      	lsls	r2, r3, #5
 801795e:	69fb      	ldr	r3, [r7, #28]
 8017960:	4413      	add	r3, r2
 8017962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017966:	461a      	mov	r2, r3
 8017968:	2310      	movs	r3, #16
 801796a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801796c:	693b      	ldr	r3, [r7, #16]
 801796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017972:	2b00      	cmp	r3, #0
 8017974:	d008      	beq.n	8017988 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	015a      	lsls	r2, r3, #5
 801797a:	69fb      	ldr	r3, [r7, #28]
 801797c:	4413      	add	r3, r2
 801797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017982:	461a      	mov	r2, r3
 8017984:	2340      	movs	r3, #64	; 0x40
 8017986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8017988:	693b      	ldr	r3, [r7, #16]
 801798a:	f003 0302 	and.w	r3, r3, #2
 801798e:	2b00      	cmp	r3, #0
 8017990:	d023      	beq.n	80179da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8017992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017994:	6a38      	ldr	r0, [r7, #32]
 8017996:	f002 ff7b 	bl	801a890 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801799a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801799c:	4613      	mov	r3, r2
 801799e:	00db      	lsls	r3, r3, #3
 80179a0:	4413      	add	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	3338      	adds	r3, #56	; 0x38
 80179a6:	687a      	ldr	r2, [r7, #4]
 80179a8:	4413      	add	r3, r2
 80179aa:	3304      	adds	r3, #4
 80179ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	78db      	ldrb	r3, [r3, #3]
 80179b2:	2b01      	cmp	r3, #1
 80179b4:	d108      	bne.n	80179c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	2200      	movs	r2, #0
 80179ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80179bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179be:	b2db      	uxtb	r3, r3
 80179c0:	4619      	mov	r1, r3
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f006 fb4c 	bl	801e060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80179c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ca:	015a      	lsls	r2, r3, #5
 80179cc:	69fb      	ldr	r3, [r7, #28]
 80179ce:	4413      	add	r3, r2
 80179d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80179d4:	461a      	mov	r2, r3
 80179d6:	2302      	movs	r3, #2
 80179d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80179da:	693b      	ldr	r3, [r7, #16]
 80179dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d003      	beq.n	80179ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80179e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f000 fcdb 	bl	80183a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80179ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ee:	3301      	adds	r3, #1
 80179f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80179f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f4:	085b      	lsrs	r3, r3, #1
 80179f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80179f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	f47f af2e 	bne.w	801785c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f003 ff65 	bl	801b8d4 <USB_ReadInterrupts>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017a14:	d122      	bne.n	8017a5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8017a16:	69fb      	ldr	r3, [r7, #28]
 8017a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a1c:	685b      	ldr	r3, [r3, #4]
 8017a1e:	69fa      	ldr	r2, [r7, #28]
 8017a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017a24:	f023 0301 	bic.w	r3, r3, #1
 8017a28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8017a30:	2b01      	cmp	r3, #1
 8017a32:	d108      	bne.n	8017a46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2200      	movs	r2, #0
 8017a38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f000 fec2 	bl	80187c8 <HAL_PCDEx_LPM_Callback>
 8017a44:	e002      	b.n	8017a4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f006 faea 	bl	801e020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	695a      	ldr	r2, [r3, #20]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	4618      	mov	r0, r3
 8017a62:	f003 ff37 	bl	801b8d4 <USB_ReadInterrupts>
 8017a66:	4603      	mov	r3, r0
 8017a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017a70:	d112      	bne.n	8017a98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8017a72:	69fb      	ldr	r3, [r7, #28]
 8017a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a78:	689b      	ldr	r3, [r3, #8]
 8017a7a:	f003 0301 	and.w	r3, r3, #1
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d102      	bne.n	8017a88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f006 faa6 	bl	801dfd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	695a      	ldr	r2, [r3, #20]
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8017a96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f003 ff19 	bl	801b8d4 <USB_ReadInterrupts>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017aac:	f040 80b7 	bne.w	8017c1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017ab6:	685b      	ldr	r3, [r3, #4]
 8017ab8:	69fa      	ldr	r2, [r7, #28]
 8017aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017abe:	f023 0301 	bic.w	r3, r3, #1
 8017ac2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2110      	movs	r1, #16
 8017aca:	4618      	mov	r0, r3
 8017acc:	f002 fee0 	bl	801a890 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ad4:	e046      	b.n	8017b64 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8017ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad8:	015a      	lsls	r2, r3, #5
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	4413      	add	r3, r2
 8017ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8017ae8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aec:	015a      	lsls	r2, r3, #5
 8017aee:	69fb      	ldr	r3, [r7, #28]
 8017af0:	4413      	add	r3, r2
 8017af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017afa:	0151      	lsls	r1, r2, #5
 8017afc:	69fa      	ldr	r2, [r7, #28]
 8017afe:	440a      	add	r2, r1
 8017b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8017b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0c:	015a      	lsls	r2, r3, #5
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	4413      	add	r3, r2
 8017b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b16:	461a      	mov	r2, r3
 8017b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8017b1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b20:	015a      	lsls	r2, r3, #5
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	4413      	add	r3, r2
 8017b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b2e:	0151      	lsls	r1, r2, #5
 8017b30:	69fa      	ldr	r2, [r7, #28]
 8017b32:	440a      	add	r2, r1
 8017b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8017b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b40:	015a      	lsls	r2, r3, #5
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	4413      	add	r3, r2
 8017b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b4e:	0151      	lsls	r1, r2, #5
 8017b50:	69fa      	ldr	r2, [r7, #28]
 8017b52:	440a      	add	r2, r1
 8017b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017b5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b60:	3301      	adds	r3, #1
 8017b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	685b      	ldr	r3, [r3, #4]
 8017b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d3b3      	bcc.n	8017ad6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017b74:	69db      	ldr	r3, [r3, #28]
 8017b76:	69fa      	ldr	r2, [r7, #28]
 8017b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017b7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8017b80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d016      	beq.n	8017bb8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b94:	69fa      	ldr	r2, [r7, #28]
 8017b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017b9a:	f043 030b 	orr.w	r3, r3, #11
 8017b9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017baa:	69fa      	ldr	r2, [r7, #28]
 8017bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017bb0:	f043 030b 	orr.w	r3, r3, #11
 8017bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8017bb6:	e015      	b.n	8017be4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017bbe:	695b      	ldr	r3, [r3, #20]
 8017bc0:	69fa      	ldr	r2, [r7, #28]
 8017bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017bca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8017bce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017bd6:	691b      	ldr	r3, [r3, #16]
 8017bd8:	69fa      	ldr	r2, [r7, #28]
 8017bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017bde:	f043 030b 	orr.w	r3, r3, #11
 8017be2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	69fa      	ldr	r2, [r7, #28]
 8017bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017bf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017bf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	6818      	ldr	r0, [r3, #0]
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	691b      	ldr	r3, [r3, #16]
 8017c00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8017c08:	461a      	mov	r2, r3
 8017c0a:	f003 ff27 	bl	801ba5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	695a      	ldr	r2, [r3, #20]
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8017c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	4618      	mov	r0, r3
 8017c24:	f003 fe56 	bl	801b8d4 <USB_ReadInterrupts>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017c32:	d124      	bne.n	8017c7e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f003 feec 	bl	801ba16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	4618      	mov	r0, r3
 8017c44:	f002 fea1 	bl	801a98a <USB_GetDevSpeed>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	461a      	mov	r2, r3
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681c      	ldr	r4, [r3, #0]
 8017c54:	f001 fa26 	bl	80190a4 <HAL_RCC_GetHCLKFreq>
 8017c58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	461a      	mov	r2, r3
 8017c62:	4620      	mov	r0, r4
 8017c64:	f002 fba0 	bl	801a3a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	f006 f994 	bl	801df96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	695a      	ldr	r2, [r3, #20]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8017c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	4618      	mov	r0, r3
 8017c84:	f003 fe26 	bl	801b8d4 <USB_ReadInterrupts>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	f003 0308 	and.w	r3, r3, #8
 8017c8e:	2b08      	cmp	r3, #8
 8017c90:	d10a      	bne.n	8017ca8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f006 f971 	bl	801df7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	695a      	ldr	r2, [r3, #20]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f002 0208 	and.w	r2, r2, #8
 8017ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4618      	mov	r0, r3
 8017cae:	f003 fe11 	bl	801b8d4 <USB_ReadInterrupts>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017cb8:	2b80      	cmp	r3, #128	; 0x80
 8017cba:	d122      	bne.n	8017d02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8017cbc:	6a3b      	ldr	r3, [r7, #32]
 8017cbe:	699b      	ldr	r3, [r3, #24]
 8017cc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017cc4:	6a3b      	ldr	r3, [r7, #32]
 8017cc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017cc8:	2301      	movs	r3, #1
 8017cca:	627b      	str	r3, [r7, #36]	; 0x24
 8017ccc:	e014      	b.n	8017cf8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8017cce:	6879      	ldr	r1, [r7, #4]
 8017cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	00db      	lsls	r3, r3, #3
 8017cd6:	4413      	add	r3, r2
 8017cd8:	009b      	lsls	r3, r3, #2
 8017cda:	440b      	add	r3, r1
 8017cdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d105      	bne.n	8017cf2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8017ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce8:	b2db      	uxtb	r3, r3
 8017cea:	4619      	mov	r1, r3
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f000 fb27 	bl	8018340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf4:	3301      	adds	r3, #1
 8017cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	d3e5      	bcc.n	8017cce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	4618      	mov	r0, r3
 8017d08:	f003 fde4 	bl	801b8d4 <USB_ReadInterrupts>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017d16:	d13b      	bne.n	8017d90 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017d18:	2301      	movs	r3, #1
 8017d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8017d1c:	e02b      	b.n	8017d76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8017d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d20:	015a      	lsls	r2, r3, #5
 8017d22:	69fb      	ldr	r3, [r7, #28]
 8017d24:	4413      	add	r3, r2
 8017d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8017d2e:	6879      	ldr	r1, [r7, #4]
 8017d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d32:	4613      	mov	r3, r2
 8017d34:	00db      	lsls	r3, r3, #3
 8017d36:	4413      	add	r3, r2
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	440b      	add	r3, r1
 8017d3c:	3340      	adds	r3, #64	; 0x40
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	2b01      	cmp	r3, #1
 8017d42:	d115      	bne.n	8017d70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8017d44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	da12      	bge.n	8017d70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8017d4a:	6879      	ldr	r1, [r7, #4]
 8017d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d4e:	4613      	mov	r3, r2
 8017d50:	00db      	lsls	r3, r3, #3
 8017d52:	4413      	add	r3, r2
 8017d54:	009b      	lsls	r3, r3, #2
 8017d56:	440b      	add	r3, r1
 8017d58:	333f      	adds	r3, #63	; 0x3f
 8017d5a:	2201      	movs	r2, #1
 8017d5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	4619      	mov	r1, r3
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f000 fae8 	bl	8018340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d72:	3301      	adds	r3, #1
 8017d74:	627b      	str	r3, [r7, #36]	; 0x24
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d3ce      	bcc.n	8017d1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	695a      	ldr	r2, [r3, #20]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8017d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4618      	mov	r0, r3
 8017d96:	f003 fd9d 	bl	801b8d4 <USB_ReadInterrupts>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017da4:	d155      	bne.n	8017e52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017da6:	2301      	movs	r3, #1
 8017da8:	627b      	str	r3, [r7, #36]	; 0x24
 8017daa:	e045      	b.n	8017e38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8017dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dae:	015a      	lsls	r2, r3, #5
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	4413      	add	r3, r2
 8017db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8017dbc:	6879      	ldr	r1, [r7, #4]
 8017dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	4413      	add	r3, r2
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	440b      	add	r3, r1
 8017dca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d12e      	bne.n	8017e32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8017dd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	da2b      	bge.n	8017e32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8017dda:	69bb      	ldr	r3, [r7, #24]
 8017ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8017de6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8017dea:	429a      	cmp	r2, r3
 8017dec:	d121      	bne.n	8017e32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8017dee:	6879      	ldr	r1, [r7, #4]
 8017df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017df2:	4613      	mov	r3, r2
 8017df4:	00db      	lsls	r3, r3, #3
 8017df6:	4413      	add	r3, r2
 8017df8:	009b      	lsls	r3, r3, #2
 8017dfa:	440b      	add	r3, r1
 8017dfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8017e00:	2201      	movs	r2, #1
 8017e02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8017e04:	6a3b      	ldr	r3, [r7, #32]
 8017e06:	699b      	ldr	r3, [r3, #24]
 8017e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017e0c:	6a3b      	ldr	r3, [r7, #32]
 8017e0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8017e10:	6a3b      	ldr	r3, [r7, #32]
 8017e12:	695b      	ldr	r3, [r3, #20]
 8017e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d10a      	bne.n	8017e32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8017e1c:	69fb      	ldr	r3, [r7, #28]
 8017e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017e22:	685b      	ldr	r3, [r3, #4]
 8017e24:	69fa      	ldr	r2, [r7, #28]
 8017e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017e2e:	6053      	str	r3, [r2, #4]
            break;
 8017e30:	e007      	b.n	8017e42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	3301      	adds	r3, #1
 8017e36:	627b      	str	r3, [r7, #36]	; 0x24
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d3b4      	bcc.n	8017dac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	695a      	ldr	r2, [r3, #20]
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8017e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f003 fd3c 	bl	801b8d4 <USB_ReadInterrupts>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017e66:	d10a      	bne.n	8017e7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f006 f90b 	bl	801e084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	695a      	ldr	r2, [r3, #20]
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8017e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	4618      	mov	r0, r3
 8017e84:	f003 fd26 	bl	801b8d4 <USB_ReadInterrupts>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	f003 0304 	and.w	r3, r3, #4
 8017e8e:	2b04      	cmp	r3, #4
 8017e90:	d115      	bne.n	8017ebe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8017e9a:	69bb      	ldr	r3, [r7, #24]
 8017e9c:	f003 0304 	and.w	r3, r3, #4
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d002      	beq.n	8017eaa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f006 f8fb 	bl	801e0a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	6859      	ldr	r1, [r3, #4]
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	69ba      	ldr	r2, [r7, #24]
 8017eb6:	430a      	orrs	r2, r1
 8017eb8:	605a      	str	r2, [r3, #4]
 8017eba:	e000      	b.n	8017ebe <HAL_PCD_IRQHandler+0x938>
      return;
 8017ebc:	bf00      	nop
    }
  }
}
 8017ebe:	3734      	adds	r7, #52	; 0x34
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd90      	pop	{r4, r7, pc}

08017ec4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b082      	sub	sp, #8
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
 8017ecc:	460b      	mov	r3, r1
 8017ece:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d101      	bne.n	8017ede <HAL_PCD_SetAddress+0x1a>
 8017eda:	2302      	movs	r3, #2
 8017edc:	e013      	b.n	8017f06 <HAL_PCD_SetAddress+0x42>
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2201      	movs	r2, #1
 8017ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	78fa      	ldrb	r2, [r7, #3]
 8017eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	78fa      	ldrb	r2, [r7, #3]
 8017ef4:	4611      	mov	r1, r2
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f003 fc84 	bl	801b804 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2200      	movs	r2, #0
 8017f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8017f04:	2300      	movs	r3, #0
}
 8017f06:	4618      	mov	r0, r3
 8017f08:	3708      	adds	r7, #8
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}

08017f0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8017f0e:	b580      	push	{r7, lr}
 8017f10:	b084      	sub	sp, #16
 8017f12:	af00      	add	r7, sp, #0
 8017f14:	6078      	str	r0, [r7, #4]
 8017f16:	4608      	mov	r0, r1
 8017f18:	4611      	mov	r1, r2
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	70fb      	strb	r3, [r7, #3]
 8017f20:	460b      	mov	r3, r1
 8017f22:	803b      	strh	r3, [r7, #0]
 8017f24:	4613      	mov	r3, r2
 8017f26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8017f28:	2300      	movs	r3, #0
 8017f2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8017f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	da0f      	bge.n	8017f54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017f34:	78fb      	ldrb	r3, [r7, #3]
 8017f36:	f003 020f 	and.w	r2, r3, #15
 8017f3a:	4613      	mov	r3, r2
 8017f3c:	00db      	lsls	r3, r3, #3
 8017f3e:	4413      	add	r3, r2
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	3338      	adds	r3, #56	; 0x38
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	4413      	add	r3, r2
 8017f48:	3304      	adds	r3, #4
 8017f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2201      	movs	r2, #1
 8017f50:	705a      	strb	r2, [r3, #1]
 8017f52:	e00f      	b.n	8017f74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017f54:	78fb      	ldrb	r3, [r7, #3]
 8017f56:	f003 020f 	and.w	r2, r3, #15
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	00db      	lsls	r3, r3, #3
 8017f5e:	4413      	add	r3, r2
 8017f60:	009b      	lsls	r3, r3, #2
 8017f62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8017f66:	687a      	ldr	r2, [r7, #4]
 8017f68:	4413      	add	r3, r2
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	2200      	movs	r2, #0
 8017f72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8017f74:	78fb      	ldrb	r3, [r7, #3]
 8017f76:	f003 030f 	and.w	r3, r3, #15
 8017f7a:	b2da      	uxtb	r2, r3
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8017f80:	883a      	ldrh	r2, [r7, #0]
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	78ba      	ldrb	r2, [r7, #2]
 8017f8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	785b      	ldrb	r3, [r3, #1]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d004      	beq.n	8017f9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	b29a      	uxth	r2, r3
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8017f9e:	78bb      	ldrb	r3, [r7, #2]
 8017fa0:	2b02      	cmp	r3, #2
 8017fa2:	d102      	bne.n	8017faa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8017fb0:	2b01      	cmp	r3, #1
 8017fb2:	d101      	bne.n	8017fb8 <HAL_PCD_EP_Open+0xaa>
 8017fb4:	2302      	movs	r3, #2
 8017fb6:	e00e      	b.n	8017fd6 <HAL_PCD_EP_Open+0xc8>
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2201      	movs	r2, #1
 8017fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	68f9      	ldr	r1, [r7, #12]
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f002 fd04 	bl	801a9d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8017fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3710      	adds	r7, #16
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}

08017fde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017fde:	b580      	push	{r7, lr}
 8017fe0:	b084      	sub	sp, #16
 8017fe2:	af00      	add	r7, sp, #0
 8017fe4:	6078      	str	r0, [r7, #4]
 8017fe6:	460b      	mov	r3, r1
 8017fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8017fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	da0f      	bge.n	8018012 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017ff2:	78fb      	ldrb	r3, [r7, #3]
 8017ff4:	f003 020f 	and.w	r2, r3, #15
 8017ff8:	4613      	mov	r3, r2
 8017ffa:	00db      	lsls	r3, r3, #3
 8017ffc:	4413      	add	r3, r2
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	3338      	adds	r3, #56	; 0x38
 8018002:	687a      	ldr	r2, [r7, #4]
 8018004:	4413      	add	r3, r2
 8018006:	3304      	adds	r3, #4
 8018008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	2201      	movs	r2, #1
 801800e:	705a      	strb	r2, [r3, #1]
 8018010:	e00f      	b.n	8018032 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018012:	78fb      	ldrb	r3, [r7, #3]
 8018014:	f003 020f 	and.w	r2, r3, #15
 8018018:	4613      	mov	r3, r2
 801801a:	00db      	lsls	r3, r3, #3
 801801c:	4413      	add	r3, r2
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018024:	687a      	ldr	r2, [r7, #4]
 8018026:	4413      	add	r3, r2
 8018028:	3304      	adds	r3, #4
 801802a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	2200      	movs	r2, #0
 8018030:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8018032:	78fb      	ldrb	r3, [r7, #3]
 8018034:	f003 030f 	and.w	r3, r3, #15
 8018038:	b2da      	uxtb	r2, r3
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8018044:	2b01      	cmp	r3, #1
 8018046:	d101      	bne.n	801804c <HAL_PCD_EP_Close+0x6e>
 8018048:	2302      	movs	r3, #2
 801804a:	e00e      	b.n	801806a <HAL_PCD_EP_Close+0x8c>
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2201      	movs	r2, #1
 8018050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	68f9      	ldr	r1, [r7, #12]
 801805a:	4618      	mov	r0, r3
 801805c:	f002 fd42 	bl	801aae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2200      	movs	r2, #0
 8018064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8018068:	2300      	movs	r3, #0
}
 801806a:	4618      	mov	r0, r3
 801806c:	3710      	adds	r7, #16
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}

08018072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018072:	b580      	push	{r7, lr}
 8018074:	b086      	sub	sp, #24
 8018076:	af00      	add	r7, sp, #0
 8018078:	60f8      	str	r0, [r7, #12]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	603b      	str	r3, [r7, #0]
 801807e:	460b      	mov	r3, r1
 8018080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018082:	7afb      	ldrb	r3, [r7, #11]
 8018084:	f003 020f 	and.w	r2, r3, #15
 8018088:	4613      	mov	r3, r2
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	4413      	add	r3, r2
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018094:	68fa      	ldr	r2, [r7, #12]
 8018096:	4413      	add	r3, r2
 8018098:	3304      	adds	r3, #4
 801809a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801809c:	697b      	ldr	r3, [r7, #20]
 801809e:	687a      	ldr	r2, [r7, #4]
 80180a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	683a      	ldr	r2, [r7, #0]
 80180a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	2200      	movs	r2, #0
 80180ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	2200      	movs	r2, #0
 80180b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80180b4:	7afb      	ldrb	r3, [r7, #11]
 80180b6:	f003 030f 	and.w	r3, r3, #15
 80180ba:	b2da      	uxtb	r2, r3
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	691b      	ldr	r3, [r3, #16]
 80180c4:	2b01      	cmp	r3, #1
 80180c6:	d102      	bne.n	80180ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80180ce:	7afb      	ldrb	r3, [r7, #11]
 80180d0:	f003 030f 	and.w	r3, r3, #15
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d109      	bne.n	80180ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	6818      	ldr	r0, [r3, #0]
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	691b      	ldr	r3, [r3, #16]
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	461a      	mov	r2, r3
 80180e4:	6979      	ldr	r1, [r7, #20]
 80180e6:	f003 f821 	bl	801b12c <USB_EP0StartXfer>
 80180ea:	e008      	b.n	80180fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	6818      	ldr	r0, [r3, #0]
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	691b      	ldr	r3, [r3, #16]
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	461a      	mov	r2, r3
 80180f8:	6979      	ldr	r1, [r7, #20]
 80180fa:	f002 fdcf 	bl	801ac9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80180fe:	2300      	movs	r3, #0
}
 8018100:	4618      	mov	r0, r3
 8018102:	3718      	adds	r7, #24
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}

08018108 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	460b      	mov	r3, r1
 8018112:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018114:	78fb      	ldrb	r3, [r7, #3]
 8018116:	f003 020f 	and.w	r2, r3, #15
 801811a:	6879      	ldr	r1, [r7, #4]
 801811c:	4613      	mov	r3, r2
 801811e:	00db      	lsls	r3, r3, #3
 8018120:	4413      	add	r3, r2
 8018122:	009b      	lsls	r3, r3, #2
 8018124:	440b      	add	r3, r1
 8018126:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801812a:	681b      	ldr	r3, [r3, #0]
}
 801812c:	4618      	mov	r0, r3
 801812e:	370c      	adds	r7, #12
 8018130:	46bd      	mov	sp, r7
 8018132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018136:	4770      	bx	lr

08018138 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b086      	sub	sp, #24
 801813c:	af00      	add	r7, sp, #0
 801813e:	60f8      	str	r0, [r7, #12]
 8018140:	607a      	str	r2, [r7, #4]
 8018142:	603b      	str	r3, [r7, #0]
 8018144:	460b      	mov	r3, r1
 8018146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018148:	7afb      	ldrb	r3, [r7, #11]
 801814a:	f003 020f 	and.w	r2, r3, #15
 801814e:	4613      	mov	r3, r2
 8018150:	00db      	lsls	r3, r3, #3
 8018152:	4413      	add	r3, r2
 8018154:	009b      	lsls	r3, r3, #2
 8018156:	3338      	adds	r3, #56	; 0x38
 8018158:	68fa      	ldr	r2, [r7, #12]
 801815a:	4413      	add	r3, r2
 801815c:	3304      	adds	r3, #4
 801815e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018160:	697b      	ldr	r3, [r7, #20]
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8018166:	697b      	ldr	r3, [r7, #20]
 8018168:	683a      	ldr	r2, [r7, #0]
 801816a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801816c:	697b      	ldr	r3, [r7, #20]
 801816e:	2200      	movs	r2, #0
 8018170:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8018172:	697b      	ldr	r3, [r7, #20]
 8018174:	2201      	movs	r2, #1
 8018176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018178:	7afb      	ldrb	r3, [r7, #11]
 801817a:	f003 030f 	and.w	r3, r3, #15
 801817e:	b2da      	uxtb	r2, r3
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	691b      	ldr	r3, [r3, #16]
 8018188:	2b01      	cmp	r3, #1
 801818a:	d102      	bne.n	8018192 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	697b      	ldr	r3, [r7, #20]
 8018190:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8018192:	7afb      	ldrb	r3, [r7, #11]
 8018194:	f003 030f 	and.w	r3, r3, #15
 8018198:	2b00      	cmp	r3, #0
 801819a:	d109      	bne.n	80181b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	6818      	ldr	r0, [r3, #0]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	691b      	ldr	r3, [r3, #16]
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	461a      	mov	r2, r3
 80181a8:	6979      	ldr	r1, [r7, #20]
 80181aa:	f002 ffbf 	bl	801b12c <USB_EP0StartXfer>
 80181ae:	e008      	b.n	80181c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	6818      	ldr	r0, [r3, #0]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	691b      	ldr	r3, [r3, #16]
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	461a      	mov	r2, r3
 80181bc:	6979      	ldr	r1, [r7, #20]
 80181be:	f002 fd6d 	bl	801ac9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80181c2:	2300      	movs	r3, #0
}
 80181c4:	4618      	mov	r0, r3
 80181c6:	3718      	adds	r7, #24
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b084      	sub	sp, #16
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	460b      	mov	r3, r1
 80181d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80181d8:	78fb      	ldrb	r3, [r7, #3]
 80181da:	f003 020f 	and.w	r2, r3, #15
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d901      	bls.n	80181ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80181e6:	2301      	movs	r3, #1
 80181e8:	e050      	b.n	801828c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80181ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	da0f      	bge.n	8018212 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80181f2:	78fb      	ldrb	r3, [r7, #3]
 80181f4:	f003 020f 	and.w	r2, r3, #15
 80181f8:	4613      	mov	r3, r2
 80181fa:	00db      	lsls	r3, r3, #3
 80181fc:	4413      	add	r3, r2
 80181fe:	009b      	lsls	r3, r3, #2
 8018200:	3338      	adds	r3, #56	; 0x38
 8018202:	687a      	ldr	r2, [r7, #4]
 8018204:	4413      	add	r3, r2
 8018206:	3304      	adds	r3, #4
 8018208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	2201      	movs	r2, #1
 801820e:	705a      	strb	r2, [r3, #1]
 8018210:	e00d      	b.n	801822e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018212:	78fa      	ldrb	r2, [r7, #3]
 8018214:	4613      	mov	r3, r2
 8018216:	00db      	lsls	r3, r3, #3
 8018218:	4413      	add	r3, r2
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	4413      	add	r3, r2
 8018224:	3304      	adds	r3, #4
 8018226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	2200      	movs	r2, #0
 801822c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	2201      	movs	r2, #1
 8018232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018234:	78fb      	ldrb	r3, [r7, #3]
 8018236:	f003 030f 	and.w	r3, r3, #15
 801823a:	b2da      	uxtb	r2, r3
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8018246:	2b01      	cmp	r3, #1
 8018248:	d101      	bne.n	801824e <HAL_PCD_EP_SetStall+0x82>
 801824a:	2302      	movs	r3, #2
 801824c:	e01e      	b.n	801828c <HAL_PCD_EP_SetStall+0xc0>
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2201      	movs	r2, #1
 8018252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	68f9      	ldr	r1, [r7, #12]
 801825c:	4618      	mov	r0, r3
 801825e:	f003 f9fd 	bl	801b65c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8018262:	78fb      	ldrb	r3, [r7, #3]
 8018264:	f003 030f 	and.w	r3, r3, #15
 8018268:	2b00      	cmp	r3, #0
 801826a:	d10a      	bne.n	8018282 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	6818      	ldr	r0, [r3, #0]
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	691b      	ldr	r3, [r3, #16]
 8018274:	b2d9      	uxtb	r1, r3
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801827c:	461a      	mov	r2, r3
 801827e:	f003 fbed 	bl	801ba5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2200      	movs	r2, #0
 8018286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801828a:	2300      	movs	r3, #0
}
 801828c:	4618      	mov	r0, r3
 801828e:	3710      	adds	r7, #16
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b084      	sub	sp, #16
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	460b      	mov	r3, r1
 801829e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80182a0:	78fb      	ldrb	r3, [r7, #3]
 80182a2:	f003 020f 	and.w	r2, r3, #15
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d901      	bls.n	80182b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80182ae:	2301      	movs	r3, #1
 80182b0:	e042      	b.n	8018338 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80182b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	da0f      	bge.n	80182da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80182ba:	78fb      	ldrb	r3, [r7, #3]
 80182bc:	f003 020f 	and.w	r2, r3, #15
 80182c0:	4613      	mov	r3, r2
 80182c2:	00db      	lsls	r3, r3, #3
 80182c4:	4413      	add	r3, r2
 80182c6:	009b      	lsls	r3, r3, #2
 80182c8:	3338      	adds	r3, #56	; 0x38
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	4413      	add	r3, r2
 80182ce:	3304      	adds	r3, #4
 80182d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	2201      	movs	r2, #1
 80182d6:	705a      	strb	r2, [r3, #1]
 80182d8:	e00f      	b.n	80182fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80182da:	78fb      	ldrb	r3, [r7, #3]
 80182dc:	f003 020f 	and.w	r2, r3, #15
 80182e0:	4613      	mov	r3, r2
 80182e2:	00db      	lsls	r3, r3, #3
 80182e4:	4413      	add	r3, r2
 80182e6:	009b      	lsls	r3, r3, #2
 80182e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80182ec:	687a      	ldr	r2, [r7, #4]
 80182ee:	4413      	add	r3, r2
 80182f0:	3304      	adds	r3, #4
 80182f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	2200      	movs	r2, #0
 80182f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	2200      	movs	r2, #0
 80182fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018300:	78fb      	ldrb	r3, [r7, #3]
 8018302:	f003 030f 	and.w	r3, r3, #15
 8018306:	b2da      	uxtb	r2, r3
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8018312:	2b01      	cmp	r3, #1
 8018314:	d101      	bne.n	801831a <HAL_PCD_EP_ClrStall+0x86>
 8018316:	2302      	movs	r3, #2
 8018318:	e00e      	b.n	8018338 <HAL_PCD_EP_ClrStall+0xa4>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2201      	movs	r2, #1
 801831e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	68f9      	ldr	r1, [r7, #12]
 8018328:	4618      	mov	r0, r3
 801832a:	f003 fa05 	bl	801b738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	2200      	movs	r2, #0
 8018332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8018336:	2300      	movs	r3, #0
}
 8018338:	4618      	mov	r0, r3
 801833a:	3710      	adds	r7, #16
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	460b      	mov	r3, r1
 801834a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801834c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018350:	2b00      	cmp	r3, #0
 8018352:	da0c      	bge.n	801836e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018354:	78fb      	ldrb	r3, [r7, #3]
 8018356:	f003 020f 	and.w	r2, r3, #15
 801835a:	4613      	mov	r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	4413      	add	r3, r2
 8018360:	009b      	lsls	r3, r3, #2
 8018362:	3338      	adds	r3, #56	; 0x38
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	4413      	add	r3, r2
 8018368:	3304      	adds	r3, #4
 801836a:	60fb      	str	r3, [r7, #12]
 801836c:	e00c      	b.n	8018388 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801836e:	78fb      	ldrb	r3, [r7, #3]
 8018370:	f003 020f 	and.w	r2, r3, #15
 8018374:	4613      	mov	r3, r2
 8018376:	00db      	lsls	r3, r3, #3
 8018378:	4413      	add	r3, r2
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018380:	687a      	ldr	r2, [r7, #4]
 8018382:	4413      	add	r3, r2
 8018384:	3304      	adds	r3, #4
 8018386:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	68f9      	ldr	r1, [r7, #12]
 801838e:	4618      	mov	r0, r3
 8018390:	f003 f824 	bl	801b3dc <USB_EPStopXfer>
 8018394:	4603      	mov	r3, r0
 8018396:	72fb      	strb	r3, [r7, #11]

  return ret;
 8018398:	7afb      	ldrb	r3, [r7, #11]
}
 801839a:	4618      	mov	r0, r3
 801839c:	3710      	adds	r7, #16
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}

080183a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80183a2:	b580      	push	{r7, lr}
 80183a4:	b08a      	sub	sp, #40	; 0x28
 80183a6:	af02      	add	r7, sp, #8
 80183a8:	6078      	str	r0, [r7, #4]
 80183aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80183b6:	683a      	ldr	r2, [r7, #0]
 80183b8:	4613      	mov	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	4413      	add	r3, r2
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	3338      	adds	r3, #56	; 0x38
 80183c2:	687a      	ldr	r2, [r7, #4]
 80183c4:	4413      	add	r3, r2
 80183c6:	3304      	adds	r3, #4
 80183c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	6a1a      	ldr	r2, [r3, #32]
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	699b      	ldr	r3, [r3, #24]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d901      	bls.n	80183da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80183d6:	2301      	movs	r3, #1
 80183d8:	e06c      	b.n	80184b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	699a      	ldr	r2, [r3, #24]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	6a1b      	ldr	r3, [r3, #32]
 80183e2:	1ad3      	subs	r3, r2, r3
 80183e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	68db      	ldr	r3, [r3, #12]
 80183ea:	69fa      	ldr	r2, [r7, #28]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d902      	bls.n	80183f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	68db      	ldr	r3, [r3, #12]
 80183f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80183f6:	69fb      	ldr	r3, [r7, #28]
 80183f8:	3303      	adds	r3, #3
 80183fa:	089b      	lsrs	r3, r3, #2
 80183fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80183fe:	e02b      	b.n	8018458 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	699a      	ldr	r2, [r3, #24]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	6a1b      	ldr	r3, [r3, #32]
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	68db      	ldr	r3, [r3, #12]
 8018410:	69fa      	ldr	r2, [r7, #28]
 8018412:	429a      	cmp	r2, r3
 8018414:	d902      	bls.n	801841c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	3303      	adds	r3, #3
 8018420:	089b      	lsrs	r3, r3, #2
 8018422:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	6919      	ldr	r1, [r3, #16]
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	b2da      	uxtb	r2, r3
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8018434:	b2db      	uxtb	r3, r3
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	4603      	mov	r3, r0
 801843a:	6978      	ldr	r0, [r7, #20]
 801843c:	f003 f878 	bl	801b530 <USB_WritePacket>

    ep->xfer_buff  += len;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	691a      	ldr	r2, [r3, #16]
 8018444:	69fb      	ldr	r3, [r7, #28]
 8018446:	441a      	add	r2, r3
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	6a1a      	ldr	r2, [r3, #32]
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	441a      	add	r2, r3
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	015a      	lsls	r2, r3, #5
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	4413      	add	r3, r2
 8018460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018464:	699b      	ldr	r3, [r3, #24]
 8018466:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8018468:	69ba      	ldr	r2, [r7, #24]
 801846a:	429a      	cmp	r2, r3
 801846c:	d809      	bhi.n	8018482 <PCD_WriteEmptyTxFifo+0xe0>
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	6a1a      	ldr	r2, [r3, #32]
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8018476:	429a      	cmp	r2, r3
 8018478:	d203      	bcs.n	8018482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	699b      	ldr	r3, [r3, #24]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d1be      	bne.n	8018400 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	699a      	ldr	r2, [r3, #24]
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	6a1b      	ldr	r3, [r3, #32]
 801848a:	429a      	cmp	r2, r3
 801848c:	d811      	bhi.n	80184b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	f003 030f 	and.w	r3, r3, #15
 8018494:	2201      	movs	r2, #1
 8018496:	fa02 f303 	lsl.w	r3, r2, r3
 801849a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80184a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	43db      	mvns	r3, r3
 80184a8:	6939      	ldr	r1, [r7, #16]
 80184aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80184ae:	4013      	ands	r3, r2
 80184b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80184b2:	2300      	movs	r3, #0
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3720      	adds	r7, #32
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b088      	sub	sp, #32
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
 80184c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80184d0:	69fb      	ldr	r3, [r7, #28]
 80184d2:	333c      	adds	r3, #60	; 0x3c
 80184d4:	3304      	adds	r3, #4
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	015a      	lsls	r2, r3, #5
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	4413      	add	r3, r2
 80184e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80184e6:	689b      	ldr	r3, [r3, #8]
 80184e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	691b      	ldr	r3, [r3, #16]
 80184ee:	2b01      	cmp	r3, #1
 80184f0:	d17b      	bne.n	80185ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80184f2:	693b      	ldr	r3, [r7, #16]
 80184f4:	f003 0308 	and.w	r3, r3, #8
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d015      	beq.n	8018528 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	4a61      	ldr	r2, [pc, #388]	; (8018684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8018500:	4293      	cmp	r3, r2
 8018502:	f240 80b9 	bls.w	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801850c:	2b00      	cmp	r3, #0
 801850e:	f000 80b3 	beq.w	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	015a      	lsls	r2, r3, #5
 8018516:	69bb      	ldr	r3, [r7, #24]
 8018518:	4413      	add	r3, r2
 801851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801851e:	461a      	mov	r2, r3
 8018520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018524:	6093      	str	r3, [r2, #8]
 8018526:	e0a7      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	f003 0320 	and.w	r3, r3, #32
 801852e:	2b00      	cmp	r3, #0
 8018530:	d009      	beq.n	8018546 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	015a      	lsls	r2, r3, #5
 8018536:	69bb      	ldr	r3, [r7, #24]
 8018538:	4413      	add	r3, r2
 801853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801853e:	461a      	mov	r2, r3
 8018540:	2320      	movs	r3, #32
 8018542:	6093      	str	r3, [r2, #8]
 8018544:	e098      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801854c:	2b00      	cmp	r3, #0
 801854e:	f040 8093 	bne.w	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	4a4b      	ldr	r2, [pc, #300]	; (8018684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d90f      	bls.n	801857a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8018560:	2b00      	cmp	r3, #0
 8018562:	d00a      	beq.n	801857a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	015a      	lsls	r2, r3, #5
 8018568:	69bb      	ldr	r3, [r7, #24]
 801856a:	4413      	add	r3, r2
 801856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018570:	461a      	mov	r2, r3
 8018572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018576:	6093      	str	r3, [r2, #8]
 8018578:	e07e      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801857a:	683a      	ldr	r2, [r7, #0]
 801857c:	4613      	mov	r3, r2
 801857e:	00db      	lsls	r3, r3, #3
 8018580:	4413      	add	r3, r2
 8018582:	009b      	lsls	r3, r3, #2
 8018584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018588:	687a      	ldr	r2, [r7, #4]
 801858a:	4413      	add	r3, r2
 801858c:	3304      	adds	r3, #4
 801858e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	69da      	ldr	r2, [r3, #28]
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	0159      	lsls	r1, r3, #5
 8018598:	69bb      	ldr	r3, [r7, #24]
 801859a:	440b      	add	r3, r1
 801859c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80185a0:	691b      	ldr	r3, [r3, #16]
 80185a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80185a6:	1ad2      	subs	r2, r2, r3
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d114      	bne.n	80185dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	699b      	ldr	r3, [r3, #24]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d109      	bne.n	80185ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6818      	ldr	r0, [r3, #0]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80185c4:	461a      	mov	r2, r3
 80185c6:	2101      	movs	r1, #1
 80185c8:	f003 fa48 	bl	801ba5c <USB_EP0_OutStart>
 80185cc:	e006      	b.n	80185dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	691a      	ldr	r2, [r3, #16]
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	6a1b      	ldr	r3, [r3, #32]
 80185d6:	441a      	add	r2, r3
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	4619      	mov	r1, r3
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f005 fc94 	bl	801df10 <HAL_PCD_DataOutStageCallback>
 80185e8:	e046      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	4a26      	ldr	r2, [pc, #152]	; (8018688 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80185ee:	4293      	cmp	r3, r2
 80185f0:	d124      	bne.n	801863c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d00a      	beq.n	8018612 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	015a      	lsls	r2, r3, #5
 8018600:	69bb      	ldr	r3, [r7, #24]
 8018602:	4413      	add	r3, r2
 8018604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018608:	461a      	mov	r2, r3
 801860a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801860e:	6093      	str	r3, [r2, #8]
 8018610:	e032      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	f003 0320 	and.w	r3, r3, #32
 8018618:	2b00      	cmp	r3, #0
 801861a:	d008      	beq.n	801862e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	015a      	lsls	r2, r3, #5
 8018620:	69bb      	ldr	r3, [r7, #24]
 8018622:	4413      	add	r3, r2
 8018624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018628:	461a      	mov	r2, r3
 801862a:	2320      	movs	r3, #32
 801862c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	b2db      	uxtb	r3, r3
 8018632:	4619      	mov	r1, r3
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	f005 fc6b 	bl	801df10 <HAL_PCD_DataOutStageCallback>
 801863a:	e01d      	b.n	8018678 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d114      	bne.n	801866c <PCD_EP_OutXfrComplete_int+0x1b0>
 8018642:	6879      	ldr	r1, [r7, #4]
 8018644:	683a      	ldr	r2, [r7, #0]
 8018646:	4613      	mov	r3, r2
 8018648:	00db      	lsls	r3, r3, #3
 801864a:	4413      	add	r3, r2
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	440b      	add	r3, r1
 8018650:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d108      	bne.n	801866c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	6818      	ldr	r0, [r3, #0]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018664:	461a      	mov	r2, r3
 8018666:	2100      	movs	r1, #0
 8018668:	f003 f9f8 	bl	801ba5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	b2db      	uxtb	r3, r3
 8018670:	4619      	mov	r1, r3
 8018672:	6878      	ldr	r0, [r7, #4]
 8018674:	f005 fc4c 	bl	801df10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8018678:	2300      	movs	r3, #0
}
 801867a:	4618      	mov	r0, r3
 801867c:	3720      	adds	r7, #32
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	4f54300a 	.word	0x4f54300a
 8018688:	4f54310a 	.word	0x4f54310a

0801868c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b086      	sub	sp, #24
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	333c      	adds	r3, #60	; 0x3c
 80186a4:	3304      	adds	r3, #4
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	015a      	lsls	r2, r3, #5
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	4413      	add	r3, r2
 80186b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80186b6:	689b      	ldr	r3, [r3, #8]
 80186b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	4a15      	ldr	r2, [pc, #84]	; (8018714 <PCD_EP_OutSetupPacket_int+0x88>)
 80186be:	4293      	cmp	r3, r2
 80186c0:	d90e      	bls.n	80186e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d009      	beq.n	80186e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	015a      	lsls	r2, r3, #5
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	4413      	add	r3, r2
 80186d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80186d8:	461a      	mov	r2, r3
 80186da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80186de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f005 fc03 	bl	801deec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	4a0a      	ldr	r2, [pc, #40]	; (8018714 <PCD_EP_OutSetupPacket_int+0x88>)
 80186ea:	4293      	cmp	r3, r2
 80186ec:	d90c      	bls.n	8018708 <PCD_EP_OutSetupPacket_int+0x7c>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	691b      	ldr	r3, [r3, #16]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d108      	bne.n	8018708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	6818      	ldr	r0, [r3, #0]
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018700:	461a      	mov	r2, r3
 8018702:	2101      	movs	r1, #1
 8018704:	f003 f9aa 	bl	801ba5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8018708:	2300      	movs	r3, #0
}
 801870a:	4618      	mov	r0, r3
 801870c:	3718      	adds	r7, #24
 801870e:	46bd      	mov	sp, r7
 8018710:	bd80      	pop	{r7, pc}
 8018712:	bf00      	nop
 8018714:	4f54300a 	.word	0x4f54300a

08018718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8018718:	b480      	push	{r7}
 801871a:	b085      	sub	sp, #20
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	460b      	mov	r3, r1
 8018722:	70fb      	strb	r3, [r7, #3]
 8018724:	4613      	mov	r3, r2
 8018726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8018730:	78fb      	ldrb	r3, [r7, #3]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d107      	bne.n	8018746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8018736:	883b      	ldrh	r3, [r7, #0]
 8018738:	0419      	lsls	r1, r3, #16
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	68ba      	ldr	r2, [r7, #8]
 8018740:	430a      	orrs	r2, r1
 8018742:	629a      	str	r2, [r3, #40]	; 0x28
 8018744:	e028      	b.n	8018798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801874c:	0c1b      	lsrs	r3, r3, #16
 801874e:	68ba      	ldr	r2, [r7, #8]
 8018750:	4413      	add	r3, r2
 8018752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8018754:	2300      	movs	r3, #0
 8018756:	73fb      	strb	r3, [r7, #15]
 8018758:	e00d      	b.n	8018776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681a      	ldr	r2, [r3, #0]
 801875e:	7bfb      	ldrb	r3, [r7, #15]
 8018760:	3340      	adds	r3, #64	; 0x40
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	4413      	add	r3, r2
 8018766:	685b      	ldr	r3, [r3, #4]
 8018768:	0c1b      	lsrs	r3, r3, #16
 801876a:	68ba      	ldr	r2, [r7, #8]
 801876c:	4413      	add	r3, r2
 801876e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8018770:	7bfb      	ldrb	r3, [r7, #15]
 8018772:	3301      	adds	r3, #1
 8018774:	73fb      	strb	r3, [r7, #15]
 8018776:	7bfa      	ldrb	r2, [r7, #15]
 8018778:	78fb      	ldrb	r3, [r7, #3]
 801877a:	3b01      	subs	r3, #1
 801877c:	429a      	cmp	r2, r3
 801877e:	d3ec      	bcc.n	801875a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8018780:	883b      	ldrh	r3, [r7, #0]
 8018782:	0418      	lsls	r0, r3, #16
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6819      	ldr	r1, [r3, #0]
 8018788:	78fb      	ldrb	r3, [r7, #3]
 801878a:	3b01      	subs	r3, #1
 801878c:	68ba      	ldr	r2, [r7, #8]
 801878e:	4302      	orrs	r2, r0
 8018790:	3340      	adds	r3, #64	; 0x40
 8018792:	009b      	lsls	r3, r3, #2
 8018794:	440b      	add	r3, r1
 8018796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8018798:	2300      	movs	r3, #0
}
 801879a:	4618      	mov	r0, r3
 801879c:	3714      	adds	r7, #20
 801879e:	46bd      	mov	sp, r7
 80187a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a4:	4770      	bx	lr

080187a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80187a6:	b480      	push	{r7}
 80187a8:	b083      	sub	sp, #12
 80187aa:	af00      	add	r7, sp, #0
 80187ac:	6078      	str	r0, [r7, #4]
 80187ae:	460b      	mov	r3, r1
 80187b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	887a      	ldrh	r2, [r7, #2]
 80187b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80187ba:	2300      	movs	r3, #0
}
 80187bc:	4618      	mov	r0, r3
 80187be:	370c      	adds	r7, #12
 80187c0:	46bd      	mov	sp, r7
 80187c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c6:	4770      	bx	lr

080187c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80187c8:	b480      	push	{r7}
 80187ca:	b083      	sub	sp, #12
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
 80187d0:	460b      	mov	r3, r1
 80187d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80187d4:	bf00      	nop
 80187d6:	370c      	adds	r7, #12
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b086      	sub	sp, #24
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d101      	bne.n	80187f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80187ee:	2301      	movs	r3, #1
 80187f0:	e267      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	f003 0301 	and.w	r3, r3, #1
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d075      	beq.n	80188ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80187fe:	4b88      	ldr	r3, [pc, #544]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018800:	689b      	ldr	r3, [r3, #8]
 8018802:	f003 030c 	and.w	r3, r3, #12
 8018806:	2b04      	cmp	r3, #4
 8018808:	d00c      	beq.n	8018824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801880a:	4b85      	ldr	r3, [pc, #532]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801880c:	689b      	ldr	r3, [r3, #8]
 801880e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8018812:	2b08      	cmp	r3, #8
 8018814:	d112      	bne.n	801883c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018816:	4b82      	ldr	r3, [pc, #520]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018818:	685b      	ldr	r3, [r3, #4]
 801881a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801881e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018822:	d10b      	bne.n	801883c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018824:	4b7e      	ldr	r3, [pc, #504]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801882c:	2b00      	cmp	r3, #0
 801882e:	d05b      	beq.n	80188e8 <HAL_RCC_OscConfig+0x108>
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d157      	bne.n	80188e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8018838:	2301      	movs	r3, #1
 801883a:	e242      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018844:	d106      	bne.n	8018854 <HAL_RCC_OscConfig+0x74>
 8018846:	4b76      	ldr	r3, [pc, #472]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4a75      	ldr	r2, [pc, #468]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801884c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018850:	6013      	str	r3, [r2, #0]
 8018852:	e01d      	b.n	8018890 <HAL_RCC_OscConfig+0xb0>
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	685b      	ldr	r3, [r3, #4]
 8018858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801885c:	d10c      	bne.n	8018878 <HAL_RCC_OscConfig+0x98>
 801885e:	4b70      	ldr	r3, [pc, #448]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	4a6f      	ldr	r2, [pc, #444]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018868:	6013      	str	r3, [r2, #0]
 801886a:	4b6d      	ldr	r3, [pc, #436]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	4a6c      	ldr	r2, [pc, #432]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018874:	6013      	str	r3, [r2, #0]
 8018876:	e00b      	b.n	8018890 <HAL_RCC_OscConfig+0xb0>
 8018878:	4b69      	ldr	r3, [pc, #420]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	4a68      	ldr	r2, [pc, #416]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801887e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018882:	6013      	str	r3, [r2, #0]
 8018884:	4b66      	ldr	r3, [pc, #408]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	4a65      	ldr	r2, [pc, #404]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801888a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801888e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	685b      	ldr	r3, [r3, #4]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d013      	beq.n	80188c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018898:	f7fe f868 	bl	801696c <HAL_GetTick>
 801889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801889e:	e008      	b.n	80188b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80188a0:	f7fe f864 	bl	801696c <HAL_GetTick>
 80188a4:	4602      	mov	r2, r0
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	1ad3      	subs	r3, r2, r3
 80188aa:	2b64      	cmp	r3, #100	; 0x64
 80188ac:	d901      	bls.n	80188b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80188ae:	2303      	movs	r3, #3
 80188b0:	e207      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80188b2:	4b5b      	ldr	r3, [pc, #364]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d0f0      	beq.n	80188a0 <HAL_RCC_OscConfig+0xc0>
 80188be:	e014      	b.n	80188ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80188c0:	f7fe f854 	bl	801696c <HAL_GetTick>
 80188c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80188c6:	e008      	b.n	80188da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80188c8:	f7fe f850 	bl	801696c <HAL_GetTick>
 80188cc:	4602      	mov	r2, r0
 80188ce:	693b      	ldr	r3, [r7, #16]
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	2b64      	cmp	r3, #100	; 0x64
 80188d4:	d901      	bls.n	80188da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80188d6:	2303      	movs	r3, #3
 80188d8:	e1f3      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80188da:	4b51      	ldr	r3, [pc, #324]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d1f0      	bne.n	80188c8 <HAL_RCC_OscConfig+0xe8>
 80188e6:	e000      	b.n	80188ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80188e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	f003 0302 	and.w	r3, r3, #2
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d063      	beq.n	80189be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80188f6:	4b4a      	ldr	r3, [pc, #296]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 80188f8:	689b      	ldr	r3, [r3, #8]
 80188fa:	f003 030c 	and.w	r3, r3, #12
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d00b      	beq.n	801891a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018902:	4b47      	ldr	r3, [pc, #284]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018904:	689b      	ldr	r3, [r3, #8]
 8018906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801890a:	2b08      	cmp	r3, #8
 801890c:	d11c      	bne.n	8018948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801890e:	4b44      	ldr	r3, [pc, #272]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018916:	2b00      	cmp	r3, #0
 8018918:	d116      	bne.n	8018948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801891a:	4b41      	ldr	r3, [pc, #260]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	f003 0302 	and.w	r3, r3, #2
 8018922:	2b00      	cmp	r3, #0
 8018924:	d005      	beq.n	8018932 <HAL_RCC_OscConfig+0x152>
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	68db      	ldr	r3, [r3, #12]
 801892a:	2b01      	cmp	r3, #1
 801892c:	d001      	beq.n	8018932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801892e:	2301      	movs	r3, #1
 8018930:	e1c7      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018932:	4b3b      	ldr	r3, [pc, #236]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	691b      	ldr	r3, [r3, #16]
 801893e:	00db      	lsls	r3, r3, #3
 8018940:	4937      	ldr	r1, [pc, #220]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018942:	4313      	orrs	r3, r2
 8018944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018946:	e03a      	b.n	80189be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d020      	beq.n	8018992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018950:	4b34      	ldr	r3, [pc, #208]	; (8018a24 <HAL_RCC_OscConfig+0x244>)
 8018952:	2201      	movs	r2, #1
 8018954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018956:	f7fe f809 	bl	801696c <HAL_GetTick>
 801895a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801895c:	e008      	b.n	8018970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801895e:	f7fe f805 	bl	801696c <HAL_GetTick>
 8018962:	4602      	mov	r2, r0
 8018964:	693b      	ldr	r3, [r7, #16]
 8018966:	1ad3      	subs	r3, r2, r3
 8018968:	2b02      	cmp	r3, #2
 801896a:	d901      	bls.n	8018970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801896c:	2303      	movs	r3, #3
 801896e:	e1a8      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018970:	4b2b      	ldr	r3, [pc, #172]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	f003 0302 	and.w	r3, r3, #2
 8018978:	2b00      	cmp	r3, #0
 801897a:	d0f0      	beq.n	801895e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801897c:	4b28      	ldr	r3, [pc, #160]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	691b      	ldr	r3, [r3, #16]
 8018988:	00db      	lsls	r3, r3, #3
 801898a:	4925      	ldr	r1, [pc, #148]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 801898c:	4313      	orrs	r3, r2
 801898e:	600b      	str	r3, [r1, #0]
 8018990:	e015      	b.n	80189be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018992:	4b24      	ldr	r3, [pc, #144]	; (8018a24 <HAL_RCC_OscConfig+0x244>)
 8018994:	2200      	movs	r2, #0
 8018996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018998:	f7fd ffe8 	bl	801696c <HAL_GetTick>
 801899c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801899e:	e008      	b.n	80189b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80189a0:	f7fd ffe4 	bl	801696c <HAL_GetTick>
 80189a4:	4602      	mov	r2, r0
 80189a6:	693b      	ldr	r3, [r7, #16]
 80189a8:	1ad3      	subs	r3, r2, r3
 80189aa:	2b02      	cmp	r3, #2
 80189ac:	d901      	bls.n	80189b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80189ae:	2303      	movs	r3, #3
 80189b0:	e187      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80189b2:	4b1b      	ldr	r3, [pc, #108]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	f003 0302 	and.w	r3, r3, #2
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d1f0      	bne.n	80189a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	f003 0308 	and.w	r3, r3, #8
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d036      	beq.n	8018a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	695b      	ldr	r3, [r3, #20]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d016      	beq.n	8018a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80189d2:	4b15      	ldr	r3, [pc, #84]	; (8018a28 <HAL_RCC_OscConfig+0x248>)
 80189d4:	2201      	movs	r2, #1
 80189d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80189d8:	f7fd ffc8 	bl	801696c <HAL_GetTick>
 80189dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80189de:	e008      	b.n	80189f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80189e0:	f7fd ffc4 	bl	801696c <HAL_GetTick>
 80189e4:	4602      	mov	r2, r0
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	1ad3      	subs	r3, r2, r3
 80189ea:	2b02      	cmp	r3, #2
 80189ec:	d901      	bls.n	80189f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80189ee:	2303      	movs	r3, #3
 80189f0:	e167      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80189f2:	4b0b      	ldr	r3, [pc, #44]	; (8018a20 <HAL_RCC_OscConfig+0x240>)
 80189f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189f6:	f003 0302 	and.w	r3, r3, #2
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d0f0      	beq.n	80189e0 <HAL_RCC_OscConfig+0x200>
 80189fe:	e01b      	b.n	8018a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018a00:	4b09      	ldr	r3, [pc, #36]	; (8018a28 <HAL_RCC_OscConfig+0x248>)
 8018a02:	2200      	movs	r2, #0
 8018a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018a06:	f7fd ffb1 	bl	801696c <HAL_GetTick>
 8018a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a0c:	e00e      	b.n	8018a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018a0e:	f7fd ffad 	bl	801696c <HAL_GetTick>
 8018a12:	4602      	mov	r2, r0
 8018a14:	693b      	ldr	r3, [r7, #16]
 8018a16:	1ad3      	subs	r3, r2, r3
 8018a18:	2b02      	cmp	r3, #2
 8018a1a:	d907      	bls.n	8018a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8018a1c:	2303      	movs	r3, #3
 8018a1e:	e150      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
 8018a20:	40023800 	.word	0x40023800
 8018a24:	42470000 	.word	0x42470000
 8018a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a2c:	4b88      	ldr	r3, [pc, #544]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a30:	f003 0302 	and.w	r3, r3, #2
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d1ea      	bne.n	8018a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	f003 0304 	and.w	r3, r3, #4
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f000 8097 	beq.w	8018b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018a46:	2300      	movs	r3, #0
 8018a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018a4a:	4b81      	ldr	r3, [pc, #516]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d10f      	bne.n	8018a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018a56:	2300      	movs	r3, #0
 8018a58:	60bb      	str	r3, [r7, #8]
 8018a5a:	4b7d      	ldr	r3, [pc, #500]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a5e:	4a7c      	ldr	r2, [pc, #496]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018a64:	6413      	str	r3, [r2, #64]	; 0x40
 8018a66:	4b7a      	ldr	r3, [pc, #488]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018a6e:	60bb      	str	r3, [r7, #8]
 8018a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018a72:	2301      	movs	r3, #1
 8018a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018a76:	4b77      	ldr	r3, [pc, #476]	; (8018c54 <HAL_RCC_OscConfig+0x474>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d118      	bne.n	8018ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018a82:	4b74      	ldr	r3, [pc, #464]	; (8018c54 <HAL_RCC_OscConfig+0x474>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	4a73      	ldr	r2, [pc, #460]	; (8018c54 <HAL_RCC_OscConfig+0x474>)
 8018a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018a8e:	f7fd ff6d 	bl	801696c <HAL_GetTick>
 8018a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018a94:	e008      	b.n	8018aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018a96:	f7fd ff69 	bl	801696c <HAL_GetTick>
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	693b      	ldr	r3, [r7, #16]
 8018a9e:	1ad3      	subs	r3, r2, r3
 8018aa0:	2b02      	cmp	r3, #2
 8018aa2:	d901      	bls.n	8018aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8018aa4:	2303      	movs	r3, #3
 8018aa6:	e10c      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018aa8:	4b6a      	ldr	r3, [pc, #424]	; (8018c54 <HAL_RCC_OscConfig+0x474>)
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d0f0      	beq.n	8018a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	689b      	ldr	r3, [r3, #8]
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d106      	bne.n	8018aca <HAL_RCC_OscConfig+0x2ea>
 8018abc:	4b64      	ldr	r3, [pc, #400]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ac0:	4a63      	ldr	r2, [pc, #396]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018ac2:	f043 0301 	orr.w	r3, r3, #1
 8018ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8018ac8:	e01c      	b.n	8018b04 <HAL_RCC_OscConfig+0x324>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	689b      	ldr	r3, [r3, #8]
 8018ace:	2b05      	cmp	r3, #5
 8018ad0:	d10c      	bne.n	8018aec <HAL_RCC_OscConfig+0x30c>
 8018ad2:	4b5f      	ldr	r3, [pc, #380]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ad6:	4a5e      	ldr	r2, [pc, #376]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018ad8:	f043 0304 	orr.w	r3, r3, #4
 8018adc:	6713      	str	r3, [r2, #112]	; 0x70
 8018ade:	4b5c      	ldr	r3, [pc, #368]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ae2:	4a5b      	ldr	r2, [pc, #364]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018ae4:	f043 0301 	orr.w	r3, r3, #1
 8018ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8018aea:	e00b      	b.n	8018b04 <HAL_RCC_OscConfig+0x324>
 8018aec:	4b58      	ldr	r3, [pc, #352]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018af0:	4a57      	ldr	r2, [pc, #348]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018af2:	f023 0301 	bic.w	r3, r3, #1
 8018af6:	6713      	str	r3, [r2, #112]	; 0x70
 8018af8:	4b55      	ldr	r3, [pc, #340]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018afc:	4a54      	ldr	r2, [pc, #336]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018afe:	f023 0304 	bic.w	r3, r3, #4
 8018b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	689b      	ldr	r3, [r3, #8]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d015      	beq.n	8018b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b0c:	f7fd ff2e 	bl	801696c <HAL_GetTick>
 8018b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018b12:	e00a      	b.n	8018b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018b14:	f7fd ff2a 	bl	801696c <HAL_GetTick>
 8018b18:	4602      	mov	r2, r0
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	1ad3      	subs	r3, r2, r3
 8018b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b22:	4293      	cmp	r3, r2
 8018b24:	d901      	bls.n	8018b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8018b26:	2303      	movs	r3, #3
 8018b28:	e0cb      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018b2a:	4b49      	ldr	r3, [pc, #292]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b2e:	f003 0302 	and.w	r3, r3, #2
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d0ee      	beq.n	8018b14 <HAL_RCC_OscConfig+0x334>
 8018b36:	e014      	b.n	8018b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018b38:	f7fd ff18 	bl	801696c <HAL_GetTick>
 8018b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018b3e:	e00a      	b.n	8018b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018b40:	f7fd ff14 	bl	801696c <HAL_GetTick>
 8018b44:	4602      	mov	r2, r0
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	1ad3      	subs	r3, r2, r3
 8018b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	d901      	bls.n	8018b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8018b52:	2303      	movs	r3, #3
 8018b54:	e0b5      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018b56:	4b3e      	ldr	r3, [pc, #248]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b5a:	f003 0302 	and.w	r3, r3, #2
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d1ee      	bne.n	8018b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018b62:	7dfb      	ldrb	r3, [r7, #23]
 8018b64:	2b01      	cmp	r3, #1
 8018b66:	d105      	bne.n	8018b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018b68:	4b39      	ldr	r3, [pc, #228]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b6c:	4a38      	ldr	r2, [pc, #224]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	699b      	ldr	r3, [r3, #24]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	f000 80a1 	beq.w	8018cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8018b7e:	4b34      	ldr	r3, [pc, #208]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018b80:	689b      	ldr	r3, [r3, #8]
 8018b82:	f003 030c 	and.w	r3, r3, #12
 8018b86:	2b08      	cmp	r3, #8
 8018b88:	d05c      	beq.n	8018c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	699b      	ldr	r3, [r3, #24]
 8018b8e:	2b02      	cmp	r3, #2
 8018b90:	d141      	bne.n	8018c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018b92:	4b31      	ldr	r3, [pc, #196]	; (8018c58 <HAL_RCC_OscConfig+0x478>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018b98:	f7fd fee8 	bl	801696c <HAL_GetTick>
 8018b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018b9e:	e008      	b.n	8018bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018ba0:	f7fd fee4 	bl	801696c <HAL_GetTick>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	693b      	ldr	r3, [r7, #16]
 8018ba8:	1ad3      	subs	r3, r2, r3
 8018baa:	2b02      	cmp	r3, #2
 8018bac:	d901      	bls.n	8018bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8018bae:	2303      	movs	r3, #3
 8018bb0:	e087      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018bb2:	4b27      	ldr	r3, [pc, #156]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d1f0      	bne.n	8018ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	69da      	ldr	r2, [r3, #28]
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	6a1b      	ldr	r3, [r3, #32]
 8018bc6:	431a      	orrs	r2, r3
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bcc:	019b      	lsls	r3, r3, #6
 8018bce:	431a      	orrs	r2, r3
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bd4:	085b      	lsrs	r3, r3, #1
 8018bd6:	3b01      	subs	r3, #1
 8018bd8:	041b      	lsls	r3, r3, #16
 8018bda:	431a      	orrs	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018be0:	061b      	lsls	r3, r3, #24
 8018be2:	491b      	ldr	r1, [pc, #108]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018be4:	4313      	orrs	r3, r2
 8018be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018be8:	4b1b      	ldr	r3, [pc, #108]	; (8018c58 <HAL_RCC_OscConfig+0x478>)
 8018bea:	2201      	movs	r2, #1
 8018bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018bee:	f7fd febd 	bl	801696c <HAL_GetTick>
 8018bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018bf4:	e008      	b.n	8018c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018bf6:	f7fd feb9 	bl	801696c <HAL_GetTick>
 8018bfa:	4602      	mov	r2, r0
 8018bfc:	693b      	ldr	r3, [r7, #16]
 8018bfe:	1ad3      	subs	r3, r2, r3
 8018c00:	2b02      	cmp	r3, #2
 8018c02:	d901      	bls.n	8018c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8018c04:	2303      	movs	r3, #3
 8018c06:	e05c      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018c08:	4b11      	ldr	r3, [pc, #68]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d0f0      	beq.n	8018bf6 <HAL_RCC_OscConfig+0x416>
 8018c14:	e054      	b.n	8018cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018c16:	4b10      	ldr	r3, [pc, #64]	; (8018c58 <HAL_RCC_OscConfig+0x478>)
 8018c18:	2200      	movs	r2, #0
 8018c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c1c:	f7fd fea6 	bl	801696c <HAL_GetTick>
 8018c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c22:	e008      	b.n	8018c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018c24:	f7fd fea2 	bl	801696c <HAL_GetTick>
 8018c28:	4602      	mov	r2, r0
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	1ad3      	subs	r3, r2, r3
 8018c2e:	2b02      	cmp	r3, #2
 8018c30:	d901      	bls.n	8018c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8018c32:	2303      	movs	r3, #3
 8018c34:	e045      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c36:	4b06      	ldr	r3, [pc, #24]	; (8018c50 <HAL_RCC_OscConfig+0x470>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d1f0      	bne.n	8018c24 <HAL_RCC_OscConfig+0x444>
 8018c42:	e03d      	b.n	8018cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	699b      	ldr	r3, [r3, #24]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d107      	bne.n	8018c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8018c4c:	2301      	movs	r3, #1
 8018c4e:	e038      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
 8018c50:	40023800 	.word	0x40023800
 8018c54:	40007000 	.word	0x40007000
 8018c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8018c5c:	4b1b      	ldr	r3, [pc, #108]	; (8018ccc <HAL_RCC_OscConfig+0x4ec>)
 8018c5e:	685b      	ldr	r3, [r3, #4]
 8018c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	699b      	ldr	r3, [r3, #24]
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d028      	beq.n	8018cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d121      	bne.n	8018cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d11a      	bne.n	8018cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8018c86:	68fa      	ldr	r2, [r7, #12]
 8018c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018c8c:	4013      	ands	r3, r2
 8018c8e:	687a      	ldr	r2, [r7, #4]
 8018c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8018c94:	4293      	cmp	r3, r2
 8018c96:	d111      	bne.n	8018cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ca2:	085b      	lsrs	r3, r3, #1
 8018ca4:	3b01      	subs	r3, #1
 8018ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8018ca8:	429a      	cmp	r2, r3
 8018caa:	d107      	bne.n	8018cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d001      	beq.n	8018cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	e000      	b.n	8018cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8018cc0:	2300      	movs	r3, #0
}
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	3718      	adds	r7, #24
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	bf00      	nop
 8018ccc:	40023800 	.word	0x40023800

08018cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b084      	sub	sp, #16
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d101      	bne.n	8018ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018ce0:	2301      	movs	r3, #1
 8018ce2:	e0cc      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018ce4:	4b68      	ldr	r3, [pc, #416]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	f003 0307 	and.w	r3, r3, #7
 8018cec:	683a      	ldr	r2, [r7, #0]
 8018cee:	429a      	cmp	r2, r3
 8018cf0:	d90c      	bls.n	8018d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018cf2:	4b65      	ldr	r3, [pc, #404]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018cf4:	683a      	ldr	r2, [r7, #0]
 8018cf6:	b2d2      	uxtb	r2, r2
 8018cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018cfa:	4b63      	ldr	r3, [pc, #396]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f003 0307 	and.w	r3, r3, #7
 8018d02:	683a      	ldr	r2, [r7, #0]
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d001      	beq.n	8018d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018d08:	2301      	movs	r3, #1
 8018d0a:	e0b8      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f003 0302 	and.w	r3, r3, #2
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d020      	beq.n	8018d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f003 0304 	and.w	r3, r3, #4
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d005      	beq.n	8018d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018d24:	4b59      	ldr	r3, [pc, #356]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d26:	689b      	ldr	r3, [r3, #8]
 8018d28:	4a58      	ldr	r2, [pc, #352]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f003 0308 	and.w	r3, r3, #8
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d005      	beq.n	8018d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018d3c:	4b53      	ldr	r3, [pc, #332]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d3e:	689b      	ldr	r3, [r3, #8]
 8018d40:	4a52      	ldr	r2, [pc, #328]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018d48:	4b50      	ldr	r3, [pc, #320]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d4a:	689b      	ldr	r3, [r3, #8]
 8018d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	689b      	ldr	r3, [r3, #8]
 8018d54:	494d      	ldr	r1, [pc, #308]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d56:	4313      	orrs	r3, r2
 8018d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	f003 0301 	and.w	r3, r3, #1
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d044      	beq.n	8018df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	2b01      	cmp	r3, #1
 8018d6c:	d107      	bne.n	8018d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018d6e:	4b47      	ldr	r3, [pc, #284]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d119      	bne.n	8018dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	e07f      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	2b02      	cmp	r3, #2
 8018d84:	d003      	beq.n	8018d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018d8a:	2b03      	cmp	r3, #3
 8018d8c:	d107      	bne.n	8018d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018d8e:	4b3f      	ldr	r3, [pc, #252]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d109      	bne.n	8018dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	e06f      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018d9e:	4b3b      	ldr	r3, [pc, #236]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f003 0302 	and.w	r3, r3, #2
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d101      	bne.n	8018dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018daa:	2301      	movs	r3, #1
 8018dac:	e067      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018dae:	4b37      	ldr	r3, [pc, #220]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018db0:	689b      	ldr	r3, [r3, #8]
 8018db2:	f023 0203 	bic.w	r2, r3, #3
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	685b      	ldr	r3, [r3, #4]
 8018dba:	4934      	ldr	r1, [pc, #208]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018dbc:	4313      	orrs	r3, r2
 8018dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018dc0:	f7fd fdd4 	bl	801696c <HAL_GetTick>
 8018dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018dc6:	e00a      	b.n	8018dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018dc8:	f7fd fdd0 	bl	801696c <HAL_GetTick>
 8018dcc:	4602      	mov	r2, r0
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	1ad3      	subs	r3, r2, r3
 8018dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	d901      	bls.n	8018dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8018dda:	2303      	movs	r3, #3
 8018ddc:	e04f      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018dde:	4b2b      	ldr	r3, [pc, #172]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018de0:	689b      	ldr	r3, [r3, #8]
 8018de2:	f003 020c 	and.w	r2, r3, #12
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	009b      	lsls	r3, r3, #2
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d1eb      	bne.n	8018dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8018df0:	4b25      	ldr	r3, [pc, #148]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f003 0307 	and.w	r3, r3, #7
 8018df8:	683a      	ldr	r2, [r7, #0]
 8018dfa:	429a      	cmp	r2, r3
 8018dfc:	d20c      	bcs.n	8018e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018dfe:	4b22      	ldr	r3, [pc, #136]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018e00:	683a      	ldr	r2, [r7, #0]
 8018e02:	b2d2      	uxtb	r2, r2
 8018e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018e06:	4b20      	ldr	r3, [pc, #128]	; (8018e88 <HAL_RCC_ClockConfig+0x1b8>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	f003 0307 	and.w	r3, r3, #7
 8018e0e:	683a      	ldr	r2, [r7, #0]
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d001      	beq.n	8018e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018e14:	2301      	movs	r3, #1
 8018e16:	e032      	b.n	8018e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f003 0304 	and.w	r3, r3, #4
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d008      	beq.n	8018e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018e24:	4b19      	ldr	r3, [pc, #100]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018e26:	689b      	ldr	r3, [r3, #8]
 8018e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	4916      	ldr	r1, [pc, #88]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018e32:	4313      	orrs	r3, r2
 8018e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	f003 0308 	and.w	r3, r3, #8
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d009      	beq.n	8018e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018e42:	4b12      	ldr	r3, [pc, #72]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018e44:	689b      	ldr	r3, [r3, #8]
 8018e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	691b      	ldr	r3, [r3, #16]
 8018e4e:	00db      	lsls	r3, r3, #3
 8018e50:	490e      	ldr	r1, [pc, #56]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018e52:	4313      	orrs	r3, r2
 8018e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018e56:	f000 f821 	bl	8018e9c <HAL_RCC_GetSysClockFreq>
 8018e5a:	4602      	mov	r2, r0
 8018e5c:	4b0b      	ldr	r3, [pc, #44]	; (8018e8c <HAL_RCC_ClockConfig+0x1bc>)
 8018e5e:	689b      	ldr	r3, [r3, #8]
 8018e60:	091b      	lsrs	r3, r3, #4
 8018e62:	f003 030f 	and.w	r3, r3, #15
 8018e66:	490a      	ldr	r1, [pc, #40]	; (8018e90 <HAL_RCC_ClockConfig+0x1c0>)
 8018e68:	5ccb      	ldrb	r3, [r1, r3]
 8018e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8018e6e:	4a09      	ldr	r2, [pc, #36]	; (8018e94 <HAL_RCC_ClockConfig+0x1c4>)
 8018e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8018e72:	4b09      	ldr	r3, [pc, #36]	; (8018e98 <HAL_RCC_ClockConfig+0x1c8>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	4618      	mov	r0, r3
 8018e78:	f7fd fd34 	bl	80168e4 <HAL_InitTick>

  return HAL_OK;
 8018e7c:	2300      	movs	r3, #0
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3710      	adds	r7, #16
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	40023c00 	.word	0x40023c00
 8018e8c:	40023800 	.word	0x40023800
 8018e90:	080225d0 	.word	0x080225d0
 8018e94:	20000034 	.word	0x20000034
 8018e98:	20000038 	.word	0x20000038

08018e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018ea0:	b094      	sub	sp, #80	; 0x50
 8018ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018eac:	2300      	movs	r3, #0
 8018eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018eb4:	4b79      	ldr	r3, [pc, #484]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 8018eb6:	689b      	ldr	r3, [r3, #8]
 8018eb8:	f003 030c 	and.w	r3, r3, #12
 8018ebc:	2b08      	cmp	r3, #8
 8018ebe:	d00d      	beq.n	8018edc <HAL_RCC_GetSysClockFreq+0x40>
 8018ec0:	2b08      	cmp	r3, #8
 8018ec2:	f200 80e1 	bhi.w	8019088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d002      	beq.n	8018ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8018eca:	2b04      	cmp	r3, #4
 8018ecc:	d003      	beq.n	8018ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8018ece:	e0db      	b.n	8019088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8018ed0:	4b73      	ldr	r3, [pc, #460]	; (80190a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8018ed2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8018ed4:	e0db      	b.n	801908e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8018ed6:	4b72      	ldr	r3, [pc, #456]	; (80190a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8018ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8018eda:	e0d8      	b.n	801908e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8018edc:	4b6f      	ldr	r3, [pc, #444]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 8018ede:	685b      	ldr	r3, [r3, #4]
 8018ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8018ee6:	4b6d      	ldr	r3, [pc, #436]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 8018ee8:	685b      	ldr	r3, [r3, #4]
 8018eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d063      	beq.n	8018fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018ef2:	4b6a      	ldr	r3, [pc, #424]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 8018ef4:	685b      	ldr	r3, [r3, #4]
 8018ef6:	099b      	lsrs	r3, r3, #6
 8018ef8:	2200      	movs	r2, #0
 8018efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8018efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8018efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f04:	633b      	str	r3, [r7, #48]	; 0x30
 8018f06:	2300      	movs	r3, #0
 8018f08:	637b      	str	r3, [r7, #52]	; 0x34
 8018f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8018f0e:	4622      	mov	r2, r4
 8018f10:	462b      	mov	r3, r5
 8018f12:	f04f 0000 	mov.w	r0, #0
 8018f16:	f04f 0100 	mov.w	r1, #0
 8018f1a:	0159      	lsls	r1, r3, #5
 8018f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8018f20:	0150      	lsls	r0, r2, #5
 8018f22:	4602      	mov	r2, r0
 8018f24:	460b      	mov	r3, r1
 8018f26:	4621      	mov	r1, r4
 8018f28:	1a51      	subs	r1, r2, r1
 8018f2a:	6139      	str	r1, [r7, #16]
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8018f32:	617b      	str	r3, [r7, #20]
 8018f34:	f04f 0200 	mov.w	r2, #0
 8018f38:	f04f 0300 	mov.w	r3, #0
 8018f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018f40:	4659      	mov	r1, fp
 8018f42:	018b      	lsls	r3, r1, #6
 8018f44:	4651      	mov	r1, sl
 8018f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8018f4a:	4651      	mov	r1, sl
 8018f4c:	018a      	lsls	r2, r1, #6
 8018f4e:	4651      	mov	r1, sl
 8018f50:	ebb2 0801 	subs.w	r8, r2, r1
 8018f54:	4659      	mov	r1, fp
 8018f56:	eb63 0901 	sbc.w	r9, r3, r1
 8018f5a:	f04f 0200 	mov.w	r2, #0
 8018f5e:	f04f 0300 	mov.w	r3, #0
 8018f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8018f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018f6e:	4690      	mov	r8, r2
 8018f70:	4699      	mov	r9, r3
 8018f72:	4623      	mov	r3, r4
 8018f74:	eb18 0303 	adds.w	r3, r8, r3
 8018f78:	60bb      	str	r3, [r7, #8]
 8018f7a:	462b      	mov	r3, r5
 8018f7c:	eb49 0303 	adc.w	r3, r9, r3
 8018f80:	60fb      	str	r3, [r7, #12]
 8018f82:	f04f 0200 	mov.w	r2, #0
 8018f86:	f04f 0300 	mov.w	r3, #0
 8018f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8018f8e:	4629      	mov	r1, r5
 8018f90:	028b      	lsls	r3, r1, #10
 8018f92:	4621      	mov	r1, r4
 8018f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8018f98:	4621      	mov	r1, r4
 8018f9a:	028a      	lsls	r2, r1, #10
 8018f9c:	4610      	mov	r0, r2
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8018fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018fac:	f7e7 ff38 	bl	8000e20 <__aeabi_uldivmod>
 8018fb0:	4602      	mov	r2, r0
 8018fb2:	460b      	mov	r3, r1
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018fb8:	e058      	b.n	801906c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018fba:	4b38      	ldr	r3, [pc, #224]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	099b      	lsrs	r3, r3, #6
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	4611      	mov	r1, r2
 8018fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8018fca:	623b      	str	r3, [r7, #32]
 8018fcc:	2300      	movs	r3, #0
 8018fce:	627b      	str	r3, [r7, #36]	; 0x24
 8018fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8018fd4:	4642      	mov	r2, r8
 8018fd6:	464b      	mov	r3, r9
 8018fd8:	f04f 0000 	mov.w	r0, #0
 8018fdc:	f04f 0100 	mov.w	r1, #0
 8018fe0:	0159      	lsls	r1, r3, #5
 8018fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8018fe6:	0150      	lsls	r0, r2, #5
 8018fe8:	4602      	mov	r2, r0
 8018fea:	460b      	mov	r3, r1
 8018fec:	4641      	mov	r1, r8
 8018fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8018ff2:	4649      	mov	r1, r9
 8018ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8018ff8:	f04f 0200 	mov.w	r2, #0
 8018ffc:	f04f 0300 	mov.w	r3, #0
 8019000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8019004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8019008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801900c:	ebb2 040a 	subs.w	r4, r2, sl
 8019010:	eb63 050b 	sbc.w	r5, r3, fp
 8019014:	f04f 0200 	mov.w	r2, #0
 8019018:	f04f 0300 	mov.w	r3, #0
 801901c:	00eb      	lsls	r3, r5, #3
 801901e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019022:	00e2      	lsls	r2, r4, #3
 8019024:	4614      	mov	r4, r2
 8019026:	461d      	mov	r5, r3
 8019028:	4643      	mov	r3, r8
 801902a:	18e3      	adds	r3, r4, r3
 801902c:	603b      	str	r3, [r7, #0]
 801902e:	464b      	mov	r3, r9
 8019030:	eb45 0303 	adc.w	r3, r5, r3
 8019034:	607b      	str	r3, [r7, #4]
 8019036:	f04f 0200 	mov.w	r2, #0
 801903a:	f04f 0300 	mov.w	r3, #0
 801903e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019042:	4629      	mov	r1, r5
 8019044:	028b      	lsls	r3, r1, #10
 8019046:	4621      	mov	r1, r4
 8019048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801904c:	4621      	mov	r1, r4
 801904e:	028a      	lsls	r2, r1, #10
 8019050:	4610      	mov	r0, r2
 8019052:	4619      	mov	r1, r3
 8019054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019056:	2200      	movs	r2, #0
 8019058:	61bb      	str	r3, [r7, #24]
 801905a:	61fa      	str	r2, [r7, #28]
 801905c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019060:	f7e7 fede 	bl	8000e20 <__aeabi_uldivmod>
 8019064:	4602      	mov	r2, r0
 8019066:	460b      	mov	r3, r1
 8019068:	4613      	mov	r3, r2
 801906a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801906c:	4b0b      	ldr	r3, [pc, #44]	; (801909c <HAL_RCC_GetSysClockFreq+0x200>)
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	0c1b      	lsrs	r3, r3, #16
 8019072:	f003 0303 	and.w	r3, r3, #3
 8019076:	3301      	adds	r3, #1
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801907c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019080:	fbb2 f3f3 	udiv	r3, r2, r3
 8019084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019086:	e002      	b.n	801908e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019088:	4b05      	ldr	r3, [pc, #20]	; (80190a0 <HAL_RCC_GetSysClockFreq+0x204>)
 801908a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801908c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801908e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8019090:	4618      	mov	r0, r3
 8019092:	3750      	adds	r7, #80	; 0x50
 8019094:	46bd      	mov	sp, r7
 8019096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801909a:	bf00      	nop
 801909c:	40023800 	.word	0x40023800
 80190a0:	00f42400 	.word	0x00f42400

080190a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80190a4:	b480      	push	{r7}
 80190a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80190a8:	4b03      	ldr	r3, [pc, #12]	; (80190b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80190aa:	681b      	ldr	r3, [r3, #0]
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	46bd      	mov	sp, r7
 80190b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b4:	4770      	bx	lr
 80190b6:	bf00      	nop
 80190b8:	20000034 	.word	0x20000034

080190bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d101      	bne.n	80190ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80190ca:	2301      	movs	r3, #1
 80190cc:	e07b      	b.n	80191c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d108      	bne.n	80190e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80190de:	d009      	beq.n	80190f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	2200      	movs	r2, #0
 80190e4:	61da      	str	r2, [r3, #28]
 80190e6:	e005      	b.n	80190f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2200      	movs	r2, #0
 80190ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	2200      	movs	r2, #0
 80190f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2200      	movs	r2, #0
 80190f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019100:	b2db      	uxtb	r3, r3
 8019102:	2b00      	cmp	r3, #0
 8019104:	d106      	bne.n	8019114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	2200      	movs	r2, #0
 801910a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7fd fa16 	bl	8016540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2202      	movs	r2, #2
 8019118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	681a      	ldr	r2, [r3, #0]
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801912a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	685b      	ldr	r3, [r3, #4]
 8019130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	689b      	ldr	r3, [r3, #8]
 8019138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801913c:	431a      	orrs	r2, r3
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	68db      	ldr	r3, [r3, #12]
 8019142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019146:	431a      	orrs	r2, r3
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	691b      	ldr	r3, [r3, #16]
 801914c:	f003 0302 	and.w	r3, r3, #2
 8019150:	431a      	orrs	r2, r3
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	695b      	ldr	r3, [r3, #20]
 8019156:	f003 0301 	and.w	r3, r3, #1
 801915a:	431a      	orrs	r2, r3
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	699b      	ldr	r3, [r3, #24]
 8019160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019164:	431a      	orrs	r2, r3
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	69db      	ldr	r3, [r3, #28]
 801916a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801916e:	431a      	orrs	r2, r3
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6a1b      	ldr	r3, [r3, #32]
 8019174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019178:	ea42 0103 	orr.w	r1, r2, r3
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	430a      	orrs	r2, r1
 801918a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	699b      	ldr	r3, [r3, #24]
 8019190:	0c1b      	lsrs	r3, r3, #16
 8019192:	f003 0104 	and.w	r1, r3, #4
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801919a:	f003 0210 	and.w	r2, r3, #16
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	430a      	orrs	r2, r1
 80191a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	69da      	ldr	r2, [r3, #28]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80191b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	2200      	movs	r2, #0
 80191ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2201      	movs	r2, #1
 80191c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80191c4:	2300      	movs	r3, #0
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}

080191ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80191ce:	b580      	push	{r7, lr}
 80191d0:	b088      	sub	sp, #32
 80191d2:	af00      	add	r7, sp, #0
 80191d4:	60f8      	str	r0, [r7, #12]
 80191d6:	60b9      	str	r1, [r7, #8]
 80191d8:	603b      	str	r3, [r7, #0]
 80191da:	4613      	mov	r3, r2
 80191dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80191de:	2300      	movs	r3, #0
 80191e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d101      	bne.n	80191f0 <HAL_SPI_Transmit+0x22>
 80191ec:	2302      	movs	r3, #2
 80191ee:	e126      	b.n	801943e <HAL_SPI_Transmit+0x270>
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2201      	movs	r2, #1
 80191f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80191f8:	f7fd fbb8 	bl	801696c <HAL_GetTick>
 80191fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80191fe:	88fb      	ldrh	r3, [r7, #6]
 8019200:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019208:	b2db      	uxtb	r3, r3
 801920a:	2b01      	cmp	r3, #1
 801920c:	d002      	beq.n	8019214 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801920e:	2302      	movs	r3, #2
 8019210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019212:	e10b      	b.n	801942c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d002      	beq.n	8019220 <HAL_SPI_Transmit+0x52>
 801921a:	88fb      	ldrh	r3, [r7, #6]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d102      	bne.n	8019226 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8019220:	2301      	movs	r3, #1
 8019222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019224:	e102      	b.n	801942c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	2203      	movs	r2, #3
 801922a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	2200      	movs	r2, #0
 8019232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	68ba      	ldr	r2, [r7, #8]
 8019238:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	88fa      	ldrh	r2, [r7, #6]
 801923e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	88fa      	ldrh	r2, [r7, #6]
 8019244:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	2200      	movs	r2, #0
 801924a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	2200      	movs	r2, #0
 8019250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	2200      	movs	r2, #0
 8019256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2200      	movs	r2, #0
 801925c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	2200      	movs	r2, #0
 8019262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	689b      	ldr	r3, [r3, #8]
 8019268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801926c:	d10f      	bne.n	801928e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	681a      	ldr	r2, [r3, #0]
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801927c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	681a      	ldr	r2, [r3, #0]
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801928c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019298:	2b40      	cmp	r3, #64	; 0x40
 801929a:	d007      	beq.n	80192ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80192aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	68db      	ldr	r3, [r3, #12]
 80192b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80192b4:	d14b      	bne.n	801934e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	685b      	ldr	r3, [r3, #4]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d002      	beq.n	80192c4 <HAL_SPI_Transmit+0xf6>
 80192be:	8afb      	ldrh	r3, [r7, #22]
 80192c0:	2b01      	cmp	r3, #1
 80192c2:	d13e      	bne.n	8019342 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192c8:	881a      	ldrh	r2, [r3, #0]
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192d4:	1c9a      	adds	r2, r3, #2
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80192de:	b29b      	uxth	r3, r3
 80192e0:	3b01      	subs	r3, #1
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80192e8:	e02b      	b.n	8019342 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	689b      	ldr	r3, [r3, #8]
 80192f0:	f003 0302 	and.w	r3, r3, #2
 80192f4:	2b02      	cmp	r3, #2
 80192f6:	d112      	bne.n	801931e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192fc:	881a      	ldrh	r2, [r3, #0]
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019308:	1c9a      	adds	r2, r3, #2
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8019312:	b29b      	uxth	r3, r3
 8019314:	3b01      	subs	r3, #1
 8019316:	b29a      	uxth	r2, r3
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	86da      	strh	r2, [r3, #54]	; 0x36
 801931c:	e011      	b.n	8019342 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801931e:	f7fd fb25 	bl	801696c <HAL_GetTick>
 8019322:	4602      	mov	r2, r0
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	1ad3      	subs	r3, r2, r3
 8019328:	683a      	ldr	r2, [r7, #0]
 801932a:	429a      	cmp	r2, r3
 801932c:	d803      	bhi.n	8019336 <HAL_SPI_Transmit+0x168>
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019334:	d102      	bne.n	801933c <HAL_SPI_Transmit+0x16e>
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d102      	bne.n	8019342 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801933c:	2303      	movs	r3, #3
 801933e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019340:	e074      	b.n	801942c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8019346:	b29b      	uxth	r3, r3
 8019348:	2b00      	cmp	r3, #0
 801934a:	d1ce      	bne.n	80192ea <HAL_SPI_Transmit+0x11c>
 801934c:	e04c      	b.n	80193e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	685b      	ldr	r3, [r3, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d002      	beq.n	801935c <HAL_SPI_Transmit+0x18e>
 8019356:	8afb      	ldrh	r3, [r7, #22]
 8019358:	2b01      	cmp	r3, #1
 801935a:	d140      	bne.n	80193de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	330c      	adds	r3, #12
 8019366:	7812      	ldrb	r2, [r2, #0]
 8019368:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801936e:	1c5a      	adds	r2, r3, #1
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8019378:	b29b      	uxth	r3, r3
 801937a:	3b01      	subs	r3, #1
 801937c:	b29a      	uxth	r2, r3
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8019382:	e02c      	b.n	80193de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	689b      	ldr	r3, [r3, #8]
 801938a:	f003 0302 	and.w	r3, r3, #2
 801938e:	2b02      	cmp	r3, #2
 8019390:	d113      	bne.n	80193ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	330c      	adds	r3, #12
 801939c:	7812      	ldrb	r2, [r2, #0]
 801939e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193a4:	1c5a      	adds	r2, r3, #1
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	3b01      	subs	r3, #1
 80193b2:	b29a      	uxth	r2, r3
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80193b8:	e011      	b.n	80193de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80193ba:	f7fd fad7 	bl	801696c <HAL_GetTick>
 80193be:	4602      	mov	r2, r0
 80193c0:	69bb      	ldr	r3, [r7, #24]
 80193c2:	1ad3      	subs	r3, r2, r3
 80193c4:	683a      	ldr	r2, [r7, #0]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	d803      	bhi.n	80193d2 <HAL_SPI_Transmit+0x204>
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193d0:	d102      	bne.n	80193d8 <HAL_SPI_Transmit+0x20a>
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d102      	bne.n	80193de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80193d8:	2303      	movs	r3, #3
 80193da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80193dc:	e026      	b.n	801942c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80193e2:	b29b      	uxth	r3, r3
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1cd      	bne.n	8019384 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80193e8:	69ba      	ldr	r2, [r7, #24]
 80193ea:	6839      	ldr	r1, [r7, #0]
 80193ec:	68f8      	ldr	r0, [r7, #12]
 80193ee:	f000 f8b3 	bl	8019558 <SPI_EndRxTxTransaction>
 80193f2:	4603      	mov	r3, r0
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d002      	beq.n	80193fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	2220      	movs	r2, #32
 80193fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	689b      	ldr	r3, [r3, #8]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d10a      	bne.n	801941c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8019406:	2300      	movs	r3, #0
 8019408:	613b      	str	r3, [r7, #16]
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	68db      	ldr	r3, [r3, #12]
 8019410:	613b      	str	r3, [r7, #16]
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	689b      	ldr	r3, [r3, #8]
 8019418:	613b      	str	r3, [r7, #16]
 801941a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019420:	2b00      	cmp	r3, #0
 8019422:	d002      	beq.n	801942a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8019424:	2301      	movs	r3, #1
 8019426:	77fb      	strb	r3, [r7, #31]
 8019428:	e000      	b.n	801942c <HAL_SPI_Transmit+0x25e>
  }

error:
 801942a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	2201      	movs	r2, #1
 8019430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	2200      	movs	r2, #0
 8019438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801943c:	7ffb      	ldrb	r3, [r7, #31]
}
 801943e:	4618      	mov	r0, r3
 8019440:	3720      	adds	r7, #32
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}
	...

08019448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b088      	sub	sp, #32
 801944c:	af00      	add	r7, sp, #0
 801944e:	60f8      	str	r0, [r7, #12]
 8019450:	60b9      	str	r1, [r7, #8]
 8019452:	603b      	str	r3, [r7, #0]
 8019454:	4613      	mov	r3, r2
 8019456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8019458:	f7fd fa88 	bl	801696c <HAL_GetTick>
 801945c:	4602      	mov	r2, r0
 801945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019460:	1a9b      	subs	r3, r3, r2
 8019462:	683a      	ldr	r2, [r7, #0]
 8019464:	4413      	add	r3, r2
 8019466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8019468:	f7fd fa80 	bl	801696c <HAL_GetTick>
 801946c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801946e:	4b39      	ldr	r3, [pc, #228]	; (8019554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	015b      	lsls	r3, r3, #5
 8019474:	0d1b      	lsrs	r3, r3, #20
 8019476:	69fa      	ldr	r2, [r7, #28]
 8019478:	fb02 f303 	mul.w	r3, r2, r3
 801947c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801947e:	e054      	b.n	801952a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019486:	d050      	beq.n	801952a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019488:	f7fd fa70 	bl	801696c <HAL_GetTick>
 801948c:	4602      	mov	r2, r0
 801948e:	69bb      	ldr	r3, [r7, #24]
 8019490:	1ad3      	subs	r3, r2, r3
 8019492:	69fa      	ldr	r2, [r7, #28]
 8019494:	429a      	cmp	r2, r3
 8019496:	d902      	bls.n	801949e <SPI_WaitFlagStateUntilTimeout+0x56>
 8019498:	69fb      	ldr	r3, [r7, #28]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d13d      	bne.n	801951a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	685a      	ldr	r2, [r3, #4]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80194ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80194b6:	d111      	bne.n	80194dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	689b      	ldr	r3, [r3, #8]
 80194bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80194c0:	d004      	beq.n	80194cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	689b      	ldr	r3, [r3, #8]
 80194c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80194ca:	d107      	bne.n	80194dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	681a      	ldr	r2, [r3, #0]
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80194da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80194e4:	d10f      	bne.n	8019506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	681a      	ldr	r2, [r3, #0]
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80194f4:	601a      	str	r2, [r3, #0]
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	681a      	ldr	r2, [r3, #0]
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	2201      	movs	r2, #1
 801950a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2200      	movs	r2, #0
 8019512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8019516:	2303      	movs	r3, #3
 8019518:	e017      	b.n	801954a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d101      	bne.n	8019524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019520:	2300      	movs	r3, #0
 8019522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	3b01      	subs	r3, #1
 8019528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	689a      	ldr	r2, [r3, #8]
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	4013      	ands	r3, r2
 8019534:	68ba      	ldr	r2, [r7, #8]
 8019536:	429a      	cmp	r2, r3
 8019538:	bf0c      	ite	eq
 801953a:	2301      	moveq	r3, #1
 801953c:	2300      	movne	r3, #0
 801953e:	b2db      	uxtb	r3, r3
 8019540:	461a      	mov	r2, r3
 8019542:	79fb      	ldrb	r3, [r7, #7]
 8019544:	429a      	cmp	r2, r3
 8019546:	d19b      	bne.n	8019480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8019548:	2300      	movs	r3, #0
}
 801954a:	4618      	mov	r0, r3
 801954c:	3720      	adds	r7, #32
 801954e:	46bd      	mov	sp, r7
 8019550:	bd80      	pop	{r7, pc}
 8019552:	bf00      	nop
 8019554:	20000034 	.word	0x20000034

08019558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b088      	sub	sp, #32
 801955c:	af02      	add	r7, sp, #8
 801955e:	60f8      	str	r0, [r7, #12]
 8019560:	60b9      	str	r1, [r7, #8]
 8019562:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8019564:	4b1b      	ldr	r3, [pc, #108]	; (80195d4 <SPI_EndRxTxTransaction+0x7c>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	4a1b      	ldr	r2, [pc, #108]	; (80195d8 <SPI_EndRxTxTransaction+0x80>)
 801956a:	fba2 2303 	umull	r2, r3, r2, r3
 801956e:	0d5b      	lsrs	r3, r3, #21
 8019570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019574:	fb02 f303 	mul.w	r3, r2, r3
 8019578:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019582:	d112      	bne.n	80195aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	9300      	str	r3, [sp, #0]
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	2200      	movs	r2, #0
 801958c:	2180      	movs	r1, #128	; 0x80
 801958e:	68f8      	ldr	r0, [r7, #12]
 8019590:	f7ff ff5a 	bl	8019448 <SPI_WaitFlagStateUntilTimeout>
 8019594:	4603      	mov	r3, r0
 8019596:	2b00      	cmp	r3, #0
 8019598:	d016      	beq.n	80195c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801959e:	f043 0220 	orr.w	r2, r3, #32
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80195a6:	2303      	movs	r3, #3
 80195a8:	e00f      	b.n	80195ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d00a      	beq.n	80195c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	3b01      	subs	r3, #1
 80195b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	689b      	ldr	r3, [r3, #8]
 80195bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80195c0:	2b80      	cmp	r3, #128	; 0x80
 80195c2:	d0f2      	beq.n	80195aa <SPI_EndRxTxTransaction+0x52>
 80195c4:	e000      	b.n	80195c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80195c6:	bf00      	nop
  }

  return HAL_OK;
 80195c8:	2300      	movs	r3, #0
}
 80195ca:	4618      	mov	r0, r3
 80195cc:	3718      	adds	r7, #24
 80195ce:	46bd      	mov	sp, r7
 80195d0:	bd80      	pop	{r7, pc}
 80195d2:	bf00      	nop
 80195d4:	20000034 	.word	0x20000034
 80195d8:	165e9f81 	.word	0x165e9f81

080195dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b082      	sub	sp, #8
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d101      	bne.n	80195ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80195ea:	2301      	movs	r3, #1
 80195ec:	e041      	b.n	8019672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195f4:	b2db      	uxtb	r3, r3
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d106      	bne.n	8019608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	2200      	movs	r2, #0
 80195fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019602:	6878      	ldr	r0, [r7, #4]
 8019604:	f7fd f804 	bl	8016610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2202      	movs	r2, #2
 801960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681a      	ldr	r2, [r3, #0]
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	3304      	adds	r3, #4
 8019618:	4619      	mov	r1, r3
 801961a:	4610      	mov	r0, r2
 801961c:	f000 fac4 	bl	8019ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	2201      	movs	r2, #1
 8019624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2201      	movs	r2, #1
 801962c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2201      	movs	r2, #1
 8019634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	2201      	movs	r2, #1
 801963c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2201      	movs	r2, #1
 8019644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	2201      	movs	r2, #1
 801964c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	2201      	movs	r2, #1
 8019654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2201      	movs	r2, #1
 801965c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2201      	movs	r2, #1
 8019664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	2201      	movs	r2, #1
 801966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019670:	2300      	movs	r3, #0
}
 8019672:	4618      	mov	r0, r3
 8019674:	3708      	adds	r7, #8
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}

0801967a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801967a:	b580      	push	{r7, lr}
 801967c:	b082      	sub	sp, #8
 801967e:	af00      	add	r7, sp, #0
 8019680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d101      	bne.n	801968c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019688:	2301      	movs	r3, #1
 801968a:	e041      	b.n	8019710 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019692:	b2db      	uxtb	r3, r3
 8019694:	2b00      	cmp	r3, #0
 8019696:	d106      	bne.n	80196a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2200      	movs	r2, #0
 801969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80196a0:	6878      	ldr	r0, [r7, #4]
 80196a2:	f000 f839 	bl	8019718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	2202      	movs	r2, #2
 80196aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681a      	ldr	r2, [r3, #0]
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	3304      	adds	r3, #4
 80196b6:	4619      	mov	r1, r3
 80196b8:	4610      	mov	r0, r2
 80196ba:	f000 fa75 	bl	8019ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2201      	movs	r2, #1
 80196c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2201      	movs	r2, #1
 80196ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	2201      	movs	r2, #1
 80196d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2201      	movs	r2, #1
 80196da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	2201      	movs	r2, #1
 80196e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2201      	movs	r2, #1
 80196ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2201      	movs	r2, #1
 80196f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2201      	movs	r2, #1
 80196fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2201      	movs	r2, #1
 8019702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	2201      	movs	r2, #1
 801970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801970e:	2300      	movs	r3, #0
}
 8019710:	4618      	mov	r0, r3
 8019712:	3708      	adds	r7, #8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}

08019718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8019718:	b480      	push	{r7}
 801971a:	b083      	sub	sp, #12
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8019720:	bf00      	nop
 8019722:	370c      	adds	r7, #12
 8019724:	46bd      	mov	sp, r7
 8019726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972a:	4770      	bx	lr

0801972c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b082      	sub	sp, #8
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	691b      	ldr	r3, [r3, #16]
 801973a:	f003 0302 	and.w	r3, r3, #2
 801973e:	2b02      	cmp	r3, #2
 8019740:	d122      	bne.n	8019788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	68db      	ldr	r3, [r3, #12]
 8019748:	f003 0302 	and.w	r3, r3, #2
 801974c:	2b02      	cmp	r3, #2
 801974e:	d11b      	bne.n	8019788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f06f 0202 	mvn.w	r2, #2
 8019758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	2201      	movs	r2, #1
 801975e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	699b      	ldr	r3, [r3, #24]
 8019766:	f003 0303 	and.w	r3, r3, #3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d003      	beq.n	8019776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801976e:	6878      	ldr	r0, [r7, #4]
 8019770:	f000 f9fc 	bl	8019b6c <HAL_TIM_IC_CaptureCallback>
 8019774:	e005      	b.n	8019782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019776:	6878      	ldr	r0, [r7, #4]
 8019778:	f000 f9ee 	bl	8019b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	f000 f9ff 	bl	8019b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	2200      	movs	r2, #0
 8019786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	691b      	ldr	r3, [r3, #16]
 801978e:	f003 0304 	and.w	r3, r3, #4
 8019792:	2b04      	cmp	r3, #4
 8019794:	d122      	bne.n	80197dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	68db      	ldr	r3, [r3, #12]
 801979c:	f003 0304 	and.w	r3, r3, #4
 80197a0:	2b04      	cmp	r3, #4
 80197a2:	d11b      	bne.n	80197dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	f06f 0204 	mvn.w	r2, #4
 80197ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	2202      	movs	r2, #2
 80197b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	699b      	ldr	r3, [r3, #24]
 80197ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d003      	beq.n	80197ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80197c2:	6878      	ldr	r0, [r7, #4]
 80197c4:	f000 f9d2 	bl	8019b6c <HAL_TIM_IC_CaptureCallback>
 80197c8:	e005      	b.n	80197d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f000 f9c4 	bl	8019b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	f000 f9d5 	bl	8019b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	2200      	movs	r2, #0
 80197da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	f003 0308 	and.w	r3, r3, #8
 80197e6:	2b08      	cmp	r3, #8
 80197e8:	d122      	bne.n	8019830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	f003 0308 	and.w	r3, r3, #8
 80197f4:	2b08      	cmp	r3, #8
 80197f6:	d11b      	bne.n	8019830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	f06f 0208 	mvn.w	r2, #8
 8019800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2204      	movs	r2, #4
 8019806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	69db      	ldr	r3, [r3, #28]
 801980e:	f003 0303 	and.w	r3, r3, #3
 8019812:	2b00      	cmp	r3, #0
 8019814:	d003      	beq.n	801981e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019816:	6878      	ldr	r0, [r7, #4]
 8019818:	f000 f9a8 	bl	8019b6c <HAL_TIM_IC_CaptureCallback>
 801981c:	e005      	b.n	801982a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801981e:	6878      	ldr	r0, [r7, #4]
 8019820:	f000 f99a 	bl	8019b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f000 f9ab 	bl	8019b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	2200      	movs	r2, #0
 801982e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	691b      	ldr	r3, [r3, #16]
 8019836:	f003 0310 	and.w	r3, r3, #16
 801983a:	2b10      	cmp	r3, #16
 801983c:	d122      	bne.n	8019884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	68db      	ldr	r3, [r3, #12]
 8019844:	f003 0310 	and.w	r3, r3, #16
 8019848:	2b10      	cmp	r3, #16
 801984a:	d11b      	bne.n	8019884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f06f 0210 	mvn.w	r2, #16
 8019854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2208      	movs	r2, #8
 801985a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	69db      	ldr	r3, [r3, #28]
 8019862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019866:	2b00      	cmp	r3, #0
 8019868:	d003      	beq.n	8019872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	f000 f97e 	bl	8019b6c <HAL_TIM_IC_CaptureCallback>
 8019870:	e005      	b.n	801987e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f000 f970 	bl	8019b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f000 f981 	bl	8019b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	f003 0301 	and.w	r3, r3, #1
 801988e:	2b01      	cmp	r3, #1
 8019890:	d10e      	bne.n	80198b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	68db      	ldr	r3, [r3, #12]
 8019898:	f003 0301 	and.w	r3, r3, #1
 801989c:	2b01      	cmp	r3, #1
 801989e:	d107      	bne.n	80198b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	f06f 0201 	mvn.w	r2, #1
 80198a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80198aa:	6878      	ldr	r0, [r7, #4]
 80198ac:	f000 f94a 	bl	8019b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	691b      	ldr	r3, [r3, #16]
 80198b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198ba:	2b80      	cmp	r3, #128	; 0x80
 80198bc:	d10e      	bne.n	80198dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	68db      	ldr	r3, [r3, #12]
 80198c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198c8:	2b80      	cmp	r3, #128	; 0x80
 80198ca:	d107      	bne.n	80198dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80198d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	f000 fcfa 	bl	801a2d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	691b      	ldr	r3, [r3, #16]
 80198e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198e6:	2b40      	cmp	r3, #64	; 0x40
 80198e8:	d10e      	bne.n	8019908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	68db      	ldr	r3, [r3, #12]
 80198f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198f4:	2b40      	cmp	r3, #64	; 0x40
 80198f6:	d107      	bne.n	8019908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8019900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8019902:	6878      	ldr	r0, [r7, #4]
 8019904:	f000 f946 	bl	8019b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	691b      	ldr	r3, [r3, #16]
 801990e:	f003 0320 	and.w	r3, r3, #32
 8019912:	2b20      	cmp	r3, #32
 8019914:	d10e      	bne.n	8019934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	f003 0320 	and.w	r3, r3, #32
 8019920:	2b20      	cmp	r3, #32
 8019922:	d107      	bne.n	8019934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	f06f 0220 	mvn.w	r2, #32
 801992c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801992e:	6878      	ldr	r0, [r7, #4]
 8019930:	f000 fcc4 	bl	801a2bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019934:	bf00      	nop
 8019936:	3708      	adds	r7, #8
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}

0801993c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b086      	sub	sp, #24
 8019940:	af00      	add	r7, sp, #0
 8019942:	60f8      	str	r0, [r7, #12]
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019948:	2300      	movs	r3, #0
 801994a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019952:	2b01      	cmp	r3, #1
 8019954:	d101      	bne.n	801995a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8019956:	2302      	movs	r3, #2
 8019958:	e0ae      	b.n	8019ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	2201      	movs	r2, #1
 801995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	2b0c      	cmp	r3, #12
 8019966:	f200 809f 	bhi.w	8019aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801996a:	a201      	add	r2, pc, #4	; (adr r2, 8019970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019970:	080199a5 	.word	0x080199a5
 8019974:	08019aa9 	.word	0x08019aa9
 8019978:	08019aa9 	.word	0x08019aa9
 801997c:	08019aa9 	.word	0x08019aa9
 8019980:	080199e5 	.word	0x080199e5
 8019984:	08019aa9 	.word	0x08019aa9
 8019988:	08019aa9 	.word	0x08019aa9
 801998c:	08019aa9 	.word	0x08019aa9
 8019990:	08019a27 	.word	0x08019a27
 8019994:	08019aa9 	.word	0x08019aa9
 8019998:	08019aa9 	.word	0x08019aa9
 801999c:	08019aa9 	.word	0x08019aa9
 80199a0:	08019a67 	.word	0x08019a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	68b9      	ldr	r1, [r7, #8]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f000 f97c 	bl	8019ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	699a      	ldr	r2, [r3, #24]
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f042 0208 	orr.w	r2, r2, #8
 80199be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	699a      	ldr	r2, [r3, #24]
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	f022 0204 	bic.w	r2, r2, #4
 80199ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	6999      	ldr	r1, [r3, #24]
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	691a      	ldr	r2, [r3, #16]
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	430a      	orrs	r2, r1
 80199e0:	619a      	str	r2, [r3, #24]
      break;
 80199e2:	e064      	b.n	8019aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	68b9      	ldr	r1, [r7, #8]
 80199ea:	4618      	mov	r0, r3
 80199ec:	f000 f9c2 	bl	8019d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	699a      	ldr	r2, [r3, #24]
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80199fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	699a      	ldr	r2, [r3, #24]
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	6999      	ldr	r1, [r3, #24]
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	691b      	ldr	r3, [r3, #16]
 8019a1a:	021a      	lsls	r2, r3, #8
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	430a      	orrs	r2, r1
 8019a22:	619a      	str	r2, [r3, #24]
      break;
 8019a24:	e043      	b.n	8019aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	68b9      	ldr	r1, [r7, #8]
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f000 fa0d 	bl	8019e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	69da      	ldr	r2, [r3, #28]
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f042 0208 	orr.w	r2, r2, #8
 8019a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	69da      	ldr	r2, [r3, #28]
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	f022 0204 	bic.w	r2, r2, #4
 8019a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	69d9      	ldr	r1, [r3, #28]
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	691a      	ldr	r2, [r3, #16]
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	430a      	orrs	r2, r1
 8019a62:	61da      	str	r2, [r3, #28]
      break;
 8019a64:	e023      	b.n	8019aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	68b9      	ldr	r1, [r7, #8]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f000 fa57 	bl	8019f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	69da      	ldr	r2, [r3, #28]
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	69da      	ldr	r2, [r3, #28]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	69d9      	ldr	r1, [r3, #28]
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	691b      	ldr	r3, [r3, #16]
 8019a9c:	021a      	lsls	r2, r3, #8
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	430a      	orrs	r2, r1
 8019aa4:	61da      	str	r2, [r3, #28]
      break;
 8019aa6:	e002      	b.n	8019aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8019aa8:	2301      	movs	r3, #1
 8019aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8019aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8019ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3718      	adds	r7, #24
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}

08019ac0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b082      	sub	sp, #8
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019ad0:	2b01      	cmp	r3, #1
 8019ad2:	d101      	bne.n	8019ad8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8019ad4:	2302      	movs	r3, #2
 8019ad6:	e031      	b.n	8019b3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2201      	movs	r2, #1
 8019adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2202      	movs	r2, #2
 8019ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8019ae8:	6839      	ldr	r1, [r7, #0]
 8019aea:	6878      	ldr	r0, [r7, #4]
 8019aec:	f000 fa68 	bl	8019fc0 <TIM_SlaveTimer_SetConfig>
 8019af0:	4603      	mov	r3, r0
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d009      	beq.n	8019b0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	2201      	movs	r2, #1
 8019afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	2200      	movs	r2, #0
 8019b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8019b06:	2301      	movs	r3, #1
 8019b08:	e018      	b.n	8019b3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	68da      	ldr	r2, [r3, #12]
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019b18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	68da      	ldr	r2, [r3, #12]
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019b28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2200      	movs	r2, #0
 8019b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019b3a:	2300      	movs	r3, #0
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3708      	adds	r7, #8
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bd80      	pop	{r7, pc}

08019b44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019b44:	b480      	push	{r7}
 8019b46:	b083      	sub	sp, #12
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8019b4c:	bf00      	nop
 8019b4e:	370c      	adds	r7, #12
 8019b50:	46bd      	mov	sp, r7
 8019b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b56:	4770      	bx	lr

08019b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019b58:	b480      	push	{r7}
 8019b5a:	b083      	sub	sp, #12
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019b60:	bf00      	nop
 8019b62:	370c      	adds	r7, #12
 8019b64:	46bd      	mov	sp, r7
 8019b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6a:	4770      	bx	lr

08019b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019b6c:	b480      	push	{r7}
 8019b6e:	b083      	sub	sp, #12
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019b74:	bf00      	nop
 8019b76:	370c      	adds	r7, #12
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7e:	4770      	bx	lr

08019b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019b80:	b480      	push	{r7}
 8019b82:	b083      	sub	sp, #12
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019b88:	bf00      	nop
 8019b8a:	370c      	adds	r7, #12
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b92:	4770      	bx	lr

08019b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019b94:	b480      	push	{r7}
 8019b96:	b083      	sub	sp, #12
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019b9c:	bf00      	nop
 8019b9e:	370c      	adds	r7, #12
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba6:	4770      	bx	lr

08019ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8019ba8:	b480      	push	{r7}
 8019baa:	b085      	sub	sp, #20
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	4a34      	ldr	r2, [pc, #208]	; (8019c8c <TIM_Base_SetConfig+0xe4>)
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	d00f      	beq.n	8019be0 <TIM_Base_SetConfig+0x38>
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019bc6:	d00b      	beq.n	8019be0 <TIM_Base_SetConfig+0x38>
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	4a31      	ldr	r2, [pc, #196]	; (8019c90 <TIM_Base_SetConfig+0xe8>)
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d007      	beq.n	8019be0 <TIM_Base_SetConfig+0x38>
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	4a30      	ldr	r2, [pc, #192]	; (8019c94 <TIM_Base_SetConfig+0xec>)
 8019bd4:	4293      	cmp	r3, r2
 8019bd6:	d003      	beq.n	8019be0 <TIM_Base_SetConfig+0x38>
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	4a2f      	ldr	r2, [pc, #188]	; (8019c98 <TIM_Base_SetConfig+0xf0>)
 8019bdc:	4293      	cmp	r3, r2
 8019bde:	d108      	bne.n	8019bf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	685b      	ldr	r3, [r3, #4]
 8019bec:	68fa      	ldr	r2, [r7, #12]
 8019bee:	4313      	orrs	r3, r2
 8019bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	4a25      	ldr	r2, [pc, #148]	; (8019c8c <TIM_Base_SetConfig+0xe4>)
 8019bf6:	4293      	cmp	r3, r2
 8019bf8:	d01b      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019c00:	d017      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	4a22      	ldr	r2, [pc, #136]	; (8019c90 <TIM_Base_SetConfig+0xe8>)
 8019c06:	4293      	cmp	r3, r2
 8019c08:	d013      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	4a21      	ldr	r2, [pc, #132]	; (8019c94 <TIM_Base_SetConfig+0xec>)
 8019c0e:	4293      	cmp	r3, r2
 8019c10:	d00f      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	4a20      	ldr	r2, [pc, #128]	; (8019c98 <TIM_Base_SetConfig+0xf0>)
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d00b      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	4a1f      	ldr	r2, [pc, #124]	; (8019c9c <TIM_Base_SetConfig+0xf4>)
 8019c1e:	4293      	cmp	r3, r2
 8019c20:	d007      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	4a1e      	ldr	r2, [pc, #120]	; (8019ca0 <TIM_Base_SetConfig+0xf8>)
 8019c26:	4293      	cmp	r3, r2
 8019c28:	d003      	beq.n	8019c32 <TIM_Base_SetConfig+0x8a>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	4a1d      	ldr	r2, [pc, #116]	; (8019ca4 <TIM_Base_SetConfig+0xfc>)
 8019c2e:	4293      	cmp	r3, r2
 8019c30:	d108      	bne.n	8019c44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	68db      	ldr	r3, [r3, #12]
 8019c3e:	68fa      	ldr	r2, [r7, #12]
 8019c40:	4313      	orrs	r3, r2
 8019c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	695b      	ldr	r3, [r3, #20]
 8019c4e:	4313      	orrs	r3, r2
 8019c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	68fa      	ldr	r2, [r7, #12]
 8019c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	689a      	ldr	r2, [r3, #8]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	681a      	ldr	r2, [r3, #0]
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	4a08      	ldr	r2, [pc, #32]	; (8019c8c <TIM_Base_SetConfig+0xe4>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d103      	bne.n	8019c78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	691a      	ldr	r2, [r3, #16]
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2201      	movs	r2, #1
 8019c7c:	615a      	str	r2, [r3, #20]
}
 8019c7e:	bf00      	nop
 8019c80:	3714      	adds	r7, #20
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr
 8019c8a:	bf00      	nop
 8019c8c:	40010000 	.word	0x40010000
 8019c90:	40000400 	.word	0x40000400
 8019c94:	40000800 	.word	0x40000800
 8019c98:	40000c00 	.word	0x40000c00
 8019c9c:	40014000 	.word	0x40014000
 8019ca0:	40014400 	.word	0x40014400
 8019ca4:	40014800 	.word	0x40014800

08019ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019ca8:	b480      	push	{r7}
 8019caa:	b087      	sub	sp, #28
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	6a1b      	ldr	r3, [r3, #32]
 8019cb6:	f023 0201 	bic.w	r2, r3, #1
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	6a1b      	ldr	r3, [r3, #32]
 8019cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	685b      	ldr	r3, [r3, #4]
 8019cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	699b      	ldr	r3, [r3, #24]
 8019cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	f023 0303 	bic.w	r3, r3, #3
 8019cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	68fa      	ldr	r2, [r7, #12]
 8019ce6:	4313      	orrs	r3, r2
 8019ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019cea:	697b      	ldr	r3, [r7, #20]
 8019cec:	f023 0302 	bic.w	r3, r3, #2
 8019cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	689b      	ldr	r3, [r3, #8]
 8019cf6:	697a      	ldr	r2, [r7, #20]
 8019cf8:	4313      	orrs	r3, r2
 8019cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	4a1c      	ldr	r2, [pc, #112]	; (8019d70 <TIM_OC1_SetConfig+0xc8>)
 8019d00:	4293      	cmp	r3, r2
 8019d02:	d10c      	bne.n	8019d1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	f023 0308 	bic.w	r3, r3, #8
 8019d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	697a      	ldr	r2, [r7, #20]
 8019d12:	4313      	orrs	r3, r2
 8019d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	f023 0304 	bic.w	r3, r3, #4
 8019d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	4a13      	ldr	r2, [pc, #76]	; (8019d70 <TIM_OC1_SetConfig+0xc8>)
 8019d22:	4293      	cmp	r3, r2
 8019d24:	d111      	bne.n	8019d4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8019d26:	693b      	ldr	r3, [r7, #16]
 8019d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8019d2e:	693b      	ldr	r3, [r7, #16]
 8019d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	695b      	ldr	r3, [r3, #20]
 8019d3a:	693a      	ldr	r2, [r7, #16]
 8019d3c:	4313      	orrs	r3, r2
 8019d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	699b      	ldr	r3, [r3, #24]
 8019d44:	693a      	ldr	r2, [r7, #16]
 8019d46:	4313      	orrs	r3, r2
 8019d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	693a      	ldr	r2, [r7, #16]
 8019d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	68fa      	ldr	r2, [r7, #12]
 8019d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	685a      	ldr	r2, [r3, #4]
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	697a      	ldr	r2, [r7, #20]
 8019d62:	621a      	str	r2, [r3, #32]
}
 8019d64:	bf00      	nop
 8019d66:	371c      	adds	r7, #28
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6e:	4770      	bx	lr
 8019d70:	40010000 	.word	0x40010000

08019d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019d74:	b480      	push	{r7}
 8019d76:	b087      	sub	sp, #28
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6a1b      	ldr	r3, [r3, #32]
 8019d82:	f023 0210 	bic.w	r2, r3, #16
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	6a1b      	ldr	r3, [r3, #32]
 8019d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	699b      	ldr	r3, [r3, #24]
 8019d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019dac:	683b      	ldr	r3, [r7, #0]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	021b      	lsls	r3, r3, #8
 8019db2:	68fa      	ldr	r2, [r7, #12]
 8019db4:	4313      	orrs	r3, r2
 8019db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	f023 0320 	bic.w	r3, r3, #32
 8019dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019dc0:	683b      	ldr	r3, [r7, #0]
 8019dc2:	689b      	ldr	r3, [r3, #8]
 8019dc4:	011b      	lsls	r3, r3, #4
 8019dc6:	697a      	ldr	r2, [r7, #20]
 8019dc8:	4313      	orrs	r3, r2
 8019dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	4a1e      	ldr	r2, [pc, #120]	; (8019e48 <TIM_OC2_SetConfig+0xd4>)
 8019dd0:	4293      	cmp	r3, r2
 8019dd2:	d10d      	bne.n	8019df0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	011b      	lsls	r3, r3, #4
 8019de2:	697a      	ldr	r2, [r7, #20]
 8019de4:	4313      	orrs	r3, r2
 8019de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8019de8:	697b      	ldr	r3, [r7, #20]
 8019dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	4a15      	ldr	r2, [pc, #84]	; (8019e48 <TIM_OC2_SetConfig+0xd4>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d113      	bne.n	8019e20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019df8:	693b      	ldr	r3, [r7, #16]
 8019dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019e00:	693b      	ldr	r3, [r7, #16]
 8019e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	695b      	ldr	r3, [r3, #20]
 8019e0c:	009b      	lsls	r3, r3, #2
 8019e0e:	693a      	ldr	r2, [r7, #16]
 8019e10:	4313      	orrs	r3, r2
 8019e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	699b      	ldr	r3, [r3, #24]
 8019e18:	009b      	lsls	r3, r3, #2
 8019e1a:	693a      	ldr	r2, [r7, #16]
 8019e1c:	4313      	orrs	r3, r2
 8019e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	693a      	ldr	r2, [r7, #16]
 8019e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	68fa      	ldr	r2, [r7, #12]
 8019e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	685a      	ldr	r2, [r3, #4]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	697a      	ldr	r2, [r7, #20]
 8019e38:	621a      	str	r2, [r3, #32]
}
 8019e3a:	bf00      	nop
 8019e3c:	371c      	adds	r7, #28
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e44:	4770      	bx	lr
 8019e46:	bf00      	nop
 8019e48:	40010000 	.word	0x40010000

08019e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019e4c:	b480      	push	{r7}
 8019e4e:	b087      	sub	sp, #28
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
 8019e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	6a1b      	ldr	r3, [r3, #32]
 8019e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	6a1b      	ldr	r3, [r3, #32]
 8019e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	685b      	ldr	r3, [r3, #4]
 8019e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	69db      	ldr	r3, [r3, #28]
 8019e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	f023 0303 	bic.w	r3, r3, #3
 8019e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	68fa      	ldr	r2, [r7, #12]
 8019e8a:	4313      	orrs	r3, r2
 8019e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	689b      	ldr	r3, [r3, #8]
 8019e9a:	021b      	lsls	r3, r3, #8
 8019e9c:	697a      	ldr	r2, [r7, #20]
 8019e9e:	4313      	orrs	r3, r2
 8019ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	4a1d      	ldr	r2, [pc, #116]	; (8019f1c <TIM_OC3_SetConfig+0xd0>)
 8019ea6:	4293      	cmp	r3, r2
 8019ea8:	d10d      	bne.n	8019ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8019eaa:	697b      	ldr	r3, [r7, #20]
 8019eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	68db      	ldr	r3, [r3, #12]
 8019eb6:	021b      	lsls	r3, r3, #8
 8019eb8:	697a      	ldr	r2, [r7, #20]
 8019eba:	4313      	orrs	r3, r2
 8019ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019ebe:	697b      	ldr	r3, [r7, #20]
 8019ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	4a14      	ldr	r2, [pc, #80]	; (8019f1c <TIM_OC3_SetConfig+0xd0>)
 8019eca:	4293      	cmp	r3, r2
 8019ecc:	d113      	bne.n	8019ef6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	695b      	ldr	r3, [r3, #20]
 8019ee2:	011b      	lsls	r3, r3, #4
 8019ee4:	693a      	ldr	r2, [r7, #16]
 8019ee6:	4313      	orrs	r3, r2
 8019ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	699b      	ldr	r3, [r3, #24]
 8019eee:	011b      	lsls	r3, r3, #4
 8019ef0:	693a      	ldr	r2, [r7, #16]
 8019ef2:	4313      	orrs	r3, r2
 8019ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	693a      	ldr	r2, [r7, #16]
 8019efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	68fa      	ldr	r2, [r7, #12]
 8019f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	685a      	ldr	r2, [r3, #4]
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	697a      	ldr	r2, [r7, #20]
 8019f0e:	621a      	str	r2, [r3, #32]
}
 8019f10:	bf00      	nop
 8019f12:	371c      	adds	r7, #28
 8019f14:	46bd      	mov	sp, r7
 8019f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1a:	4770      	bx	lr
 8019f1c:	40010000 	.word	0x40010000

08019f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019f20:	b480      	push	{r7}
 8019f22:	b087      	sub	sp, #28
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6a1b      	ldr	r3, [r3, #32]
 8019f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6a1b      	ldr	r3, [r3, #32]
 8019f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	685b      	ldr	r3, [r3, #4]
 8019f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	69db      	ldr	r3, [r3, #28]
 8019f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	021b      	lsls	r3, r3, #8
 8019f5e:	68fa      	ldr	r2, [r7, #12]
 8019f60:	4313      	orrs	r3, r2
 8019f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019f64:	693b      	ldr	r3, [r7, #16]
 8019f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019f6c:	683b      	ldr	r3, [r7, #0]
 8019f6e:	689b      	ldr	r3, [r3, #8]
 8019f70:	031b      	lsls	r3, r3, #12
 8019f72:	693a      	ldr	r2, [r7, #16]
 8019f74:	4313      	orrs	r3, r2
 8019f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	4a10      	ldr	r2, [pc, #64]	; (8019fbc <TIM_OC4_SetConfig+0x9c>)
 8019f7c:	4293      	cmp	r3, r2
 8019f7e:	d109      	bne.n	8019f94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	695b      	ldr	r3, [r3, #20]
 8019f8c:	019b      	lsls	r3, r3, #6
 8019f8e:	697a      	ldr	r2, [r7, #20]
 8019f90:	4313      	orrs	r3, r2
 8019f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	697a      	ldr	r2, [r7, #20]
 8019f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	68fa      	ldr	r2, [r7, #12]
 8019f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019fa0:	683b      	ldr	r3, [r7, #0]
 8019fa2:	685a      	ldr	r2, [r3, #4]
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	693a      	ldr	r2, [r7, #16]
 8019fac:	621a      	str	r2, [r3, #32]
}
 8019fae:	bf00      	nop
 8019fb0:	371c      	adds	r7, #28
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb8:	4770      	bx	lr
 8019fba:	bf00      	nop
 8019fbc:	40010000 	.word	0x40010000

08019fc0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b086      	sub	sp, #24
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
 8019fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019fca:	2300      	movs	r3, #0
 8019fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	689b      	ldr	r3, [r3, #8]
 8019fd4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019fd6:	693b      	ldr	r3, [r7, #16]
 8019fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019fdc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	685b      	ldr	r3, [r3, #4]
 8019fe2:	693a      	ldr	r2, [r7, #16]
 8019fe4:	4313      	orrs	r3, r2
 8019fe6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8019fe8:	693b      	ldr	r3, [r7, #16]
 8019fea:	f023 0307 	bic.w	r3, r3, #7
 8019fee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	693a      	ldr	r2, [r7, #16]
 8019ff6:	4313      	orrs	r3, r2
 8019ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	693a      	ldr	r2, [r7, #16]
 801a000:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	685b      	ldr	r3, [r3, #4]
 801a006:	2b70      	cmp	r3, #112	; 0x70
 801a008:	d01a      	beq.n	801a040 <TIM_SlaveTimer_SetConfig+0x80>
 801a00a:	2b70      	cmp	r3, #112	; 0x70
 801a00c:	d860      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a00e:	2b60      	cmp	r3, #96	; 0x60
 801a010:	d054      	beq.n	801a0bc <TIM_SlaveTimer_SetConfig+0xfc>
 801a012:	2b60      	cmp	r3, #96	; 0x60
 801a014:	d85c      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a016:	2b50      	cmp	r3, #80	; 0x50
 801a018:	d046      	beq.n	801a0a8 <TIM_SlaveTimer_SetConfig+0xe8>
 801a01a:	2b50      	cmp	r3, #80	; 0x50
 801a01c:	d858      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a01e:	2b40      	cmp	r3, #64	; 0x40
 801a020:	d019      	beq.n	801a056 <TIM_SlaveTimer_SetConfig+0x96>
 801a022:	2b40      	cmp	r3, #64	; 0x40
 801a024:	d854      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a026:	2b30      	cmp	r3, #48	; 0x30
 801a028:	d055      	beq.n	801a0d6 <TIM_SlaveTimer_SetConfig+0x116>
 801a02a:	2b30      	cmp	r3, #48	; 0x30
 801a02c:	d850      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a02e:	2b20      	cmp	r3, #32
 801a030:	d051      	beq.n	801a0d6 <TIM_SlaveTimer_SetConfig+0x116>
 801a032:	2b20      	cmp	r3, #32
 801a034:	d84c      	bhi.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
 801a036:	2b00      	cmp	r3, #0
 801a038:	d04d      	beq.n	801a0d6 <TIM_SlaveTimer_SetConfig+0x116>
 801a03a:	2b10      	cmp	r3, #16
 801a03c:	d04b      	beq.n	801a0d6 <TIM_SlaveTimer_SetConfig+0x116>
 801a03e:	e047      	b.n	801a0d0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6818      	ldr	r0, [r3, #0]
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	68d9      	ldr	r1, [r3, #12]
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	689a      	ldr	r2, [r3, #8]
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	691b      	ldr	r3, [r3, #16]
 801a050:	f000 f8a6 	bl	801a1a0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 801a054:	e040      	b.n	801a0d8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801a056:	683b      	ldr	r3, [r7, #0]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	2b05      	cmp	r3, #5
 801a05c:	d101      	bne.n	801a062 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 801a05e:	2301      	movs	r3, #1
 801a060:	e03b      	b.n	801a0da <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	6a1b      	ldr	r3, [r3, #32]
 801a068:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	6a1a      	ldr	r2, [r3, #32]
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f022 0201 	bic.w	r2, r2, #1
 801a078:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	699b      	ldr	r3, [r3, #24]
 801a080:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a082:	68bb      	ldr	r3, [r7, #8]
 801a084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a088:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801a08a:	683b      	ldr	r3, [r7, #0]
 801a08c:	691b      	ldr	r3, [r3, #16]
 801a08e:	011b      	lsls	r3, r3, #4
 801a090:	68ba      	ldr	r2, [r7, #8]
 801a092:	4313      	orrs	r3, r2
 801a094:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	68ba      	ldr	r2, [r7, #8]
 801a09c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	68fa      	ldr	r2, [r7, #12]
 801a0a4:	621a      	str	r2, [r3, #32]
      break;
 801a0a6:	e017      	b.n	801a0d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6818      	ldr	r0, [r3, #0]
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	6899      	ldr	r1, [r3, #8]
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	691b      	ldr	r3, [r3, #16]
 801a0b4:	461a      	mov	r2, r3
 801a0b6:	f000 f814 	bl	801a0e2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801a0ba:	e00d      	b.n	801a0d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	6818      	ldr	r0, [r3, #0]
 801a0c0:	683b      	ldr	r3, [r7, #0]
 801a0c2:	6899      	ldr	r1, [r3, #8]
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	691b      	ldr	r3, [r3, #16]
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	f000 f839 	bl	801a140 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801a0ce:	e003      	b.n	801a0d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	75fb      	strb	r3, [r7, #23]
      break;
 801a0d4:	e000      	b.n	801a0d8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 801a0d6:	bf00      	nop
  }

  return status;
 801a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0da:	4618      	mov	r0, r3
 801a0dc:	3718      	adds	r7, #24
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bd80      	pop	{r7, pc}

0801a0e2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a0e2:	b480      	push	{r7}
 801a0e4:	b087      	sub	sp, #28
 801a0e6:	af00      	add	r7, sp, #0
 801a0e8:	60f8      	str	r0, [r7, #12]
 801a0ea:	60b9      	str	r1, [r7, #8]
 801a0ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	6a1b      	ldr	r3, [r3, #32]
 801a0f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	6a1b      	ldr	r3, [r3, #32]
 801a0f8:	f023 0201 	bic.w	r2, r3, #1
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	699b      	ldr	r3, [r3, #24]
 801a104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a106:	693b      	ldr	r3, [r7, #16]
 801a108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a10c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	011b      	lsls	r3, r3, #4
 801a112:	693a      	ldr	r2, [r7, #16]
 801a114:	4313      	orrs	r3, r2
 801a116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	f023 030a 	bic.w	r3, r3, #10
 801a11e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a120:	697a      	ldr	r2, [r7, #20]
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	4313      	orrs	r3, r2
 801a126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	693a      	ldr	r2, [r7, #16]
 801a12c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	697a      	ldr	r2, [r7, #20]
 801a132:	621a      	str	r2, [r3, #32]
}
 801a134:	bf00      	nop
 801a136:	371c      	adds	r7, #28
 801a138:	46bd      	mov	sp, r7
 801a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13e:	4770      	bx	lr

0801a140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a140:	b480      	push	{r7}
 801a142:	b087      	sub	sp, #28
 801a144:	af00      	add	r7, sp, #0
 801a146:	60f8      	str	r0, [r7, #12]
 801a148:	60b9      	str	r1, [r7, #8]
 801a14a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	6a1b      	ldr	r3, [r3, #32]
 801a150:	f023 0210 	bic.w	r2, r3, #16
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	699b      	ldr	r3, [r3, #24]
 801a15c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	6a1b      	ldr	r3, [r3, #32]
 801a162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a164:	697b      	ldr	r3, [r7, #20]
 801a166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a16a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	031b      	lsls	r3, r3, #12
 801a170:	697a      	ldr	r2, [r7, #20]
 801a172:	4313      	orrs	r3, r2
 801a174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801a17c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	011b      	lsls	r3, r3, #4
 801a182:	693a      	ldr	r2, [r7, #16]
 801a184:	4313      	orrs	r3, r2
 801a186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	697a      	ldr	r2, [r7, #20]
 801a18c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	693a      	ldr	r2, [r7, #16]
 801a192:	621a      	str	r2, [r3, #32]
}
 801a194:	bf00      	nop
 801a196:	371c      	adds	r7, #28
 801a198:	46bd      	mov	sp, r7
 801a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19e:	4770      	bx	lr

0801a1a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b087      	sub	sp, #28
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	60f8      	str	r0, [r7, #12]
 801a1a8:	60b9      	str	r1, [r7, #8]
 801a1aa:	607a      	str	r2, [r7, #4]
 801a1ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	689b      	ldr	r3, [r3, #8]
 801a1b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a1ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	021a      	lsls	r2, r3, #8
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	431a      	orrs	r2, r3
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	4313      	orrs	r3, r2
 801a1c8:	697a      	ldr	r2, [r7, #20]
 801a1ca:	4313      	orrs	r3, r2
 801a1cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	697a      	ldr	r2, [r7, #20]
 801a1d2:	609a      	str	r2, [r3, #8]
}
 801a1d4:	bf00      	nop
 801a1d6:	371c      	adds	r7, #28
 801a1d8:	46bd      	mov	sp, r7
 801a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1de:	4770      	bx	lr

0801a1e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a1e0:	b480      	push	{r7}
 801a1e2:	b085      	sub	sp, #20
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
 801a1e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a1f0:	2b01      	cmp	r3, #1
 801a1f2:	d101      	bne.n	801a1f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a1f4:	2302      	movs	r3, #2
 801a1f6:	e050      	b.n	801a29a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2201      	movs	r2, #1
 801a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2202      	movs	r2, #2
 801a204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	685b      	ldr	r3, [r3, #4]
 801a20e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	689b      	ldr	r3, [r3, #8]
 801a216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a21e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a220:	683b      	ldr	r3, [r7, #0]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	68fa      	ldr	r2, [r7, #12]
 801a226:	4313      	orrs	r3, r2
 801a228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	68fa      	ldr	r2, [r7, #12]
 801a230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	4a1c      	ldr	r2, [pc, #112]	; (801a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d018      	beq.n	801a26e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a244:	d013      	beq.n	801a26e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	4a18      	ldr	r2, [pc, #96]	; (801a2ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801a24c:	4293      	cmp	r3, r2
 801a24e:	d00e      	beq.n	801a26e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	4a16      	ldr	r2, [pc, #88]	; (801a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801a256:	4293      	cmp	r3, r2
 801a258:	d009      	beq.n	801a26e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	4a15      	ldr	r2, [pc, #84]	; (801a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801a260:	4293      	cmp	r3, r2
 801a262:	d004      	beq.n	801a26e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	4a13      	ldr	r2, [pc, #76]	; (801a2b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d10c      	bne.n	801a288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a26e:	68bb      	ldr	r3, [r7, #8]
 801a270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	685b      	ldr	r3, [r3, #4]
 801a27a:	68ba      	ldr	r2, [r7, #8]
 801a27c:	4313      	orrs	r3, r2
 801a27e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	68ba      	ldr	r2, [r7, #8]
 801a286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	2201      	movs	r2, #1
 801a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	2200      	movs	r2, #0
 801a294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a298:	2300      	movs	r3, #0
}
 801a29a:	4618      	mov	r0, r3
 801a29c:	3714      	adds	r7, #20
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a4:	4770      	bx	lr
 801a2a6:	bf00      	nop
 801a2a8:	40010000 	.word	0x40010000
 801a2ac:	40000400 	.word	0x40000400
 801a2b0:	40000800 	.word	0x40000800
 801a2b4:	40000c00 	.word	0x40000c00
 801a2b8:	40014000 	.word	0x40014000

0801a2bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a2bc:	b480      	push	{r7}
 801a2be:	b083      	sub	sp, #12
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a2c4:	bf00      	nop
 801a2c6:	370c      	adds	r7, #12
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr

0801a2d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a2d0:	b480      	push	{r7}
 801a2d2:	b083      	sub	sp, #12
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a2d8:	bf00      	nop
 801a2da:	370c      	adds	r7, #12
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e2:	4770      	bx	lr

0801a2e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801a2e4:	b084      	sub	sp, #16
 801a2e6:	b580      	push	{r7, lr}
 801a2e8:	b084      	sub	sp, #16
 801a2ea:	af00      	add	r7, sp, #0
 801a2ec:	6078      	str	r0, [r7, #4]
 801a2ee:	f107 001c 	add.w	r0, r7, #28
 801a2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f8:	2b01      	cmp	r3, #1
 801a2fa:	d122      	bne.n	801a342 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	68db      	ldr	r3, [r3, #12]
 801a30c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801a310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801a324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a326:	2b01      	cmp	r3, #1
 801a328:	d105      	bne.n	801a336 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	68db      	ldr	r3, [r3, #12]
 801a32e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f001 fbee 	bl	801bb18 <USB_CoreReset>
 801a33c:	4603      	mov	r3, r0
 801a33e:	73fb      	strb	r3, [r7, #15]
 801a340:	e01a      	b.n	801a378 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	68db      	ldr	r3, [r3, #12]
 801a346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801a34e:	6878      	ldr	r0, [r7, #4]
 801a350:	f001 fbe2 	bl	801bb18 <USB_CoreReset>
 801a354:	4603      	mov	r3, r0
 801a356:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801a358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d106      	bne.n	801a36c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	639a      	str	r2, [r3, #56]	; 0x38
 801a36a:	e005      	b.n	801a378 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a37a:	2b01      	cmp	r3, #1
 801a37c:	d10b      	bne.n	801a396 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	689b      	ldr	r3, [r3, #8]
 801a382:	f043 0206 	orr.w	r2, r3, #6
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	689b      	ldr	r3, [r3, #8]
 801a38e:	f043 0220 	orr.w	r2, r3, #32
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801a396:	7bfb      	ldrb	r3, [r7, #15]
}
 801a398:	4618      	mov	r0, r3
 801a39a:	3710      	adds	r7, #16
 801a39c:	46bd      	mov	sp, r7
 801a39e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a3a2:	b004      	add	sp, #16
 801a3a4:	4770      	bx	lr
	...

0801a3a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801a3a8:	b480      	push	{r7}
 801a3aa:	b087      	sub	sp, #28
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	60f8      	str	r0, [r7, #12]
 801a3b0:	60b9      	str	r1, [r7, #8]
 801a3b2:	4613      	mov	r3, r2
 801a3b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801a3b6:	79fb      	ldrb	r3, [r7, #7]
 801a3b8:	2b02      	cmp	r3, #2
 801a3ba:	d165      	bne.n	801a488 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801a3bc:	68bb      	ldr	r3, [r7, #8]
 801a3be:	4a41      	ldr	r2, [pc, #260]	; (801a4c4 <USB_SetTurnaroundTime+0x11c>)
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	d906      	bls.n	801a3d2 <USB_SetTurnaroundTime+0x2a>
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	4a40      	ldr	r2, [pc, #256]	; (801a4c8 <USB_SetTurnaroundTime+0x120>)
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	d202      	bcs.n	801a3d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801a3cc:	230f      	movs	r3, #15
 801a3ce:	617b      	str	r3, [r7, #20]
 801a3d0:	e062      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	4a3c      	ldr	r2, [pc, #240]	; (801a4c8 <USB_SetTurnaroundTime+0x120>)
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d306      	bcc.n	801a3e8 <USB_SetTurnaroundTime+0x40>
 801a3da:	68bb      	ldr	r3, [r7, #8]
 801a3dc:	4a3b      	ldr	r2, [pc, #236]	; (801a4cc <USB_SetTurnaroundTime+0x124>)
 801a3de:	4293      	cmp	r3, r2
 801a3e0:	d202      	bcs.n	801a3e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801a3e2:	230e      	movs	r3, #14
 801a3e4:	617b      	str	r3, [r7, #20]
 801a3e6:	e057      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	4a38      	ldr	r2, [pc, #224]	; (801a4cc <USB_SetTurnaroundTime+0x124>)
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d306      	bcc.n	801a3fe <USB_SetTurnaroundTime+0x56>
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	4a37      	ldr	r2, [pc, #220]	; (801a4d0 <USB_SetTurnaroundTime+0x128>)
 801a3f4:	4293      	cmp	r3, r2
 801a3f6:	d202      	bcs.n	801a3fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801a3f8:	230d      	movs	r3, #13
 801a3fa:	617b      	str	r3, [r7, #20]
 801a3fc:	e04c      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	4a33      	ldr	r2, [pc, #204]	; (801a4d0 <USB_SetTurnaroundTime+0x128>)
 801a402:	4293      	cmp	r3, r2
 801a404:	d306      	bcc.n	801a414 <USB_SetTurnaroundTime+0x6c>
 801a406:	68bb      	ldr	r3, [r7, #8]
 801a408:	4a32      	ldr	r2, [pc, #200]	; (801a4d4 <USB_SetTurnaroundTime+0x12c>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d802      	bhi.n	801a414 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801a40e:	230c      	movs	r3, #12
 801a410:	617b      	str	r3, [r7, #20]
 801a412:	e041      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	4a2f      	ldr	r2, [pc, #188]	; (801a4d4 <USB_SetTurnaroundTime+0x12c>)
 801a418:	4293      	cmp	r3, r2
 801a41a:	d906      	bls.n	801a42a <USB_SetTurnaroundTime+0x82>
 801a41c:	68bb      	ldr	r3, [r7, #8]
 801a41e:	4a2e      	ldr	r2, [pc, #184]	; (801a4d8 <USB_SetTurnaroundTime+0x130>)
 801a420:	4293      	cmp	r3, r2
 801a422:	d802      	bhi.n	801a42a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801a424:	230b      	movs	r3, #11
 801a426:	617b      	str	r3, [r7, #20]
 801a428:	e036      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801a42a:	68bb      	ldr	r3, [r7, #8]
 801a42c:	4a2a      	ldr	r2, [pc, #168]	; (801a4d8 <USB_SetTurnaroundTime+0x130>)
 801a42e:	4293      	cmp	r3, r2
 801a430:	d906      	bls.n	801a440 <USB_SetTurnaroundTime+0x98>
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	4a29      	ldr	r2, [pc, #164]	; (801a4dc <USB_SetTurnaroundTime+0x134>)
 801a436:	4293      	cmp	r3, r2
 801a438:	d802      	bhi.n	801a440 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801a43a:	230a      	movs	r3, #10
 801a43c:	617b      	str	r3, [r7, #20]
 801a43e:	e02b      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	4a26      	ldr	r2, [pc, #152]	; (801a4dc <USB_SetTurnaroundTime+0x134>)
 801a444:	4293      	cmp	r3, r2
 801a446:	d906      	bls.n	801a456 <USB_SetTurnaroundTime+0xae>
 801a448:	68bb      	ldr	r3, [r7, #8]
 801a44a:	4a25      	ldr	r2, [pc, #148]	; (801a4e0 <USB_SetTurnaroundTime+0x138>)
 801a44c:	4293      	cmp	r3, r2
 801a44e:	d202      	bcs.n	801a456 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801a450:	2309      	movs	r3, #9
 801a452:	617b      	str	r3, [r7, #20]
 801a454:	e020      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801a456:	68bb      	ldr	r3, [r7, #8]
 801a458:	4a21      	ldr	r2, [pc, #132]	; (801a4e0 <USB_SetTurnaroundTime+0x138>)
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d306      	bcc.n	801a46c <USB_SetTurnaroundTime+0xc4>
 801a45e:	68bb      	ldr	r3, [r7, #8]
 801a460:	4a20      	ldr	r2, [pc, #128]	; (801a4e4 <USB_SetTurnaroundTime+0x13c>)
 801a462:	4293      	cmp	r3, r2
 801a464:	d802      	bhi.n	801a46c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801a466:	2308      	movs	r3, #8
 801a468:	617b      	str	r3, [r7, #20]
 801a46a:	e015      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	4a1d      	ldr	r2, [pc, #116]	; (801a4e4 <USB_SetTurnaroundTime+0x13c>)
 801a470:	4293      	cmp	r3, r2
 801a472:	d906      	bls.n	801a482 <USB_SetTurnaroundTime+0xda>
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	4a1c      	ldr	r2, [pc, #112]	; (801a4e8 <USB_SetTurnaroundTime+0x140>)
 801a478:	4293      	cmp	r3, r2
 801a47a:	d202      	bcs.n	801a482 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801a47c:	2307      	movs	r3, #7
 801a47e:	617b      	str	r3, [r7, #20]
 801a480:	e00a      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801a482:	2306      	movs	r3, #6
 801a484:	617b      	str	r3, [r7, #20]
 801a486:	e007      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801a488:	79fb      	ldrb	r3, [r7, #7]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d102      	bne.n	801a494 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801a48e:	2309      	movs	r3, #9
 801a490:	617b      	str	r3, [r7, #20]
 801a492:	e001      	b.n	801a498 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801a494:	2309      	movs	r3, #9
 801a496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	68db      	ldr	r3, [r3, #12]
 801a49c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	68da      	ldr	r2, [r3, #12]
 801a4a8:	697b      	ldr	r3, [r7, #20]
 801a4aa:	029b      	lsls	r3, r3, #10
 801a4ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801a4b0:	431a      	orrs	r2, r3
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801a4b6:	2300      	movs	r3, #0
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	371c      	adds	r7, #28
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c2:	4770      	bx	lr
 801a4c4:	00d8acbf 	.word	0x00d8acbf
 801a4c8:	00e4e1c0 	.word	0x00e4e1c0
 801a4cc:	00f42400 	.word	0x00f42400
 801a4d0:	01067380 	.word	0x01067380
 801a4d4:	011a499f 	.word	0x011a499f
 801a4d8:	01312cff 	.word	0x01312cff
 801a4dc:	014ca43f 	.word	0x014ca43f
 801a4e0:	016e3600 	.word	0x016e3600
 801a4e4:	01a6ab1f 	.word	0x01a6ab1f
 801a4e8:	01e84800 	.word	0x01e84800

0801a4ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	b083      	sub	sp, #12
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	689b      	ldr	r3, [r3, #8]
 801a4f8:	f043 0201 	orr.w	r2, r3, #1
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801a500:	2300      	movs	r3, #0
}
 801a502:	4618      	mov	r0, r3
 801a504:	370c      	adds	r7, #12
 801a506:	46bd      	mov	sp, r7
 801a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50c:	4770      	bx	lr

0801a50e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801a50e:	b480      	push	{r7}
 801a510:	b083      	sub	sp, #12
 801a512:	af00      	add	r7, sp, #0
 801a514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	689b      	ldr	r3, [r3, #8]
 801a51a:	f023 0201 	bic.w	r2, r3, #1
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801a522:	2300      	movs	r3, #0
}
 801a524:	4618      	mov	r0, r3
 801a526:	370c      	adds	r7, #12
 801a528:	46bd      	mov	sp, r7
 801a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52e:	4770      	bx	lr

0801a530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	460b      	mov	r3, r1
 801a53a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801a53c:	2300      	movs	r3, #0
 801a53e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	68db      	ldr	r3, [r3, #12]
 801a544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801a54c:	78fb      	ldrb	r3, [r7, #3]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d115      	bne.n	801a57e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	68db      	ldr	r3, [r3, #12]
 801a556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801a55e:	2001      	movs	r0, #1
 801a560:	f7fc fa10 	bl	8016984 <HAL_Delay>
      ms++;
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	3301      	adds	r3, #1
 801a568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801a56a:	6878      	ldr	r0, [r7, #4]
 801a56c:	f001 fa45 	bl	801b9fa <USB_GetMode>
 801a570:	4603      	mov	r3, r0
 801a572:	2b01      	cmp	r3, #1
 801a574:	d01e      	beq.n	801a5b4 <USB_SetCurrentMode+0x84>
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	2b31      	cmp	r3, #49	; 0x31
 801a57a:	d9f0      	bls.n	801a55e <USB_SetCurrentMode+0x2e>
 801a57c:	e01a      	b.n	801a5b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801a57e:	78fb      	ldrb	r3, [r7, #3]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d115      	bne.n	801a5b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	68db      	ldr	r3, [r3, #12]
 801a588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801a590:	2001      	movs	r0, #1
 801a592:	f7fc f9f7 	bl	8016984 <HAL_Delay>
      ms++;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	3301      	adds	r3, #1
 801a59a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f001 fa2c 	bl	801b9fa <USB_GetMode>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d005      	beq.n	801a5b4 <USB_SetCurrentMode+0x84>
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	2b31      	cmp	r3, #49	; 0x31
 801a5ac:	d9f0      	bls.n	801a590 <USB_SetCurrentMode+0x60>
 801a5ae:	e001      	b.n	801a5b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	e005      	b.n	801a5c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2b32      	cmp	r3, #50	; 0x32
 801a5b8:	d101      	bne.n	801a5be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801a5ba:	2301      	movs	r3, #1
 801a5bc:	e000      	b.n	801a5c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801a5be:	2300      	movs	r3, #0
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801a5c8:	b084      	sub	sp, #16
 801a5ca:	b580      	push	{r7, lr}
 801a5cc:	b086      	sub	sp, #24
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	6078      	str	r0, [r7, #4]
 801a5d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801a5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801a5da:	2300      	movs	r3, #0
 801a5dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	613b      	str	r3, [r7, #16]
 801a5e6:	e009      	b.n	801a5fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801a5e8:	687a      	ldr	r2, [r7, #4]
 801a5ea:	693b      	ldr	r3, [r7, #16]
 801a5ec:	3340      	adds	r3, #64	; 0x40
 801a5ee:	009b      	lsls	r3, r3, #2
 801a5f0:	4413      	add	r3, r2
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801a5f6:	693b      	ldr	r3, [r7, #16]
 801a5f8:	3301      	adds	r3, #1
 801a5fa:	613b      	str	r3, [r7, #16]
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	2b0e      	cmp	r3, #14
 801a600:	d9f2      	bls.n	801a5e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801a602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a604:	2b00      	cmp	r3, #0
 801a606:	d11c      	bne.n	801a642 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a60e:	685b      	ldr	r3, [r3, #4]
 801a610:	68fa      	ldr	r2, [r7, #12]
 801a612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a616:	f043 0302 	orr.w	r3, r3, #2
 801a61a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a62c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a638:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	639a      	str	r2, [r3, #56]	; 0x38
 801a640:	e00b      	b.n	801a65a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a646:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a660:	461a      	mov	r2, r3
 801a662:	2300      	movs	r3, #0
 801a664:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a66c:	4619      	mov	r1, r3
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a674:	461a      	mov	r2, r3
 801a676:	680b      	ldr	r3, [r1, #0]
 801a678:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a67c:	2b01      	cmp	r3, #1
 801a67e:	d10c      	bne.n	801a69a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a682:	2b00      	cmp	r3, #0
 801a684:	d104      	bne.n	801a690 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801a686:	2100      	movs	r1, #0
 801a688:	6878      	ldr	r0, [r7, #4]
 801a68a:	f000 f965 	bl	801a958 <USB_SetDevSpeed>
 801a68e:	e008      	b.n	801a6a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801a690:	2101      	movs	r1, #1
 801a692:	6878      	ldr	r0, [r7, #4]
 801a694:	f000 f960 	bl	801a958 <USB_SetDevSpeed>
 801a698:	e003      	b.n	801a6a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801a69a:	2103      	movs	r1, #3
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	f000 f95b 	bl	801a958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801a6a2:	2110      	movs	r1, #16
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f000 f8f3 	bl	801a890 <USB_FlushTxFifo>
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d001      	beq.n	801a6b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801a6b4:	6878      	ldr	r0, [r7, #4]
 801a6b6:	f000 f91f 	bl	801a8f8 <USB_FlushRxFifo>
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d001      	beq.n	801a6c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6d6:	461a      	mov	r2, r3
 801a6d8:	2300      	movs	r3, #0
 801a6da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	613b      	str	r3, [r7, #16]
 801a6ec:	e043      	b.n	801a776 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801a6ee:	693b      	ldr	r3, [r7, #16]
 801a6f0:	015a      	lsls	r2, r3, #5
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	4413      	add	r3, r2
 801a6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a704:	d118      	bne.n	801a738 <USB_DevInit+0x170>
    {
      if (i == 0U)
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d10a      	bne.n	801a722 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801a70c:	693b      	ldr	r3, [r7, #16]
 801a70e:	015a      	lsls	r2, r3, #5
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	4413      	add	r3, r2
 801a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a718:	461a      	mov	r2, r3
 801a71a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a71e:	6013      	str	r3, [r2, #0]
 801a720:	e013      	b.n	801a74a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	015a      	lsls	r2, r3, #5
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	4413      	add	r3, r2
 801a72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a72e:	461a      	mov	r2, r3
 801a730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801a734:	6013      	str	r3, [r2, #0]
 801a736:	e008      	b.n	801a74a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	015a      	lsls	r2, r3, #5
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	4413      	add	r3, r2
 801a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a744:	461a      	mov	r2, r3
 801a746:	2300      	movs	r3, #0
 801a748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801a74a:	693b      	ldr	r3, [r7, #16]
 801a74c:	015a      	lsls	r2, r3, #5
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	4413      	add	r3, r2
 801a752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a756:	461a      	mov	r2, r3
 801a758:	2300      	movs	r3, #0
 801a75a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801a75c:	693b      	ldr	r3, [r7, #16]
 801a75e:	015a      	lsls	r2, r3, #5
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	4413      	add	r3, r2
 801a764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a768:	461a      	mov	r2, r3
 801a76a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a76e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a770:	693b      	ldr	r3, [r7, #16]
 801a772:	3301      	adds	r3, #1
 801a774:	613b      	str	r3, [r7, #16]
 801a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a778:	693a      	ldr	r2, [r7, #16]
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d3b7      	bcc.n	801a6ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a77e:	2300      	movs	r3, #0
 801a780:	613b      	str	r3, [r7, #16]
 801a782:	e043      	b.n	801a80c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a784:	693b      	ldr	r3, [r7, #16]
 801a786:	015a      	lsls	r2, r3, #5
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	4413      	add	r3, r2
 801a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a79a:	d118      	bne.n	801a7ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d10a      	bne.n	801a7b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	015a      	lsls	r2, r3, #5
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a7b4:	6013      	str	r3, [r2, #0]
 801a7b6:	e013      	b.n	801a7e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801a7b8:	693b      	ldr	r3, [r7, #16]
 801a7ba:	015a      	lsls	r2, r3, #5
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	4413      	add	r3, r2
 801a7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7c4:	461a      	mov	r2, r3
 801a7c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801a7ca:	6013      	str	r3, [r2, #0]
 801a7cc:	e008      	b.n	801a7e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801a7ce:	693b      	ldr	r3, [r7, #16]
 801a7d0:	015a      	lsls	r2, r3, #5
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	4413      	add	r3, r2
 801a7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7da:	461a      	mov	r2, r3
 801a7dc:	2300      	movs	r3, #0
 801a7de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801a7e0:	693b      	ldr	r3, [r7, #16]
 801a7e2:	015a      	lsls	r2, r3, #5
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	4413      	add	r3, r2
 801a7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801a7f2:	693b      	ldr	r3, [r7, #16]
 801a7f4:	015a      	lsls	r2, r3, #5
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	4413      	add	r3, r2
 801a7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a7fe:	461a      	mov	r2, r3
 801a800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a806:	693b      	ldr	r3, [r7, #16]
 801a808:	3301      	adds	r3, #1
 801a80a:	613b      	str	r3, [r7, #16]
 801a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a80e:	693a      	ldr	r2, [r7, #16]
 801a810:	429a      	cmp	r2, r3
 801a812:	d3b7      	bcc.n	801a784 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a81a:	691b      	ldr	r3, [r3, #16]
 801a81c:	68fa      	ldr	r2, [r7, #12]
 801a81e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2200      	movs	r2, #0
 801a82c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801a834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d105      	bne.n	801a848 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	699b      	ldr	r3, [r3, #24]
 801a840:	f043 0210 	orr.w	r2, r3, #16
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	699a      	ldr	r2, [r3, #24]
 801a84c:	4b0f      	ldr	r3, [pc, #60]	; (801a88c <USB_DevInit+0x2c4>)
 801a84e:	4313      	orrs	r3, r2
 801a850:	687a      	ldr	r2, [r7, #4]
 801a852:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801a854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a856:	2b00      	cmp	r3, #0
 801a858:	d005      	beq.n	801a866 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	699b      	ldr	r3, [r3, #24]
 801a85e:	f043 0208 	orr.w	r2, r3, #8
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801a866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a868:	2b01      	cmp	r3, #1
 801a86a:	d107      	bne.n	801a87c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	699b      	ldr	r3, [r3, #24]
 801a870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a874:	f043 0304 	orr.w	r3, r3, #4
 801a878:	687a      	ldr	r2, [r7, #4]
 801a87a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801a87c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3718      	adds	r7, #24
 801a882:	46bd      	mov	sp, r7
 801a884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a888:	b004      	add	sp, #16
 801a88a:	4770      	bx	lr
 801a88c:	803c3800 	.word	0x803c3800

0801a890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801a890:	b480      	push	{r7}
 801a892:	b085      	sub	sp, #20
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
 801a898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801a89a:	2300      	movs	r3, #0
 801a89c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	3301      	adds	r3, #1
 801a8a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	4a13      	ldr	r2, [pc, #76]	; (801a8f4 <USB_FlushTxFifo+0x64>)
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	d901      	bls.n	801a8b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801a8ac:	2303      	movs	r3, #3
 801a8ae:	e01b      	b.n	801a8e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	691b      	ldr	r3, [r3, #16]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	daf2      	bge.n	801a89e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	019b      	lsls	r3, r3, #6
 801a8c0:	f043 0220 	orr.w	r2, r3, #32
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	4a08      	ldr	r2, [pc, #32]	; (801a8f4 <USB_FlushTxFifo+0x64>)
 801a8d2:	4293      	cmp	r3, r2
 801a8d4:	d901      	bls.n	801a8da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801a8d6:	2303      	movs	r3, #3
 801a8d8:	e006      	b.n	801a8e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	691b      	ldr	r3, [r3, #16]
 801a8de:	f003 0320 	and.w	r3, r3, #32
 801a8e2:	2b20      	cmp	r3, #32
 801a8e4:	d0f0      	beq.n	801a8c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801a8e6:	2300      	movs	r3, #0
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3714      	adds	r7, #20
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f2:	4770      	bx	lr
 801a8f4:	00030d40 	.word	0x00030d40

0801a8f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801a8f8:	b480      	push	{r7}
 801a8fa:	b085      	sub	sp, #20
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a900:	2300      	movs	r3, #0
 801a902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	3301      	adds	r3, #1
 801a908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	4a11      	ldr	r2, [pc, #68]	; (801a954 <USB_FlushRxFifo+0x5c>)
 801a90e:	4293      	cmp	r3, r2
 801a910:	d901      	bls.n	801a916 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801a912:	2303      	movs	r3, #3
 801a914:	e018      	b.n	801a948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	691b      	ldr	r3, [r3, #16]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	daf2      	bge.n	801a904 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801a91e:	2300      	movs	r3, #0
 801a920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	2210      	movs	r2, #16
 801a926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	3301      	adds	r3, #1
 801a92c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	4a08      	ldr	r2, [pc, #32]	; (801a954 <USB_FlushRxFifo+0x5c>)
 801a932:	4293      	cmp	r3, r2
 801a934:	d901      	bls.n	801a93a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801a936:	2303      	movs	r3, #3
 801a938:	e006      	b.n	801a948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	f003 0310 	and.w	r3, r3, #16
 801a942:	2b10      	cmp	r3, #16
 801a944:	d0f0      	beq.n	801a928 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801a946:	2300      	movs	r3, #0
}
 801a948:	4618      	mov	r0, r3
 801a94a:	3714      	adds	r7, #20
 801a94c:	46bd      	mov	sp, r7
 801a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a952:	4770      	bx	lr
 801a954:	00030d40 	.word	0x00030d40

0801a958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801a958:	b480      	push	{r7}
 801a95a:	b085      	sub	sp, #20
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	460b      	mov	r3, r1
 801a962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a96e:	681a      	ldr	r2, [r3, #0]
 801a970:	78fb      	ldrb	r3, [r7, #3]
 801a972:	68f9      	ldr	r1, [r7, #12]
 801a974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a978:	4313      	orrs	r3, r2
 801a97a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	4618      	mov	r0, r3
 801a980:	3714      	adds	r7, #20
 801a982:	46bd      	mov	sp, r7
 801a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a988:	4770      	bx	lr

0801a98a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801a98a:	b480      	push	{r7}
 801a98c:	b087      	sub	sp, #28
 801a98e:	af00      	add	r7, sp, #0
 801a990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801a996:	693b      	ldr	r3, [r7, #16]
 801a998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a99c:	689b      	ldr	r3, [r3, #8]
 801a99e:	f003 0306 	and.w	r3, r3, #6
 801a9a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d102      	bne.n	801a9b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	75fb      	strb	r3, [r7, #23]
 801a9ae:	e00a      	b.n	801a9c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	2b02      	cmp	r3, #2
 801a9b4:	d002      	beq.n	801a9bc <USB_GetDevSpeed+0x32>
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	2b06      	cmp	r3, #6
 801a9ba:	d102      	bne.n	801a9c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801a9bc:	2302      	movs	r3, #2
 801a9be:	75fb      	strb	r3, [r7, #23]
 801a9c0:	e001      	b.n	801a9c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801a9c2:	230f      	movs	r3, #15
 801a9c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	371c      	adds	r7, #28
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d2:	4770      	bx	lr

0801a9d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801a9d4:	b480      	push	{r7}
 801a9d6:	b085      	sub	sp, #20
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
 801a9dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	781b      	ldrb	r3, [r3, #0]
 801a9e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	785b      	ldrb	r3, [r3, #1]
 801a9ec:	2b01      	cmp	r3, #1
 801a9ee:	d13a      	bne.n	801aa66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a9f6:	69da      	ldr	r2, [r3, #28]
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	781b      	ldrb	r3, [r3, #0]
 801a9fc:	f003 030f 	and.w	r3, r3, #15
 801aa00:	2101      	movs	r1, #1
 801aa02:	fa01 f303 	lsl.w	r3, r1, r3
 801aa06:	b29b      	uxth	r3, r3
 801aa08:	68f9      	ldr	r1, [r7, #12]
 801aa0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	015a      	lsls	r2, r3, #5
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	4413      	add	r3, r2
 801aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d155      	bne.n	801aad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801aa28:	68bb      	ldr	r3, [r7, #8]
 801aa2a:	015a      	lsls	r2, r3, #5
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	4413      	add	r3, r2
 801aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aa34:	681a      	ldr	r2, [r3, #0]
 801aa36:	683b      	ldr	r3, [r7, #0]
 801aa38:	68db      	ldr	r3, [r3, #12]
 801aa3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	791b      	ldrb	r3, [r3, #4]
 801aa42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801aa44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801aa46:	68bb      	ldr	r3, [r7, #8]
 801aa48:	059b      	lsls	r3, r3, #22
 801aa4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801aa4c:	4313      	orrs	r3, r2
 801aa4e:	68ba      	ldr	r2, [r7, #8]
 801aa50:	0151      	lsls	r1, r2, #5
 801aa52:	68fa      	ldr	r2, [r7, #12]
 801aa54:	440a      	add	r2, r1
 801aa56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aa5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aa5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801aa62:	6013      	str	r3, [r2, #0]
 801aa64:	e036      	b.n	801aad4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aa6c:	69da      	ldr	r2, [r3, #28]
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	f003 030f 	and.w	r3, r3, #15
 801aa76:	2101      	movs	r1, #1
 801aa78:	fa01 f303 	lsl.w	r3, r1, r3
 801aa7c:	041b      	lsls	r3, r3, #16
 801aa7e:	68f9      	ldr	r1, [r7, #12]
 801aa80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801aa84:	4313      	orrs	r3, r2
 801aa86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	015a      	lsls	r2, r3, #5
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	4413      	add	r3, r2
 801aa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d11a      	bne.n	801aad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	015a      	lsls	r2, r3, #5
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	4413      	add	r3, r2
 801aaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	68db      	ldr	r3, [r3, #12]
 801aab0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	791b      	ldrb	r3, [r3, #4]
 801aab8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801aaba:	430b      	orrs	r3, r1
 801aabc:	4313      	orrs	r3, r2
 801aabe:	68ba      	ldr	r2, [r7, #8]
 801aac0:	0151      	lsls	r1, r2, #5
 801aac2:	68fa      	ldr	r2, [r7, #12]
 801aac4:	440a      	add	r2, r1
 801aac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801aaca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801aad2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801aad4:	2300      	movs	r3, #0
}
 801aad6:	4618      	mov	r0, r3
 801aad8:	3714      	adds	r7, #20
 801aada:	46bd      	mov	sp, r7
 801aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae0:	4770      	bx	lr
	...

0801aae4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801aae4:	b480      	push	{r7}
 801aae6:	b085      	sub	sp, #20
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
 801aaec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	785b      	ldrb	r3, [r3, #1]
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d161      	bne.n	801abc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	015a      	lsls	r2, r3, #5
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	4413      	add	r3, r2
 801ab08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ab12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ab16:	d11f      	bne.n	801ab58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	015a      	lsls	r2, r3, #5
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	4413      	add	r3, r2
 801ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	68ba      	ldr	r2, [r7, #8]
 801ab28:	0151      	lsls	r1, r2, #5
 801ab2a:	68fa      	ldr	r2, [r7, #12]
 801ab2c:	440a      	add	r2, r1
 801ab2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ab32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ab36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	015a      	lsls	r2, r3, #5
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	4413      	add	r3, r2
 801ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	68ba      	ldr	r2, [r7, #8]
 801ab48:	0151      	lsls	r1, r2, #5
 801ab4a:	68fa      	ldr	r2, [r7, #12]
 801ab4c:	440a      	add	r2, r1
 801ab4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ab52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ab56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	f003 030f 	and.w	r3, r3, #15
 801ab68:	2101      	movs	r1, #1
 801ab6a:	fa01 f303 	lsl.w	r3, r1, r3
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	43db      	mvns	r3, r3
 801ab72:	68f9      	ldr	r1, [r7, #12]
 801ab74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ab78:	4013      	ands	r3, r2
 801ab7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab82:	69da      	ldr	r2, [r3, #28]
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	f003 030f 	and.w	r3, r3, #15
 801ab8c:	2101      	movs	r1, #1
 801ab8e:	fa01 f303 	lsl.w	r3, r1, r3
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	43db      	mvns	r3, r3
 801ab96:	68f9      	ldr	r1, [r7, #12]
 801ab98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ab9c:	4013      	ands	r3, r2
 801ab9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801aba0:	68bb      	ldr	r3, [r7, #8]
 801aba2:	015a      	lsls	r2, r3, #5
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	4413      	add	r3, r2
 801aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801abac:	681a      	ldr	r2, [r3, #0]
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	0159      	lsls	r1, r3, #5
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	440b      	add	r3, r1
 801abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801abba:	4619      	mov	r1, r3
 801abbc:	4b35      	ldr	r3, [pc, #212]	; (801ac94 <USB_DeactivateEndpoint+0x1b0>)
 801abbe:	4013      	ands	r3, r2
 801abc0:	600b      	str	r3, [r1, #0]
 801abc2:	e060      	b.n	801ac86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	015a      	lsls	r2, r3, #5
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	4413      	add	r3, r2
 801abcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801abd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801abda:	d11f      	bne.n	801ac1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	015a      	lsls	r2, r3, #5
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	4413      	add	r3, r2
 801abe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	68ba      	ldr	r2, [r7, #8]
 801abec:	0151      	lsls	r1, r2, #5
 801abee:	68fa      	ldr	r2, [r7, #12]
 801abf0:	440a      	add	r2, r1
 801abf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801abf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801abfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801abfc:	68bb      	ldr	r3, [r7, #8]
 801abfe:	015a      	lsls	r2, r3, #5
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	4413      	add	r3, r2
 801ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	68ba      	ldr	r2, [r7, #8]
 801ac0c:	0151      	lsls	r1, r2, #5
 801ac0e:	68fa      	ldr	r2, [r7, #12]
 801ac10:	440a      	add	r2, r1
 801ac12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ac16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ac1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	f003 030f 	and.w	r3, r3, #15
 801ac2c:	2101      	movs	r1, #1
 801ac2e:	fa01 f303 	lsl.w	r3, r1, r3
 801ac32:	041b      	lsls	r3, r3, #16
 801ac34:	43db      	mvns	r3, r3
 801ac36:	68f9      	ldr	r1, [r7, #12]
 801ac38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ac3c:	4013      	ands	r3, r2
 801ac3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac46:	69da      	ldr	r2, [r3, #28]
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	f003 030f 	and.w	r3, r3, #15
 801ac50:	2101      	movs	r1, #1
 801ac52:	fa01 f303 	lsl.w	r3, r1, r3
 801ac56:	041b      	lsls	r3, r3, #16
 801ac58:	43db      	mvns	r3, r3
 801ac5a:	68f9      	ldr	r1, [r7, #12]
 801ac5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ac60:	4013      	ands	r3, r2
 801ac62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	015a      	lsls	r2, r3, #5
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	4413      	add	r3, r2
 801ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac70:	681a      	ldr	r2, [r3, #0]
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	0159      	lsls	r1, r3, #5
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	440b      	add	r3, r1
 801ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac7e:	4619      	mov	r1, r3
 801ac80:	4b05      	ldr	r3, [pc, #20]	; (801ac98 <USB_DeactivateEndpoint+0x1b4>)
 801ac82:	4013      	ands	r3, r2
 801ac84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801ac86:	2300      	movs	r3, #0
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3714      	adds	r7, #20
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac92:	4770      	bx	lr
 801ac94:	ec337800 	.word	0xec337800
 801ac98:	eff37800 	.word	0xeff37800

0801ac9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b08a      	sub	sp, #40	; 0x28
 801aca0:	af02      	add	r7, sp, #8
 801aca2:	60f8      	str	r0, [r7, #12]
 801aca4:	60b9      	str	r1, [r7, #8]
 801aca6:	4613      	mov	r3, r2
 801aca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801acae:	68bb      	ldr	r3, [r7, #8]
 801acb0:	781b      	ldrb	r3, [r3, #0]
 801acb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	785b      	ldrb	r3, [r3, #1]
 801acb8:	2b01      	cmp	r3, #1
 801acba:	f040 815c 	bne.w	801af76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801acbe:	68bb      	ldr	r3, [r7, #8]
 801acc0:	699b      	ldr	r3, [r3, #24]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d132      	bne.n	801ad2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801acc6:	69bb      	ldr	r3, [r7, #24]
 801acc8:	015a      	lsls	r2, r3, #5
 801acca:	69fb      	ldr	r3, [r7, #28]
 801accc:	4413      	add	r3, r2
 801acce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801acd2:	691b      	ldr	r3, [r3, #16]
 801acd4:	69ba      	ldr	r2, [r7, #24]
 801acd6:	0151      	lsls	r1, r2, #5
 801acd8:	69fa      	ldr	r2, [r7, #28]
 801acda:	440a      	add	r2, r1
 801acdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ace0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ace4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ace8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	015a      	lsls	r2, r3, #5
 801acee:	69fb      	ldr	r3, [r7, #28]
 801acf0:	4413      	add	r3, r2
 801acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801acf6:	691b      	ldr	r3, [r3, #16]
 801acf8:	69ba      	ldr	r2, [r7, #24]
 801acfa:	0151      	lsls	r1, r2, #5
 801acfc:	69fa      	ldr	r2, [r7, #28]
 801acfe:	440a      	add	r2, r1
 801ad00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ad04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ad08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ad0a:	69bb      	ldr	r3, [r7, #24]
 801ad0c:	015a      	lsls	r2, r3, #5
 801ad0e:	69fb      	ldr	r3, [r7, #28]
 801ad10:	4413      	add	r3, r2
 801ad12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad16:	691b      	ldr	r3, [r3, #16]
 801ad18:	69ba      	ldr	r2, [r7, #24]
 801ad1a:	0151      	lsls	r1, r2, #5
 801ad1c:	69fa      	ldr	r2, [r7, #28]
 801ad1e:	440a      	add	r2, r1
 801ad20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ad24:	0cdb      	lsrs	r3, r3, #19
 801ad26:	04db      	lsls	r3, r3, #19
 801ad28:	6113      	str	r3, [r2, #16]
 801ad2a:	e074      	b.n	801ae16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ad2c:	69bb      	ldr	r3, [r7, #24]
 801ad2e:	015a      	lsls	r2, r3, #5
 801ad30:	69fb      	ldr	r3, [r7, #28]
 801ad32:	4413      	add	r3, r2
 801ad34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad38:	691b      	ldr	r3, [r3, #16]
 801ad3a:	69ba      	ldr	r2, [r7, #24]
 801ad3c:	0151      	lsls	r1, r2, #5
 801ad3e:	69fa      	ldr	r2, [r7, #28]
 801ad40:	440a      	add	r2, r1
 801ad42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ad46:	0cdb      	lsrs	r3, r3, #19
 801ad48:	04db      	lsls	r3, r3, #19
 801ad4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ad4c:	69bb      	ldr	r3, [r7, #24]
 801ad4e:	015a      	lsls	r2, r3, #5
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	4413      	add	r3, r2
 801ad54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad58:	691b      	ldr	r3, [r3, #16]
 801ad5a:	69ba      	ldr	r2, [r7, #24]
 801ad5c:	0151      	lsls	r1, r2, #5
 801ad5e:	69fa      	ldr	r2, [r7, #28]
 801ad60:	440a      	add	r2, r1
 801ad62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ad66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ad6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ad6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801ad70:	69bb      	ldr	r3, [r7, #24]
 801ad72:	015a      	lsls	r2, r3, #5
 801ad74:	69fb      	ldr	r3, [r7, #28]
 801ad76:	4413      	add	r3, r2
 801ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801ad7e:	68bb      	ldr	r3, [r7, #8]
 801ad80:	6999      	ldr	r1, [r3, #24]
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	68db      	ldr	r3, [r3, #12]
 801ad86:	440b      	add	r3, r1
 801ad88:	1e59      	subs	r1, r3, #1
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	68db      	ldr	r3, [r3, #12]
 801ad8e:	fbb1 f3f3 	udiv	r3, r1, r3
 801ad92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801ad94:	4b9d      	ldr	r3, [pc, #628]	; (801b00c <USB_EPStartXfer+0x370>)
 801ad96:	400b      	ands	r3, r1
 801ad98:	69b9      	ldr	r1, [r7, #24]
 801ad9a:	0148      	lsls	r0, r1, #5
 801ad9c:	69f9      	ldr	r1, [r7, #28]
 801ad9e:	4401      	add	r1, r0
 801ada0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ada4:	4313      	orrs	r3, r2
 801ada6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ada8:	69bb      	ldr	r3, [r7, #24]
 801adaa:	015a      	lsls	r2, r3, #5
 801adac:	69fb      	ldr	r3, [r7, #28]
 801adae:	4413      	add	r3, r2
 801adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801adb4:	691a      	ldr	r2, [r3, #16]
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	699b      	ldr	r3, [r3, #24]
 801adba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801adbe:	69b9      	ldr	r1, [r7, #24]
 801adc0:	0148      	lsls	r0, r1, #5
 801adc2:	69f9      	ldr	r1, [r7, #28]
 801adc4:	4401      	add	r1, r0
 801adc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801adca:	4313      	orrs	r3, r2
 801adcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	791b      	ldrb	r3, [r3, #4]
 801add2:	2b01      	cmp	r3, #1
 801add4:	d11f      	bne.n	801ae16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	015a      	lsls	r2, r3, #5
 801adda:	69fb      	ldr	r3, [r7, #28]
 801addc:	4413      	add	r3, r2
 801adde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	69ba      	ldr	r2, [r7, #24]
 801ade6:	0151      	lsls	r1, r2, #5
 801ade8:	69fa      	ldr	r2, [r7, #28]
 801adea:	440a      	add	r2, r1
 801adec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801adf0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801adf4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	015a      	lsls	r2, r3, #5
 801adfa:	69fb      	ldr	r3, [r7, #28]
 801adfc:	4413      	add	r3, r2
 801adfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae02:	691b      	ldr	r3, [r3, #16]
 801ae04:	69ba      	ldr	r2, [r7, #24]
 801ae06:	0151      	lsls	r1, r2, #5
 801ae08:	69fa      	ldr	r2, [r7, #28]
 801ae0a:	440a      	add	r2, r1
 801ae0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ae10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ae14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801ae16:	79fb      	ldrb	r3, [r7, #7]
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	d14b      	bne.n	801aeb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	695b      	ldr	r3, [r3, #20]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d009      	beq.n	801ae38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ae24:	69bb      	ldr	r3, [r7, #24]
 801ae26:	015a      	lsls	r2, r3, #5
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	4413      	add	r3, r2
 801ae2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae30:	461a      	mov	r2, r3
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	695b      	ldr	r3, [r3, #20]
 801ae36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801ae38:	68bb      	ldr	r3, [r7, #8]
 801ae3a:	791b      	ldrb	r3, [r3, #4]
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d128      	bne.n	801ae92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ae40:	69fb      	ldr	r3, [r7, #28]
 801ae42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae46:	689b      	ldr	r3, [r3, #8]
 801ae48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d110      	bne.n	801ae72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ae50:	69bb      	ldr	r3, [r7, #24]
 801ae52:	015a      	lsls	r2, r3, #5
 801ae54:	69fb      	ldr	r3, [r7, #28]
 801ae56:	4413      	add	r3, r2
 801ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	69ba      	ldr	r2, [r7, #24]
 801ae60:	0151      	lsls	r1, r2, #5
 801ae62:	69fa      	ldr	r2, [r7, #28]
 801ae64:	440a      	add	r2, r1
 801ae66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ae6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ae6e:	6013      	str	r3, [r2, #0]
 801ae70:	e00f      	b.n	801ae92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801ae72:	69bb      	ldr	r3, [r7, #24]
 801ae74:	015a      	lsls	r2, r3, #5
 801ae76:	69fb      	ldr	r3, [r7, #28]
 801ae78:	4413      	add	r3, r2
 801ae7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	69ba      	ldr	r2, [r7, #24]
 801ae82:	0151      	lsls	r1, r2, #5
 801ae84:	69fa      	ldr	r2, [r7, #28]
 801ae86:	440a      	add	r2, r1
 801ae88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ae8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ae90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ae92:	69bb      	ldr	r3, [r7, #24]
 801ae94:	015a      	lsls	r2, r3, #5
 801ae96:	69fb      	ldr	r3, [r7, #28]
 801ae98:	4413      	add	r3, r2
 801ae9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	69ba      	ldr	r2, [r7, #24]
 801aea2:	0151      	lsls	r1, r2, #5
 801aea4:	69fa      	ldr	r2, [r7, #28]
 801aea6:	440a      	add	r2, r1
 801aea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aeac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801aeb0:	6013      	str	r3, [r2, #0]
 801aeb2:	e133      	b.n	801b11c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801aeb4:	69bb      	ldr	r3, [r7, #24]
 801aeb6:	015a      	lsls	r2, r3, #5
 801aeb8:	69fb      	ldr	r3, [r7, #28]
 801aeba:	4413      	add	r3, r2
 801aebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	69ba      	ldr	r2, [r7, #24]
 801aec4:	0151      	lsls	r1, r2, #5
 801aec6:	69fa      	ldr	r2, [r7, #28]
 801aec8:	440a      	add	r2, r1
 801aeca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801aece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801aed2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	791b      	ldrb	r3, [r3, #4]
 801aed8:	2b01      	cmp	r3, #1
 801aeda:	d015      	beq.n	801af08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801aedc:	68bb      	ldr	r3, [r7, #8]
 801aede:	699b      	ldr	r3, [r3, #24]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	f000 811b 	beq.w	801b11c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801aee6:	69fb      	ldr	r3, [r7, #28]
 801aee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aeec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801aeee:	68bb      	ldr	r3, [r7, #8]
 801aef0:	781b      	ldrb	r3, [r3, #0]
 801aef2:	f003 030f 	and.w	r3, r3, #15
 801aef6:	2101      	movs	r1, #1
 801aef8:	fa01 f303 	lsl.w	r3, r1, r3
 801aefc:	69f9      	ldr	r1, [r7, #28]
 801aefe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801af02:	4313      	orrs	r3, r2
 801af04:	634b      	str	r3, [r1, #52]	; 0x34
 801af06:	e109      	b.n	801b11c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801af08:	69fb      	ldr	r3, [r7, #28]
 801af0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801af0e:	689b      	ldr	r3, [r3, #8]
 801af10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af14:	2b00      	cmp	r3, #0
 801af16:	d110      	bne.n	801af3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801af18:	69bb      	ldr	r3, [r7, #24]
 801af1a:	015a      	lsls	r2, r3, #5
 801af1c:	69fb      	ldr	r3, [r7, #28]
 801af1e:	4413      	add	r3, r2
 801af20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	69ba      	ldr	r2, [r7, #24]
 801af28:	0151      	lsls	r1, r2, #5
 801af2a:	69fa      	ldr	r2, [r7, #28]
 801af2c:	440a      	add	r2, r1
 801af2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801af32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801af36:	6013      	str	r3, [r2, #0]
 801af38:	e00f      	b.n	801af5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801af3a:	69bb      	ldr	r3, [r7, #24]
 801af3c:	015a      	lsls	r2, r3, #5
 801af3e:	69fb      	ldr	r3, [r7, #28]
 801af40:	4413      	add	r3, r2
 801af42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	69ba      	ldr	r2, [r7, #24]
 801af4a:	0151      	lsls	r1, r2, #5
 801af4c:	69fa      	ldr	r2, [r7, #28]
 801af4e:	440a      	add	r2, r1
 801af50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801af54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801af5a:	68bb      	ldr	r3, [r7, #8]
 801af5c:	6919      	ldr	r1, [r3, #16]
 801af5e:	68bb      	ldr	r3, [r7, #8]
 801af60:	781a      	ldrb	r2, [r3, #0]
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	699b      	ldr	r3, [r3, #24]
 801af66:	b298      	uxth	r0, r3
 801af68:	79fb      	ldrb	r3, [r7, #7]
 801af6a:	9300      	str	r3, [sp, #0]
 801af6c:	4603      	mov	r3, r0
 801af6e:	68f8      	ldr	r0, [r7, #12]
 801af70:	f000 fade 	bl	801b530 <USB_WritePacket>
 801af74:	e0d2      	b.n	801b11c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	015a      	lsls	r2, r3, #5
 801af7a:	69fb      	ldr	r3, [r7, #28]
 801af7c:	4413      	add	r3, r2
 801af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af82:	691b      	ldr	r3, [r3, #16]
 801af84:	69ba      	ldr	r2, [r7, #24]
 801af86:	0151      	lsls	r1, r2, #5
 801af88:	69fa      	ldr	r2, [r7, #28]
 801af8a:	440a      	add	r2, r1
 801af8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801af90:	0cdb      	lsrs	r3, r3, #19
 801af92:	04db      	lsls	r3, r3, #19
 801af94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801af96:	69bb      	ldr	r3, [r7, #24]
 801af98:	015a      	lsls	r2, r3, #5
 801af9a:	69fb      	ldr	r3, [r7, #28]
 801af9c:	4413      	add	r3, r2
 801af9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afa2:	691b      	ldr	r3, [r3, #16]
 801afa4:	69ba      	ldr	r2, [r7, #24]
 801afa6:	0151      	lsls	r1, r2, #5
 801afa8:	69fa      	ldr	r2, [r7, #28]
 801afaa:	440a      	add	r2, r1
 801afac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801afb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801afb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801afb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801afba:	68bb      	ldr	r3, [r7, #8]
 801afbc:	699b      	ldr	r3, [r3, #24]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d126      	bne.n	801b010 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801afc2:	69bb      	ldr	r3, [r7, #24]
 801afc4:	015a      	lsls	r2, r3, #5
 801afc6:	69fb      	ldr	r3, [r7, #28]
 801afc8:	4413      	add	r3, r2
 801afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afce:	691a      	ldr	r2, [r3, #16]
 801afd0:	68bb      	ldr	r3, [r7, #8]
 801afd2:	68db      	ldr	r3, [r3, #12]
 801afd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801afd8:	69b9      	ldr	r1, [r7, #24]
 801afda:	0148      	lsls	r0, r1, #5
 801afdc:	69f9      	ldr	r1, [r7, #28]
 801afde:	4401      	add	r1, r0
 801afe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801afe4:	4313      	orrs	r3, r2
 801afe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801afe8:	69bb      	ldr	r3, [r7, #24]
 801afea:	015a      	lsls	r2, r3, #5
 801afec:	69fb      	ldr	r3, [r7, #28]
 801afee:	4413      	add	r3, r2
 801aff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aff4:	691b      	ldr	r3, [r3, #16]
 801aff6:	69ba      	ldr	r2, [r7, #24]
 801aff8:	0151      	lsls	r1, r2, #5
 801affa:	69fa      	ldr	r2, [r7, #28]
 801affc:	440a      	add	r2, r1
 801affe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b006:	6113      	str	r3, [r2, #16]
 801b008:	e03a      	b.n	801b080 <USB_EPStartXfer+0x3e4>
 801b00a:	bf00      	nop
 801b00c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	699a      	ldr	r2, [r3, #24]
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	68db      	ldr	r3, [r3, #12]
 801b018:	4413      	add	r3, r2
 801b01a:	1e5a      	subs	r2, r3, #1
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	fbb2 f3f3 	udiv	r3, r2, r3
 801b024:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801b026:	68bb      	ldr	r3, [r7, #8]
 801b028:	68db      	ldr	r3, [r3, #12]
 801b02a:	8afa      	ldrh	r2, [r7, #22]
 801b02c:	fb03 f202 	mul.w	r2, r3, r2
 801b030:	68bb      	ldr	r3, [r7, #8]
 801b032:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801b034:	69bb      	ldr	r3, [r7, #24]
 801b036:	015a      	lsls	r2, r3, #5
 801b038:	69fb      	ldr	r3, [r7, #28]
 801b03a:	4413      	add	r3, r2
 801b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b040:	691a      	ldr	r2, [r3, #16]
 801b042:	8afb      	ldrh	r3, [r7, #22]
 801b044:	04d9      	lsls	r1, r3, #19
 801b046:	4b38      	ldr	r3, [pc, #224]	; (801b128 <USB_EPStartXfer+0x48c>)
 801b048:	400b      	ands	r3, r1
 801b04a:	69b9      	ldr	r1, [r7, #24]
 801b04c:	0148      	lsls	r0, r1, #5
 801b04e:	69f9      	ldr	r1, [r7, #28]
 801b050:	4401      	add	r1, r0
 801b052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b056:	4313      	orrs	r3, r2
 801b058:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801b05a:	69bb      	ldr	r3, [r7, #24]
 801b05c:	015a      	lsls	r2, r3, #5
 801b05e:	69fb      	ldr	r3, [r7, #28]
 801b060:	4413      	add	r3, r2
 801b062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b066:	691a      	ldr	r2, [r3, #16]
 801b068:	68bb      	ldr	r3, [r7, #8]
 801b06a:	69db      	ldr	r3, [r3, #28]
 801b06c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b070:	69b9      	ldr	r1, [r7, #24]
 801b072:	0148      	lsls	r0, r1, #5
 801b074:	69f9      	ldr	r1, [r7, #28]
 801b076:	4401      	add	r1, r0
 801b078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b07c:	4313      	orrs	r3, r2
 801b07e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b080:	79fb      	ldrb	r3, [r7, #7]
 801b082:	2b01      	cmp	r3, #1
 801b084:	d10d      	bne.n	801b0a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	691b      	ldr	r3, [r3, #16]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d009      	beq.n	801b0a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b08e:	68bb      	ldr	r3, [r7, #8]
 801b090:	6919      	ldr	r1, [r3, #16]
 801b092:	69bb      	ldr	r3, [r7, #24]
 801b094:	015a      	lsls	r2, r3, #5
 801b096:	69fb      	ldr	r3, [r7, #28]
 801b098:	4413      	add	r3, r2
 801b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b09e:	460a      	mov	r2, r1
 801b0a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801b0a2:	68bb      	ldr	r3, [r7, #8]
 801b0a4:	791b      	ldrb	r3, [r3, #4]
 801b0a6:	2b01      	cmp	r3, #1
 801b0a8:	d128      	bne.n	801b0fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b0aa:	69fb      	ldr	r3, [r7, #28]
 801b0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b0b0:	689b      	ldr	r3, [r3, #8]
 801b0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d110      	bne.n	801b0dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801b0ba:	69bb      	ldr	r3, [r7, #24]
 801b0bc:	015a      	lsls	r2, r3, #5
 801b0be:	69fb      	ldr	r3, [r7, #28]
 801b0c0:	4413      	add	r3, r2
 801b0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	69ba      	ldr	r2, [r7, #24]
 801b0ca:	0151      	lsls	r1, r2, #5
 801b0cc:	69fa      	ldr	r2, [r7, #28]
 801b0ce:	440a      	add	r2, r1
 801b0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b0d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b0d8:	6013      	str	r3, [r2, #0]
 801b0da:	e00f      	b.n	801b0fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801b0dc:	69bb      	ldr	r3, [r7, #24]
 801b0de:	015a      	lsls	r2, r3, #5
 801b0e0:	69fb      	ldr	r3, [r7, #28]
 801b0e2:	4413      	add	r3, r2
 801b0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	69ba      	ldr	r2, [r7, #24]
 801b0ec:	0151      	lsls	r1, r2, #5
 801b0ee:	69fa      	ldr	r2, [r7, #28]
 801b0f0:	440a      	add	r2, r1
 801b0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b0f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b0fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b0fc:	69bb      	ldr	r3, [r7, #24]
 801b0fe:	015a      	lsls	r2, r3, #5
 801b100:	69fb      	ldr	r3, [r7, #28]
 801b102:	4413      	add	r3, r2
 801b104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	69ba      	ldr	r2, [r7, #24]
 801b10c:	0151      	lsls	r1, r2, #5
 801b10e:	69fa      	ldr	r2, [r7, #28]
 801b110:	440a      	add	r2, r1
 801b112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b11a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b11c:	2300      	movs	r3, #0
}
 801b11e:	4618      	mov	r0, r3
 801b120:	3720      	adds	r7, #32
 801b122:	46bd      	mov	sp, r7
 801b124:	bd80      	pop	{r7, pc}
 801b126:	bf00      	nop
 801b128:	1ff80000 	.word	0x1ff80000

0801b12c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b12c:	b480      	push	{r7}
 801b12e:	b087      	sub	sp, #28
 801b130:	af00      	add	r7, sp, #0
 801b132:	60f8      	str	r0, [r7, #12]
 801b134:	60b9      	str	r1, [r7, #8]
 801b136:	4613      	mov	r3, r2
 801b138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801b13e:	68bb      	ldr	r3, [r7, #8]
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	785b      	ldrb	r3, [r3, #1]
 801b148:	2b01      	cmp	r3, #1
 801b14a:	f040 80ce 	bne.w	801b2ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b14e:	68bb      	ldr	r3, [r7, #8]
 801b150:	699b      	ldr	r3, [r3, #24]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d132      	bne.n	801b1bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	015a      	lsls	r2, r3, #5
 801b15a:	697b      	ldr	r3, [r7, #20]
 801b15c:	4413      	add	r3, r2
 801b15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b162:	691b      	ldr	r3, [r3, #16]
 801b164:	693a      	ldr	r2, [r7, #16]
 801b166:	0151      	lsls	r1, r2, #5
 801b168:	697a      	ldr	r2, [r7, #20]
 801b16a:	440a      	add	r2, r1
 801b16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b170:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b174:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b17a:	693b      	ldr	r3, [r7, #16]
 801b17c:	015a      	lsls	r2, r3, #5
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	4413      	add	r3, r2
 801b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b186:	691b      	ldr	r3, [r3, #16]
 801b188:	693a      	ldr	r2, [r7, #16]
 801b18a:	0151      	lsls	r1, r2, #5
 801b18c:	697a      	ldr	r2, [r7, #20]
 801b18e:	440a      	add	r2, r1
 801b190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b19a:	693b      	ldr	r3, [r7, #16]
 801b19c:	015a      	lsls	r2, r3, #5
 801b19e:	697b      	ldr	r3, [r7, #20]
 801b1a0:	4413      	add	r3, r2
 801b1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1a6:	691b      	ldr	r3, [r3, #16]
 801b1a8:	693a      	ldr	r2, [r7, #16]
 801b1aa:	0151      	lsls	r1, r2, #5
 801b1ac:	697a      	ldr	r2, [r7, #20]
 801b1ae:	440a      	add	r2, r1
 801b1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b1b4:	0cdb      	lsrs	r3, r3, #19
 801b1b6:	04db      	lsls	r3, r3, #19
 801b1b8:	6113      	str	r3, [r2, #16]
 801b1ba:	e04e      	b.n	801b25a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b1bc:	693b      	ldr	r3, [r7, #16]
 801b1be:	015a      	lsls	r2, r3, #5
 801b1c0:	697b      	ldr	r3, [r7, #20]
 801b1c2:	4413      	add	r3, r2
 801b1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1c8:	691b      	ldr	r3, [r3, #16]
 801b1ca:	693a      	ldr	r2, [r7, #16]
 801b1cc:	0151      	lsls	r1, r2, #5
 801b1ce:	697a      	ldr	r2, [r7, #20]
 801b1d0:	440a      	add	r2, r1
 801b1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b1d6:	0cdb      	lsrs	r3, r3, #19
 801b1d8:	04db      	lsls	r3, r3, #19
 801b1da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b1dc:	693b      	ldr	r3, [r7, #16]
 801b1de:	015a      	lsls	r2, r3, #5
 801b1e0:	697b      	ldr	r3, [r7, #20]
 801b1e2:	4413      	add	r3, r2
 801b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1e8:	691b      	ldr	r3, [r3, #16]
 801b1ea:	693a      	ldr	r2, [r7, #16]
 801b1ec:	0151      	lsls	r1, r2, #5
 801b1ee:	697a      	ldr	r2, [r7, #20]
 801b1f0:	440a      	add	r2, r1
 801b1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b1f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b1fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b1fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801b200:	68bb      	ldr	r3, [r7, #8]
 801b202:	699a      	ldr	r2, [r3, #24]
 801b204:	68bb      	ldr	r3, [r7, #8]
 801b206:	68db      	ldr	r3, [r3, #12]
 801b208:	429a      	cmp	r2, r3
 801b20a:	d903      	bls.n	801b214 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801b20c:	68bb      	ldr	r3, [r7, #8]
 801b20e:	68da      	ldr	r2, [r3, #12]
 801b210:	68bb      	ldr	r3, [r7, #8]
 801b212:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b214:	693b      	ldr	r3, [r7, #16]
 801b216:	015a      	lsls	r2, r3, #5
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	4413      	add	r3, r2
 801b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b220:	691b      	ldr	r3, [r3, #16]
 801b222:	693a      	ldr	r2, [r7, #16]
 801b224:	0151      	lsls	r1, r2, #5
 801b226:	697a      	ldr	r2, [r7, #20]
 801b228:	440a      	add	r2, r1
 801b22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b22e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	015a      	lsls	r2, r3, #5
 801b238:	697b      	ldr	r3, [r7, #20]
 801b23a:	4413      	add	r3, r2
 801b23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b240:	691a      	ldr	r2, [r3, #16]
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	699b      	ldr	r3, [r3, #24]
 801b246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b24a:	6939      	ldr	r1, [r7, #16]
 801b24c:	0148      	lsls	r0, r1, #5
 801b24e:	6979      	ldr	r1, [r7, #20]
 801b250:	4401      	add	r1, r0
 801b252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b256:	4313      	orrs	r3, r2
 801b258:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b25a:	79fb      	ldrb	r3, [r7, #7]
 801b25c:	2b01      	cmp	r3, #1
 801b25e:	d11e      	bne.n	801b29e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	695b      	ldr	r3, [r3, #20]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d009      	beq.n	801b27c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	015a      	lsls	r2, r3, #5
 801b26c:	697b      	ldr	r3, [r7, #20]
 801b26e:	4413      	add	r3, r2
 801b270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b274:	461a      	mov	r2, r3
 801b276:	68bb      	ldr	r3, [r7, #8]
 801b278:	695b      	ldr	r3, [r3, #20]
 801b27a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b27c:	693b      	ldr	r3, [r7, #16]
 801b27e:	015a      	lsls	r2, r3, #5
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	4413      	add	r3, r2
 801b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	693a      	ldr	r2, [r7, #16]
 801b28c:	0151      	lsls	r1, r2, #5
 801b28e:	697a      	ldr	r2, [r7, #20]
 801b290:	440a      	add	r2, r1
 801b292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b29a:	6013      	str	r3, [r2, #0]
 801b29c:	e097      	b.n	801b3ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b29e:	693b      	ldr	r3, [r7, #16]
 801b2a0:	015a      	lsls	r2, r3, #5
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	693a      	ldr	r2, [r7, #16]
 801b2ae:	0151      	lsls	r1, r2, #5
 801b2b0:	697a      	ldr	r2, [r7, #20]
 801b2b2:	440a      	add	r2, r1
 801b2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b2b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b2bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801b2be:	68bb      	ldr	r3, [r7, #8]
 801b2c0:	699b      	ldr	r3, [r3, #24]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	f000 8083 	beq.w	801b3ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b2c8:	697b      	ldr	r3, [r7, #20]
 801b2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	781b      	ldrb	r3, [r3, #0]
 801b2d4:	f003 030f 	and.w	r3, r3, #15
 801b2d8:	2101      	movs	r1, #1
 801b2da:	fa01 f303 	lsl.w	r3, r1, r3
 801b2de:	6979      	ldr	r1, [r7, #20]
 801b2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b2e4:	4313      	orrs	r3, r2
 801b2e6:	634b      	str	r3, [r1, #52]	; 0x34
 801b2e8:	e071      	b.n	801b3ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	015a      	lsls	r2, r3, #5
 801b2ee:	697b      	ldr	r3, [r7, #20]
 801b2f0:	4413      	add	r3, r2
 801b2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b2f6:	691b      	ldr	r3, [r3, #16]
 801b2f8:	693a      	ldr	r2, [r7, #16]
 801b2fa:	0151      	lsls	r1, r2, #5
 801b2fc:	697a      	ldr	r2, [r7, #20]
 801b2fe:	440a      	add	r2, r1
 801b300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b304:	0cdb      	lsrs	r3, r3, #19
 801b306:	04db      	lsls	r3, r3, #19
 801b308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b30a:	693b      	ldr	r3, [r7, #16]
 801b30c:	015a      	lsls	r2, r3, #5
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	4413      	add	r3, r2
 801b312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b316:	691b      	ldr	r3, [r3, #16]
 801b318:	693a      	ldr	r2, [r7, #16]
 801b31a:	0151      	lsls	r1, r2, #5
 801b31c:	697a      	ldr	r2, [r7, #20]
 801b31e:	440a      	add	r2, r1
 801b320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801b328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801b32c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	699b      	ldr	r3, [r3, #24]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d003      	beq.n	801b33e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801b336:	68bb      	ldr	r3, [r7, #8]
 801b338:	68da      	ldr	r2, [r3, #12]
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	68da      	ldr	r2, [r3, #12]
 801b342:	68bb      	ldr	r3, [r7, #8]
 801b344:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b346:	693b      	ldr	r3, [r7, #16]
 801b348:	015a      	lsls	r2, r3, #5
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	4413      	add	r3, r2
 801b34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b352:	691b      	ldr	r3, [r3, #16]
 801b354:	693a      	ldr	r2, [r7, #16]
 801b356:	0151      	lsls	r1, r2, #5
 801b358:	697a      	ldr	r2, [r7, #20]
 801b35a:	440a      	add	r2, r1
 801b35c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b364:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801b366:	693b      	ldr	r3, [r7, #16]
 801b368:	015a      	lsls	r2, r3, #5
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	4413      	add	r3, r2
 801b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b372:	691a      	ldr	r2, [r3, #16]
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	69db      	ldr	r3, [r3, #28]
 801b378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b37c:	6939      	ldr	r1, [r7, #16]
 801b37e:	0148      	lsls	r0, r1, #5
 801b380:	6979      	ldr	r1, [r7, #20]
 801b382:	4401      	add	r1, r0
 801b384:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b388:	4313      	orrs	r3, r2
 801b38a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801b38c:	79fb      	ldrb	r3, [r7, #7]
 801b38e:	2b01      	cmp	r3, #1
 801b390:	d10d      	bne.n	801b3ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	691b      	ldr	r3, [r3, #16]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d009      	beq.n	801b3ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	6919      	ldr	r1, [r3, #16]
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	015a      	lsls	r2, r3, #5
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	4413      	add	r3, r2
 801b3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3aa:	460a      	mov	r2, r1
 801b3ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b3ae:	693b      	ldr	r3, [r7, #16]
 801b3b0:	015a      	lsls	r2, r3, #5
 801b3b2:	697b      	ldr	r3, [r7, #20]
 801b3b4:	4413      	add	r3, r2
 801b3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	693a      	ldr	r2, [r7, #16]
 801b3be:	0151      	lsls	r1, r2, #5
 801b3c0:	697a      	ldr	r2, [r7, #20]
 801b3c2:	440a      	add	r2, r1
 801b3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b3c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b3cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b3ce:	2300      	movs	r3, #0
}
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	371c      	adds	r7, #28
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3da:	4770      	bx	lr

0801b3dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b3dc:	b480      	push	{r7}
 801b3de:	b087      	sub	sp, #28
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	785b      	ldrb	r3, [r3, #1]
 801b3f6:	2b01      	cmp	r3, #1
 801b3f8:	d14a      	bne.n	801b490 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b3fa:	683b      	ldr	r3, [r7, #0]
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	015a      	lsls	r2, r3, #5
 801b400:	693b      	ldr	r3, [r7, #16]
 801b402:	4413      	add	r3, r2
 801b404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b40e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b412:	f040 8086 	bne.w	801b522 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	015a      	lsls	r2, r3, #5
 801b41c:	693b      	ldr	r3, [r7, #16]
 801b41e:	4413      	add	r3, r2
 801b420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	683a      	ldr	r2, [r7, #0]
 801b428:	7812      	ldrb	r2, [r2, #0]
 801b42a:	0151      	lsls	r1, r2, #5
 801b42c:	693a      	ldr	r2, [r7, #16]
 801b42e:	440a      	add	r2, r1
 801b430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b438:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	015a      	lsls	r2, r3, #5
 801b440:	693b      	ldr	r3, [r7, #16]
 801b442:	4413      	add	r3, r2
 801b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	683a      	ldr	r2, [r7, #0]
 801b44c:	7812      	ldrb	r2, [r2, #0]
 801b44e:	0151      	lsls	r1, r2, #5
 801b450:	693a      	ldr	r2, [r7, #16]
 801b452:	440a      	add	r2, r1
 801b454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b45c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	3301      	adds	r3, #1
 801b462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	f242 7210 	movw	r2, #10000	; 0x2710
 801b46a:	4293      	cmp	r3, r2
 801b46c:	d902      	bls.n	801b474 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801b46e:	2301      	movs	r3, #1
 801b470:	75fb      	strb	r3, [r7, #23]
          break;
 801b472:	e056      	b.n	801b522 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	781b      	ldrb	r3, [r3, #0]
 801b478:	015a      	lsls	r2, r3, #5
 801b47a:	693b      	ldr	r3, [r7, #16]
 801b47c:	4413      	add	r3, r2
 801b47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b48c:	d0e7      	beq.n	801b45e <USB_EPStopXfer+0x82>
 801b48e:	e048      	b.n	801b522 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	781b      	ldrb	r3, [r3, #0]
 801b494:	015a      	lsls	r2, r3, #5
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	4413      	add	r3, r2
 801b49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b4a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b4a8:	d13b      	bne.n	801b522 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	781b      	ldrb	r3, [r3, #0]
 801b4ae:	015a      	lsls	r2, r3, #5
 801b4b0:	693b      	ldr	r3, [r7, #16]
 801b4b2:	4413      	add	r3, r2
 801b4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	683a      	ldr	r2, [r7, #0]
 801b4bc:	7812      	ldrb	r2, [r2, #0]
 801b4be:	0151      	lsls	r1, r2, #5
 801b4c0:	693a      	ldr	r2, [r7, #16]
 801b4c2:	440a      	add	r2, r1
 801b4c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b4c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801b4cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801b4ce:	683b      	ldr	r3, [r7, #0]
 801b4d0:	781b      	ldrb	r3, [r3, #0]
 801b4d2:	015a      	lsls	r2, r3, #5
 801b4d4:	693b      	ldr	r3, [r7, #16]
 801b4d6:	4413      	add	r3, r2
 801b4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	683a      	ldr	r2, [r7, #0]
 801b4e0:	7812      	ldrb	r2, [r2, #0]
 801b4e2:	0151      	lsls	r1, r2, #5
 801b4e4:	693a      	ldr	r2, [r7, #16]
 801b4e6:	440a      	add	r2, r1
 801b4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b4ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b4f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	3301      	adds	r3, #1
 801b4f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	f242 7210 	movw	r2, #10000	; 0x2710
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d902      	bls.n	801b508 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801b502:	2301      	movs	r3, #1
 801b504:	75fb      	strb	r3, [r7, #23]
          break;
 801b506:	e00c      	b.n	801b522 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	015a      	lsls	r2, r3, #5
 801b50e:	693b      	ldr	r3, [r7, #16]
 801b510:	4413      	add	r3, r2
 801b512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b51c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b520:	d0e7      	beq.n	801b4f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801b522:	7dfb      	ldrb	r3, [r7, #23]
}
 801b524:	4618      	mov	r0, r3
 801b526:	371c      	adds	r7, #28
 801b528:	46bd      	mov	sp, r7
 801b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52e:	4770      	bx	lr

0801b530 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801b530:	b480      	push	{r7}
 801b532:	b089      	sub	sp, #36	; 0x24
 801b534:	af00      	add	r7, sp, #0
 801b536:	60f8      	str	r0, [r7, #12]
 801b538:	60b9      	str	r1, [r7, #8]
 801b53a:	4611      	mov	r1, r2
 801b53c:	461a      	mov	r2, r3
 801b53e:	460b      	mov	r3, r1
 801b540:	71fb      	strb	r3, [r7, #7]
 801b542:	4613      	mov	r3, r2
 801b544:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801b54a:	68bb      	ldr	r3, [r7, #8]
 801b54c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801b54e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b552:	2b00      	cmp	r3, #0
 801b554:	d123      	bne.n	801b59e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801b556:	88bb      	ldrh	r3, [r7, #4]
 801b558:	3303      	adds	r3, #3
 801b55a:	089b      	lsrs	r3, r3, #2
 801b55c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801b55e:	2300      	movs	r3, #0
 801b560:	61bb      	str	r3, [r7, #24]
 801b562:	e018      	b.n	801b596 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801b564:	79fb      	ldrb	r3, [r7, #7]
 801b566:	031a      	lsls	r2, r3, #12
 801b568:	697b      	ldr	r3, [r7, #20]
 801b56a:	4413      	add	r3, r2
 801b56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b570:	461a      	mov	r2, r3
 801b572:	69fb      	ldr	r3, [r7, #28]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	6013      	str	r3, [r2, #0]
      pSrc++;
 801b578:	69fb      	ldr	r3, [r7, #28]
 801b57a:	3301      	adds	r3, #1
 801b57c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801b57e:	69fb      	ldr	r3, [r7, #28]
 801b580:	3301      	adds	r3, #1
 801b582:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	3301      	adds	r3, #1
 801b588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801b58a:	69fb      	ldr	r3, [r7, #28]
 801b58c:	3301      	adds	r3, #1
 801b58e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801b590:	69bb      	ldr	r3, [r7, #24]
 801b592:	3301      	adds	r3, #1
 801b594:	61bb      	str	r3, [r7, #24]
 801b596:	69ba      	ldr	r2, [r7, #24]
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d3e2      	bcc.n	801b564 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801b59e:	2300      	movs	r3, #0
}
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	3724      	adds	r7, #36	; 0x24
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5aa:	4770      	bx	lr

0801b5ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801b5ac:	b480      	push	{r7}
 801b5ae:	b08b      	sub	sp, #44	; 0x2c
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	60f8      	str	r0, [r7, #12]
 801b5b4:	60b9      	str	r1, [r7, #8]
 801b5b6:	4613      	mov	r3, r2
 801b5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801b5c2:	88fb      	ldrh	r3, [r7, #6]
 801b5c4:	089b      	lsrs	r3, r3, #2
 801b5c6:	b29b      	uxth	r3, r3
 801b5c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801b5ca:	88fb      	ldrh	r3, [r7, #6]
 801b5cc:	f003 0303 	and.w	r3, r3, #3
 801b5d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	623b      	str	r3, [r7, #32]
 801b5d6:	e014      	b.n	801b602 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801b5d8:	69bb      	ldr	r3, [r7, #24]
 801b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b5de:	681a      	ldr	r2, [r3, #0]
 801b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e2:	601a      	str	r2, [r3, #0]
    pDest++;
 801b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e6:	3301      	adds	r3, #1
 801b5e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5f2:	3301      	adds	r3, #1
 801b5f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5f8:	3301      	adds	r3, #1
 801b5fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801b5fc:	6a3b      	ldr	r3, [r7, #32]
 801b5fe:	3301      	adds	r3, #1
 801b600:	623b      	str	r3, [r7, #32]
 801b602:	6a3a      	ldr	r2, [r7, #32]
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	429a      	cmp	r2, r3
 801b608:	d3e6      	bcc.n	801b5d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801b60a:	8bfb      	ldrh	r3, [r7, #30]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d01e      	beq.n	801b64e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801b610:	2300      	movs	r3, #0
 801b612:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801b614:	69bb      	ldr	r3, [r7, #24]
 801b616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b61a:	461a      	mov	r2, r3
 801b61c:	f107 0310 	add.w	r3, r7, #16
 801b620:	6812      	ldr	r2, [r2, #0]
 801b622:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801b624:	693a      	ldr	r2, [r7, #16]
 801b626:	6a3b      	ldr	r3, [r7, #32]
 801b628:	b2db      	uxtb	r3, r3
 801b62a:	00db      	lsls	r3, r3, #3
 801b62c:	fa22 f303 	lsr.w	r3, r2, r3
 801b630:	b2da      	uxtb	r2, r3
 801b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b634:	701a      	strb	r2, [r3, #0]
      i++;
 801b636:	6a3b      	ldr	r3, [r7, #32]
 801b638:	3301      	adds	r3, #1
 801b63a:	623b      	str	r3, [r7, #32]
      pDest++;
 801b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b63e:	3301      	adds	r3, #1
 801b640:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801b642:	8bfb      	ldrh	r3, [r7, #30]
 801b644:	3b01      	subs	r3, #1
 801b646:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801b648:	8bfb      	ldrh	r3, [r7, #30]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d1ea      	bne.n	801b624 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b650:	4618      	mov	r0, r3
 801b652:	372c      	adds	r7, #44	; 0x2c
 801b654:	46bd      	mov	sp, r7
 801b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65a:	4770      	bx	lr

0801b65c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b65c:	b480      	push	{r7}
 801b65e:	b085      	sub	sp, #20
 801b660:	af00      	add	r7, sp, #0
 801b662:	6078      	str	r0, [r7, #4]
 801b664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b66a:	683b      	ldr	r3, [r7, #0]
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b670:	683b      	ldr	r3, [r7, #0]
 801b672:	785b      	ldrb	r3, [r3, #1]
 801b674:	2b01      	cmp	r3, #1
 801b676:	d12c      	bne.n	801b6d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	015a      	lsls	r2, r3, #5
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	4413      	add	r3, r2
 801b680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	2b00      	cmp	r3, #0
 801b688:	db12      	blt.n	801b6b0 <USB_EPSetStall+0x54>
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d00f      	beq.n	801b6b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	015a      	lsls	r2, r3, #5
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	4413      	add	r3, r2
 801b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	68ba      	ldr	r2, [r7, #8]
 801b6a0:	0151      	lsls	r1, r2, #5
 801b6a2:	68fa      	ldr	r2, [r7, #12]
 801b6a4:	440a      	add	r2, r1
 801b6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b6aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801b6ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	015a      	lsls	r2, r3, #5
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	4413      	add	r3, r2
 801b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	68ba      	ldr	r2, [r7, #8]
 801b6c0:	0151      	lsls	r1, r2, #5
 801b6c2:	68fa      	ldr	r2, [r7, #12]
 801b6c4:	440a      	add	r2, r1
 801b6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b6ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b6ce:	6013      	str	r3, [r2, #0]
 801b6d0:	e02b      	b.n	801b72a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801b6d2:	68bb      	ldr	r3, [r7, #8]
 801b6d4:	015a      	lsls	r2, r3, #5
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	4413      	add	r3, r2
 801b6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	db12      	blt.n	801b70a <USB_EPSetStall+0xae>
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d00f      	beq.n	801b70a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	015a      	lsls	r2, r3, #5
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	4413      	add	r3, r2
 801b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	68ba      	ldr	r2, [r7, #8]
 801b6fa:	0151      	lsls	r1, r2, #5
 801b6fc:	68fa      	ldr	r2, [r7, #12]
 801b6fe:	440a      	add	r2, r1
 801b700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b704:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801b708:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	015a      	lsls	r2, r3, #5
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	4413      	add	r3, r2
 801b712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	68ba      	ldr	r2, [r7, #8]
 801b71a:	0151      	lsls	r1, r2, #5
 801b71c:	68fa      	ldr	r2, [r7, #12]
 801b71e:	440a      	add	r2, r1
 801b720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b72a:	2300      	movs	r3, #0
}
 801b72c:	4618      	mov	r0, r3
 801b72e:	3714      	adds	r7, #20
 801b730:	46bd      	mov	sp, r7
 801b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b736:	4770      	bx	lr

0801b738 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b738:	b480      	push	{r7}
 801b73a:	b085      	sub	sp, #20
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
 801b740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b746:	683b      	ldr	r3, [r7, #0]
 801b748:	781b      	ldrb	r3, [r3, #0]
 801b74a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	785b      	ldrb	r3, [r3, #1]
 801b750:	2b01      	cmp	r3, #1
 801b752:	d128      	bne.n	801b7a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	015a      	lsls	r2, r3, #5
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	4413      	add	r3, r2
 801b75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	68ba      	ldr	r2, [r7, #8]
 801b764:	0151      	lsls	r1, r2, #5
 801b766:	68fa      	ldr	r2, [r7, #12]
 801b768:	440a      	add	r2, r1
 801b76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801b772:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	791b      	ldrb	r3, [r3, #4]
 801b778:	2b03      	cmp	r3, #3
 801b77a:	d003      	beq.n	801b784 <USB_EPClearStall+0x4c>
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	791b      	ldrb	r3, [r3, #4]
 801b780:	2b02      	cmp	r3, #2
 801b782:	d138      	bne.n	801b7f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	015a      	lsls	r2, r3, #5
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	4413      	add	r3, r2
 801b78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	68ba      	ldr	r2, [r7, #8]
 801b794:	0151      	lsls	r1, r2, #5
 801b796:	68fa      	ldr	r2, [r7, #12]
 801b798:	440a      	add	r2, r1
 801b79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b79e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b7a2:	6013      	str	r3, [r2, #0]
 801b7a4:	e027      	b.n	801b7f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801b7a6:	68bb      	ldr	r3, [r7, #8]
 801b7a8:	015a      	lsls	r2, r3, #5
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	4413      	add	r3, r2
 801b7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	68ba      	ldr	r2, [r7, #8]
 801b7b6:	0151      	lsls	r1, r2, #5
 801b7b8:	68fa      	ldr	r2, [r7, #12]
 801b7ba:	440a      	add	r2, r1
 801b7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b7c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801b7c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	791b      	ldrb	r3, [r3, #4]
 801b7ca:	2b03      	cmp	r3, #3
 801b7cc:	d003      	beq.n	801b7d6 <USB_EPClearStall+0x9e>
 801b7ce:	683b      	ldr	r3, [r7, #0]
 801b7d0:	791b      	ldrb	r3, [r3, #4]
 801b7d2:	2b02      	cmp	r3, #2
 801b7d4:	d10f      	bne.n	801b7f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	015a      	lsls	r2, r3, #5
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	4413      	add	r3, r2
 801b7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	68ba      	ldr	r2, [r7, #8]
 801b7e6:	0151      	lsls	r1, r2, #5
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	440a      	add	r2, r1
 801b7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b7f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801b7f6:	2300      	movs	r3, #0
}
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	3714      	adds	r7, #20
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b802:	4770      	bx	lr

0801b804 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801b804:	b480      	push	{r7}
 801b806:	b085      	sub	sp, #20
 801b808:	af00      	add	r7, sp, #0
 801b80a:	6078      	str	r0, [r7, #4]
 801b80c:	460b      	mov	r3, r1
 801b80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	68fa      	ldr	r2, [r7, #12]
 801b81e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b822:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801b826:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b82e:	681a      	ldr	r2, [r3, #0]
 801b830:	78fb      	ldrb	r3, [r7, #3]
 801b832:	011b      	lsls	r3, r3, #4
 801b834:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801b838:	68f9      	ldr	r1, [r7, #12]
 801b83a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b83e:	4313      	orrs	r3, r2
 801b840:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801b842:	2300      	movs	r3, #0
}
 801b844:	4618      	mov	r0, r3
 801b846:	3714      	adds	r7, #20
 801b848:	46bd      	mov	sp, r7
 801b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84e:	4770      	bx	lr

0801b850 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801b850:	b480      	push	{r7}
 801b852:	b085      	sub	sp, #20
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	68fa      	ldr	r2, [r7, #12]
 801b866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b86a:	f023 0303 	bic.w	r3, r3, #3
 801b86e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b876:	685b      	ldr	r3, [r3, #4]
 801b878:	68fa      	ldr	r2, [r7, #12]
 801b87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b87e:	f023 0302 	bic.w	r3, r3, #2
 801b882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801b884:	2300      	movs	r3, #0
}
 801b886:	4618      	mov	r0, r3
 801b888:	3714      	adds	r7, #20
 801b88a:	46bd      	mov	sp, r7
 801b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b890:	4770      	bx	lr

0801b892 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801b892:	b480      	push	{r7}
 801b894:	b085      	sub	sp, #20
 801b896:	af00      	add	r7, sp, #0
 801b898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	68fa      	ldr	r2, [r7, #12]
 801b8a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b8ac:	f023 0303 	bic.w	r3, r3, #3
 801b8b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b8b8:	685b      	ldr	r3, [r3, #4]
 801b8ba:	68fa      	ldr	r2, [r7, #12]
 801b8bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b8c0:	f043 0302 	orr.w	r3, r3, #2
 801b8c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801b8c6:	2300      	movs	r3, #0
}
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	3714      	adds	r7, #20
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d2:	4770      	bx	lr

0801b8d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801b8d4:	b480      	push	{r7}
 801b8d6:	b085      	sub	sp, #20
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	695b      	ldr	r3, [r3, #20]
 801b8e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	699b      	ldr	r3, [r3, #24]
 801b8e6:	68fa      	ldr	r2, [r7, #12]
 801b8e8:	4013      	ands	r3, r2
 801b8ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801b8ec:	68fb      	ldr	r3, [r7, #12]
}
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	3714      	adds	r7, #20
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f8:	4770      	bx	lr

0801b8fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801b8fa:	b480      	push	{r7}
 801b8fc:	b085      	sub	sp, #20
 801b8fe:	af00      	add	r7, sp, #0
 801b900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b90c:	699b      	ldr	r3, [r3, #24]
 801b90e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b916:	69db      	ldr	r3, [r3, #28]
 801b918:	68ba      	ldr	r2, [r7, #8]
 801b91a:	4013      	ands	r3, r2
 801b91c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	0c1b      	lsrs	r3, r3, #16
}
 801b922:	4618      	mov	r0, r3
 801b924:	3714      	adds	r7, #20
 801b926:	46bd      	mov	sp, r7
 801b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92c:	4770      	bx	lr

0801b92e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801b92e:	b480      	push	{r7}
 801b930:	b085      	sub	sp, #20
 801b932:	af00      	add	r7, sp, #0
 801b934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b940:	699b      	ldr	r3, [r3, #24]
 801b942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b94a:	69db      	ldr	r3, [r3, #28]
 801b94c:	68ba      	ldr	r2, [r7, #8]
 801b94e:	4013      	ands	r3, r2
 801b950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	b29b      	uxth	r3, r3
}
 801b956:	4618      	mov	r0, r3
 801b958:	3714      	adds	r7, #20
 801b95a:	46bd      	mov	sp, r7
 801b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b960:	4770      	bx	lr

0801b962 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801b962:	b480      	push	{r7}
 801b964:	b085      	sub	sp, #20
 801b966:	af00      	add	r7, sp, #0
 801b968:	6078      	str	r0, [r7, #4]
 801b96a:	460b      	mov	r3, r1
 801b96c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801b972:	78fb      	ldrb	r3, [r7, #3]
 801b974:	015a      	lsls	r2, r3, #5
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	4413      	add	r3, r2
 801b97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b97e:	689b      	ldr	r3, [r3, #8]
 801b980:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b988:	695b      	ldr	r3, [r3, #20]
 801b98a:	68ba      	ldr	r2, [r7, #8]
 801b98c:	4013      	ands	r3, r2
 801b98e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801b990:	68bb      	ldr	r3, [r7, #8]
}
 801b992:	4618      	mov	r0, r3
 801b994:	3714      	adds	r7, #20
 801b996:	46bd      	mov	sp, r7
 801b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99c:	4770      	bx	lr

0801b99e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801b99e:	b480      	push	{r7}
 801b9a0:	b087      	sub	sp, #28
 801b9a2:	af00      	add	r7, sp, #0
 801b9a4:	6078      	str	r0, [r7, #4]
 801b9a6:	460b      	mov	r3, r1
 801b9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801b9ae:	697b      	ldr	r3, [r7, #20]
 801b9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b9b4:	691b      	ldr	r3, [r3, #16]
 801b9b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801b9c2:	78fb      	ldrb	r3, [r7, #3]
 801b9c4:	f003 030f 	and.w	r3, r3, #15
 801b9c8:	68fa      	ldr	r2, [r7, #12]
 801b9ca:	fa22 f303 	lsr.w	r3, r2, r3
 801b9ce:	01db      	lsls	r3, r3, #7
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	693a      	ldr	r2, [r7, #16]
 801b9d4:	4313      	orrs	r3, r2
 801b9d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801b9d8:	78fb      	ldrb	r3, [r7, #3]
 801b9da:	015a      	lsls	r2, r3, #5
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	4413      	add	r3, r2
 801b9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9e4:	689b      	ldr	r3, [r3, #8]
 801b9e6:	693a      	ldr	r2, [r7, #16]
 801b9e8:	4013      	ands	r3, r2
 801b9ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801b9ec:	68bb      	ldr	r3, [r7, #8]
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	371c      	adds	r7, #28
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f8:	4770      	bx	lr

0801b9fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801b9fa:	b480      	push	{r7}
 801b9fc:	b083      	sub	sp, #12
 801b9fe:	af00      	add	r7, sp, #0
 801ba00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	695b      	ldr	r3, [r3, #20]
 801ba06:	f003 0301 	and.w	r3, r3, #1
}
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	370c      	adds	r7, #12
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba14:	4770      	bx	lr

0801ba16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801ba16:	b480      	push	{r7}
 801ba18:	b085      	sub	sp, #20
 801ba1a:	af00      	add	r7, sp, #0
 801ba1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	68fa      	ldr	r2, [r7, #12]
 801ba2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ba34:	f023 0307 	bic.w	r3, r3, #7
 801ba38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	68fa      	ldr	r2, [r7, #12]
 801ba44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ba48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ba4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801ba4e:	2300      	movs	r3, #0
}
 801ba50:	4618      	mov	r0, r3
 801ba52:	3714      	adds	r7, #20
 801ba54:	46bd      	mov	sp, r7
 801ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5a:	4770      	bx	lr

0801ba5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801ba5c:	b480      	push	{r7}
 801ba5e:	b087      	sub	sp, #28
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	60f8      	str	r0, [r7, #12]
 801ba64:	460b      	mov	r3, r1
 801ba66:	607a      	str	r2, [r7, #4]
 801ba68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	333c      	adds	r3, #60	; 0x3c
 801ba72:	3304      	adds	r3, #4
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801ba78:	693b      	ldr	r3, [r7, #16]
 801ba7a:	4a26      	ldr	r2, [pc, #152]	; (801bb14 <USB_EP0_OutStart+0xb8>)
 801ba7c:	4293      	cmp	r3, r2
 801ba7e:	d90a      	bls.n	801ba96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ba80:	697b      	ldr	r3, [r7, #20]
 801ba82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ba8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ba90:	d101      	bne.n	801ba96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801ba92:	2300      	movs	r3, #0
 801ba94:	e037      	b.n	801bb06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba9c:	461a      	mov	r2, r3
 801ba9e:	2300      	movs	r3, #0
 801baa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801baa2:	697b      	ldr	r3, [r7, #20]
 801baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801baa8:	691b      	ldr	r3, [r3, #16]
 801baaa:	697a      	ldr	r2, [r7, #20]
 801baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801babc:	691b      	ldr	r3, [r3, #16]
 801babe:	697a      	ldr	r2, [r7, #20]
 801bac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bac4:	f043 0318 	orr.w	r3, r3, #24
 801bac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bad0:	691b      	ldr	r3, [r3, #16]
 801bad2:	697a      	ldr	r2, [r7, #20]
 801bad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bad8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801badc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801bade:	7afb      	ldrb	r3, [r7, #11]
 801bae0:	2b01      	cmp	r3, #1
 801bae2:	d10f      	bne.n	801bb04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801baea:	461a      	mov	r2, r3
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801baf0:	697b      	ldr	r3, [r7, #20]
 801baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	697a      	ldr	r2, [r7, #20]
 801bafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bafe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801bb02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bb04:	2300      	movs	r3, #0
}
 801bb06:	4618      	mov	r0, r3
 801bb08:	371c      	adds	r7, #28
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb10:	4770      	bx	lr
 801bb12:	bf00      	nop
 801bb14:	4f54300a 	.word	0x4f54300a

0801bb18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801bb18:	b480      	push	{r7}
 801bb1a:	b085      	sub	sp, #20
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801bb20:	2300      	movs	r3, #0
 801bb22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	3301      	adds	r3, #1
 801bb28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	4a13      	ldr	r2, [pc, #76]	; (801bb7c <USB_CoreReset+0x64>)
 801bb2e:	4293      	cmp	r3, r2
 801bb30:	d901      	bls.n	801bb36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801bb32:	2303      	movs	r3, #3
 801bb34:	e01b      	b.n	801bb6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	691b      	ldr	r3, [r3, #16]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	daf2      	bge.n	801bb24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801bb3e:	2300      	movs	r3, #0
 801bb40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	691b      	ldr	r3, [r3, #16]
 801bb46:	f043 0201 	orr.w	r2, r3, #1
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	3301      	adds	r3, #1
 801bb52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	4a09      	ldr	r2, [pc, #36]	; (801bb7c <USB_CoreReset+0x64>)
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d901      	bls.n	801bb60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801bb5c:	2303      	movs	r3, #3
 801bb5e:	e006      	b.n	801bb6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	691b      	ldr	r3, [r3, #16]
 801bb64:	f003 0301 	and.w	r3, r3, #1
 801bb68:	2b01      	cmp	r3, #1
 801bb6a:	d0f0      	beq.n	801bb4e <USB_CoreReset+0x36>

  return HAL_OK;
 801bb6c:	2300      	movs	r3, #0
}
 801bb6e:	4618      	mov	r0, r3
 801bb70:	3714      	adds	r7, #20
 801bb72:	46bd      	mov	sp, r7
 801bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb78:	4770      	bx	lr
 801bb7a:	bf00      	nop
 801bb7c:	00030d40 	.word	0x00030d40

0801bb80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b084      	sub	sp, #16
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
 801bb88:	460b      	mov	r3, r1
 801bb8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801bb8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801bb90:	f002 fc1e 	bl	801e3d0 <USBD_static_malloc>
 801bb94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d109      	bne.n	801bbb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	32b0      	adds	r2, #176	; 0xb0
 801bba6:	2100      	movs	r1, #0
 801bba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801bbac:	2302      	movs	r3, #2
 801bbae:	e0d4      	b.n	801bd5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801bbb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	68f8      	ldr	r0, [r7, #12]
 801bbb8:	f005 f83c 	bl	8020c34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	32b0      	adds	r2, #176	; 0xb0
 801bbc6:	68f9      	ldr	r1, [r7, #12]
 801bbc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	32b0      	adds	r2, #176	; 0xb0
 801bbd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	7c1b      	ldrb	r3, [r3, #16]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d138      	bne.n	801bc5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801bbe8:	4b5e      	ldr	r3, [pc, #376]	; (801bd64 <USBD_CDC_Init+0x1e4>)
 801bbea:	7819      	ldrb	r1, [r3, #0]
 801bbec:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bbf0:	2202      	movs	r2, #2
 801bbf2:	6878      	ldr	r0, [r7, #4]
 801bbf4:	f002 fac9 	bl	801e18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801bbf8:	4b5a      	ldr	r3, [pc, #360]	; (801bd64 <USBD_CDC_Init+0x1e4>)
 801bbfa:	781b      	ldrb	r3, [r3, #0]
 801bbfc:	f003 020f 	and.w	r2, r3, #15
 801bc00:	6879      	ldr	r1, [r7, #4]
 801bc02:	4613      	mov	r3, r2
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	4413      	add	r3, r2
 801bc08:	009b      	lsls	r3, r3, #2
 801bc0a:	440b      	add	r3, r1
 801bc0c:	3324      	adds	r3, #36	; 0x24
 801bc0e:	2201      	movs	r2, #1
 801bc10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801bc12:	4b55      	ldr	r3, [pc, #340]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bc14:	7819      	ldrb	r1, [r3, #0]
 801bc16:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bc1a:	2202      	movs	r2, #2
 801bc1c:	6878      	ldr	r0, [r7, #4]
 801bc1e:	f002 fab4 	bl	801e18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801bc22:	4b51      	ldr	r3, [pc, #324]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bc24:	781b      	ldrb	r3, [r3, #0]
 801bc26:	f003 020f 	and.w	r2, r3, #15
 801bc2a:	6879      	ldr	r1, [r7, #4]
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	009b      	lsls	r3, r3, #2
 801bc30:	4413      	add	r3, r2
 801bc32:	009b      	lsls	r3, r3, #2
 801bc34:	440b      	add	r3, r1
 801bc36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801bc3a:	2201      	movs	r2, #1
 801bc3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801bc3e:	4b4b      	ldr	r3, [pc, #300]	; (801bd6c <USBD_CDC_Init+0x1ec>)
 801bc40:	781b      	ldrb	r3, [r3, #0]
 801bc42:	f003 020f 	and.w	r2, r3, #15
 801bc46:	6879      	ldr	r1, [r7, #4]
 801bc48:	4613      	mov	r3, r2
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	4413      	add	r3, r2
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	440b      	add	r3, r1
 801bc52:	3326      	adds	r3, #38	; 0x26
 801bc54:	2210      	movs	r2, #16
 801bc56:	801a      	strh	r2, [r3, #0]
 801bc58:	e035      	b.n	801bcc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801bc5a:	4b42      	ldr	r3, [pc, #264]	; (801bd64 <USBD_CDC_Init+0x1e4>)
 801bc5c:	7819      	ldrb	r1, [r3, #0]
 801bc5e:	2340      	movs	r3, #64	; 0x40
 801bc60:	2202      	movs	r2, #2
 801bc62:	6878      	ldr	r0, [r7, #4]
 801bc64:	f002 fa91 	bl	801e18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801bc68:	4b3e      	ldr	r3, [pc, #248]	; (801bd64 <USBD_CDC_Init+0x1e4>)
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	f003 020f 	and.w	r2, r3, #15
 801bc70:	6879      	ldr	r1, [r7, #4]
 801bc72:	4613      	mov	r3, r2
 801bc74:	009b      	lsls	r3, r3, #2
 801bc76:	4413      	add	r3, r2
 801bc78:	009b      	lsls	r3, r3, #2
 801bc7a:	440b      	add	r3, r1
 801bc7c:	3324      	adds	r3, #36	; 0x24
 801bc7e:	2201      	movs	r2, #1
 801bc80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801bc82:	4b39      	ldr	r3, [pc, #228]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bc84:	7819      	ldrb	r1, [r3, #0]
 801bc86:	2340      	movs	r3, #64	; 0x40
 801bc88:	2202      	movs	r2, #2
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f002 fa7d 	bl	801e18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801bc90:	4b35      	ldr	r3, [pc, #212]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	f003 020f 	and.w	r2, r3, #15
 801bc98:	6879      	ldr	r1, [r7, #4]
 801bc9a:	4613      	mov	r3, r2
 801bc9c:	009b      	lsls	r3, r3, #2
 801bc9e:	4413      	add	r3, r2
 801bca0:	009b      	lsls	r3, r3, #2
 801bca2:	440b      	add	r3, r1
 801bca4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801bca8:	2201      	movs	r2, #1
 801bcaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801bcac:	4b2f      	ldr	r3, [pc, #188]	; (801bd6c <USBD_CDC_Init+0x1ec>)
 801bcae:	781b      	ldrb	r3, [r3, #0]
 801bcb0:	f003 020f 	and.w	r2, r3, #15
 801bcb4:	6879      	ldr	r1, [r7, #4]
 801bcb6:	4613      	mov	r3, r2
 801bcb8:	009b      	lsls	r3, r3, #2
 801bcba:	4413      	add	r3, r2
 801bcbc:	009b      	lsls	r3, r3, #2
 801bcbe:	440b      	add	r3, r1
 801bcc0:	3326      	adds	r3, #38	; 0x26
 801bcc2:	2210      	movs	r2, #16
 801bcc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801bcc6:	4b29      	ldr	r3, [pc, #164]	; (801bd6c <USBD_CDC_Init+0x1ec>)
 801bcc8:	7819      	ldrb	r1, [r3, #0]
 801bcca:	2308      	movs	r3, #8
 801bccc:	2203      	movs	r2, #3
 801bcce:	6878      	ldr	r0, [r7, #4]
 801bcd0:	f002 fa5b 	bl	801e18a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801bcd4:	4b25      	ldr	r3, [pc, #148]	; (801bd6c <USBD_CDC_Init+0x1ec>)
 801bcd6:	781b      	ldrb	r3, [r3, #0]
 801bcd8:	f003 020f 	and.w	r2, r3, #15
 801bcdc:	6879      	ldr	r1, [r7, #4]
 801bcde:	4613      	mov	r3, r2
 801bce0:	009b      	lsls	r3, r3, #2
 801bce2:	4413      	add	r3, r2
 801bce4:	009b      	lsls	r3, r3, #2
 801bce6:	440b      	add	r3, r1
 801bce8:	3324      	adds	r3, #36	; 0x24
 801bcea:	2201      	movs	r2, #1
 801bcec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801bcfc:	687a      	ldr	r2, [r7, #4]
 801bcfe:	33b0      	adds	r3, #176	; 0xb0
 801bd00:	009b      	lsls	r3, r3, #2
 801bd02:	4413      	add	r3, r2
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	2200      	movs	r2, #0
 801bd0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	2200      	movs	r2, #0
 801bd16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d101      	bne.n	801bd28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801bd24:	2302      	movs	r3, #2
 801bd26:	e018      	b.n	801bd5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	7c1b      	ldrb	r3, [r3, #16]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d10a      	bne.n	801bd46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801bd30:	4b0d      	ldr	r3, [pc, #52]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bd32:	7819      	ldrb	r1, [r3, #0]
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bd3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bd3e:	6878      	ldr	r0, [r7, #4]
 801bd40:	f002 fb12 	bl	801e368 <USBD_LL_PrepareReceive>
 801bd44:	e008      	b.n	801bd58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801bd46:	4b08      	ldr	r3, [pc, #32]	; (801bd68 <USBD_CDC_Init+0x1e8>)
 801bd48:	7819      	ldrb	r1, [r3, #0]
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bd50:	2340      	movs	r3, #64	; 0x40
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f002 fb08 	bl	801e368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801bd58:	2300      	movs	r3, #0
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3710      	adds	r7, #16
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}
 801bd62:	bf00      	nop
 801bd64:	200000c7 	.word	0x200000c7
 801bd68:	200000c8 	.word	0x200000c8
 801bd6c:	200000c9 	.word	0x200000c9

0801bd70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
 801bd78:	460b      	mov	r3, r1
 801bd7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801bd7c:	4b3a      	ldr	r3, [pc, #232]	; (801be68 <USBD_CDC_DeInit+0xf8>)
 801bd7e:	781b      	ldrb	r3, [r3, #0]
 801bd80:	4619      	mov	r1, r3
 801bd82:	6878      	ldr	r0, [r7, #4]
 801bd84:	f002 fa27 	bl	801e1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801bd88:	4b37      	ldr	r3, [pc, #220]	; (801be68 <USBD_CDC_DeInit+0xf8>)
 801bd8a:	781b      	ldrb	r3, [r3, #0]
 801bd8c:	f003 020f 	and.w	r2, r3, #15
 801bd90:	6879      	ldr	r1, [r7, #4]
 801bd92:	4613      	mov	r3, r2
 801bd94:	009b      	lsls	r3, r3, #2
 801bd96:	4413      	add	r3, r2
 801bd98:	009b      	lsls	r3, r3, #2
 801bd9a:	440b      	add	r3, r1
 801bd9c:	3324      	adds	r3, #36	; 0x24
 801bd9e:	2200      	movs	r2, #0
 801bda0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801bda2:	4b32      	ldr	r3, [pc, #200]	; (801be6c <USBD_CDC_DeInit+0xfc>)
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	4619      	mov	r1, r3
 801bda8:	6878      	ldr	r0, [r7, #4]
 801bdaa:	f002 fa14 	bl	801e1d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801bdae:	4b2f      	ldr	r3, [pc, #188]	; (801be6c <USBD_CDC_DeInit+0xfc>)
 801bdb0:	781b      	ldrb	r3, [r3, #0]
 801bdb2:	f003 020f 	and.w	r2, r3, #15
 801bdb6:	6879      	ldr	r1, [r7, #4]
 801bdb8:	4613      	mov	r3, r2
 801bdba:	009b      	lsls	r3, r3, #2
 801bdbc:	4413      	add	r3, r2
 801bdbe:	009b      	lsls	r3, r3, #2
 801bdc0:	440b      	add	r3, r1
 801bdc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801bdc6:	2200      	movs	r2, #0
 801bdc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801bdca:	4b29      	ldr	r3, [pc, #164]	; (801be70 <USBD_CDC_DeInit+0x100>)
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	4619      	mov	r1, r3
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f002 fa00 	bl	801e1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801bdd6:	4b26      	ldr	r3, [pc, #152]	; (801be70 <USBD_CDC_DeInit+0x100>)
 801bdd8:	781b      	ldrb	r3, [r3, #0]
 801bdda:	f003 020f 	and.w	r2, r3, #15
 801bdde:	6879      	ldr	r1, [r7, #4]
 801bde0:	4613      	mov	r3, r2
 801bde2:	009b      	lsls	r3, r3, #2
 801bde4:	4413      	add	r3, r2
 801bde6:	009b      	lsls	r3, r3, #2
 801bde8:	440b      	add	r3, r1
 801bdea:	3324      	adds	r3, #36	; 0x24
 801bdec:	2200      	movs	r2, #0
 801bdee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801bdf0:	4b1f      	ldr	r3, [pc, #124]	; (801be70 <USBD_CDC_DeInit+0x100>)
 801bdf2:	781b      	ldrb	r3, [r3, #0]
 801bdf4:	f003 020f 	and.w	r2, r3, #15
 801bdf8:	6879      	ldr	r1, [r7, #4]
 801bdfa:	4613      	mov	r3, r2
 801bdfc:	009b      	lsls	r3, r3, #2
 801bdfe:	4413      	add	r3, r2
 801be00:	009b      	lsls	r3, r3, #2
 801be02:	440b      	add	r3, r1
 801be04:	3326      	adds	r3, #38	; 0x26
 801be06:	2200      	movs	r2, #0
 801be08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	32b0      	adds	r2, #176	; 0xb0
 801be14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d01f      	beq.n	801be5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801be22:	687a      	ldr	r2, [r7, #4]
 801be24:	33b0      	adds	r3, #176	; 0xb0
 801be26:	009b      	lsls	r3, r3, #2
 801be28:	4413      	add	r3, r2
 801be2a:	685b      	ldr	r3, [r3, #4]
 801be2c:	685b      	ldr	r3, [r3, #4]
 801be2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	32b0      	adds	r2, #176	; 0xb0
 801be3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be3e:	4618      	mov	r0, r3
 801be40:	f002 fad4 	bl	801e3ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	32b0      	adds	r2, #176	; 0xb0
 801be4e:	2100      	movs	r1, #0
 801be50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2200      	movs	r2, #0
 801be58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801be5c:	2300      	movs	r3, #0
}
 801be5e:	4618      	mov	r0, r3
 801be60:	3708      	adds	r7, #8
 801be62:	46bd      	mov	sp, r7
 801be64:	bd80      	pop	{r7, pc}
 801be66:	bf00      	nop
 801be68:	200000c7 	.word	0x200000c7
 801be6c:	200000c8 	.word	0x200000c8
 801be70:	200000c9 	.word	0x200000c9

0801be74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801be74:	b580      	push	{r7, lr}
 801be76:	b086      	sub	sp, #24
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	32b0      	adds	r2, #176	; 0xb0
 801be88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801be8e:	2300      	movs	r3, #0
 801be90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801be92:	2300      	movs	r3, #0
 801be94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801be96:	2300      	movs	r3, #0
 801be98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801be9a:	693b      	ldr	r3, [r7, #16]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d101      	bne.n	801bea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801bea0:	2303      	movs	r3, #3
 801bea2:	e0bf      	b.n	801c024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bea4:	683b      	ldr	r3, [r7, #0]
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801beac:	2b00      	cmp	r3, #0
 801beae:	d050      	beq.n	801bf52 <USBD_CDC_Setup+0xde>
 801beb0:	2b20      	cmp	r3, #32
 801beb2:	f040 80af 	bne.w	801c014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	88db      	ldrh	r3, [r3, #6]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d03a      	beq.n	801bf34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	781b      	ldrb	r3, [r3, #0]
 801bec2:	b25b      	sxtb	r3, r3
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	da1b      	bge.n	801bf00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801bece:	687a      	ldr	r2, [r7, #4]
 801bed0:	33b0      	adds	r3, #176	; 0xb0
 801bed2:	009b      	lsls	r3, r3, #2
 801bed4:	4413      	add	r3, r2
 801bed6:	685b      	ldr	r3, [r3, #4]
 801bed8:	689b      	ldr	r3, [r3, #8]
 801beda:	683a      	ldr	r2, [r7, #0]
 801bedc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801bede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801bee0:	683a      	ldr	r2, [r7, #0]
 801bee2:	88d2      	ldrh	r2, [r2, #6]
 801bee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	88db      	ldrh	r3, [r3, #6]
 801beea:	2b07      	cmp	r3, #7
 801beec:	bf28      	it	cs
 801beee:	2307      	movcs	r3, #7
 801bef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801bef2:	693b      	ldr	r3, [r7, #16]
 801bef4:	89fa      	ldrh	r2, [r7, #14]
 801bef6:	4619      	mov	r1, r3
 801bef8:	6878      	ldr	r0, [r7, #4]
 801befa:	f001 fd43 	bl	801d984 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801befe:	e090      	b.n	801c022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	785a      	ldrb	r2, [r3, #1]
 801bf04:	693b      	ldr	r3, [r7, #16]
 801bf06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	88db      	ldrh	r3, [r3, #6]
 801bf0e:	2b3f      	cmp	r3, #63	; 0x3f
 801bf10:	d803      	bhi.n	801bf1a <USBD_CDC_Setup+0xa6>
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	88db      	ldrh	r3, [r3, #6]
 801bf16:	b2da      	uxtb	r2, r3
 801bf18:	e000      	b.n	801bf1c <USBD_CDC_Setup+0xa8>
 801bf1a:	2240      	movs	r2, #64	; 0x40
 801bf1c:	693b      	ldr	r3, [r7, #16]
 801bf1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801bf22:	6939      	ldr	r1, [r7, #16]
 801bf24:	693b      	ldr	r3, [r7, #16]
 801bf26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801bf2a:	461a      	mov	r2, r3
 801bf2c:	6878      	ldr	r0, [r7, #4]
 801bf2e:	f001 fd55 	bl	801d9dc <USBD_CtlPrepareRx>
      break;
 801bf32:	e076      	b.n	801c022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801bf3a:	687a      	ldr	r2, [r7, #4]
 801bf3c:	33b0      	adds	r3, #176	; 0xb0
 801bf3e:	009b      	lsls	r3, r3, #2
 801bf40:	4413      	add	r3, r2
 801bf42:	685b      	ldr	r3, [r3, #4]
 801bf44:	689b      	ldr	r3, [r3, #8]
 801bf46:	683a      	ldr	r2, [r7, #0]
 801bf48:	7850      	ldrb	r0, [r2, #1]
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	6839      	ldr	r1, [r7, #0]
 801bf4e:	4798      	blx	r3
      break;
 801bf50:	e067      	b.n	801c022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bf52:	683b      	ldr	r3, [r7, #0]
 801bf54:	785b      	ldrb	r3, [r3, #1]
 801bf56:	2b0b      	cmp	r3, #11
 801bf58:	d851      	bhi.n	801bffe <USBD_CDC_Setup+0x18a>
 801bf5a:	a201      	add	r2, pc, #4	; (adr r2, 801bf60 <USBD_CDC_Setup+0xec>)
 801bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf60:	0801bf91 	.word	0x0801bf91
 801bf64:	0801c00d 	.word	0x0801c00d
 801bf68:	0801bfff 	.word	0x0801bfff
 801bf6c:	0801bfff 	.word	0x0801bfff
 801bf70:	0801bfff 	.word	0x0801bfff
 801bf74:	0801bfff 	.word	0x0801bfff
 801bf78:	0801bfff 	.word	0x0801bfff
 801bf7c:	0801bfff 	.word	0x0801bfff
 801bf80:	0801bfff 	.word	0x0801bfff
 801bf84:	0801bfff 	.word	0x0801bfff
 801bf88:	0801bfbb 	.word	0x0801bfbb
 801bf8c:	0801bfe5 	.word	0x0801bfe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bf96:	b2db      	uxtb	r3, r3
 801bf98:	2b03      	cmp	r3, #3
 801bf9a:	d107      	bne.n	801bfac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801bf9c:	f107 030a 	add.w	r3, r7, #10
 801bfa0:	2202      	movs	r2, #2
 801bfa2:	4619      	mov	r1, r3
 801bfa4:	6878      	ldr	r0, [r7, #4]
 801bfa6:	f001 fced 	bl	801d984 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801bfaa:	e032      	b.n	801c012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801bfac:	6839      	ldr	r1, [r7, #0]
 801bfae:	6878      	ldr	r0, [r7, #4]
 801bfb0:	f001 fc77 	bl	801d8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801bfb4:	2303      	movs	r3, #3
 801bfb6:	75fb      	strb	r3, [r7, #23]
          break;
 801bfb8:	e02b      	b.n	801c012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bfc0:	b2db      	uxtb	r3, r3
 801bfc2:	2b03      	cmp	r3, #3
 801bfc4:	d107      	bne.n	801bfd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801bfc6:	f107 030d 	add.w	r3, r7, #13
 801bfca:	2201      	movs	r2, #1
 801bfcc:	4619      	mov	r1, r3
 801bfce:	6878      	ldr	r0, [r7, #4]
 801bfd0:	f001 fcd8 	bl	801d984 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801bfd4:	e01d      	b.n	801c012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801bfd6:	6839      	ldr	r1, [r7, #0]
 801bfd8:	6878      	ldr	r0, [r7, #4]
 801bfda:	f001 fc62 	bl	801d8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801bfde:	2303      	movs	r3, #3
 801bfe0:	75fb      	strb	r3, [r7, #23]
          break;
 801bfe2:	e016      	b.n	801c012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801bfea:	b2db      	uxtb	r3, r3
 801bfec:	2b03      	cmp	r3, #3
 801bfee:	d00f      	beq.n	801c010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801bff0:	6839      	ldr	r1, [r7, #0]
 801bff2:	6878      	ldr	r0, [r7, #4]
 801bff4:	f001 fc55 	bl	801d8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801bff8:	2303      	movs	r3, #3
 801bffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801bffc:	e008      	b.n	801c010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801bffe:	6839      	ldr	r1, [r7, #0]
 801c000:	6878      	ldr	r0, [r7, #4]
 801c002:	f001 fc4e 	bl	801d8a2 <USBD_CtlError>
          ret = USBD_FAIL;
 801c006:	2303      	movs	r3, #3
 801c008:	75fb      	strb	r3, [r7, #23]
          break;
 801c00a:	e002      	b.n	801c012 <USBD_CDC_Setup+0x19e>
          break;
 801c00c:	bf00      	nop
 801c00e:	e008      	b.n	801c022 <USBD_CDC_Setup+0x1ae>
          break;
 801c010:	bf00      	nop
      }
      break;
 801c012:	e006      	b.n	801c022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801c014:	6839      	ldr	r1, [r7, #0]
 801c016:	6878      	ldr	r0, [r7, #4]
 801c018:	f001 fc43 	bl	801d8a2 <USBD_CtlError>
      ret = USBD_FAIL;
 801c01c:	2303      	movs	r3, #3
 801c01e:	75fb      	strb	r3, [r7, #23]
      break;
 801c020:	bf00      	nop
  }

  return (uint8_t)ret;
 801c022:	7dfb      	ldrb	r3, [r7, #23]
}
 801c024:	4618      	mov	r0, r3
 801c026:	3718      	adds	r7, #24
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}

0801c02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b084      	sub	sp, #16
 801c030:	af00      	add	r7, sp, #0
 801c032:	6078      	str	r0, [r7, #4]
 801c034:	460b      	mov	r3, r1
 801c036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	32b0      	adds	r2, #176	; 0xb0
 801c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d101      	bne.n	801c056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801c052:	2303      	movs	r3, #3
 801c054:	e065      	b.n	801c122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	32b0      	adds	r2, #176	; 0xb0
 801c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801c066:	78fb      	ldrb	r3, [r7, #3]
 801c068:	f003 020f 	and.w	r2, r3, #15
 801c06c:	6879      	ldr	r1, [r7, #4]
 801c06e:	4613      	mov	r3, r2
 801c070:	009b      	lsls	r3, r3, #2
 801c072:	4413      	add	r3, r2
 801c074:	009b      	lsls	r3, r3, #2
 801c076:	440b      	add	r3, r1
 801c078:	3318      	adds	r3, #24
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d02f      	beq.n	801c0e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801c080:	78fb      	ldrb	r3, [r7, #3]
 801c082:	f003 020f 	and.w	r2, r3, #15
 801c086:	6879      	ldr	r1, [r7, #4]
 801c088:	4613      	mov	r3, r2
 801c08a:	009b      	lsls	r3, r3, #2
 801c08c:	4413      	add	r3, r2
 801c08e:	009b      	lsls	r3, r3, #2
 801c090:	440b      	add	r3, r1
 801c092:	3318      	adds	r3, #24
 801c094:	681a      	ldr	r2, [r3, #0]
 801c096:	78fb      	ldrb	r3, [r7, #3]
 801c098:	f003 010f 	and.w	r1, r3, #15
 801c09c:	68f8      	ldr	r0, [r7, #12]
 801c09e:	460b      	mov	r3, r1
 801c0a0:	00db      	lsls	r3, r3, #3
 801c0a2:	440b      	add	r3, r1
 801c0a4:	009b      	lsls	r3, r3, #2
 801c0a6:	4403      	add	r3, r0
 801c0a8:	3348      	adds	r3, #72	; 0x48
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	fbb2 f1f3 	udiv	r1, r2, r3
 801c0b0:	fb01 f303 	mul.w	r3, r1, r3
 801c0b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d112      	bne.n	801c0e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801c0ba:	78fb      	ldrb	r3, [r7, #3]
 801c0bc:	f003 020f 	and.w	r2, r3, #15
 801c0c0:	6879      	ldr	r1, [r7, #4]
 801c0c2:	4613      	mov	r3, r2
 801c0c4:	009b      	lsls	r3, r3, #2
 801c0c6:	4413      	add	r3, r2
 801c0c8:	009b      	lsls	r3, r3, #2
 801c0ca:	440b      	add	r3, r1
 801c0cc:	3318      	adds	r3, #24
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c0d2:	78f9      	ldrb	r1, [r7, #3]
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	6878      	ldr	r0, [r7, #4]
 801c0da:	f002 f924 	bl	801e326 <USBD_LL_Transmit>
 801c0de:	e01f      	b.n	801c120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	33b0      	adds	r3, #176	; 0xb0
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	4413      	add	r3, r2
 801c0f6:	685b      	ldr	r3, [r3, #4]
 801c0f8:	691b      	ldr	r3, [r3, #16]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d010      	beq.n	801c120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c104:	687a      	ldr	r2, [r7, #4]
 801c106:	33b0      	adds	r3, #176	; 0xb0
 801c108:	009b      	lsls	r3, r3, #2
 801c10a:	4413      	add	r3, r2
 801c10c:	685b      	ldr	r3, [r3, #4]
 801c10e:	691b      	ldr	r3, [r3, #16]
 801c110:	68ba      	ldr	r2, [r7, #8]
 801c112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801c116:	68ba      	ldr	r2, [r7, #8]
 801c118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801c11c:	78fa      	ldrb	r2, [r7, #3]
 801c11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801c120:	2300      	movs	r3, #0
}
 801c122:	4618      	mov	r0, r3
 801c124:	3710      	adds	r7, #16
 801c126:	46bd      	mov	sp, r7
 801c128:	bd80      	pop	{r7, pc}

0801c12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c12a:	b580      	push	{r7, lr}
 801c12c:	b084      	sub	sp, #16
 801c12e:	af00      	add	r7, sp, #0
 801c130:	6078      	str	r0, [r7, #4]
 801c132:	460b      	mov	r3, r1
 801c134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	32b0      	adds	r2, #176	; 0xb0
 801c140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	32b0      	adds	r2, #176	; 0xb0
 801c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d101      	bne.n	801c15c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801c158:	2303      	movs	r3, #3
 801c15a:	e01a      	b.n	801c192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c15c:	78fb      	ldrb	r3, [r7, #3]
 801c15e:	4619      	mov	r1, r3
 801c160:	6878      	ldr	r0, [r7, #4]
 801c162:	f002 f922 	bl	801e3aa <USBD_LL_GetRxDataSize>
 801c166:	4602      	mov	r2, r0
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c174:	687a      	ldr	r2, [r7, #4]
 801c176:	33b0      	adds	r3, #176	; 0xb0
 801c178:	009b      	lsls	r3, r3, #2
 801c17a:	4413      	add	r3, r2
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	68db      	ldr	r3, [r3, #12]
 801c180:	68fa      	ldr	r2, [r7, #12]
 801c182:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c186:	68fa      	ldr	r2, [r7, #12]
 801c188:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c18c:	4611      	mov	r1, r2
 801c18e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801c190:	2300      	movs	r3, #0
}
 801c192:	4618      	mov	r0, r3
 801c194:	3710      	adds	r7, #16
 801c196:	46bd      	mov	sp, r7
 801c198:	bd80      	pop	{r7, pc}

0801c19a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c19a:	b580      	push	{r7, lr}
 801c19c:	b084      	sub	sp, #16
 801c19e:	af00      	add	r7, sp, #0
 801c1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	32b0      	adds	r2, #176	; 0xb0
 801c1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d101      	bne.n	801c1bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801c1b8:	2303      	movs	r3, #3
 801c1ba:	e025      	b.n	801c208 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c1c2:	687a      	ldr	r2, [r7, #4]
 801c1c4:	33b0      	adds	r3, #176	; 0xb0
 801c1c6:	009b      	lsls	r3, r3, #2
 801c1c8:	4413      	add	r3, r2
 801c1ca:	685b      	ldr	r3, [r3, #4]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d01a      	beq.n	801c206 <USBD_CDC_EP0_RxReady+0x6c>
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c1d6:	2bff      	cmp	r3, #255	; 0xff
 801c1d8:	d015      	beq.n	801c206 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c1e0:	687a      	ldr	r2, [r7, #4]
 801c1e2:	33b0      	adds	r3, #176	; 0xb0
 801c1e4:	009b      	lsls	r3, r3, #2
 801c1e6:	4413      	add	r3, r2
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	689b      	ldr	r3, [r3, #8]
 801c1ec:	68fa      	ldr	r2, [r7, #12]
 801c1ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801c1f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801c1f4:	68fa      	ldr	r2, [r7, #12]
 801c1f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801c1fa:	b292      	uxth	r2, r2
 801c1fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	22ff      	movs	r2, #255	; 0xff
 801c202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801c206:	2300      	movs	r3, #0
}
 801c208:	4618      	mov	r0, r3
 801c20a:	3710      	adds	r7, #16
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bd80      	pop	{r7, pc}

0801c210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b086      	sub	sp, #24
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801c218:	2182      	movs	r1, #130	; 0x82
 801c21a:	4818      	ldr	r0, [pc, #96]	; (801c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801c21c:	f000 fd09 	bl	801cc32 <USBD_GetEpDesc>
 801c220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801c222:	2101      	movs	r1, #1
 801c224:	4815      	ldr	r0, [pc, #84]	; (801c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801c226:	f000 fd04 	bl	801cc32 <USBD_GetEpDesc>
 801c22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801c22c:	2181      	movs	r1, #129	; 0x81
 801c22e:	4813      	ldr	r0, [pc, #76]	; (801c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801c230:	f000 fcff 	bl	801cc32 <USBD_GetEpDesc>
 801c234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d002      	beq.n	801c242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801c23c:	697b      	ldr	r3, [r7, #20]
 801c23e:	2210      	movs	r2, #16
 801c240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801c242:	693b      	ldr	r3, [r7, #16]
 801c244:	2b00      	cmp	r3, #0
 801c246:	d006      	beq.n	801c256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801c248:	693b      	ldr	r3, [r7, #16]
 801c24a:	2200      	movs	r2, #0
 801c24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c250:	711a      	strb	r2, [r3, #4]
 801c252:	2200      	movs	r2, #0
 801c254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d006      	beq.n	801c26a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	2200      	movs	r2, #0
 801c260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c264:	711a      	strb	r2, [r3, #4]
 801c266:	2200      	movs	r2, #0
 801c268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	2243      	movs	r2, #67	; 0x43
 801c26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801c270:	4b02      	ldr	r3, [pc, #8]	; (801c27c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801c272:	4618      	mov	r0, r3
 801c274:	3718      	adds	r7, #24
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}
 801c27a:	bf00      	nop
 801c27c:	20000084 	.word	0x20000084

0801c280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b086      	sub	sp, #24
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801c288:	2182      	movs	r1, #130	; 0x82
 801c28a:	4818      	ldr	r0, [pc, #96]	; (801c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801c28c:	f000 fcd1 	bl	801cc32 <USBD_GetEpDesc>
 801c290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801c292:	2101      	movs	r1, #1
 801c294:	4815      	ldr	r0, [pc, #84]	; (801c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801c296:	f000 fccc 	bl	801cc32 <USBD_GetEpDesc>
 801c29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801c29c:	2181      	movs	r1, #129	; 0x81
 801c29e:	4813      	ldr	r0, [pc, #76]	; (801c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801c2a0:	f000 fcc7 	bl	801cc32 <USBD_GetEpDesc>
 801c2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801c2a6:	697b      	ldr	r3, [r7, #20]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d002      	beq.n	801c2b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	2210      	movs	r2, #16
 801c2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801c2b2:	693b      	ldr	r3, [r7, #16]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d006      	beq.n	801c2c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801c2b8:	693b      	ldr	r3, [r7, #16]
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	711a      	strb	r2, [r3, #4]
 801c2be:	2200      	movs	r2, #0
 801c2c0:	f042 0202 	orr.w	r2, r2, #2
 801c2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d006      	beq.n	801c2da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	711a      	strb	r2, [r3, #4]
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	f042 0202 	orr.w	r2, r2, #2
 801c2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	2243      	movs	r2, #67	; 0x43
 801c2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801c2e0:	4b02      	ldr	r3, [pc, #8]	; (801c2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	3718      	adds	r7, #24
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}
 801c2ea:	bf00      	nop
 801c2ec:	20000084 	.word	0x20000084

0801c2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b086      	sub	sp, #24
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801c2f8:	2182      	movs	r1, #130	; 0x82
 801c2fa:	4818      	ldr	r0, [pc, #96]	; (801c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801c2fc:	f000 fc99 	bl	801cc32 <USBD_GetEpDesc>
 801c300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801c302:	2101      	movs	r1, #1
 801c304:	4815      	ldr	r0, [pc, #84]	; (801c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801c306:	f000 fc94 	bl	801cc32 <USBD_GetEpDesc>
 801c30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801c30c:	2181      	movs	r1, #129	; 0x81
 801c30e:	4813      	ldr	r0, [pc, #76]	; (801c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801c310:	f000 fc8f 	bl	801cc32 <USBD_GetEpDesc>
 801c314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801c316:	697b      	ldr	r3, [r7, #20]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d002      	beq.n	801c322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	2210      	movs	r2, #16
 801c320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801c322:	693b      	ldr	r3, [r7, #16]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d006      	beq.n	801c336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801c328:	693b      	ldr	r3, [r7, #16]
 801c32a:	2200      	movs	r2, #0
 801c32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c330:	711a      	strb	r2, [r3, #4]
 801c332:	2200      	movs	r2, #0
 801c334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d006      	beq.n	801c34a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	2200      	movs	r2, #0
 801c340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c344:	711a      	strb	r2, [r3, #4]
 801c346:	2200      	movs	r2, #0
 801c348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	2243      	movs	r2, #67	; 0x43
 801c34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801c350:	4b02      	ldr	r3, [pc, #8]	; (801c35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801c352:	4618      	mov	r0, r3
 801c354:	3718      	adds	r7, #24
 801c356:	46bd      	mov	sp, r7
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	bf00      	nop
 801c35c:	20000084 	.word	0x20000084

0801c360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c360:	b480      	push	{r7}
 801c362:	b083      	sub	sp, #12
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	220a      	movs	r2, #10
 801c36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801c36e:	4b03      	ldr	r3, [pc, #12]	; (801c37c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c370:	4618      	mov	r0, r3
 801c372:	370c      	adds	r7, #12
 801c374:	46bd      	mov	sp, r7
 801c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37a:	4770      	bx	lr
 801c37c:	20000040 	.word	0x20000040

0801c380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801c380:	b480      	push	{r7}
 801c382:	b083      	sub	sp, #12
 801c384:	af00      	add	r7, sp, #0
 801c386:	6078      	str	r0, [r7, #4]
 801c388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801c38a:	683b      	ldr	r3, [r7, #0]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d101      	bne.n	801c394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801c390:	2303      	movs	r3, #3
 801c392:	e009      	b.n	801c3a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801c39a:	687a      	ldr	r2, [r7, #4]
 801c39c:	33b0      	adds	r3, #176	; 0xb0
 801c39e:	009b      	lsls	r3, r3, #2
 801c3a0:	4413      	add	r3, r2
 801c3a2:	683a      	ldr	r2, [r7, #0]
 801c3a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801c3a6:	2300      	movs	r3, #0
}
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	370c      	adds	r7, #12
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b2:	4770      	bx	lr

0801c3b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b087      	sub	sp, #28
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	60f8      	str	r0, [r7, #12]
 801c3bc:	60b9      	str	r1, [r7, #8]
 801c3be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	32b0      	adds	r2, #176	; 0xb0
 801c3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801c3d0:	697b      	ldr	r3, [r7, #20]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d101      	bne.n	801c3da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801c3d6:	2303      	movs	r3, #3
 801c3d8:	e008      	b.n	801c3ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801c3da:	697b      	ldr	r3, [r7, #20]
 801c3dc:	68ba      	ldr	r2, [r7, #8]
 801c3de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801c3ea:	2300      	movs	r3, #0
}
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	371c      	adds	r7, #28
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f6:	4770      	bx	lr

0801c3f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801c3f8:	b480      	push	{r7}
 801c3fa:	b085      	sub	sp, #20
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
 801c400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	32b0      	adds	r2, #176	; 0xb0
 801c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d101      	bne.n	801c41c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801c418:	2303      	movs	r3, #3
 801c41a:	e004      	b.n	801c426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	683a      	ldr	r2, [r7, #0]
 801c420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801c424:	2300      	movs	r3, #0
}
 801c426:	4618      	mov	r0, r3
 801c428:	3714      	adds	r7, #20
 801c42a:	46bd      	mov	sp, r7
 801c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c430:	4770      	bx	lr
	...

0801c434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b084      	sub	sp, #16
 801c438:	af00      	add	r7, sp, #0
 801c43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	32b0      	adds	r2, #176	; 0xb0
 801c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c44a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	32b0      	adds	r2, #176	; 0xb0
 801c456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d101      	bne.n	801c462 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801c45e:	2303      	movs	r3, #3
 801c460:	e018      	b.n	801c494 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	7c1b      	ldrb	r3, [r3, #16]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d10a      	bne.n	801c480 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c46a:	4b0c      	ldr	r3, [pc, #48]	; (801c49c <USBD_CDC_ReceivePacket+0x68>)
 801c46c:	7819      	ldrb	r1, [r3, #0]
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c474:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c478:	6878      	ldr	r0, [r7, #4]
 801c47a:	f001 ff75 	bl	801e368 <USBD_LL_PrepareReceive>
 801c47e:	e008      	b.n	801c492 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c480:	4b06      	ldr	r3, [pc, #24]	; (801c49c <USBD_CDC_ReceivePacket+0x68>)
 801c482:	7819      	ldrb	r1, [r3, #0]
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c48a:	2340      	movs	r3, #64	; 0x40
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f001 ff6b 	bl	801e368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801c492:	2300      	movs	r3, #0
}
 801c494:	4618      	mov	r0, r3
 801c496:	3710      	adds	r7, #16
 801c498:	46bd      	mov	sp, r7
 801c49a:	bd80      	pop	{r7, pc}
 801c49c:	200000c8 	.word	0x200000c8

0801c4a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b086      	sub	sp, #24
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	60f8      	str	r0, [r7, #12]
 801c4a8:	60b9      	str	r1, [r7, #8]
 801c4aa:	4613      	mov	r3, r2
 801c4ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d101      	bne.n	801c4b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801c4b4:	2303      	movs	r3, #3
 801c4b6:	e01f      	b.n	801c4f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c4d0:	68bb      	ldr	r3, [r7, #8]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d003      	beq.n	801c4de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	68ba      	ldr	r2, [r7, #8]
 801c4da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	2201      	movs	r2, #1
 801c4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	79fa      	ldrb	r2, [r7, #7]
 801c4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801c4ec:	68f8      	ldr	r0, [r7, #12]
 801c4ee:	f001 fde5 	bl	801e0bc <USBD_LL_Init>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 801c4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	3718      	adds	r7, #24
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	bd80      	pop	{r7, pc}

0801c500 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b084      	sub	sp, #16
 801c504:	af00      	add	r7, sp, #0
 801c506:	6078      	str	r0, [r7, #4]
 801c508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c50a:	2300      	movs	r3, #0
 801c50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801c50e:	683b      	ldr	r3, [r7, #0]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d101      	bne.n	801c518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801c514:	2303      	movs	r3, #3
 801c516:	e025      	b.n	801c564 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	683a      	ldr	r2, [r7, #0]
 801c51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	32ae      	adds	r2, #174	; 0xae
 801c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c530:	2b00      	cmp	r3, #0
 801c532:	d00f      	beq.n	801c554 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	32ae      	adds	r2, #174	; 0xae
 801c53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c544:	f107 020e 	add.w	r2, r7, #14
 801c548:	4610      	mov	r0, r2
 801c54a:	4798      	blx	r3
 801c54c:	4602      	mov	r2, r0
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801c55a:	1c5a      	adds	r2, r3, #1
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801c562:	2300      	movs	r3, #0
}
 801c564:	4618      	mov	r0, r3
 801c566:	3710      	adds	r7, #16
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}

0801c56c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b082      	sub	sp, #8
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801c574:	6878      	ldr	r0, [r7, #4]
 801c576:	f001 fded 	bl	801e154 <USBD_LL_Start>
 801c57a:	4603      	mov	r3, r0
}
 801c57c:	4618      	mov	r0, r3
 801c57e:	3708      	adds	r7, #8
 801c580:	46bd      	mov	sp, r7
 801c582:	bd80      	pop	{r7, pc}

0801c584 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801c584:	b480      	push	{r7}
 801c586:	b083      	sub	sp, #12
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c58c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801c58e:	4618      	mov	r0, r3
 801c590:	370c      	adds	r7, #12
 801c592:	46bd      	mov	sp, r7
 801c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c598:	4770      	bx	lr

0801c59a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c59a:	b580      	push	{r7, lr}
 801c59c:	b084      	sub	sp, #16
 801c59e:	af00      	add	r7, sp, #0
 801c5a0:	6078      	str	r0, [r7, #4]
 801c5a2:	460b      	mov	r3, r1
 801c5a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d009      	beq.n	801c5c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	78fa      	ldrb	r2, [r7, #3]
 801c5be:	4611      	mov	r1, r2
 801c5c0:	6878      	ldr	r0, [r7, #4]
 801c5c2:	4798      	blx	r3
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	3710      	adds	r7, #16
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}

0801c5d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c5d2:	b580      	push	{r7, lr}
 801c5d4:	b084      	sub	sp, #16
 801c5d6:	af00      	add	r7, sp, #0
 801c5d8:	6078      	str	r0, [r7, #4]
 801c5da:	460b      	mov	r3, r1
 801c5dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801c5de:	2300      	movs	r3, #0
 801c5e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5e8:	685b      	ldr	r3, [r3, #4]
 801c5ea:	78fa      	ldrb	r2, [r7, #3]
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	6878      	ldr	r0, [r7, #4]
 801c5f0:	4798      	blx	r3
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d001      	beq.n	801c5fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801c5f8:	2303      	movs	r3, #3
 801c5fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801c5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5fe:	4618      	mov	r0, r3
 801c600:	3710      	adds	r7, #16
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}

0801c606 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c606:	b580      	push	{r7, lr}
 801c608:	b084      	sub	sp, #16
 801c60a:	af00      	add	r7, sp, #0
 801c60c:	6078      	str	r0, [r7, #4]
 801c60e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801c616:	6839      	ldr	r1, [r7, #0]
 801c618:	4618      	mov	r0, r3
 801c61a:	f001 f908 	bl	801d82e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	2201      	movs	r2, #1
 801c622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801c62c:	461a      	mov	r2, r3
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801c63a:	f003 031f 	and.w	r3, r3, #31
 801c63e:	2b02      	cmp	r3, #2
 801c640:	d01a      	beq.n	801c678 <USBD_LL_SetupStage+0x72>
 801c642:	2b02      	cmp	r3, #2
 801c644:	d822      	bhi.n	801c68c <USBD_LL_SetupStage+0x86>
 801c646:	2b00      	cmp	r3, #0
 801c648:	d002      	beq.n	801c650 <USBD_LL_SetupStage+0x4a>
 801c64a:	2b01      	cmp	r3, #1
 801c64c:	d00a      	beq.n	801c664 <USBD_LL_SetupStage+0x5e>
 801c64e:	e01d      	b.n	801c68c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801c656:	4619      	mov	r1, r3
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f000 fb5f 	bl	801cd1c <USBD_StdDevReq>
 801c65e:	4603      	mov	r3, r0
 801c660:	73fb      	strb	r3, [r7, #15]
      break;
 801c662:	e020      	b.n	801c6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801c66a:	4619      	mov	r1, r3
 801c66c:	6878      	ldr	r0, [r7, #4]
 801c66e:	f000 fbc7 	bl	801ce00 <USBD_StdItfReq>
 801c672:	4603      	mov	r3, r0
 801c674:	73fb      	strb	r3, [r7, #15]
      break;
 801c676:	e016      	b.n	801c6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801c67e:	4619      	mov	r1, r3
 801c680:	6878      	ldr	r0, [r7, #4]
 801c682:	f000 fc29 	bl	801ced8 <USBD_StdEPReq>
 801c686:	4603      	mov	r3, r0
 801c688:	73fb      	strb	r3, [r7, #15]
      break;
 801c68a:	e00c      	b.n	801c6a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801c692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c696:	b2db      	uxtb	r3, r3
 801c698:	4619      	mov	r1, r3
 801c69a:	6878      	ldr	r0, [r7, #4]
 801c69c:	f001 fdba 	bl	801e214 <USBD_LL_StallEP>
 801c6a0:	4603      	mov	r3, r0
 801c6a2:	73fb      	strb	r3, [r7, #15]
      break;
 801c6a4:	bf00      	nop
  }

  return ret;
 801c6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	3710      	adds	r7, #16
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}

0801c6b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b086      	sub	sp, #24
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	60f8      	str	r0, [r7, #12]
 801c6b8:	460b      	mov	r3, r1
 801c6ba:	607a      	str	r2, [r7, #4]
 801c6bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801c6be:	2300      	movs	r3, #0
 801c6c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801c6c2:	7afb      	ldrb	r3, [r7, #11]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d16e      	bne.n	801c7a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801c6ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c6d6:	2b03      	cmp	r3, #3
 801c6d8:	f040 8098 	bne.w	801c80c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801c6dc:	693b      	ldr	r3, [r7, #16]
 801c6de:	689a      	ldr	r2, [r3, #8]
 801c6e0:	693b      	ldr	r3, [r7, #16]
 801c6e2:	68db      	ldr	r3, [r3, #12]
 801c6e4:	429a      	cmp	r2, r3
 801c6e6:	d913      	bls.n	801c710 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801c6e8:	693b      	ldr	r3, [r7, #16]
 801c6ea:	689a      	ldr	r2, [r3, #8]
 801c6ec:	693b      	ldr	r3, [r7, #16]
 801c6ee:	68db      	ldr	r3, [r3, #12]
 801c6f0:	1ad2      	subs	r2, r2, r3
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801c6f6:	693b      	ldr	r3, [r7, #16]
 801c6f8:	68da      	ldr	r2, [r3, #12]
 801c6fa:	693b      	ldr	r3, [r7, #16]
 801c6fc:	689b      	ldr	r3, [r3, #8]
 801c6fe:	4293      	cmp	r3, r2
 801c700:	bf28      	it	cs
 801c702:	4613      	movcs	r3, r2
 801c704:	461a      	mov	r2, r3
 801c706:	6879      	ldr	r1, [r7, #4]
 801c708:	68f8      	ldr	r0, [r7, #12]
 801c70a:	f001 f984 	bl	801da16 <USBD_CtlContinueRx>
 801c70e:	e07d      	b.n	801c80c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801c716:	f003 031f 	and.w	r3, r3, #31
 801c71a:	2b02      	cmp	r3, #2
 801c71c:	d014      	beq.n	801c748 <USBD_LL_DataOutStage+0x98>
 801c71e:	2b02      	cmp	r3, #2
 801c720:	d81d      	bhi.n	801c75e <USBD_LL_DataOutStage+0xae>
 801c722:	2b00      	cmp	r3, #0
 801c724:	d002      	beq.n	801c72c <USBD_LL_DataOutStage+0x7c>
 801c726:	2b01      	cmp	r3, #1
 801c728:	d003      	beq.n	801c732 <USBD_LL_DataOutStage+0x82>
 801c72a:	e018      	b.n	801c75e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801c72c:	2300      	movs	r3, #0
 801c72e:	75bb      	strb	r3, [r7, #22]
            break;
 801c730:	e018      	b.n	801c764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c738:	b2db      	uxtb	r3, r3
 801c73a:	4619      	mov	r1, r3
 801c73c:	68f8      	ldr	r0, [r7, #12]
 801c73e:	f000 fa5e 	bl	801cbfe <USBD_CoreFindIF>
 801c742:	4603      	mov	r3, r0
 801c744:	75bb      	strb	r3, [r7, #22]
            break;
 801c746:	e00d      	b.n	801c764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	4619      	mov	r1, r3
 801c752:	68f8      	ldr	r0, [r7, #12]
 801c754:	f000 fa60 	bl	801cc18 <USBD_CoreFindEP>
 801c758:	4603      	mov	r3, r0
 801c75a:	75bb      	strb	r3, [r7, #22]
            break;
 801c75c:	e002      	b.n	801c764 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801c75e:	2300      	movs	r3, #0
 801c760:	75bb      	strb	r3, [r7, #22]
            break;
 801c762:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801c764:	7dbb      	ldrb	r3, [r7, #22]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d119      	bne.n	801c79e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c770:	b2db      	uxtb	r3, r3
 801c772:	2b03      	cmp	r3, #3
 801c774:	d113      	bne.n	801c79e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801c776:	7dba      	ldrb	r2, [r7, #22]
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	32ae      	adds	r2, #174	; 0xae
 801c77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c780:	691b      	ldr	r3, [r3, #16]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d00b      	beq.n	801c79e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801c786:	7dba      	ldrb	r2, [r7, #22]
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801c78e:	7dba      	ldrb	r2, [r7, #22]
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	32ae      	adds	r2, #174	; 0xae
 801c794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c798:	691b      	ldr	r3, [r3, #16]
 801c79a:	68f8      	ldr	r0, [r7, #12]
 801c79c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801c79e:	68f8      	ldr	r0, [r7, #12]
 801c7a0:	f001 f94a 	bl	801da38 <USBD_CtlSendStatus>
 801c7a4:	e032      	b.n	801c80c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801c7a6:	7afb      	ldrb	r3, [r7, #11]
 801c7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c7ac:	b2db      	uxtb	r3, r3
 801c7ae:	4619      	mov	r1, r3
 801c7b0:	68f8      	ldr	r0, [r7, #12]
 801c7b2:	f000 fa31 	bl	801cc18 <USBD_CoreFindEP>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c7ba:	7dbb      	ldrb	r3, [r7, #22]
 801c7bc:	2bff      	cmp	r3, #255	; 0xff
 801c7be:	d025      	beq.n	801c80c <USBD_LL_DataOutStage+0x15c>
 801c7c0:	7dbb      	ldrb	r3, [r7, #22]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d122      	bne.n	801c80c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	2b03      	cmp	r3, #3
 801c7d0:	d117      	bne.n	801c802 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801c7d2:	7dba      	ldrb	r2, [r7, #22]
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	32ae      	adds	r2, #174	; 0xae
 801c7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7dc:	699b      	ldr	r3, [r3, #24]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d00f      	beq.n	801c802 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801c7e2:	7dba      	ldrb	r2, [r7, #22]
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801c7ea:	7dba      	ldrb	r2, [r7, #22]
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	32ae      	adds	r2, #174	; 0xae
 801c7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7f4:	699b      	ldr	r3, [r3, #24]
 801c7f6:	7afa      	ldrb	r2, [r7, #11]
 801c7f8:	4611      	mov	r1, r2
 801c7fa:	68f8      	ldr	r0, [r7, #12]
 801c7fc:	4798      	blx	r3
 801c7fe:	4603      	mov	r3, r0
 801c800:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801c802:	7dfb      	ldrb	r3, [r7, #23]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d001      	beq.n	801c80c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801c808:	7dfb      	ldrb	r3, [r7, #23]
 801c80a:	e000      	b.n	801c80e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801c80c:	2300      	movs	r3, #0
}
 801c80e:	4618      	mov	r0, r3
 801c810:	3718      	adds	r7, #24
 801c812:	46bd      	mov	sp, r7
 801c814:	bd80      	pop	{r7, pc}

0801c816 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c816:	b580      	push	{r7, lr}
 801c818:	b086      	sub	sp, #24
 801c81a:	af00      	add	r7, sp, #0
 801c81c:	60f8      	str	r0, [r7, #12]
 801c81e:	460b      	mov	r3, r1
 801c820:	607a      	str	r2, [r7, #4]
 801c822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801c824:	7afb      	ldrb	r3, [r7, #11]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d16f      	bne.n	801c90a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	3314      	adds	r3, #20
 801c82e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c836:	2b02      	cmp	r3, #2
 801c838:	d15a      	bne.n	801c8f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801c83a:	693b      	ldr	r3, [r7, #16]
 801c83c:	689a      	ldr	r2, [r3, #8]
 801c83e:	693b      	ldr	r3, [r7, #16]
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	429a      	cmp	r2, r3
 801c844:	d914      	bls.n	801c870 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801c846:	693b      	ldr	r3, [r7, #16]
 801c848:	689a      	ldr	r2, [r3, #8]
 801c84a:	693b      	ldr	r3, [r7, #16]
 801c84c:	68db      	ldr	r3, [r3, #12]
 801c84e:	1ad2      	subs	r2, r2, r3
 801c850:	693b      	ldr	r3, [r7, #16]
 801c852:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801c854:	693b      	ldr	r3, [r7, #16]
 801c856:	689b      	ldr	r3, [r3, #8]
 801c858:	461a      	mov	r2, r3
 801c85a:	6879      	ldr	r1, [r7, #4]
 801c85c:	68f8      	ldr	r0, [r7, #12]
 801c85e:	f001 f8ac 	bl	801d9ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c862:	2300      	movs	r3, #0
 801c864:	2200      	movs	r2, #0
 801c866:	2100      	movs	r1, #0
 801c868:	68f8      	ldr	r0, [r7, #12]
 801c86a:	f001 fd7d 	bl	801e368 <USBD_LL_PrepareReceive>
 801c86e:	e03f      	b.n	801c8f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801c870:	693b      	ldr	r3, [r7, #16]
 801c872:	68da      	ldr	r2, [r3, #12]
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	689b      	ldr	r3, [r3, #8]
 801c878:	429a      	cmp	r2, r3
 801c87a:	d11c      	bne.n	801c8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801c87c:	693b      	ldr	r3, [r7, #16]
 801c87e:	685a      	ldr	r2, [r3, #4]
 801c880:	693b      	ldr	r3, [r7, #16]
 801c882:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801c884:	429a      	cmp	r2, r3
 801c886:	d316      	bcc.n	801c8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801c888:	693b      	ldr	r3, [r7, #16]
 801c88a:	685a      	ldr	r2, [r3, #4]
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c892:	429a      	cmp	r2, r3
 801c894:	d20f      	bcs.n	801c8b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c896:	2200      	movs	r2, #0
 801c898:	2100      	movs	r1, #0
 801c89a:	68f8      	ldr	r0, [r7, #12]
 801c89c:	f001 f88d 	bl	801d9ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	2100      	movs	r1, #0
 801c8ae:	68f8      	ldr	r0, [r7, #12]
 801c8b0:	f001 fd5a 	bl	801e368 <USBD_LL_PrepareReceive>
 801c8b4:	e01c      	b.n	801c8f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c8bc:	b2db      	uxtb	r3, r3
 801c8be:	2b03      	cmp	r3, #3
 801c8c0:	d10f      	bne.n	801c8e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c8c8:	68db      	ldr	r3, [r3, #12]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d009      	beq.n	801c8e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c8dc:	68db      	ldr	r3, [r3, #12]
 801c8de:	68f8      	ldr	r0, [r7, #12]
 801c8e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801c8e2:	2180      	movs	r1, #128	; 0x80
 801c8e4:	68f8      	ldr	r0, [r7, #12]
 801c8e6:	f001 fc95 	bl	801e214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801c8ea:	68f8      	ldr	r0, [r7, #12]
 801c8ec:	f001 f8b7 	bl	801da5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d03a      	beq.n	801c970 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801c8fa:	68f8      	ldr	r0, [r7, #12]
 801c8fc:	f7ff fe42 	bl	801c584 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	2200      	movs	r2, #0
 801c904:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801c908:	e032      	b.n	801c970 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801c90a:	7afb      	ldrb	r3, [r7, #11]
 801c90c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c910:	b2db      	uxtb	r3, r3
 801c912:	4619      	mov	r1, r3
 801c914:	68f8      	ldr	r0, [r7, #12]
 801c916:	f000 f97f 	bl	801cc18 <USBD_CoreFindEP>
 801c91a:	4603      	mov	r3, r0
 801c91c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801c91e:	7dfb      	ldrb	r3, [r7, #23]
 801c920:	2bff      	cmp	r3, #255	; 0xff
 801c922:	d025      	beq.n	801c970 <USBD_LL_DataInStage+0x15a>
 801c924:	7dfb      	ldrb	r3, [r7, #23]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d122      	bne.n	801c970 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c930:	b2db      	uxtb	r3, r3
 801c932:	2b03      	cmp	r3, #3
 801c934:	d11c      	bne.n	801c970 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801c936:	7dfa      	ldrb	r2, [r7, #23]
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	32ae      	adds	r2, #174	; 0xae
 801c93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c940:	695b      	ldr	r3, [r3, #20]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d014      	beq.n	801c970 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801c946:	7dfa      	ldrb	r2, [r7, #23]
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801c94e:	7dfa      	ldrb	r2, [r7, #23]
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	32ae      	adds	r2, #174	; 0xae
 801c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c958:	695b      	ldr	r3, [r3, #20]
 801c95a:	7afa      	ldrb	r2, [r7, #11]
 801c95c:	4611      	mov	r1, r2
 801c95e:	68f8      	ldr	r0, [r7, #12]
 801c960:	4798      	blx	r3
 801c962:	4603      	mov	r3, r0
 801c964:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801c966:	7dbb      	ldrb	r3, [r7, #22]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d001      	beq.n	801c970 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801c96c:	7dbb      	ldrb	r3, [r7, #22]
 801c96e:	e000      	b.n	801c972 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801c970:	2300      	movs	r3, #0
}
 801c972:	4618      	mov	r0, r3
 801c974:	3718      	adds	r7, #24
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}

0801c97a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c97a:	b580      	push	{r7, lr}
 801c97c:	b084      	sub	sp, #16
 801c97e:	af00      	add	r7, sp, #0
 801c980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801c982:	2300      	movs	r3, #0
 801c984:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	2201      	movs	r2, #1
 801c98a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	2200      	movs	r2, #0
 801c992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	2200      	movs	r2, #0
 801c99a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2200      	movs	r2, #0
 801c9a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d014      	beq.n	801c9e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d00e      	beq.n	801c9e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9c8:	685b      	ldr	r3, [r3, #4]
 801c9ca:	687a      	ldr	r2, [r7, #4]
 801c9cc:	6852      	ldr	r2, [r2, #4]
 801c9ce:	b2d2      	uxtb	r2, r2
 801c9d0:	4611      	mov	r1, r2
 801c9d2:	6878      	ldr	r0, [r7, #4]
 801c9d4:	4798      	blx	r3
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d001      	beq.n	801c9e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801c9dc:	2303      	movs	r3, #3
 801c9de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c9e0:	2340      	movs	r3, #64	; 0x40
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	2100      	movs	r1, #0
 801c9e6:	6878      	ldr	r0, [r7, #4]
 801c9e8:	f001 fbcf 	bl	801e18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	2240      	movs	r2, #64	; 0x40
 801c9f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c9fc:	2340      	movs	r3, #64	; 0x40
 801c9fe:	2200      	movs	r2, #0
 801ca00:	2180      	movs	r1, #128	; 0x80
 801ca02:	6878      	ldr	r0, [r7, #4]
 801ca04:	f001 fbc1 	bl	801e18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	2240      	movs	r2, #64	; 0x40
 801ca12:	621a      	str	r2, [r3, #32]

  return ret;
 801ca14:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca16:	4618      	mov	r0, r3
 801ca18:	3710      	adds	r7, #16
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	bd80      	pop	{r7, pc}

0801ca1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801ca1e:	b480      	push	{r7}
 801ca20:	b083      	sub	sp, #12
 801ca22:	af00      	add	r7, sp, #0
 801ca24:	6078      	str	r0, [r7, #4]
 801ca26:	460b      	mov	r3, r1
 801ca28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	78fa      	ldrb	r2, [r7, #3]
 801ca2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801ca30:	2300      	movs	r3, #0
}
 801ca32:	4618      	mov	r0, r3
 801ca34:	370c      	adds	r7, #12
 801ca36:	46bd      	mov	sp, r7
 801ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca3c:	4770      	bx	lr

0801ca3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801ca3e:	b480      	push	{r7}
 801ca40:	b083      	sub	sp, #12
 801ca42:	af00      	add	r7, sp, #0
 801ca44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ca4c:	b2da      	uxtb	r2, r3
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2204      	movs	r2, #4
 801ca58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801ca5c:	2300      	movs	r3, #0
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	370c      	adds	r7, #12
 801ca62:	46bd      	mov	sp, r7
 801ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca68:	4770      	bx	lr

0801ca6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801ca6a:	b480      	push	{r7}
 801ca6c:	b083      	sub	sp, #12
 801ca6e:	af00      	add	r7, sp, #0
 801ca70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ca78:	b2db      	uxtb	r3, r3
 801ca7a:	2b04      	cmp	r3, #4
 801ca7c:	d106      	bne.n	801ca8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801ca84:	b2da      	uxtb	r2, r3
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801ca8c:	2300      	movs	r3, #0
}
 801ca8e:	4618      	mov	r0, r3
 801ca90:	370c      	adds	r7, #12
 801ca92:	46bd      	mov	sp, r7
 801ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca98:	4770      	bx	lr

0801ca9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801ca9a:	b580      	push	{r7, lr}
 801ca9c:	b082      	sub	sp, #8
 801ca9e:	af00      	add	r7, sp, #0
 801caa0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801caa8:	b2db      	uxtb	r3, r3
 801caaa:	2b03      	cmp	r3, #3
 801caac:	d110      	bne.n	801cad0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d00b      	beq.n	801cad0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cabe:	69db      	ldr	r3, [r3, #28]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d005      	beq.n	801cad0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801caca:	69db      	ldr	r3, [r3, #28]
 801cacc:	6878      	ldr	r0, [r7, #4]
 801cace:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801cad0:	2300      	movs	r3, #0
}
 801cad2:	4618      	mov	r0, r3
 801cad4:	3708      	adds	r7, #8
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bd80      	pop	{r7, pc}

0801cada <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801cada:	b580      	push	{r7, lr}
 801cadc:	b082      	sub	sp, #8
 801cade:	af00      	add	r7, sp, #0
 801cae0:	6078      	str	r0, [r7, #4]
 801cae2:	460b      	mov	r3, r1
 801cae4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	32ae      	adds	r2, #174	; 0xae
 801caf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d101      	bne.n	801cafc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801caf8:	2303      	movs	r3, #3
 801cafa:	e01c      	b.n	801cb36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb02:	b2db      	uxtb	r3, r3
 801cb04:	2b03      	cmp	r3, #3
 801cb06:	d115      	bne.n	801cb34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	32ae      	adds	r2, #174	; 0xae
 801cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb16:	6a1b      	ldr	r3, [r3, #32]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d00b      	beq.n	801cb34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	32ae      	adds	r2, #174	; 0xae
 801cb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb2a:	6a1b      	ldr	r3, [r3, #32]
 801cb2c:	78fa      	ldrb	r2, [r7, #3]
 801cb2e:	4611      	mov	r1, r2
 801cb30:	6878      	ldr	r0, [r7, #4]
 801cb32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801cb34:	2300      	movs	r3, #0
}
 801cb36:	4618      	mov	r0, r3
 801cb38:	3708      	adds	r7, #8
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bd80      	pop	{r7, pc}

0801cb3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801cb3e:	b580      	push	{r7, lr}
 801cb40:	b082      	sub	sp, #8
 801cb42:	af00      	add	r7, sp, #0
 801cb44:	6078      	str	r0, [r7, #4]
 801cb46:	460b      	mov	r3, r1
 801cb48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	32ae      	adds	r2, #174	; 0xae
 801cb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d101      	bne.n	801cb60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801cb5c:	2303      	movs	r3, #3
 801cb5e:	e01c      	b.n	801cb9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb66:	b2db      	uxtb	r3, r3
 801cb68:	2b03      	cmp	r3, #3
 801cb6a:	d115      	bne.n	801cb98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	32ae      	adds	r2, #174	; 0xae
 801cb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d00b      	beq.n	801cb98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	32ae      	adds	r2, #174	; 0xae
 801cb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb90:	78fa      	ldrb	r2, [r7, #3]
 801cb92:	4611      	mov	r1, r2
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801cb98:	2300      	movs	r3, #0
}
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	3708      	adds	r7, #8
 801cb9e:	46bd      	mov	sp, r7
 801cba0:	bd80      	pop	{r7, pc}

0801cba2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801cba2:	b480      	push	{r7}
 801cba4:	b083      	sub	sp, #12
 801cba6:	af00      	add	r7, sp, #0
 801cba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cbaa:	2300      	movs	r3, #0
}
 801cbac:	4618      	mov	r0, r3
 801cbae:	370c      	adds	r7, #12
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbb6:	4770      	bx	lr

0801cbb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b084      	sub	sp, #16
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	2201      	movs	r2, #1
 801cbc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d00e      	beq.n	801cbf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	687a      	ldr	r2, [r7, #4]
 801cbe0:	6852      	ldr	r2, [r2, #4]
 801cbe2:	b2d2      	uxtb	r2, r2
 801cbe4:	4611      	mov	r1, r2
 801cbe6:	6878      	ldr	r0, [r7, #4]
 801cbe8:	4798      	blx	r3
 801cbea:	4603      	mov	r3, r0
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d001      	beq.n	801cbf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801cbf0:	2303      	movs	r3, #3
 801cbf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801cbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3710      	adds	r7, #16
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	bd80      	pop	{r7, pc}

0801cbfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801cbfe:	b480      	push	{r7}
 801cc00:	b083      	sub	sp, #12
 801cc02:	af00      	add	r7, sp, #0
 801cc04:	6078      	str	r0, [r7, #4]
 801cc06:	460b      	mov	r3, r1
 801cc08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801cc0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	370c      	adds	r7, #12
 801cc10:	46bd      	mov	sp, r7
 801cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc16:	4770      	bx	lr

0801cc18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801cc18:	b480      	push	{r7}
 801cc1a:	b083      	sub	sp, #12
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
 801cc20:	460b      	mov	r3, r1
 801cc22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801cc24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801cc26:	4618      	mov	r0, r3
 801cc28:	370c      	adds	r7, #12
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc30:	4770      	bx	lr

0801cc32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801cc32:	b580      	push	{r7, lr}
 801cc34:	b086      	sub	sp, #24
 801cc36:	af00      	add	r7, sp, #0
 801cc38:	6078      	str	r0, [r7, #4]
 801cc3a:	460b      	mov	r3, r1
 801cc3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801cc46:	2300      	movs	r3, #0
 801cc48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	885b      	ldrh	r3, [r3, #2]
 801cc4e:	b29a      	uxth	r2, r3
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	b29b      	uxth	r3, r3
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d920      	bls.n	801cc9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	781b      	ldrb	r3, [r3, #0]
 801cc5e:	b29b      	uxth	r3, r3
 801cc60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801cc62:	e013      	b.n	801cc8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801cc64:	f107 030a 	add.w	r3, r7, #10
 801cc68:	4619      	mov	r1, r3
 801cc6a:	6978      	ldr	r0, [r7, #20]
 801cc6c:	f000 f81b 	bl	801cca6 <USBD_GetNextDesc>
 801cc70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	785b      	ldrb	r3, [r3, #1]
 801cc76:	2b05      	cmp	r3, #5
 801cc78:	d108      	bne.n	801cc8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801cc7a:	697b      	ldr	r3, [r7, #20]
 801cc7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801cc7e:	693b      	ldr	r3, [r7, #16]
 801cc80:	789b      	ldrb	r3, [r3, #2]
 801cc82:	78fa      	ldrb	r2, [r7, #3]
 801cc84:	429a      	cmp	r2, r3
 801cc86:	d008      	beq.n	801cc9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801cc88:	2300      	movs	r3, #0
 801cc8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	885b      	ldrh	r3, [r3, #2]
 801cc90:	b29a      	uxth	r2, r3
 801cc92:	897b      	ldrh	r3, [r7, #10]
 801cc94:	429a      	cmp	r2, r3
 801cc96:	d8e5      	bhi.n	801cc64 <USBD_GetEpDesc+0x32>
 801cc98:	e000      	b.n	801cc9c <USBD_GetEpDesc+0x6a>
          break;
 801cc9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801cc9c:	693b      	ldr	r3, [r7, #16]
}
 801cc9e:	4618      	mov	r0, r3
 801cca0:	3718      	adds	r7, #24
 801cca2:	46bd      	mov	sp, r7
 801cca4:	bd80      	pop	{r7, pc}

0801cca6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801cca6:	b480      	push	{r7}
 801cca8:	b085      	sub	sp, #20
 801ccaa:	af00      	add	r7, sp, #0
 801ccac:	6078      	str	r0, [r7, #4]
 801ccae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801ccb4:	683b      	ldr	r3, [r7, #0]
 801ccb6:	881a      	ldrh	r2, [r3, #0]
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	b29b      	uxth	r3, r3
 801ccbe:	4413      	add	r3, r2
 801ccc0:	b29a      	uxth	r2, r3
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	781b      	ldrb	r3, [r3, #0]
 801ccca:	461a      	mov	r2, r3
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	4413      	add	r3, r2
 801ccd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801ccd2:	68fb      	ldr	r3, [r7, #12]
}
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	3714      	adds	r7, #20
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccde:	4770      	bx	lr

0801cce0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801cce0:	b480      	push	{r7}
 801cce2:	b087      	sub	sp, #28
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801ccec:	697b      	ldr	r3, [r7, #20]
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801ccf2:	697b      	ldr	r3, [r7, #20]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801ccf8:	697b      	ldr	r3, [r7, #20]
 801ccfa:	781b      	ldrb	r3, [r3, #0]
 801ccfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801ccfe:	8a3b      	ldrh	r3, [r7, #16]
 801cd00:	021b      	lsls	r3, r3, #8
 801cd02:	b21a      	sxth	r2, r3
 801cd04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cd08:	4313      	orrs	r3, r2
 801cd0a:	b21b      	sxth	r3, r3
 801cd0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801cd0e:	89fb      	ldrh	r3, [r7, #14]
}
 801cd10:	4618      	mov	r0, r3
 801cd12:	371c      	adds	r7, #28
 801cd14:	46bd      	mov	sp, r7
 801cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd1a:	4770      	bx	lr

0801cd1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b084      	sub	sp, #16
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
 801cd24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801cd26:	2300      	movs	r3, #0
 801cd28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cd2a:	683b      	ldr	r3, [r7, #0]
 801cd2c:	781b      	ldrb	r3, [r3, #0]
 801cd2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd32:	2b40      	cmp	r3, #64	; 0x40
 801cd34:	d005      	beq.n	801cd42 <USBD_StdDevReq+0x26>
 801cd36:	2b40      	cmp	r3, #64	; 0x40
 801cd38:	d857      	bhi.n	801cdea <USBD_StdDevReq+0xce>
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d00f      	beq.n	801cd5e <USBD_StdDevReq+0x42>
 801cd3e:	2b20      	cmp	r3, #32
 801cd40:	d153      	bne.n	801cdea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	32ae      	adds	r2, #174	; 0xae
 801cd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd50:	689b      	ldr	r3, [r3, #8]
 801cd52:	6839      	ldr	r1, [r7, #0]
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	4798      	blx	r3
 801cd58:	4603      	mov	r3, r0
 801cd5a:	73fb      	strb	r3, [r7, #15]
      break;
 801cd5c:	e04a      	b.n	801cdf4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801cd5e:	683b      	ldr	r3, [r7, #0]
 801cd60:	785b      	ldrb	r3, [r3, #1]
 801cd62:	2b09      	cmp	r3, #9
 801cd64:	d83b      	bhi.n	801cdde <USBD_StdDevReq+0xc2>
 801cd66:	a201      	add	r2, pc, #4	; (adr r2, 801cd6c <USBD_StdDevReq+0x50>)
 801cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd6c:	0801cdc1 	.word	0x0801cdc1
 801cd70:	0801cdd5 	.word	0x0801cdd5
 801cd74:	0801cddf 	.word	0x0801cddf
 801cd78:	0801cdcb 	.word	0x0801cdcb
 801cd7c:	0801cddf 	.word	0x0801cddf
 801cd80:	0801cd9f 	.word	0x0801cd9f
 801cd84:	0801cd95 	.word	0x0801cd95
 801cd88:	0801cddf 	.word	0x0801cddf
 801cd8c:	0801cdb7 	.word	0x0801cdb7
 801cd90:	0801cda9 	.word	0x0801cda9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801cd94:	6839      	ldr	r1, [r7, #0]
 801cd96:	6878      	ldr	r0, [r7, #4]
 801cd98:	f000 fa3c 	bl	801d214 <USBD_GetDescriptor>
          break;
 801cd9c:	e024      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801cd9e:	6839      	ldr	r1, [r7, #0]
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f000 fba1 	bl	801d4e8 <USBD_SetAddress>
          break;
 801cda6:	e01f      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801cda8:	6839      	ldr	r1, [r7, #0]
 801cdaa:	6878      	ldr	r0, [r7, #4]
 801cdac:	f000 fbe0 	bl	801d570 <USBD_SetConfig>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	73fb      	strb	r3, [r7, #15]
          break;
 801cdb4:	e018      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801cdb6:	6839      	ldr	r1, [r7, #0]
 801cdb8:	6878      	ldr	r0, [r7, #4]
 801cdba:	f000 fc83 	bl	801d6c4 <USBD_GetConfig>
          break;
 801cdbe:	e013      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801cdc0:	6839      	ldr	r1, [r7, #0]
 801cdc2:	6878      	ldr	r0, [r7, #4]
 801cdc4:	f000 fcb4 	bl	801d730 <USBD_GetStatus>
          break;
 801cdc8:	e00e      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801cdca:	6839      	ldr	r1, [r7, #0]
 801cdcc:	6878      	ldr	r0, [r7, #4]
 801cdce:	f000 fce3 	bl	801d798 <USBD_SetFeature>
          break;
 801cdd2:	e009      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801cdd4:	6839      	ldr	r1, [r7, #0]
 801cdd6:	6878      	ldr	r0, [r7, #4]
 801cdd8:	f000 fd07 	bl	801d7ea <USBD_ClrFeature>
          break;
 801cddc:	e004      	b.n	801cde8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801cdde:	6839      	ldr	r1, [r7, #0]
 801cde0:	6878      	ldr	r0, [r7, #4]
 801cde2:	f000 fd5e 	bl	801d8a2 <USBD_CtlError>
          break;
 801cde6:	bf00      	nop
      }
      break;
 801cde8:	e004      	b.n	801cdf4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801cdea:	6839      	ldr	r1, [r7, #0]
 801cdec:	6878      	ldr	r0, [r7, #4]
 801cdee:	f000 fd58 	bl	801d8a2 <USBD_CtlError>
      break;
 801cdf2:	bf00      	nop
  }

  return ret;
 801cdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	3710      	adds	r7, #16
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	bd80      	pop	{r7, pc}
 801cdfe:	bf00      	nop

0801ce00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	b084      	sub	sp, #16
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
 801ce08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ce0e:	683b      	ldr	r3, [r7, #0]
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ce16:	2b40      	cmp	r3, #64	; 0x40
 801ce18:	d005      	beq.n	801ce26 <USBD_StdItfReq+0x26>
 801ce1a:	2b40      	cmp	r3, #64	; 0x40
 801ce1c:	d852      	bhi.n	801cec4 <USBD_StdItfReq+0xc4>
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d001      	beq.n	801ce26 <USBD_StdItfReq+0x26>
 801ce22:	2b20      	cmp	r3, #32
 801ce24:	d14e      	bne.n	801cec4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ce2c:	b2db      	uxtb	r3, r3
 801ce2e:	3b01      	subs	r3, #1
 801ce30:	2b02      	cmp	r3, #2
 801ce32:	d840      	bhi.n	801ceb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ce34:	683b      	ldr	r3, [r7, #0]
 801ce36:	889b      	ldrh	r3, [r3, #4]
 801ce38:	b2db      	uxtb	r3, r3
 801ce3a:	2b01      	cmp	r3, #1
 801ce3c:	d836      	bhi.n	801ceac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801ce3e:	683b      	ldr	r3, [r7, #0]
 801ce40:	889b      	ldrh	r3, [r3, #4]
 801ce42:	b2db      	uxtb	r3, r3
 801ce44:	4619      	mov	r1, r3
 801ce46:	6878      	ldr	r0, [r7, #4]
 801ce48:	f7ff fed9 	bl	801cbfe <USBD_CoreFindIF>
 801ce4c:	4603      	mov	r3, r0
 801ce4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801ce50:	7bbb      	ldrb	r3, [r7, #14]
 801ce52:	2bff      	cmp	r3, #255	; 0xff
 801ce54:	d01d      	beq.n	801ce92 <USBD_StdItfReq+0x92>
 801ce56:	7bbb      	ldrb	r3, [r7, #14]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d11a      	bne.n	801ce92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801ce5c:	7bba      	ldrb	r2, [r7, #14]
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	32ae      	adds	r2, #174	; 0xae
 801ce62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ce66:	689b      	ldr	r3, [r3, #8]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d00f      	beq.n	801ce8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801ce6c:	7bba      	ldrb	r2, [r7, #14]
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801ce74:	7bba      	ldrb	r2, [r7, #14]
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	32ae      	adds	r2, #174	; 0xae
 801ce7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ce7e:	689b      	ldr	r3, [r3, #8]
 801ce80:	6839      	ldr	r1, [r7, #0]
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	4798      	blx	r3
 801ce86:	4603      	mov	r3, r0
 801ce88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801ce8a:	e004      	b.n	801ce96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801ce8c:	2303      	movs	r3, #3
 801ce8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801ce90:	e001      	b.n	801ce96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801ce92:	2303      	movs	r3, #3
 801ce94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801ce96:	683b      	ldr	r3, [r7, #0]
 801ce98:	88db      	ldrh	r3, [r3, #6]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d110      	bne.n	801cec0 <USBD_StdItfReq+0xc0>
 801ce9e:	7bfb      	ldrb	r3, [r7, #15]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d10d      	bne.n	801cec0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801cea4:	6878      	ldr	r0, [r7, #4]
 801cea6:	f000 fdc7 	bl	801da38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801ceaa:	e009      	b.n	801cec0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801ceac:	6839      	ldr	r1, [r7, #0]
 801ceae:	6878      	ldr	r0, [r7, #4]
 801ceb0:	f000 fcf7 	bl	801d8a2 <USBD_CtlError>
          break;
 801ceb4:	e004      	b.n	801cec0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801ceb6:	6839      	ldr	r1, [r7, #0]
 801ceb8:	6878      	ldr	r0, [r7, #4]
 801ceba:	f000 fcf2 	bl	801d8a2 <USBD_CtlError>
          break;
 801cebe:	e000      	b.n	801cec2 <USBD_StdItfReq+0xc2>
          break;
 801cec0:	bf00      	nop
      }
      break;
 801cec2:	e004      	b.n	801cece <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801cec4:	6839      	ldr	r1, [r7, #0]
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f000 fceb 	bl	801d8a2 <USBD_CtlError>
      break;
 801cecc:	bf00      	nop
  }

  return ret;
 801cece:	7bfb      	ldrb	r3, [r7, #15]
}
 801ced0:	4618      	mov	r0, r3
 801ced2:	3710      	adds	r7, #16
 801ced4:	46bd      	mov	sp, r7
 801ced6:	bd80      	pop	{r7, pc}

0801ced8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b084      	sub	sp, #16
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
 801cee0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801cee2:	2300      	movs	r3, #0
 801cee4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801cee6:	683b      	ldr	r3, [r7, #0]
 801cee8:	889b      	ldrh	r3, [r3, #4]
 801ceea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ceec:	683b      	ldr	r3, [r7, #0]
 801ceee:	781b      	ldrb	r3, [r3, #0]
 801cef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cef4:	2b40      	cmp	r3, #64	; 0x40
 801cef6:	d007      	beq.n	801cf08 <USBD_StdEPReq+0x30>
 801cef8:	2b40      	cmp	r3, #64	; 0x40
 801cefa:	f200 817f 	bhi.w	801d1fc <USBD_StdEPReq+0x324>
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d02a      	beq.n	801cf58 <USBD_StdEPReq+0x80>
 801cf02:	2b20      	cmp	r3, #32
 801cf04:	f040 817a 	bne.w	801d1fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801cf08:	7bbb      	ldrb	r3, [r7, #14]
 801cf0a:	4619      	mov	r1, r3
 801cf0c:	6878      	ldr	r0, [r7, #4]
 801cf0e:	f7ff fe83 	bl	801cc18 <USBD_CoreFindEP>
 801cf12:	4603      	mov	r3, r0
 801cf14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801cf16:	7b7b      	ldrb	r3, [r7, #13]
 801cf18:	2bff      	cmp	r3, #255	; 0xff
 801cf1a:	f000 8174 	beq.w	801d206 <USBD_StdEPReq+0x32e>
 801cf1e:	7b7b      	ldrb	r3, [r7, #13]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	f040 8170 	bne.w	801d206 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801cf26:	7b7a      	ldrb	r2, [r7, #13]
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801cf2e:	7b7a      	ldrb	r2, [r7, #13]
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	32ae      	adds	r2, #174	; 0xae
 801cf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf38:	689b      	ldr	r3, [r3, #8]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	f000 8163 	beq.w	801d206 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801cf40:	7b7a      	ldrb	r2, [r7, #13]
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	32ae      	adds	r2, #174	; 0xae
 801cf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf4a:	689b      	ldr	r3, [r3, #8]
 801cf4c:	6839      	ldr	r1, [r7, #0]
 801cf4e:	6878      	ldr	r0, [r7, #4]
 801cf50:	4798      	blx	r3
 801cf52:	4603      	mov	r3, r0
 801cf54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801cf56:	e156      	b.n	801d206 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801cf58:	683b      	ldr	r3, [r7, #0]
 801cf5a:	785b      	ldrb	r3, [r3, #1]
 801cf5c:	2b03      	cmp	r3, #3
 801cf5e:	d008      	beq.n	801cf72 <USBD_StdEPReq+0x9a>
 801cf60:	2b03      	cmp	r3, #3
 801cf62:	f300 8145 	bgt.w	801d1f0 <USBD_StdEPReq+0x318>
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	f000 809b 	beq.w	801d0a2 <USBD_StdEPReq+0x1ca>
 801cf6c:	2b01      	cmp	r3, #1
 801cf6e:	d03c      	beq.n	801cfea <USBD_StdEPReq+0x112>
 801cf70:	e13e      	b.n	801d1f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf78:	b2db      	uxtb	r3, r3
 801cf7a:	2b02      	cmp	r3, #2
 801cf7c:	d002      	beq.n	801cf84 <USBD_StdEPReq+0xac>
 801cf7e:	2b03      	cmp	r3, #3
 801cf80:	d016      	beq.n	801cfb0 <USBD_StdEPReq+0xd8>
 801cf82:	e02c      	b.n	801cfde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cf84:	7bbb      	ldrb	r3, [r7, #14]
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d00d      	beq.n	801cfa6 <USBD_StdEPReq+0xce>
 801cf8a:	7bbb      	ldrb	r3, [r7, #14]
 801cf8c:	2b80      	cmp	r3, #128	; 0x80
 801cf8e:	d00a      	beq.n	801cfa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801cf90:	7bbb      	ldrb	r3, [r7, #14]
 801cf92:	4619      	mov	r1, r3
 801cf94:	6878      	ldr	r0, [r7, #4]
 801cf96:	f001 f93d 	bl	801e214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801cf9a:	2180      	movs	r1, #128	; 0x80
 801cf9c:	6878      	ldr	r0, [r7, #4]
 801cf9e:	f001 f939 	bl	801e214 <USBD_LL_StallEP>
 801cfa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cfa4:	e020      	b.n	801cfe8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801cfa6:	6839      	ldr	r1, [r7, #0]
 801cfa8:	6878      	ldr	r0, [r7, #4]
 801cfaa:	f000 fc7a 	bl	801d8a2 <USBD_CtlError>
              break;
 801cfae:	e01b      	b.n	801cfe8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cfb0:	683b      	ldr	r3, [r7, #0]
 801cfb2:	885b      	ldrh	r3, [r3, #2]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d10e      	bne.n	801cfd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801cfb8:	7bbb      	ldrb	r3, [r7, #14]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d00b      	beq.n	801cfd6 <USBD_StdEPReq+0xfe>
 801cfbe:	7bbb      	ldrb	r3, [r7, #14]
 801cfc0:	2b80      	cmp	r3, #128	; 0x80
 801cfc2:	d008      	beq.n	801cfd6 <USBD_StdEPReq+0xfe>
 801cfc4:	683b      	ldr	r3, [r7, #0]
 801cfc6:	88db      	ldrh	r3, [r3, #6]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d104      	bne.n	801cfd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801cfcc:	7bbb      	ldrb	r3, [r7, #14]
 801cfce:	4619      	mov	r1, r3
 801cfd0:	6878      	ldr	r0, [r7, #4]
 801cfd2:	f001 f91f 	bl	801e214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801cfd6:	6878      	ldr	r0, [r7, #4]
 801cfd8:	f000 fd2e 	bl	801da38 <USBD_CtlSendStatus>

              break;
 801cfdc:	e004      	b.n	801cfe8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801cfde:	6839      	ldr	r1, [r7, #0]
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f000 fc5e 	bl	801d8a2 <USBD_CtlError>
              break;
 801cfe6:	bf00      	nop
          }
          break;
 801cfe8:	e107      	b.n	801d1fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cff0:	b2db      	uxtb	r3, r3
 801cff2:	2b02      	cmp	r3, #2
 801cff4:	d002      	beq.n	801cffc <USBD_StdEPReq+0x124>
 801cff6:	2b03      	cmp	r3, #3
 801cff8:	d016      	beq.n	801d028 <USBD_StdEPReq+0x150>
 801cffa:	e04b      	b.n	801d094 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cffc:	7bbb      	ldrb	r3, [r7, #14]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d00d      	beq.n	801d01e <USBD_StdEPReq+0x146>
 801d002:	7bbb      	ldrb	r3, [r7, #14]
 801d004:	2b80      	cmp	r3, #128	; 0x80
 801d006:	d00a      	beq.n	801d01e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801d008:	7bbb      	ldrb	r3, [r7, #14]
 801d00a:	4619      	mov	r1, r3
 801d00c:	6878      	ldr	r0, [r7, #4]
 801d00e:	f001 f901 	bl	801e214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801d012:	2180      	movs	r1, #128	; 0x80
 801d014:	6878      	ldr	r0, [r7, #4]
 801d016:	f001 f8fd 	bl	801e214 <USBD_LL_StallEP>
 801d01a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d01c:	e040      	b.n	801d0a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801d01e:	6839      	ldr	r1, [r7, #0]
 801d020:	6878      	ldr	r0, [r7, #4]
 801d022:	f000 fc3e 	bl	801d8a2 <USBD_CtlError>
              break;
 801d026:	e03b      	b.n	801d0a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d028:	683b      	ldr	r3, [r7, #0]
 801d02a:	885b      	ldrh	r3, [r3, #2]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d136      	bne.n	801d09e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801d030:	7bbb      	ldrb	r3, [r7, #14]
 801d032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d036:	2b00      	cmp	r3, #0
 801d038:	d004      	beq.n	801d044 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801d03a:	7bbb      	ldrb	r3, [r7, #14]
 801d03c:	4619      	mov	r1, r3
 801d03e:	6878      	ldr	r0, [r7, #4]
 801d040:	f001 f907 	bl	801e252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	f000 fcf7 	bl	801da38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801d04a:	7bbb      	ldrb	r3, [r7, #14]
 801d04c:	4619      	mov	r1, r3
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f7ff fde2 	bl	801cc18 <USBD_CoreFindEP>
 801d054:	4603      	mov	r3, r0
 801d056:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d058:	7b7b      	ldrb	r3, [r7, #13]
 801d05a:	2bff      	cmp	r3, #255	; 0xff
 801d05c:	d01f      	beq.n	801d09e <USBD_StdEPReq+0x1c6>
 801d05e:	7b7b      	ldrb	r3, [r7, #13]
 801d060:	2b00      	cmp	r3, #0
 801d062:	d11c      	bne.n	801d09e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801d064:	7b7a      	ldrb	r2, [r7, #13]
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801d06c:	7b7a      	ldrb	r2, [r7, #13]
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	32ae      	adds	r2, #174	; 0xae
 801d072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d076:	689b      	ldr	r3, [r3, #8]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d010      	beq.n	801d09e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801d07c:	7b7a      	ldrb	r2, [r7, #13]
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	32ae      	adds	r2, #174	; 0xae
 801d082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d086:	689b      	ldr	r3, [r3, #8]
 801d088:	6839      	ldr	r1, [r7, #0]
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	4798      	blx	r3
 801d08e:	4603      	mov	r3, r0
 801d090:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801d092:	e004      	b.n	801d09e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801d094:	6839      	ldr	r1, [r7, #0]
 801d096:	6878      	ldr	r0, [r7, #4]
 801d098:	f000 fc03 	bl	801d8a2 <USBD_CtlError>
              break;
 801d09c:	e000      	b.n	801d0a0 <USBD_StdEPReq+0x1c8>
              break;
 801d09e:	bf00      	nop
          }
          break;
 801d0a0:	e0ab      	b.n	801d1fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0a8:	b2db      	uxtb	r3, r3
 801d0aa:	2b02      	cmp	r3, #2
 801d0ac:	d002      	beq.n	801d0b4 <USBD_StdEPReq+0x1dc>
 801d0ae:	2b03      	cmp	r3, #3
 801d0b0:	d032      	beq.n	801d118 <USBD_StdEPReq+0x240>
 801d0b2:	e097      	b.n	801d1e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d0b4:	7bbb      	ldrb	r3, [r7, #14]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d007      	beq.n	801d0ca <USBD_StdEPReq+0x1f2>
 801d0ba:	7bbb      	ldrb	r3, [r7, #14]
 801d0bc:	2b80      	cmp	r3, #128	; 0x80
 801d0be:	d004      	beq.n	801d0ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801d0c0:	6839      	ldr	r1, [r7, #0]
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	f000 fbed 	bl	801d8a2 <USBD_CtlError>
                break;
 801d0c8:	e091      	b.n	801d1ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	da0b      	bge.n	801d0ea <USBD_StdEPReq+0x212>
 801d0d2:	7bbb      	ldrb	r3, [r7, #14]
 801d0d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d0d8:	4613      	mov	r3, r2
 801d0da:	009b      	lsls	r3, r3, #2
 801d0dc:	4413      	add	r3, r2
 801d0de:	009b      	lsls	r3, r3, #2
 801d0e0:	3310      	adds	r3, #16
 801d0e2:	687a      	ldr	r2, [r7, #4]
 801d0e4:	4413      	add	r3, r2
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	e00b      	b.n	801d102 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d0ea:	7bbb      	ldrb	r3, [r7, #14]
 801d0ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d0f0:	4613      	mov	r3, r2
 801d0f2:	009b      	lsls	r3, r3, #2
 801d0f4:	4413      	add	r3, r2
 801d0f6:	009b      	lsls	r3, r3, #2
 801d0f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d0fc:	687a      	ldr	r2, [r7, #4]
 801d0fe:	4413      	add	r3, r2
 801d100:	3304      	adds	r3, #4
 801d102:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801d104:	68bb      	ldr	r3, [r7, #8]
 801d106:	2200      	movs	r2, #0
 801d108:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801d10a:	68bb      	ldr	r3, [r7, #8]
 801d10c:	2202      	movs	r2, #2
 801d10e:	4619      	mov	r1, r3
 801d110:	6878      	ldr	r0, [r7, #4]
 801d112:	f000 fc37 	bl	801d984 <USBD_CtlSendData>
              break;
 801d116:	e06a      	b.n	801d1ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801d118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	da11      	bge.n	801d144 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801d120:	7bbb      	ldrb	r3, [r7, #14]
 801d122:	f003 020f 	and.w	r2, r3, #15
 801d126:	6879      	ldr	r1, [r7, #4]
 801d128:	4613      	mov	r3, r2
 801d12a:	009b      	lsls	r3, r3, #2
 801d12c:	4413      	add	r3, r2
 801d12e:	009b      	lsls	r3, r3, #2
 801d130:	440b      	add	r3, r1
 801d132:	3324      	adds	r3, #36	; 0x24
 801d134:	881b      	ldrh	r3, [r3, #0]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d117      	bne.n	801d16a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801d13a:	6839      	ldr	r1, [r7, #0]
 801d13c:	6878      	ldr	r0, [r7, #4]
 801d13e:	f000 fbb0 	bl	801d8a2 <USBD_CtlError>
                  break;
 801d142:	e054      	b.n	801d1ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801d144:	7bbb      	ldrb	r3, [r7, #14]
 801d146:	f003 020f 	and.w	r2, r3, #15
 801d14a:	6879      	ldr	r1, [r7, #4]
 801d14c:	4613      	mov	r3, r2
 801d14e:	009b      	lsls	r3, r3, #2
 801d150:	4413      	add	r3, r2
 801d152:	009b      	lsls	r3, r3, #2
 801d154:	440b      	add	r3, r1
 801d156:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801d15a:	881b      	ldrh	r3, [r3, #0]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d104      	bne.n	801d16a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801d160:	6839      	ldr	r1, [r7, #0]
 801d162:	6878      	ldr	r0, [r7, #4]
 801d164:	f000 fb9d 	bl	801d8a2 <USBD_CtlError>
                  break;
 801d168:	e041      	b.n	801d1ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d16a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	da0b      	bge.n	801d18a <USBD_StdEPReq+0x2b2>
 801d172:	7bbb      	ldrb	r3, [r7, #14]
 801d174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d178:	4613      	mov	r3, r2
 801d17a:	009b      	lsls	r3, r3, #2
 801d17c:	4413      	add	r3, r2
 801d17e:	009b      	lsls	r3, r3, #2
 801d180:	3310      	adds	r3, #16
 801d182:	687a      	ldr	r2, [r7, #4]
 801d184:	4413      	add	r3, r2
 801d186:	3304      	adds	r3, #4
 801d188:	e00b      	b.n	801d1a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d18a:	7bbb      	ldrb	r3, [r7, #14]
 801d18c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d190:	4613      	mov	r3, r2
 801d192:	009b      	lsls	r3, r3, #2
 801d194:	4413      	add	r3, r2
 801d196:	009b      	lsls	r3, r3, #2
 801d198:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d19c:	687a      	ldr	r2, [r7, #4]
 801d19e:	4413      	add	r3, r2
 801d1a0:	3304      	adds	r3, #4
 801d1a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801d1a4:	7bbb      	ldrb	r3, [r7, #14]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d002      	beq.n	801d1b0 <USBD_StdEPReq+0x2d8>
 801d1aa:	7bbb      	ldrb	r3, [r7, #14]
 801d1ac:	2b80      	cmp	r3, #128	; 0x80
 801d1ae:	d103      	bne.n	801d1b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	601a      	str	r2, [r3, #0]
 801d1b6:	e00e      	b.n	801d1d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801d1b8:	7bbb      	ldrb	r3, [r7, #14]
 801d1ba:	4619      	mov	r1, r3
 801d1bc:	6878      	ldr	r0, [r7, #4]
 801d1be:	f001 f867 	bl	801e290 <USBD_LL_IsStallEP>
 801d1c2:	4603      	mov	r3, r0
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d003      	beq.n	801d1d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801d1c8:	68bb      	ldr	r3, [r7, #8]
 801d1ca:	2201      	movs	r2, #1
 801d1cc:	601a      	str	r2, [r3, #0]
 801d1ce:	e002      	b.n	801d1d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	2202      	movs	r2, #2
 801d1da:	4619      	mov	r1, r3
 801d1dc:	6878      	ldr	r0, [r7, #4]
 801d1de:	f000 fbd1 	bl	801d984 <USBD_CtlSendData>
              break;
 801d1e2:	e004      	b.n	801d1ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801d1e4:	6839      	ldr	r1, [r7, #0]
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f000 fb5b 	bl	801d8a2 <USBD_CtlError>
              break;
 801d1ec:	bf00      	nop
          }
          break;
 801d1ee:	e004      	b.n	801d1fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801d1f0:	6839      	ldr	r1, [r7, #0]
 801d1f2:	6878      	ldr	r0, [r7, #4]
 801d1f4:	f000 fb55 	bl	801d8a2 <USBD_CtlError>
          break;
 801d1f8:	bf00      	nop
      }
      break;
 801d1fa:	e005      	b.n	801d208 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801d1fc:	6839      	ldr	r1, [r7, #0]
 801d1fe:	6878      	ldr	r0, [r7, #4]
 801d200:	f000 fb4f 	bl	801d8a2 <USBD_CtlError>
      break;
 801d204:	e000      	b.n	801d208 <USBD_StdEPReq+0x330>
      break;
 801d206:	bf00      	nop
  }

  return ret;
 801d208:	7bfb      	ldrb	r3, [r7, #15]
}
 801d20a:	4618      	mov	r0, r3
 801d20c:	3710      	adds	r7, #16
 801d20e:	46bd      	mov	sp, r7
 801d210:	bd80      	pop	{r7, pc}
	...

0801d214 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b084      	sub	sp, #16
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
 801d21c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d21e:	2300      	movs	r3, #0
 801d220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801d222:	2300      	movs	r3, #0
 801d224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801d226:	2300      	movs	r3, #0
 801d228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	885b      	ldrh	r3, [r3, #2]
 801d22e:	0a1b      	lsrs	r3, r3, #8
 801d230:	b29b      	uxth	r3, r3
 801d232:	3b01      	subs	r3, #1
 801d234:	2b06      	cmp	r3, #6
 801d236:	f200 8128 	bhi.w	801d48a <USBD_GetDescriptor+0x276>
 801d23a:	a201      	add	r2, pc, #4	; (adr r2, 801d240 <USBD_GetDescriptor+0x2c>)
 801d23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d240:	0801d25d 	.word	0x0801d25d
 801d244:	0801d275 	.word	0x0801d275
 801d248:	0801d2b5 	.word	0x0801d2b5
 801d24c:	0801d48b 	.word	0x0801d48b
 801d250:	0801d48b 	.word	0x0801d48b
 801d254:	0801d42b 	.word	0x0801d42b
 801d258:	0801d457 	.word	0x0801d457
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	687a      	ldr	r2, [r7, #4]
 801d266:	7c12      	ldrb	r2, [r2, #16]
 801d268:	f107 0108 	add.w	r1, r7, #8
 801d26c:	4610      	mov	r0, r2
 801d26e:	4798      	blx	r3
 801d270:	60f8      	str	r0, [r7, #12]
      break;
 801d272:	e112      	b.n	801d49a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	7c1b      	ldrb	r3, [r3, #16]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d10d      	bne.n	801d298 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d284:	f107 0208 	add.w	r2, r7, #8
 801d288:	4610      	mov	r0, r2
 801d28a:	4798      	blx	r3
 801d28c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	3301      	adds	r3, #1
 801d292:	2202      	movs	r2, #2
 801d294:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801d296:	e100      	b.n	801d49a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2a0:	f107 0208 	add.w	r2, r7, #8
 801d2a4:	4610      	mov	r0, r2
 801d2a6:	4798      	blx	r3
 801d2a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	3301      	adds	r3, #1
 801d2ae:	2202      	movs	r2, #2
 801d2b0:	701a      	strb	r2, [r3, #0]
      break;
 801d2b2:	e0f2      	b.n	801d49a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801d2b4:	683b      	ldr	r3, [r7, #0]
 801d2b6:	885b      	ldrh	r3, [r3, #2]
 801d2b8:	b2db      	uxtb	r3, r3
 801d2ba:	2b05      	cmp	r3, #5
 801d2bc:	f200 80ac 	bhi.w	801d418 <USBD_GetDescriptor+0x204>
 801d2c0:	a201      	add	r2, pc, #4	; (adr r2, 801d2c8 <USBD_GetDescriptor+0xb4>)
 801d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2c6:	bf00      	nop
 801d2c8:	0801d2e1 	.word	0x0801d2e1
 801d2cc:	0801d315 	.word	0x0801d315
 801d2d0:	0801d349 	.word	0x0801d349
 801d2d4:	0801d37d 	.word	0x0801d37d
 801d2d8:	0801d3b1 	.word	0x0801d3b1
 801d2dc:	0801d3e5 	.word	0x0801d3e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d00b      	beq.n	801d304 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d2f2:	685b      	ldr	r3, [r3, #4]
 801d2f4:	687a      	ldr	r2, [r7, #4]
 801d2f6:	7c12      	ldrb	r2, [r2, #16]
 801d2f8:	f107 0108 	add.w	r1, r7, #8
 801d2fc:	4610      	mov	r0, r2
 801d2fe:	4798      	blx	r3
 801d300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d302:	e091      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d304:	6839      	ldr	r1, [r7, #0]
 801d306:	6878      	ldr	r0, [r7, #4]
 801d308:	f000 facb 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d30c:	7afb      	ldrb	r3, [r7, #11]
 801d30e:	3301      	adds	r3, #1
 801d310:	72fb      	strb	r3, [r7, #11]
          break;
 801d312:	e089      	b.n	801d428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d31a:	689b      	ldr	r3, [r3, #8]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d00b      	beq.n	801d338 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d326:	689b      	ldr	r3, [r3, #8]
 801d328:	687a      	ldr	r2, [r7, #4]
 801d32a:	7c12      	ldrb	r2, [r2, #16]
 801d32c:	f107 0108 	add.w	r1, r7, #8
 801d330:	4610      	mov	r0, r2
 801d332:	4798      	blx	r3
 801d334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d336:	e077      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d338:	6839      	ldr	r1, [r7, #0]
 801d33a:	6878      	ldr	r0, [r7, #4]
 801d33c:	f000 fab1 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d340:	7afb      	ldrb	r3, [r7, #11]
 801d342:	3301      	adds	r3, #1
 801d344:	72fb      	strb	r3, [r7, #11]
          break;
 801d346:	e06f      	b.n	801d428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d34e:	68db      	ldr	r3, [r3, #12]
 801d350:	2b00      	cmp	r3, #0
 801d352:	d00b      	beq.n	801d36c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d35a:	68db      	ldr	r3, [r3, #12]
 801d35c:	687a      	ldr	r2, [r7, #4]
 801d35e:	7c12      	ldrb	r2, [r2, #16]
 801d360:	f107 0108 	add.w	r1, r7, #8
 801d364:	4610      	mov	r0, r2
 801d366:	4798      	blx	r3
 801d368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d36a:	e05d      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d36c:	6839      	ldr	r1, [r7, #0]
 801d36e:	6878      	ldr	r0, [r7, #4]
 801d370:	f000 fa97 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d374:	7afb      	ldrb	r3, [r7, #11]
 801d376:	3301      	adds	r3, #1
 801d378:	72fb      	strb	r3, [r7, #11]
          break;
 801d37a:	e055      	b.n	801d428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d382:	691b      	ldr	r3, [r3, #16]
 801d384:	2b00      	cmp	r3, #0
 801d386:	d00b      	beq.n	801d3a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d38e:	691b      	ldr	r3, [r3, #16]
 801d390:	687a      	ldr	r2, [r7, #4]
 801d392:	7c12      	ldrb	r2, [r2, #16]
 801d394:	f107 0108 	add.w	r1, r7, #8
 801d398:	4610      	mov	r0, r2
 801d39a:	4798      	blx	r3
 801d39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d39e:	e043      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d3a0:	6839      	ldr	r1, [r7, #0]
 801d3a2:	6878      	ldr	r0, [r7, #4]
 801d3a4:	f000 fa7d 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d3a8:	7afb      	ldrb	r3, [r7, #11]
 801d3aa:	3301      	adds	r3, #1
 801d3ac:	72fb      	strb	r3, [r7, #11]
          break;
 801d3ae:	e03b      	b.n	801d428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d3b6:	695b      	ldr	r3, [r3, #20]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d00b      	beq.n	801d3d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d3c2:	695b      	ldr	r3, [r3, #20]
 801d3c4:	687a      	ldr	r2, [r7, #4]
 801d3c6:	7c12      	ldrb	r2, [r2, #16]
 801d3c8:	f107 0108 	add.w	r1, r7, #8
 801d3cc:	4610      	mov	r0, r2
 801d3ce:	4798      	blx	r3
 801d3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d3d2:	e029      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d3d4:	6839      	ldr	r1, [r7, #0]
 801d3d6:	6878      	ldr	r0, [r7, #4]
 801d3d8:	f000 fa63 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d3dc:	7afb      	ldrb	r3, [r7, #11]
 801d3de:	3301      	adds	r3, #1
 801d3e0:	72fb      	strb	r3, [r7, #11]
          break;
 801d3e2:	e021      	b.n	801d428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d3ea:	699b      	ldr	r3, [r3, #24]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d00b      	beq.n	801d408 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d3f6:	699b      	ldr	r3, [r3, #24]
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	7c12      	ldrb	r2, [r2, #16]
 801d3fc:	f107 0108 	add.w	r1, r7, #8
 801d400:	4610      	mov	r0, r2
 801d402:	4798      	blx	r3
 801d404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d406:	e00f      	b.n	801d428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d408:	6839      	ldr	r1, [r7, #0]
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f000 fa49 	bl	801d8a2 <USBD_CtlError>
            err++;
 801d410:	7afb      	ldrb	r3, [r7, #11]
 801d412:	3301      	adds	r3, #1
 801d414:	72fb      	strb	r3, [r7, #11]
          break;
 801d416:	e007      	b.n	801d428 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801d418:	6839      	ldr	r1, [r7, #0]
 801d41a:	6878      	ldr	r0, [r7, #4]
 801d41c:	f000 fa41 	bl	801d8a2 <USBD_CtlError>
          err++;
 801d420:	7afb      	ldrb	r3, [r7, #11]
 801d422:	3301      	adds	r3, #1
 801d424:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801d426:	bf00      	nop
      }
      break;
 801d428:	e037      	b.n	801d49a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	7c1b      	ldrb	r3, [r3, #16]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d109      	bne.n	801d446 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d43a:	f107 0208 	add.w	r2, r7, #8
 801d43e:	4610      	mov	r0, r2
 801d440:	4798      	blx	r3
 801d442:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d444:	e029      	b.n	801d49a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d446:	6839      	ldr	r1, [r7, #0]
 801d448:	6878      	ldr	r0, [r7, #4]
 801d44a:	f000 fa2a 	bl	801d8a2 <USBD_CtlError>
        err++;
 801d44e:	7afb      	ldrb	r3, [r7, #11]
 801d450:	3301      	adds	r3, #1
 801d452:	72fb      	strb	r3, [r7, #11]
      break;
 801d454:	e021      	b.n	801d49a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	7c1b      	ldrb	r3, [r3, #16]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d10d      	bne.n	801d47a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d466:	f107 0208 	add.w	r2, r7, #8
 801d46a:	4610      	mov	r0, r2
 801d46c:	4798      	blx	r3
 801d46e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	3301      	adds	r3, #1
 801d474:	2207      	movs	r2, #7
 801d476:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d478:	e00f      	b.n	801d49a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d47a:	6839      	ldr	r1, [r7, #0]
 801d47c:	6878      	ldr	r0, [r7, #4]
 801d47e:	f000 fa10 	bl	801d8a2 <USBD_CtlError>
        err++;
 801d482:	7afb      	ldrb	r3, [r7, #11]
 801d484:	3301      	adds	r3, #1
 801d486:	72fb      	strb	r3, [r7, #11]
      break;
 801d488:	e007      	b.n	801d49a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801d48a:	6839      	ldr	r1, [r7, #0]
 801d48c:	6878      	ldr	r0, [r7, #4]
 801d48e:	f000 fa08 	bl	801d8a2 <USBD_CtlError>
      err++;
 801d492:	7afb      	ldrb	r3, [r7, #11]
 801d494:	3301      	adds	r3, #1
 801d496:	72fb      	strb	r3, [r7, #11]
      break;
 801d498:	bf00      	nop
  }

  if (err != 0U)
 801d49a:	7afb      	ldrb	r3, [r7, #11]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d11e      	bne.n	801d4de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	88db      	ldrh	r3, [r3, #6]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d016      	beq.n	801d4d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801d4a8:	893b      	ldrh	r3, [r7, #8]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d00e      	beq.n	801d4cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	88da      	ldrh	r2, [r3, #6]
 801d4b2:	893b      	ldrh	r3, [r7, #8]
 801d4b4:	4293      	cmp	r3, r2
 801d4b6:	bf28      	it	cs
 801d4b8:	4613      	movcs	r3, r2
 801d4ba:	b29b      	uxth	r3, r3
 801d4bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d4be:	893b      	ldrh	r3, [r7, #8]
 801d4c0:	461a      	mov	r2, r3
 801d4c2:	68f9      	ldr	r1, [r7, #12]
 801d4c4:	6878      	ldr	r0, [r7, #4]
 801d4c6:	f000 fa5d 	bl	801d984 <USBD_CtlSendData>
 801d4ca:	e009      	b.n	801d4e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801d4cc:	6839      	ldr	r1, [r7, #0]
 801d4ce:	6878      	ldr	r0, [r7, #4]
 801d4d0:	f000 f9e7 	bl	801d8a2 <USBD_CtlError>
 801d4d4:	e004      	b.n	801d4e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801d4d6:	6878      	ldr	r0, [r7, #4]
 801d4d8:	f000 faae 	bl	801da38 <USBD_CtlSendStatus>
 801d4dc:	e000      	b.n	801d4e0 <USBD_GetDescriptor+0x2cc>
    return;
 801d4de:	bf00      	nop
  }
}
 801d4e0:	3710      	adds	r7, #16
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	bd80      	pop	{r7, pc}
 801d4e6:	bf00      	nop

0801d4e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b084      	sub	sp, #16
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d4f2:	683b      	ldr	r3, [r7, #0]
 801d4f4:	889b      	ldrh	r3, [r3, #4]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d131      	bne.n	801d55e <USBD_SetAddress+0x76>
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	88db      	ldrh	r3, [r3, #6]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d12d      	bne.n	801d55e <USBD_SetAddress+0x76>
 801d502:	683b      	ldr	r3, [r7, #0]
 801d504:	885b      	ldrh	r3, [r3, #2]
 801d506:	2b7f      	cmp	r3, #127	; 0x7f
 801d508:	d829      	bhi.n	801d55e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	885b      	ldrh	r3, [r3, #2]
 801d50e:	b2db      	uxtb	r3, r3
 801d510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d51c:	b2db      	uxtb	r3, r3
 801d51e:	2b03      	cmp	r3, #3
 801d520:	d104      	bne.n	801d52c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801d522:	6839      	ldr	r1, [r7, #0]
 801d524:	6878      	ldr	r0, [r7, #4]
 801d526:	f000 f9bc 	bl	801d8a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d52a:	e01d      	b.n	801d568 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	7bfa      	ldrb	r2, [r7, #15]
 801d530:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d534:	7bfb      	ldrb	r3, [r7, #15]
 801d536:	4619      	mov	r1, r3
 801d538:	6878      	ldr	r0, [r7, #4]
 801d53a:	f000 fed5 	bl	801e2e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801d53e:	6878      	ldr	r0, [r7, #4]
 801d540:	f000 fa7a 	bl	801da38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d544:	7bfb      	ldrb	r3, [r7, #15]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d004      	beq.n	801d554 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	2202      	movs	r2, #2
 801d54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d552:	e009      	b.n	801d568 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	2201      	movs	r2, #1
 801d558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d55c:	e004      	b.n	801d568 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d55e:	6839      	ldr	r1, [r7, #0]
 801d560:	6878      	ldr	r0, [r7, #4]
 801d562:	f000 f99e 	bl	801d8a2 <USBD_CtlError>
  }
}
 801d566:	bf00      	nop
 801d568:	bf00      	nop
 801d56a:	3710      	adds	r7, #16
 801d56c:	46bd      	mov	sp, r7
 801d56e:	bd80      	pop	{r7, pc}

0801d570 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b084      	sub	sp, #16
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
 801d578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d57a:	2300      	movs	r3, #0
 801d57c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d57e:	683b      	ldr	r3, [r7, #0]
 801d580:	885b      	ldrh	r3, [r3, #2]
 801d582:	b2da      	uxtb	r2, r3
 801d584:	4b4e      	ldr	r3, [pc, #312]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d586:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d588:	4b4d      	ldr	r3, [pc, #308]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d58a:	781b      	ldrb	r3, [r3, #0]
 801d58c:	2b01      	cmp	r3, #1
 801d58e:	d905      	bls.n	801d59c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801d590:	6839      	ldr	r1, [r7, #0]
 801d592:	6878      	ldr	r0, [r7, #4]
 801d594:	f000 f985 	bl	801d8a2 <USBD_CtlError>
    return USBD_FAIL;
 801d598:	2303      	movs	r3, #3
 801d59a:	e08c      	b.n	801d6b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d5a2:	b2db      	uxtb	r3, r3
 801d5a4:	2b02      	cmp	r3, #2
 801d5a6:	d002      	beq.n	801d5ae <USBD_SetConfig+0x3e>
 801d5a8:	2b03      	cmp	r3, #3
 801d5aa:	d029      	beq.n	801d600 <USBD_SetConfig+0x90>
 801d5ac:	e075      	b.n	801d69a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801d5ae:	4b44      	ldr	r3, [pc, #272]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d5b0:	781b      	ldrb	r3, [r3, #0]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d020      	beq.n	801d5f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801d5b6:	4b42      	ldr	r3, [pc, #264]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d5b8:	781b      	ldrb	r3, [r3, #0]
 801d5ba:	461a      	mov	r2, r3
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801d5c0:	4b3f      	ldr	r3, [pc, #252]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d5c2:	781b      	ldrb	r3, [r3, #0]
 801d5c4:	4619      	mov	r1, r3
 801d5c6:	6878      	ldr	r0, [r7, #4]
 801d5c8:	f7fe ffe7 	bl	801c59a <USBD_SetClassConfig>
 801d5cc:	4603      	mov	r3, r0
 801d5ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801d5d0:	7bfb      	ldrb	r3, [r7, #15]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d008      	beq.n	801d5e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801d5d6:	6839      	ldr	r1, [r7, #0]
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f000 f962 	bl	801d8a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	2202      	movs	r2, #2
 801d5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801d5e6:	e065      	b.n	801d6b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801d5e8:	6878      	ldr	r0, [r7, #4]
 801d5ea:	f000 fa25 	bl	801da38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	2203      	movs	r2, #3
 801d5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801d5f6:	e05d      	b.n	801d6b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801d5f8:	6878      	ldr	r0, [r7, #4]
 801d5fa:	f000 fa1d 	bl	801da38 <USBD_CtlSendStatus>
      break;
 801d5fe:	e059      	b.n	801d6b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801d600:	4b2f      	ldr	r3, [pc, #188]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d112      	bne.n	801d62e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	2202      	movs	r2, #2
 801d60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801d610:	4b2b      	ldr	r3, [pc, #172]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d612:	781b      	ldrb	r3, [r3, #0]
 801d614:	461a      	mov	r2, r3
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801d61a:	4b29      	ldr	r3, [pc, #164]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	4619      	mov	r1, r3
 801d620:	6878      	ldr	r0, [r7, #4]
 801d622:	f7fe ffd6 	bl	801c5d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801d626:	6878      	ldr	r0, [r7, #4]
 801d628:	f000 fa06 	bl	801da38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801d62c:	e042      	b.n	801d6b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801d62e:	4b24      	ldr	r3, [pc, #144]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d630:	781b      	ldrb	r3, [r3, #0]
 801d632:	461a      	mov	r2, r3
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	685b      	ldr	r3, [r3, #4]
 801d638:	429a      	cmp	r2, r3
 801d63a:	d02a      	beq.n	801d692 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	685b      	ldr	r3, [r3, #4]
 801d640:	b2db      	uxtb	r3, r3
 801d642:	4619      	mov	r1, r3
 801d644:	6878      	ldr	r0, [r7, #4]
 801d646:	f7fe ffc4 	bl	801c5d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801d64a:	4b1d      	ldr	r3, [pc, #116]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d64c:	781b      	ldrb	r3, [r3, #0]
 801d64e:	461a      	mov	r2, r3
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801d654:	4b1a      	ldr	r3, [pc, #104]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d656:	781b      	ldrb	r3, [r3, #0]
 801d658:	4619      	mov	r1, r3
 801d65a:	6878      	ldr	r0, [r7, #4]
 801d65c:	f7fe ff9d 	bl	801c59a <USBD_SetClassConfig>
 801d660:	4603      	mov	r3, r0
 801d662:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801d664:	7bfb      	ldrb	r3, [r7, #15]
 801d666:	2b00      	cmp	r3, #0
 801d668:	d00f      	beq.n	801d68a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801d66a:	6839      	ldr	r1, [r7, #0]
 801d66c:	6878      	ldr	r0, [r7, #4]
 801d66e:	f000 f918 	bl	801d8a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	685b      	ldr	r3, [r3, #4]
 801d676:	b2db      	uxtb	r3, r3
 801d678:	4619      	mov	r1, r3
 801d67a:	6878      	ldr	r0, [r7, #4]
 801d67c:	f7fe ffa9 	bl	801c5d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	2202      	movs	r2, #2
 801d684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801d688:	e014      	b.n	801d6b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801d68a:	6878      	ldr	r0, [r7, #4]
 801d68c:	f000 f9d4 	bl	801da38 <USBD_CtlSendStatus>
      break;
 801d690:	e010      	b.n	801d6b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801d692:	6878      	ldr	r0, [r7, #4]
 801d694:	f000 f9d0 	bl	801da38 <USBD_CtlSendStatus>
      break;
 801d698:	e00c      	b.n	801d6b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801d69a:	6839      	ldr	r1, [r7, #0]
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f000 f900 	bl	801d8a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801d6a2:	4b07      	ldr	r3, [pc, #28]	; (801d6c0 <USBD_SetConfig+0x150>)
 801d6a4:	781b      	ldrb	r3, [r3, #0]
 801d6a6:	4619      	mov	r1, r3
 801d6a8:	6878      	ldr	r0, [r7, #4]
 801d6aa:	f7fe ff92 	bl	801c5d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801d6ae:	2303      	movs	r3, #3
 801d6b0:	73fb      	strb	r3, [r7, #15]
      break;
 801d6b2:	bf00      	nop
  }

  return ret;
 801d6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	3710      	adds	r7, #16
 801d6ba:	46bd      	mov	sp, r7
 801d6bc:	bd80      	pop	{r7, pc}
 801d6be:	bf00      	nop
 801d6c0:	20009bd0 	.word	0x20009bd0

0801d6c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b082      	sub	sp, #8
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	6078      	str	r0, [r7, #4]
 801d6cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d6ce:	683b      	ldr	r3, [r7, #0]
 801d6d0:	88db      	ldrh	r3, [r3, #6]
 801d6d2:	2b01      	cmp	r3, #1
 801d6d4:	d004      	beq.n	801d6e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d6d6:	6839      	ldr	r1, [r7, #0]
 801d6d8:	6878      	ldr	r0, [r7, #4]
 801d6da:	f000 f8e2 	bl	801d8a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d6de:	e023      	b.n	801d728 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d6e6:	b2db      	uxtb	r3, r3
 801d6e8:	2b02      	cmp	r3, #2
 801d6ea:	dc02      	bgt.n	801d6f2 <USBD_GetConfig+0x2e>
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	dc03      	bgt.n	801d6f8 <USBD_GetConfig+0x34>
 801d6f0:	e015      	b.n	801d71e <USBD_GetConfig+0x5a>
 801d6f2:	2b03      	cmp	r3, #3
 801d6f4:	d00b      	beq.n	801d70e <USBD_GetConfig+0x4a>
 801d6f6:	e012      	b.n	801d71e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	3308      	adds	r3, #8
 801d702:	2201      	movs	r2, #1
 801d704:	4619      	mov	r1, r3
 801d706:	6878      	ldr	r0, [r7, #4]
 801d708:	f000 f93c 	bl	801d984 <USBD_CtlSendData>
        break;
 801d70c:	e00c      	b.n	801d728 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	3304      	adds	r3, #4
 801d712:	2201      	movs	r2, #1
 801d714:	4619      	mov	r1, r3
 801d716:	6878      	ldr	r0, [r7, #4]
 801d718:	f000 f934 	bl	801d984 <USBD_CtlSendData>
        break;
 801d71c:	e004      	b.n	801d728 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801d71e:	6839      	ldr	r1, [r7, #0]
 801d720:	6878      	ldr	r0, [r7, #4]
 801d722:	f000 f8be 	bl	801d8a2 <USBD_CtlError>
        break;
 801d726:	bf00      	nop
}
 801d728:	bf00      	nop
 801d72a:	3708      	adds	r7, #8
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}

0801d730 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d730:	b580      	push	{r7, lr}
 801d732:	b082      	sub	sp, #8
 801d734:	af00      	add	r7, sp, #0
 801d736:	6078      	str	r0, [r7, #4]
 801d738:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d740:	b2db      	uxtb	r3, r3
 801d742:	3b01      	subs	r3, #1
 801d744:	2b02      	cmp	r3, #2
 801d746:	d81e      	bhi.n	801d786 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d748:	683b      	ldr	r3, [r7, #0]
 801d74a:	88db      	ldrh	r3, [r3, #6]
 801d74c:	2b02      	cmp	r3, #2
 801d74e:	d004      	beq.n	801d75a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801d750:	6839      	ldr	r1, [r7, #0]
 801d752:	6878      	ldr	r0, [r7, #4]
 801d754:	f000 f8a5 	bl	801d8a2 <USBD_CtlError>
        break;
 801d758:	e01a      	b.n	801d790 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	2201      	movs	r2, #1
 801d75e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d766:	2b00      	cmp	r3, #0
 801d768:	d005      	beq.n	801d776 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	68db      	ldr	r3, [r3, #12]
 801d76e:	f043 0202 	orr.w	r2, r3, #2
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	330c      	adds	r3, #12
 801d77a:	2202      	movs	r2, #2
 801d77c:	4619      	mov	r1, r3
 801d77e:	6878      	ldr	r0, [r7, #4]
 801d780:	f000 f900 	bl	801d984 <USBD_CtlSendData>
      break;
 801d784:	e004      	b.n	801d790 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801d786:	6839      	ldr	r1, [r7, #0]
 801d788:	6878      	ldr	r0, [r7, #4]
 801d78a:	f000 f88a 	bl	801d8a2 <USBD_CtlError>
      break;
 801d78e:	bf00      	nop
  }
}
 801d790:	bf00      	nop
 801d792:	3708      	adds	r7, #8
 801d794:	46bd      	mov	sp, r7
 801d796:	bd80      	pop	{r7, pc}

0801d798 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d798:	b580      	push	{r7, lr}
 801d79a:	b082      	sub	sp, #8
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	6078      	str	r0, [r7, #4]
 801d7a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d7a2:	683b      	ldr	r3, [r7, #0]
 801d7a4:	885b      	ldrh	r3, [r3, #2]
 801d7a6:	2b01      	cmp	r3, #1
 801d7a8:	d107      	bne.n	801d7ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	2201      	movs	r2, #1
 801d7ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801d7b2:	6878      	ldr	r0, [r7, #4]
 801d7b4:	f000 f940 	bl	801da38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801d7b8:	e013      	b.n	801d7e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801d7ba:	683b      	ldr	r3, [r7, #0]
 801d7bc:	885b      	ldrh	r3, [r3, #2]
 801d7be:	2b02      	cmp	r3, #2
 801d7c0:	d10b      	bne.n	801d7da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	889b      	ldrh	r3, [r3, #4]
 801d7c6:	0a1b      	lsrs	r3, r3, #8
 801d7c8:	b29b      	uxth	r3, r3
 801d7ca:	b2da      	uxtb	r2, r3
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801d7d2:	6878      	ldr	r0, [r7, #4]
 801d7d4:	f000 f930 	bl	801da38 <USBD_CtlSendStatus>
}
 801d7d8:	e003      	b.n	801d7e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801d7da:	6839      	ldr	r1, [r7, #0]
 801d7dc:	6878      	ldr	r0, [r7, #4]
 801d7de:	f000 f860 	bl	801d8a2 <USBD_CtlError>
}
 801d7e2:	bf00      	nop
 801d7e4:	3708      	adds	r7, #8
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}

0801d7ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d7ea:	b580      	push	{r7, lr}
 801d7ec:	b082      	sub	sp, #8
 801d7ee:	af00      	add	r7, sp, #0
 801d7f0:	6078      	str	r0, [r7, #4]
 801d7f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d7fa:	b2db      	uxtb	r3, r3
 801d7fc:	3b01      	subs	r3, #1
 801d7fe:	2b02      	cmp	r3, #2
 801d800:	d80b      	bhi.n	801d81a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d802:	683b      	ldr	r3, [r7, #0]
 801d804:	885b      	ldrh	r3, [r3, #2]
 801d806:	2b01      	cmp	r3, #1
 801d808:	d10c      	bne.n	801d824 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	2200      	movs	r2, #0
 801d80e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801d812:	6878      	ldr	r0, [r7, #4]
 801d814:	f000 f910 	bl	801da38 <USBD_CtlSendStatus>
      }
      break;
 801d818:	e004      	b.n	801d824 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801d81a:	6839      	ldr	r1, [r7, #0]
 801d81c:	6878      	ldr	r0, [r7, #4]
 801d81e:	f000 f840 	bl	801d8a2 <USBD_CtlError>
      break;
 801d822:	e000      	b.n	801d826 <USBD_ClrFeature+0x3c>
      break;
 801d824:	bf00      	nop
  }
}
 801d826:	bf00      	nop
 801d828:	3708      	adds	r7, #8
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}

0801d82e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d82e:	b580      	push	{r7, lr}
 801d830:	b084      	sub	sp, #16
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
 801d836:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	781a      	ldrb	r2, [r3, #0]
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	3301      	adds	r3, #1
 801d848:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	781a      	ldrb	r2, [r3, #0]
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	3301      	adds	r3, #1
 801d856:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801d858:	68f8      	ldr	r0, [r7, #12]
 801d85a:	f7ff fa41 	bl	801cce0 <SWAPBYTE>
 801d85e:	4603      	mov	r3, r0
 801d860:	461a      	mov	r2, r3
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	3301      	adds	r3, #1
 801d86a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	3301      	adds	r3, #1
 801d870:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801d872:	68f8      	ldr	r0, [r7, #12]
 801d874:	f7ff fa34 	bl	801cce0 <SWAPBYTE>
 801d878:	4603      	mov	r3, r0
 801d87a:	461a      	mov	r2, r3
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801d880:	68fb      	ldr	r3, [r7, #12]
 801d882:	3301      	adds	r3, #1
 801d884:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	3301      	adds	r3, #1
 801d88a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801d88c:	68f8      	ldr	r0, [r7, #12]
 801d88e:	f7ff fa27 	bl	801cce0 <SWAPBYTE>
 801d892:	4603      	mov	r3, r0
 801d894:	461a      	mov	r2, r3
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	80da      	strh	r2, [r3, #6]
}
 801d89a:	bf00      	nop
 801d89c:	3710      	adds	r7, #16
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	bd80      	pop	{r7, pc}

0801d8a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d8a2:	b580      	push	{r7, lr}
 801d8a4:	b082      	sub	sp, #8
 801d8a6:	af00      	add	r7, sp, #0
 801d8a8:	6078      	str	r0, [r7, #4]
 801d8aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801d8ac:	2180      	movs	r1, #128	; 0x80
 801d8ae:	6878      	ldr	r0, [r7, #4]
 801d8b0:	f000 fcb0 	bl	801e214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801d8b4:	2100      	movs	r1, #0
 801d8b6:	6878      	ldr	r0, [r7, #4]
 801d8b8:	f000 fcac 	bl	801e214 <USBD_LL_StallEP>
}
 801d8bc:	bf00      	nop
 801d8be:	3708      	adds	r7, #8
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	bd80      	pop	{r7, pc}

0801d8c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b086      	sub	sp, #24
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	60f8      	str	r0, [r7, #12]
 801d8cc:	60b9      	str	r1, [r7, #8]
 801d8ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d8d0:	2300      	movs	r3, #0
 801d8d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d036      	beq.n	801d948 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801d8de:	6938      	ldr	r0, [r7, #16]
 801d8e0:	f000 f836 	bl	801d950 <USBD_GetLen>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	3301      	adds	r3, #1
 801d8e8:	b29b      	uxth	r3, r3
 801d8ea:	005b      	lsls	r3, r3, #1
 801d8ec:	b29a      	uxth	r2, r3
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801d8f2:	7dfb      	ldrb	r3, [r7, #23]
 801d8f4:	68ba      	ldr	r2, [r7, #8]
 801d8f6:	4413      	add	r3, r2
 801d8f8:	687a      	ldr	r2, [r7, #4]
 801d8fa:	7812      	ldrb	r2, [r2, #0]
 801d8fc:	701a      	strb	r2, [r3, #0]
  idx++;
 801d8fe:	7dfb      	ldrb	r3, [r7, #23]
 801d900:	3301      	adds	r3, #1
 801d902:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801d904:	7dfb      	ldrb	r3, [r7, #23]
 801d906:	68ba      	ldr	r2, [r7, #8]
 801d908:	4413      	add	r3, r2
 801d90a:	2203      	movs	r2, #3
 801d90c:	701a      	strb	r2, [r3, #0]
  idx++;
 801d90e:	7dfb      	ldrb	r3, [r7, #23]
 801d910:	3301      	adds	r3, #1
 801d912:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801d914:	e013      	b.n	801d93e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801d916:	7dfb      	ldrb	r3, [r7, #23]
 801d918:	68ba      	ldr	r2, [r7, #8]
 801d91a:	4413      	add	r3, r2
 801d91c:	693a      	ldr	r2, [r7, #16]
 801d91e:	7812      	ldrb	r2, [r2, #0]
 801d920:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801d922:	693b      	ldr	r3, [r7, #16]
 801d924:	3301      	adds	r3, #1
 801d926:	613b      	str	r3, [r7, #16]
    idx++;
 801d928:	7dfb      	ldrb	r3, [r7, #23]
 801d92a:	3301      	adds	r3, #1
 801d92c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801d92e:	7dfb      	ldrb	r3, [r7, #23]
 801d930:	68ba      	ldr	r2, [r7, #8]
 801d932:	4413      	add	r3, r2
 801d934:	2200      	movs	r2, #0
 801d936:	701a      	strb	r2, [r3, #0]
    idx++;
 801d938:	7dfb      	ldrb	r3, [r7, #23]
 801d93a:	3301      	adds	r3, #1
 801d93c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801d93e:	693b      	ldr	r3, [r7, #16]
 801d940:	781b      	ldrb	r3, [r3, #0]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d1e7      	bne.n	801d916 <USBD_GetString+0x52>
 801d946:	e000      	b.n	801d94a <USBD_GetString+0x86>
    return;
 801d948:	bf00      	nop
  }
}
 801d94a:	3718      	adds	r7, #24
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d950:	b480      	push	{r7}
 801d952:	b085      	sub	sp, #20
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d958:	2300      	movs	r3, #0
 801d95a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801d960:	e005      	b.n	801d96e <USBD_GetLen+0x1e>
  {
    len++;
 801d962:	7bfb      	ldrb	r3, [r7, #15]
 801d964:	3301      	adds	r3, #1
 801d966:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801d968:	68bb      	ldr	r3, [r7, #8]
 801d96a:	3301      	adds	r3, #1
 801d96c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801d96e:	68bb      	ldr	r3, [r7, #8]
 801d970:	781b      	ldrb	r3, [r3, #0]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d1f5      	bne.n	801d962 <USBD_GetLen+0x12>
  }

  return len;
 801d976:	7bfb      	ldrb	r3, [r7, #15]
}
 801d978:	4618      	mov	r0, r3
 801d97a:	3714      	adds	r7, #20
 801d97c:	46bd      	mov	sp, r7
 801d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d982:	4770      	bx	lr

0801d984 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	60f8      	str	r0, [r7, #12]
 801d98c:	60b9      	str	r1, [r7, #8]
 801d98e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	2202      	movs	r2, #2
 801d994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	687a      	ldr	r2, [r7, #4]
 801d99c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	687a      	ldr	r2, [r7, #4]
 801d9a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	68ba      	ldr	r2, [r7, #8]
 801d9a8:	2100      	movs	r1, #0
 801d9aa:	68f8      	ldr	r0, [r7, #12]
 801d9ac:	f000 fcbb 	bl	801e326 <USBD_LL_Transmit>

  return USBD_OK;
 801d9b0:	2300      	movs	r3, #0
}
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	3710      	adds	r7, #16
 801d9b6:	46bd      	mov	sp, r7
 801d9b8:	bd80      	pop	{r7, pc}

0801d9ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801d9ba:	b580      	push	{r7, lr}
 801d9bc:	b084      	sub	sp, #16
 801d9be:	af00      	add	r7, sp, #0
 801d9c0:	60f8      	str	r0, [r7, #12]
 801d9c2:	60b9      	str	r1, [r7, #8]
 801d9c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	68ba      	ldr	r2, [r7, #8]
 801d9ca:	2100      	movs	r1, #0
 801d9cc:	68f8      	ldr	r0, [r7, #12]
 801d9ce:	f000 fcaa 	bl	801e326 <USBD_LL_Transmit>

  return USBD_OK;
 801d9d2:	2300      	movs	r3, #0
}
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	3710      	adds	r7, #16
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	bd80      	pop	{r7, pc}

0801d9dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b084      	sub	sp, #16
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	60f8      	str	r0, [r7, #12]
 801d9e4:	60b9      	str	r1, [r7, #8]
 801d9e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	2203      	movs	r2, #3
 801d9ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	687a      	ldr	r2, [r7, #4]
 801d9f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	687a      	ldr	r2, [r7, #4]
 801d9fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	68ba      	ldr	r2, [r7, #8]
 801da04:	2100      	movs	r1, #0
 801da06:	68f8      	ldr	r0, [r7, #12]
 801da08:	f000 fcae 	bl	801e368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801da0c:	2300      	movs	r3, #0
}
 801da0e:	4618      	mov	r0, r3
 801da10:	3710      	adds	r7, #16
 801da12:	46bd      	mov	sp, r7
 801da14:	bd80      	pop	{r7, pc}

0801da16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801da16:	b580      	push	{r7, lr}
 801da18:	b084      	sub	sp, #16
 801da1a:	af00      	add	r7, sp, #0
 801da1c:	60f8      	str	r0, [r7, #12]
 801da1e:	60b9      	str	r1, [r7, #8]
 801da20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	68ba      	ldr	r2, [r7, #8]
 801da26:	2100      	movs	r1, #0
 801da28:	68f8      	ldr	r0, [r7, #12]
 801da2a:	f000 fc9d 	bl	801e368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801da2e:	2300      	movs	r3, #0
}
 801da30:	4618      	mov	r0, r3
 801da32:	3710      	adds	r7, #16
 801da34:	46bd      	mov	sp, r7
 801da36:	bd80      	pop	{r7, pc}

0801da38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801da38:	b580      	push	{r7, lr}
 801da3a:	b082      	sub	sp, #8
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	2204      	movs	r2, #4
 801da44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801da48:	2300      	movs	r3, #0
 801da4a:	2200      	movs	r2, #0
 801da4c:	2100      	movs	r1, #0
 801da4e:	6878      	ldr	r0, [r7, #4]
 801da50:	f000 fc69 	bl	801e326 <USBD_LL_Transmit>

  return USBD_OK;
 801da54:	2300      	movs	r3, #0
}
 801da56:	4618      	mov	r0, r3
 801da58:	3708      	adds	r7, #8
 801da5a:	46bd      	mov	sp, r7
 801da5c:	bd80      	pop	{r7, pc}

0801da5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801da5e:	b580      	push	{r7, lr}
 801da60:	b082      	sub	sp, #8
 801da62:	af00      	add	r7, sp, #0
 801da64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	2205      	movs	r2, #5
 801da6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801da6e:	2300      	movs	r3, #0
 801da70:	2200      	movs	r2, #0
 801da72:	2100      	movs	r1, #0
 801da74:	6878      	ldr	r0, [r7, #4]
 801da76:	f000 fc77 	bl	801e368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801da7a:	2300      	movs	r3, #0
}
 801da7c:	4618      	mov	r0, r3
 801da7e:	3708      	adds	r7, #8
 801da80:	46bd      	mov	sp, r7
 801da82:	bd80      	pop	{r7, pc}

0801da84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801da88:	2200      	movs	r2, #0
 801da8a:	4912      	ldr	r1, [pc, #72]	; (801dad4 <MX_USB_DEVICE_Init+0x50>)
 801da8c:	4812      	ldr	r0, [pc, #72]	; (801dad8 <MX_USB_DEVICE_Init+0x54>)
 801da8e:	f7fe fd07 	bl	801c4a0 <USBD_Init>
 801da92:	4603      	mov	r3, r0
 801da94:	2b00      	cmp	r3, #0
 801da96:	d001      	beq.n	801da9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801da98:	f7e4 f970 	bl	8001d7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801da9c:	490f      	ldr	r1, [pc, #60]	; (801dadc <MX_USB_DEVICE_Init+0x58>)
 801da9e:	480e      	ldr	r0, [pc, #56]	; (801dad8 <MX_USB_DEVICE_Init+0x54>)
 801daa0:	f7fe fd2e 	bl	801c500 <USBD_RegisterClass>
 801daa4:	4603      	mov	r3, r0
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d001      	beq.n	801daae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801daaa:	f7e4 f967 	bl	8001d7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801daae:	490c      	ldr	r1, [pc, #48]	; (801dae0 <MX_USB_DEVICE_Init+0x5c>)
 801dab0:	4809      	ldr	r0, [pc, #36]	; (801dad8 <MX_USB_DEVICE_Init+0x54>)
 801dab2:	f7fe fc65 	bl	801c380 <USBD_CDC_RegisterInterface>
 801dab6:	4603      	mov	r3, r0
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d001      	beq.n	801dac0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801dabc:	f7e4 f95e 	bl	8001d7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801dac0:	4805      	ldr	r0, [pc, #20]	; (801dad8 <MX_USB_DEVICE_Init+0x54>)
 801dac2:	f7fe fd53 	bl	801c56c <USBD_Start>
 801dac6:	4603      	mov	r3, r0
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d001      	beq.n	801dad0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801dacc:	f7e4 f956 	bl	8001d7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801dad0:	bf00      	nop
 801dad2:	bd80      	pop	{r7, pc}
 801dad4:	200000e0 	.word	0x200000e0
 801dad8:	20009bd4 	.word	0x20009bd4
 801dadc:	2000004c 	.word	0x2000004c
 801dae0:	200000cc 	.word	0x200000cc

0801dae4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801dae4:	b580      	push	{r7, lr}
 801dae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801dae8:	2200      	movs	r2, #0
 801daea:	4905      	ldr	r1, [pc, #20]	; (801db00 <CDC_Init_FS+0x1c>)
 801daec:	4805      	ldr	r0, [pc, #20]	; (801db04 <CDC_Init_FS+0x20>)
 801daee:	f7fe fc61 	bl	801c3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801daf2:	4905      	ldr	r1, [pc, #20]	; (801db08 <CDC_Init_FS+0x24>)
 801daf4:	4803      	ldr	r0, [pc, #12]	; (801db04 <CDC_Init_FS+0x20>)
 801daf6:	f7fe fc7f 	bl	801c3f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801dafa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801dafc:	4618      	mov	r0, r3
 801dafe:	bd80      	pop	{r7, pc}
 801db00:	2000a2b0 	.word	0x2000a2b0
 801db04:	20009bd4 	.word	0x20009bd4
 801db08:	20009eb0 	.word	0x20009eb0

0801db0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801db0c:	b480      	push	{r7}
 801db0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801db10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801db12:	4618      	mov	r0, r3
 801db14:	46bd      	mov	sp, r7
 801db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db1a:	4770      	bx	lr

0801db1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801db1c:	b480      	push	{r7}
 801db1e:	b083      	sub	sp, #12
 801db20:	af00      	add	r7, sp, #0
 801db22:	4603      	mov	r3, r0
 801db24:	6039      	str	r1, [r7, #0]
 801db26:	71fb      	strb	r3, [r7, #7]
 801db28:	4613      	mov	r3, r2
 801db2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801db2c:	79fb      	ldrb	r3, [r7, #7]
 801db2e:	2b23      	cmp	r3, #35	; 0x23
 801db30:	d84a      	bhi.n	801dbc8 <CDC_Control_FS+0xac>
 801db32:	a201      	add	r2, pc, #4	; (adr r2, 801db38 <CDC_Control_FS+0x1c>)
 801db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db38:	0801dbc9 	.word	0x0801dbc9
 801db3c:	0801dbc9 	.word	0x0801dbc9
 801db40:	0801dbc9 	.word	0x0801dbc9
 801db44:	0801dbc9 	.word	0x0801dbc9
 801db48:	0801dbc9 	.word	0x0801dbc9
 801db4c:	0801dbc9 	.word	0x0801dbc9
 801db50:	0801dbc9 	.word	0x0801dbc9
 801db54:	0801dbc9 	.word	0x0801dbc9
 801db58:	0801dbc9 	.word	0x0801dbc9
 801db5c:	0801dbc9 	.word	0x0801dbc9
 801db60:	0801dbc9 	.word	0x0801dbc9
 801db64:	0801dbc9 	.word	0x0801dbc9
 801db68:	0801dbc9 	.word	0x0801dbc9
 801db6c:	0801dbc9 	.word	0x0801dbc9
 801db70:	0801dbc9 	.word	0x0801dbc9
 801db74:	0801dbc9 	.word	0x0801dbc9
 801db78:	0801dbc9 	.word	0x0801dbc9
 801db7c:	0801dbc9 	.word	0x0801dbc9
 801db80:	0801dbc9 	.word	0x0801dbc9
 801db84:	0801dbc9 	.word	0x0801dbc9
 801db88:	0801dbc9 	.word	0x0801dbc9
 801db8c:	0801dbc9 	.word	0x0801dbc9
 801db90:	0801dbc9 	.word	0x0801dbc9
 801db94:	0801dbc9 	.word	0x0801dbc9
 801db98:	0801dbc9 	.word	0x0801dbc9
 801db9c:	0801dbc9 	.word	0x0801dbc9
 801dba0:	0801dbc9 	.word	0x0801dbc9
 801dba4:	0801dbc9 	.word	0x0801dbc9
 801dba8:	0801dbc9 	.word	0x0801dbc9
 801dbac:	0801dbc9 	.word	0x0801dbc9
 801dbb0:	0801dbc9 	.word	0x0801dbc9
 801dbb4:	0801dbc9 	.word	0x0801dbc9
 801dbb8:	0801dbc9 	.word	0x0801dbc9
 801dbbc:	0801dbc9 	.word	0x0801dbc9
 801dbc0:	0801dbc9 	.word	0x0801dbc9
 801dbc4:	0801dbc9 	.word	0x0801dbc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801dbc8:	bf00      	nop
  }

  return (USBD_OK);
 801dbca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801dbcc:	4618      	mov	r0, r3
 801dbce:	370c      	adds	r7, #12
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd6:	4770      	bx	lr

0801dbd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b082      	sub	sp, #8
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
 801dbe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801dbe2:	6879      	ldr	r1, [r7, #4]
 801dbe4:	4805      	ldr	r0, [pc, #20]	; (801dbfc <CDC_Receive_FS+0x24>)
 801dbe6:	f7fe fc07 	bl	801c3f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801dbea:	4804      	ldr	r0, [pc, #16]	; (801dbfc <CDC_Receive_FS+0x24>)
 801dbec:	f7fe fc22 	bl	801c434 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801dbf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3708      	adds	r7, #8
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}
 801dbfa:	bf00      	nop
 801dbfc:	20009bd4 	.word	0x20009bd4

0801dc00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801dc00:	b480      	push	{r7}
 801dc02:	b087      	sub	sp, #28
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	60f8      	str	r0, [r7, #12]
 801dc08:	60b9      	str	r1, [r7, #8]
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801dc0e:	2300      	movs	r3, #0
 801dc10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801dc12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dc16:	4618      	mov	r0, r3
 801dc18:	371c      	adds	r7, #28
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc20:	4770      	bx	lr
	...

0801dc24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dc24:	b480      	push	{r7}
 801dc26:	b083      	sub	sp, #12
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	6039      	str	r1, [r7, #0]
 801dc2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801dc30:	683b      	ldr	r3, [r7, #0]
 801dc32:	2212      	movs	r2, #18
 801dc34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801dc36:	4b03      	ldr	r3, [pc, #12]	; (801dc44 <USBD_FS_DeviceDescriptor+0x20>)
}
 801dc38:	4618      	mov	r0, r3
 801dc3a:	370c      	adds	r7, #12
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc42:	4770      	bx	lr
 801dc44:	200000fc 	.word	0x200000fc

0801dc48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dc48:	b480      	push	{r7}
 801dc4a:	b083      	sub	sp, #12
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	4603      	mov	r3, r0
 801dc50:	6039      	str	r1, [r7, #0]
 801dc52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	2204      	movs	r2, #4
 801dc58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801dc5a:	4b03      	ldr	r3, [pc, #12]	; (801dc68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801dc5c:	4618      	mov	r0, r3
 801dc5e:	370c      	adds	r7, #12
 801dc60:	46bd      	mov	sp, r7
 801dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc66:	4770      	bx	lr
 801dc68:	20000110 	.word	0x20000110

0801dc6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dc6c:	b580      	push	{r7, lr}
 801dc6e:	b082      	sub	sp, #8
 801dc70:	af00      	add	r7, sp, #0
 801dc72:	4603      	mov	r3, r0
 801dc74:	6039      	str	r1, [r7, #0]
 801dc76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dc78:	79fb      	ldrb	r3, [r7, #7]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d105      	bne.n	801dc8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801dc7e:	683a      	ldr	r2, [r7, #0]
 801dc80:	4907      	ldr	r1, [pc, #28]	; (801dca0 <USBD_FS_ProductStrDescriptor+0x34>)
 801dc82:	4808      	ldr	r0, [pc, #32]	; (801dca4 <USBD_FS_ProductStrDescriptor+0x38>)
 801dc84:	f7ff fe1e 	bl	801d8c4 <USBD_GetString>
 801dc88:	e004      	b.n	801dc94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801dc8a:	683a      	ldr	r2, [r7, #0]
 801dc8c:	4904      	ldr	r1, [pc, #16]	; (801dca0 <USBD_FS_ProductStrDescriptor+0x34>)
 801dc8e:	4805      	ldr	r0, [pc, #20]	; (801dca4 <USBD_FS_ProductStrDescriptor+0x38>)
 801dc90:	f7ff fe18 	bl	801d8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dc94:	4b02      	ldr	r3, [pc, #8]	; (801dca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801dc96:	4618      	mov	r0, r3
 801dc98:	3708      	adds	r7, #8
 801dc9a:	46bd      	mov	sp, r7
 801dc9c:	bd80      	pop	{r7, pc}
 801dc9e:	bf00      	nop
 801dca0:	2000a6b0 	.word	0x2000a6b0
 801dca4:	08022104 	.word	0x08022104

0801dca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	b082      	sub	sp, #8
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	4603      	mov	r3, r0
 801dcb0:	6039      	str	r1, [r7, #0]
 801dcb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801dcb4:	683a      	ldr	r2, [r7, #0]
 801dcb6:	4904      	ldr	r1, [pc, #16]	; (801dcc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801dcb8:	4804      	ldr	r0, [pc, #16]	; (801dccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801dcba:	f7ff fe03 	bl	801d8c4 <USBD_GetString>
  return USBD_StrDesc;
 801dcbe:	4b02      	ldr	r3, [pc, #8]	; (801dcc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	3708      	adds	r7, #8
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}
 801dcc8:	2000a6b0 	.word	0x2000a6b0
 801dccc:	0802211c 	.word	0x0802211c

0801dcd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b082      	sub	sp, #8
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	6039      	str	r1, [r7, #0]
 801dcda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801dcdc:	683b      	ldr	r3, [r7, #0]
 801dcde:	221a      	movs	r2, #26
 801dce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801dce2:	f000 f843 	bl	801dd6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801dce6:	4b02      	ldr	r3, [pc, #8]	; (801dcf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801dce8:	4618      	mov	r0, r3
 801dcea:	3708      	adds	r7, #8
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}
 801dcf0:	20000114 	.word	0x20000114

0801dcf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b082      	sub	sp, #8
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	4603      	mov	r3, r0
 801dcfc:	6039      	str	r1, [r7, #0]
 801dcfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801dd00:	79fb      	ldrb	r3, [r7, #7]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d105      	bne.n	801dd12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801dd06:	683a      	ldr	r2, [r7, #0]
 801dd08:	4907      	ldr	r1, [pc, #28]	; (801dd28 <USBD_FS_ConfigStrDescriptor+0x34>)
 801dd0a:	4808      	ldr	r0, [pc, #32]	; (801dd2c <USBD_FS_ConfigStrDescriptor+0x38>)
 801dd0c:	f7ff fdda 	bl	801d8c4 <USBD_GetString>
 801dd10:	e004      	b.n	801dd1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801dd12:	683a      	ldr	r2, [r7, #0]
 801dd14:	4904      	ldr	r1, [pc, #16]	; (801dd28 <USBD_FS_ConfigStrDescriptor+0x34>)
 801dd16:	4805      	ldr	r0, [pc, #20]	; (801dd2c <USBD_FS_ConfigStrDescriptor+0x38>)
 801dd18:	f7ff fdd4 	bl	801d8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dd1c:	4b02      	ldr	r3, [pc, #8]	; (801dd28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801dd1e:	4618      	mov	r0, r3
 801dd20:	3708      	adds	r7, #8
 801dd22:	46bd      	mov	sp, r7
 801dd24:	bd80      	pop	{r7, pc}
 801dd26:	bf00      	nop
 801dd28:	2000a6b0 	.word	0x2000a6b0
 801dd2c:	08022130 	.word	0x08022130

0801dd30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd30:	b580      	push	{r7, lr}
 801dd32:	b082      	sub	sp, #8
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	4603      	mov	r3, r0
 801dd38:	6039      	str	r1, [r7, #0]
 801dd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dd3c:	79fb      	ldrb	r3, [r7, #7]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d105      	bne.n	801dd4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dd42:	683a      	ldr	r2, [r7, #0]
 801dd44:	4907      	ldr	r1, [pc, #28]	; (801dd64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801dd46:	4808      	ldr	r0, [pc, #32]	; (801dd68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801dd48:	f7ff fdbc 	bl	801d8c4 <USBD_GetString>
 801dd4c:	e004      	b.n	801dd58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dd4e:	683a      	ldr	r2, [r7, #0]
 801dd50:	4904      	ldr	r1, [pc, #16]	; (801dd64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801dd52:	4805      	ldr	r0, [pc, #20]	; (801dd68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801dd54:	f7ff fdb6 	bl	801d8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dd58:	4b02      	ldr	r3, [pc, #8]	; (801dd64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	3708      	adds	r7, #8
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	bd80      	pop	{r7, pc}
 801dd62:	bf00      	nop
 801dd64:	2000a6b0 	.word	0x2000a6b0
 801dd68:	0802213c 	.word	0x0802213c

0801dd6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b084      	sub	sp, #16
 801dd70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801dd72:	4b0f      	ldr	r3, [pc, #60]	; (801ddb0 <Get_SerialNum+0x44>)
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801dd78:	4b0e      	ldr	r3, [pc, #56]	; (801ddb4 <Get_SerialNum+0x48>)
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dd7e:	4b0e      	ldr	r3, [pc, #56]	; (801ddb8 <Get_SerialNum+0x4c>)
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dd84:	68fa      	ldr	r2, [r7, #12]
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	4413      	add	r3, r2
 801dd8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d009      	beq.n	801dda6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801dd92:	2208      	movs	r2, #8
 801dd94:	4909      	ldr	r1, [pc, #36]	; (801ddbc <Get_SerialNum+0x50>)
 801dd96:	68f8      	ldr	r0, [r7, #12]
 801dd98:	f000 f814 	bl	801ddc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dd9c:	2204      	movs	r2, #4
 801dd9e:	4908      	ldr	r1, [pc, #32]	; (801ddc0 <Get_SerialNum+0x54>)
 801dda0:	68b8      	ldr	r0, [r7, #8]
 801dda2:	f000 f80f 	bl	801ddc4 <IntToUnicode>
  }
}
 801dda6:	bf00      	nop
 801dda8:	3710      	adds	r7, #16
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd80      	pop	{r7, pc}
 801ddae:	bf00      	nop
 801ddb0:	1fff7a10 	.word	0x1fff7a10
 801ddb4:	1fff7a14 	.word	0x1fff7a14
 801ddb8:	1fff7a18 	.word	0x1fff7a18
 801ddbc:	20000116 	.word	0x20000116
 801ddc0:	20000126 	.word	0x20000126

0801ddc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ddc4:	b480      	push	{r7}
 801ddc6:	b087      	sub	sp, #28
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	60f8      	str	r0, [r7, #12]
 801ddcc:	60b9      	str	r1, [r7, #8]
 801ddce:	4613      	mov	r3, r2
 801ddd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ddd2:	2300      	movs	r3, #0
 801ddd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	75fb      	strb	r3, [r7, #23]
 801ddda:	e027      	b.n	801de2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	0f1b      	lsrs	r3, r3, #28
 801dde0:	2b09      	cmp	r3, #9
 801dde2:	d80b      	bhi.n	801ddfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	0f1b      	lsrs	r3, r3, #28
 801dde8:	b2da      	uxtb	r2, r3
 801ddea:	7dfb      	ldrb	r3, [r7, #23]
 801ddec:	005b      	lsls	r3, r3, #1
 801ddee:	4619      	mov	r1, r3
 801ddf0:	68bb      	ldr	r3, [r7, #8]
 801ddf2:	440b      	add	r3, r1
 801ddf4:	3230      	adds	r2, #48	; 0x30
 801ddf6:	b2d2      	uxtb	r2, r2
 801ddf8:	701a      	strb	r2, [r3, #0]
 801ddfa:	e00a      	b.n	801de12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	0f1b      	lsrs	r3, r3, #28
 801de00:	b2da      	uxtb	r2, r3
 801de02:	7dfb      	ldrb	r3, [r7, #23]
 801de04:	005b      	lsls	r3, r3, #1
 801de06:	4619      	mov	r1, r3
 801de08:	68bb      	ldr	r3, [r7, #8]
 801de0a:	440b      	add	r3, r1
 801de0c:	3237      	adds	r2, #55	; 0x37
 801de0e:	b2d2      	uxtb	r2, r2
 801de10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	011b      	lsls	r3, r3, #4
 801de16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801de18:	7dfb      	ldrb	r3, [r7, #23]
 801de1a:	005b      	lsls	r3, r3, #1
 801de1c:	3301      	adds	r3, #1
 801de1e:	68ba      	ldr	r2, [r7, #8]
 801de20:	4413      	add	r3, r2
 801de22:	2200      	movs	r2, #0
 801de24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801de26:	7dfb      	ldrb	r3, [r7, #23]
 801de28:	3301      	adds	r3, #1
 801de2a:	75fb      	strb	r3, [r7, #23]
 801de2c:	7dfa      	ldrb	r2, [r7, #23]
 801de2e:	79fb      	ldrb	r3, [r7, #7]
 801de30:	429a      	cmp	r2, r3
 801de32:	d3d3      	bcc.n	801dddc <IntToUnicode+0x18>
  }
}
 801de34:	bf00      	nop
 801de36:	bf00      	nop
 801de38:	371c      	adds	r7, #28
 801de3a:	46bd      	mov	sp, r7
 801de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de40:	4770      	bx	lr
	...

0801de44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801de44:	b580      	push	{r7, lr}
 801de46:	b08a      	sub	sp, #40	; 0x28
 801de48:	af00      	add	r7, sp, #0
 801de4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801de4c:	f107 0314 	add.w	r3, r7, #20
 801de50:	2200      	movs	r2, #0
 801de52:	601a      	str	r2, [r3, #0]
 801de54:	605a      	str	r2, [r3, #4]
 801de56:	609a      	str	r2, [r3, #8]
 801de58:	60da      	str	r2, [r3, #12]
 801de5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801de64:	d13a      	bne.n	801dedc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801de66:	2300      	movs	r3, #0
 801de68:	613b      	str	r3, [r7, #16]
 801de6a:	4b1e      	ldr	r3, [pc, #120]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801de6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de6e:	4a1d      	ldr	r2, [pc, #116]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801de70:	f043 0301 	orr.w	r3, r3, #1
 801de74:	6313      	str	r3, [r2, #48]	; 0x30
 801de76:	4b1b      	ldr	r3, [pc, #108]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801de78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de7a:	f003 0301 	and.w	r3, r3, #1
 801de7e:	613b      	str	r3, [r7, #16]
 801de80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801de82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801de86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801de88:	2302      	movs	r3, #2
 801de8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801de8c:	2300      	movs	r3, #0
 801de8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801de90:	2303      	movs	r3, #3
 801de92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801de94:	230a      	movs	r3, #10
 801de96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801de98:	f107 0314 	add.w	r3, r7, #20
 801de9c:	4619      	mov	r1, r3
 801de9e:	4812      	ldr	r0, [pc, #72]	; (801dee8 <HAL_PCD_MspInit+0xa4>)
 801dea0:	f7f9 f86c 	bl	8016f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801dea4:	4b0f      	ldr	r3, [pc, #60]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dea8:	4a0e      	ldr	r2, [pc, #56]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801deaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801deae:	6353      	str	r3, [r2, #52]	; 0x34
 801deb0:	2300      	movs	r3, #0
 801deb2:	60fb      	str	r3, [r7, #12]
 801deb4:	4b0b      	ldr	r3, [pc, #44]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801deb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801deb8:	4a0a      	ldr	r2, [pc, #40]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801deba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801debe:	6453      	str	r3, [r2, #68]	; 0x44
 801dec0:	4b08      	ldr	r3, [pc, #32]	; (801dee4 <HAL_PCD_MspInit+0xa0>)
 801dec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dec8:	60fb      	str	r3, [r7, #12]
 801deca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801decc:	2200      	movs	r2, #0
 801dece:	2100      	movs	r1, #0
 801ded0:	2043      	movs	r0, #67	; 0x43
 801ded2:	f7f8 fe56 	bl	8016b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ded6:	2043      	movs	r0, #67	; 0x43
 801ded8:	f7f8 fe6f 	bl	8016bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801dedc:	bf00      	nop
 801dede:	3728      	adds	r7, #40	; 0x28
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	40023800 	.word	0x40023800
 801dee8:	40020000 	.word	0x40020000

0801deec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801deec:	b580      	push	{r7, lr}
 801deee:	b082      	sub	sp, #8
 801def0:	af00      	add	r7, sp, #0
 801def2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801df00:	4619      	mov	r1, r3
 801df02:	4610      	mov	r0, r2
 801df04:	f7fe fb7f 	bl	801c606 <USBD_LL_SetupStage>
}
 801df08:	bf00      	nop
 801df0a:	3708      	adds	r7, #8
 801df0c:	46bd      	mov	sp, r7
 801df0e:	bd80      	pop	{r7, pc}

0801df10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df10:	b580      	push	{r7, lr}
 801df12:	b082      	sub	sp, #8
 801df14:	af00      	add	r7, sp, #0
 801df16:	6078      	str	r0, [r7, #4]
 801df18:	460b      	mov	r3, r1
 801df1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801df22:	78fa      	ldrb	r2, [r7, #3]
 801df24:	6879      	ldr	r1, [r7, #4]
 801df26:	4613      	mov	r3, r2
 801df28:	00db      	lsls	r3, r3, #3
 801df2a:	4413      	add	r3, r2
 801df2c:	009b      	lsls	r3, r3, #2
 801df2e:	440b      	add	r3, r1
 801df30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801df34:	681a      	ldr	r2, [r3, #0]
 801df36:	78fb      	ldrb	r3, [r7, #3]
 801df38:	4619      	mov	r1, r3
 801df3a:	f7fe fbb9 	bl	801c6b0 <USBD_LL_DataOutStage>
}
 801df3e:	bf00      	nop
 801df40:	3708      	adds	r7, #8
 801df42:	46bd      	mov	sp, r7
 801df44:	bd80      	pop	{r7, pc}

0801df46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df46:	b580      	push	{r7, lr}
 801df48:	b082      	sub	sp, #8
 801df4a:	af00      	add	r7, sp, #0
 801df4c:	6078      	str	r0, [r7, #4]
 801df4e:	460b      	mov	r3, r1
 801df50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801df58:	78fa      	ldrb	r2, [r7, #3]
 801df5a:	6879      	ldr	r1, [r7, #4]
 801df5c:	4613      	mov	r3, r2
 801df5e:	00db      	lsls	r3, r3, #3
 801df60:	4413      	add	r3, r2
 801df62:	009b      	lsls	r3, r3, #2
 801df64:	440b      	add	r3, r1
 801df66:	334c      	adds	r3, #76	; 0x4c
 801df68:	681a      	ldr	r2, [r3, #0]
 801df6a:	78fb      	ldrb	r3, [r7, #3]
 801df6c:	4619      	mov	r1, r3
 801df6e:	f7fe fc52 	bl	801c816 <USBD_LL_DataInStage>
}
 801df72:	bf00      	nop
 801df74:	3708      	adds	r7, #8
 801df76:	46bd      	mov	sp, r7
 801df78:	bd80      	pop	{r7, pc}

0801df7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df7a:	b580      	push	{r7, lr}
 801df7c:	b082      	sub	sp, #8
 801df7e:	af00      	add	r7, sp, #0
 801df80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801df88:	4618      	mov	r0, r3
 801df8a:	f7fe fd86 	bl	801ca9a <USBD_LL_SOF>
}
 801df8e:	bf00      	nop
 801df90:	3708      	adds	r7, #8
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}

0801df96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df96:	b580      	push	{r7, lr}
 801df98:	b084      	sub	sp, #16
 801df9a:	af00      	add	r7, sp, #0
 801df9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801df9e:	2301      	movs	r3, #1
 801dfa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	68db      	ldr	r3, [r3, #12]
 801dfa6:	2b02      	cmp	r3, #2
 801dfa8:	d001      	beq.n	801dfae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801dfaa:	f7e3 fee7 	bl	8001d7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801dfb4:	7bfa      	ldrb	r2, [r7, #15]
 801dfb6:	4611      	mov	r1, r2
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f7fe fd30 	bl	801ca1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	f7fe fcd8 	bl	801c97a <USBD_LL_Reset>
}
 801dfca:	bf00      	nop
 801dfcc:	3710      	adds	r7, #16
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	bd80      	pop	{r7, pc}
	...

0801dfd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b082      	sub	sp, #8
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801dfe2:	4618      	mov	r0, r3
 801dfe4:	f7fe fd2b 	bl	801ca3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	687a      	ldr	r2, [r7, #4]
 801dff4:	6812      	ldr	r2, [r2, #0]
 801dff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801dffa:	f043 0301 	orr.w	r3, r3, #1
 801dffe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	6a1b      	ldr	r3, [r3, #32]
 801e004:	2b00      	cmp	r3, #0
 801e006:	d005      	beq.n	801e014 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e008:	4b04      	ldr	r3, [pc, #16]	; (801e01c <HAL_PCD_SuspendCallback+0x48>)
 801e00a:	691b      	ldr	r3, [r3, #16]
 801e00c:	4a03      	ldr	r2, [pc, #12]	; (801e01c <HAL_PCD_SuspendCallback+0x48>)
 801e00e:	f043 0306 	orr.w	r3, r3, #6
 801e012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e014:	bf00      	nop
 801e016:	3708      	adds	r7, #8
 801e018:	46bd      	mov	sp, r7
 801e01a:	bd80      	pop	{r7, pc}
 801e01c:	e000ed00 	.word	0xe000ed00

0801e020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e020:	b580      	push	{r7, lr}
 801e022:	b082      	sub	sp, #8
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801e02e:	4618      	mov	r0, r3
 801e030:	f7fe fd1b 	bl	801ca6a <USBD_LL_Resume>
}
 801e034:	bf00      	nop
 801e036:	3708      	adds	r7, #8
 801e038:	46bd      	mov	sp, r7
 801e03a:	bd80      	pop	{r7, pc}

0801e03c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b082      	sub	sp, #8
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
 801e044:	460b      	mov	r3, r1
 801e046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801e04e:	78fa      	ldrb	r2, [r7, #3]
 801e050:	4611      	mov	r1, r2
 801e052:	4618      	mov	r0, r3
 801e054:	f7fe fd73 	bl	801cb3e <USBD_LL_IsoOUTIncomplete>
}
 801e058:	bf00      	nop
 801e05a:	3708      	adds	r7, #8
 801e05c:	46bd      	mov	sp, r7
 801e05e:	bd80      	pop	{r7, pc}

0801e060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b082      	sub	sp, #8
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
 801e068:	460b      	mov	r3, r1
 801e06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801e072:	78fa      	ldrb	r2, [r7, #3]
 801e074:	4611      	mov	r1, r2
 801e076:	4618      	mov	r0, r3
 801e078:	f7fe fd2f 	bl	801cada <USBD_LL_IsoINIncomplete>
}
 801e07c:	bf00      	nop
 801e07e:	3708      	adds	r7, #8
 801e080:	46bd      	mov	sp, r7
 801e082:	bd80      	pop	{r7, pc}

0801e084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e084:	b580      	push	{r7, lr}
 801e086:	b082      	sub	sp, #8
 801e088:	af00      	add	r7, sp, #0
 801e08a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801e092:	4618      	mov	r0, r3
 801e094:	f7fe fd85 	bl	801cba2 <USBD_LL_DevConnected>
}
 801e098:	bf00      	nop
 801e09a:	3708      	adds	r7, #8
 801e09c:	46bd      	mov	sp, r7
 801e09e:	bd80      	pop	{r7, pc}

0801e0a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0a0:	b580      	push	{r7, lr}
 801e0a2:	b082      	sub	sp, #8
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	f7fe fd82 	bl	801cbb8 <USBD_LL_DevDisconnected>
}
 801e0b4:	bf00      	nop
 801e0b6:	3708      	adds	r7, #8
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd80      	pop	{r7, pc}

0801e0bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b082      	sub	sp, #8
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	781b      	ldrb	r3, [r3, #0]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d13c      	bne.n	801e146 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801e0cc:	4a20      	ldr	r2, [pc, #128]	; (801e150 <USBD_LL_Init+0x94>)
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	4a1e      	ldr	r2, [pc, #120]	; (801e150 <USBD_LL_Init+0x94>)
 801e0d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e0dc:	4b1c      	ldr	r3, [pc, #112]	; (801e150 <USBD_LL_Init+0x94>)
 801e0de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801e0e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801e0e4:	4b1a      	ldr	r3, [pc, #104]	; (801e150 <USBD_LL_Init+0x94>)
 801e0e6:	2204      	movs	r2, #4
 801e0e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801e0ea:	4b19      	ldr	r3, [pc, #100]	; (801e150 <USBD_LL_Init+0x94>)
 801e0ec:	2202      	movs	r2, #2
 801e0ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801e0f0:	4b17      	ldr	r3, [pc, #92]	; (801e150 <USBD_LL_Init+0x94>)
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e0f6:	4b16      	ldr	r3, [pc, #88]	; (801e150 <USBD_LL_Init+0x94>)
 801e0f8:	2202      	movs	r2, #2
 801e0fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801e0fc:	4b14      	ldr	r3, [pc, #80]	; (801e150 <USBD_LL_Init+0x94>)
 801e0fe:	2200      	movs	r2, #0
 801e100:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801e102:	4b13      	ldr	r3, [pc, #76]	; (801e150 <USBD_LL_Init+0x94>)
 801e104:	2200      	movs	r2, #0
 801e106:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801e108:	4b11      	ldr	r3, [pc, #68]	; (801e150 <USBD_LL_Init+0x94>)
 801e10a:	2200      	movs	r2, #0
 801e10c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801e10e:	4b10      	ldr	r3, [pc, #64]	; (801e150 <USBD_LL_Init+0x94>)
 801e110:	2200      	movs	r2, #0
 801e112:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801e114:	4b0e      	ldr	r3, [pc, #56]	; (801e150 <USBD_LL_Init+0x94>)
 801e116:	2200      	movs	r2, #0
 801e118:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801e11a:	480d      	ldr	r0, [pc, #52]	; (801e150 <USBD_LL_Init+0x94>)
 801e11c:	f7f9 f8e3 	bl	80172e6 <HAL_PCD_Init>
 801e120:	4603      	mov	r3, r0
 801e122:	2b00      	cmp	r3, #0
 801e124:	d001      	beq.n	801e12a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801e126:	f7e3 fe29 	bl	8001d7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801e12a:	2180      	movs	r1, #128	; 0x80
 801e12c:	4808      	ldr	r0, [pc, #32]	; (801e150 <USBD_LL_Init+0x94>)
 801e12e:	f7fa fb3a 	bl	80187a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801e132:	2240      	movs	r2, #64	; 0x40
 801e134:	2100      	movs	r1, #0
 801e136:	4806      	ldr	r0, [pc, #24]	; (801e150 <USBD_LL_Init+0x94>)
 801e138:	f7fa faee 	bl	8018718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e13c:	2280      	movs	r2, #128	; 0x80
 801e13e:	2101      	movs	r1, #1
 801e140:	4803      	ldr	r0, [pc, #12]	; (801e150 <USBD_LL_Init+0x94>)
 801e142:	f7fa fae9 	bl	8018718 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e146:	2300      	movs	r3, #0
}
 801e148:	4618      	mov	r0, r3
 801e14a:	3708      	adds	r7, #8
 801e14c:	46bd      	mov	sp, r7
 801e14e:	bd80      	pop	{r7, pc}
 801e150:	2000a8b0 	.word	0x2000a8b0

0801e154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b084      	sub	sp, #16
 801e158:	af00      	add	r7, sp, #0
 801e15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e15c:	2300      	movs	r3, #0
 801e15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e160:	2300      	movs	r3, #0
 801e162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e16a:	4618      	mov	r0, r3
 801e16c:	f7f9 f9d8 	bl	8017520 <HAL_PCD_Start>
 801e170:	4603      	mov	r3, r0
 801e172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e174:	7bfb      	ldrb	r3, [r7, #15]
 801e176:	4618      	mov	r0, r3
 801e178:	f000 f942 	bl	801e400 <USBD_Get_USB_Status>
 801e17c:	4603      	mov	r3, r0
 801e17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e180:	7bbb      	ldrb	r3, [r7, #14]
}
 801e182:	4618      	mov	r0, r3
 801e184:	3710      	adds	r7, #16
 801e186:	46bd      	mov	sp, r7
 801e188:	bd80      	pop	{r7, pc}

0801e18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e18a:	b580      	push	{r7, lr}
 801e18c:	b084      	sub	sp, #16
 801e18e:	af00      	add	r7, sp, #0
 801e190:	6078      	str	r0, [r7, #4]
 801e192:	4608      	mov	r0, r1
 801e194:	4611      	mov	r1, r2
 801e196:	461a      	mov	r2, r3
 801e198:	4603      	mov	r3, r0
 801e19a:	70fb      	strb	r3, [r7, #3]
 801e19c:	460b      	mov	r3, r1
 801e19e:	70bb      	strb	r3, [r7, #2]
 801e1a0:	4613      	mov	r3, r2
 801e1a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e1a4:	2300      	movs	r3, #0
 801e1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e1b2:	78bb      	ldrb	r3, [r7, #2]
 801e1b4:	883a      	ldrh	r2, [r7, #0]
 801e1b6:	78f9      	ldrb	r1, [r7, #3]
 801e1b8:	f7f9 fea9 	bl	8017f0e <HAL_PCD_EP_Open>
 801e1bc:	4603      	mov	r3, r0
 801e1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e1c0:	7bfb      	ldrb	r3, [r7, #15]
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f000 f91c 	bl	801e400 <USBD_Get_USB_Status>
 801e1c8:	4603      	mov	r3, r0
 801e1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	3710      	adds	r7, #16
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	bd80      	pop	{r7, pc}

0801e1d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e1d6:	b580      	push	{r7, lr}
 801e1d8:	b084      	sub	sp, #16
 801e1da:	af00      	add	r7, sp, #0
 801e1dc:	6078      	str	r0, [r7, #4]
 801e1de:	460b      	mov	r3, r1
 801e1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e1f0:	78fa      	ldrb	r2, [r7, #3]
 801e1f2:	4611      	mov	r1, r2
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f7f9 fef2 	bl	8017fde <HAL_PCD_EP_Close>
 801e1fa:	4603      	mov	r3, r0
 801e1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e1fe:	7bfb      	ldrb	r3, [r7, #15]
 801e200:	4618      	mov	r0, r3
 801e202:	f000 f8fd 	bl	801e400 <USBD_Get_USB_Status>
 801e206:	4603      	mov	r3, r0
 801e208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e20a:	7bbb      	ldrb	r3, [r7, #14]
}
 801e20c:	4618      	mov	r0, r3
 801e20e:	3710      	adds	r7, #16
 801e210:	46bd      	mov	sp, r7
 801e212:	bd80      	pop	{r7, pc}

0801e214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e214:	b580      	push	{r7, lr}
 801e216:	b084      	sub	sp, #16
 801e218:	af00      	add	r7, sp, #0
 801e21a:	6078      	str	r0, [r7, #4]
 801e21c:	460b      	mov	r3, r1
 801e21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e220:	2300      	movs	r3, #0
 801e222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e224:	2300      	movs	r3, #0
 801e226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e22e:	78fa      	ldrb	r2, [r7, #3]
 801e230:	4611      	mov	r1, r2
 801e232:	4618      	mov	r0, r3
 801e234:	f7f9 ffca 	bl	80181cc <HAL_PCD_EP_SetStall>
 801e238:	4603      	mov	r3, r0
 801e23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e23c:	7bfb      	ldrb	r3, [r7, #15]
 801e23e:	4618      	mov	r0, r3
 801e240:	f000 f8de 	bl	801e400 <USBD_Get_USB_Status>
 801e244:	4603      	mov	r3, r0
 801e246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e248:	7bbb      	ldrb	r3, [r7, #14]
}
 801e24a:	4618      	mov	r0, r3
 801e24c:	3710      	adds	r7, #16
 801e24e:	46bd      	mov	sp, r7
 801e250:	bd80      	pop	{r7, pc}

0801e252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e252:	b580      	push	{r7, lr}
 801e254:	b084      	sub	sp, #16
 801e256:	af00      	add	r7, sp, #0
 801e258:	6078      	str	r0, [r7, #4]
 801e25a:	460b      	mov	r3, r1
 801e25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e25e:	2300      	movs	r3, #0
 801e260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e262:	2300      	movs	r3, #0
 801e264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e26c:	78fa      	ldrb	r2, [r7, #3]
 801e26e:	4611      	mov	r1, r2
 801e270:	4618      	mov	r0, r3
 801e272:	f7fa f80f 	bl	8018294 <HAL_PCD_EP_ClrStall>
 801e276:	4603      	mov	r3, r0
 801e278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e27a:	7bfb      	ldrb	r3, [r7, #15]
 801e27c:	4618      	mov	r0, r3
 801e27e:	f000 f8bf 	bl	801e400 <USBD_Get_USB_Status>
 801e282:	4603      	mov	r3, r0
 801e284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e286:	7bbb      	ldrb	r3, [r7, #14]
}
 801e288:	4618      	mov	r0, r3
 801e28a:	3710      	adds	r7, #16
 801e28c:	46bd      	mov	sp, r7
 801e28e:	bd80      	pop	{r7, pc}

0801e290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e290:	b480      	push	{r7}
 801e292:	b085      	sub	sp, #20
 801e294:	af00      	add	r7, sp, #0
 801e296:	6078      	str	r0, [r7, #4]
 801e298:	460b      	mov	r3, r1
 801e29a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e2a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	da0b      	bge.n	801e2c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e2ac:	78fb      	ldrb	r3, [r7, #3]
 801e2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e2b2:	68f9      	ldr	r1, [r7, #12]
 801e2b4:	4613      	mov	r3, r2
 801e2b6:	00db      	lsls	r3, r3, #3
 801e2b8:	4413      	add	r3, r2
 801e2ba:	009b      	lsls	r3, r3, #2
 801e2bc:	440b      	add	r3, r1
 801e2be:	333e      	adds	r3, #62	; 0x3e
 801e2c0:	781b      	ldrb	r3, [r3, #0]
 801e2c2:	e00b      	b.n	801e2dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e2c4:	78fb      	ldrb	r3, [r7, #3]
 801e2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e2ca:	68f9      	ldr	r1, [r7, #12]
 801e2cc:	4613      	mov	r3, r2
 801e2ce:	00db      	lsls	r3, r3, #3
 801e2d0:	4413      	add	r3, r2
 801e2d2:	009b      	lsls	r3, r3, #2
 801e2d4:	440b      	add	r3, r1
 801e2d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801e2da:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e2dc:	4618      	mov	r0, r3
 801e2de:	3714      	adds	r7, #20
 801e2e0:	46bd      	mov	sp, r7
 801e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e6:	4770      	bx	lr

0801e2e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b084      	sub	sp, #16
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
 801e2f0:	460b      	mov	r3, r1
 801e2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e302:	78fa      	ldrb	r2, [r7, #3]
 801e304:	4611      	mov	r1, r2
 801e306:	4618      	mov	r0, r3
 801e308:	f7f9 fddc 	bl	8017ec4 <HAL_PCD_SetAddress>
 801e30c:	4603      	mov	r3, r0
 801e30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e310:	7bfb      	ldrb	r3, [r7, #15]
 801e312:	4618      	mov	r0, r3
 801e314:	f000 f874 	bl	801e400 <USBD_Get_USB_Status>
 801e318:	4603      	mov	r3, r0
 801e31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e31c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e31e:	4618      	mov	r0, r3
 801e320:	3710      	adds	r7, #16
 801e322:	46bd      	mov	sp, r7
 801e324:	bd80      	pop	{r7, pc}

0801e326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e326:	b580      	push	{r7, lr}
 801e328:	b086      	sub	sp, #24
 801e32a:	af00      	add	r7, sp, #0
 801e32c:	60f8      	str	r0, [r7, #12]
 801e32e:	607a      	str	r2, [r7, #4]
 801e330:	603b      	str	r3, [r7, #0]
 801e332:	460b      	mov	r3, r1
 801e334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e336:	2300      	movs	r3, #0
 801e338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e33a:	2300      	movs	r3, #0
 801e33c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e33e:	68fb      	ldr	r3, [r7, #12]
 801e340:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e344:	7af9      	ldrb	r1, [r7, #11]
 801e346:	683b      	ldr	r3, [r7, #0]
 801e348:	687a      	ldr	r2, [r7, #4]
 801e34a:	f7f9 fef5 	bl	8018138 <HAL_PCD_EP_Transmit>
 801e34e:	4603      	mov	r3, r0
 801e350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e352:	7dfb      	ldrb	r3, [r7, #23]
 801e354:	4618      	mov	r0, r3
 801e356:	f000 f853 	bl	801e400 <USBD_Get_USB_Status>
 801e35a:	4603      	mov	r3, r0
 801e35c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e35e:	7dbb      	ldrb	r3, [r7, #22]
}
 801e360:	4618      	mov	r0, r3
 801e362:	3718      	adds	r7, #24
 801e364:	46bd      	mov	sp, r7
 801e366:	bd80      	pop	{r7, pc}

0801e368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b086      	sub	sp, #24
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	607a      	str	r2, [r7, #4]
 801e372:	603b      	str	r3, [r7, #0]
 801e374:	460b      	mov	r3, r1
 801e376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e378:	2300      	movs	r3, #0
 801e37a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e37c:	2300      	movs	r3, #0
 801e37e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e386:	7af9      	ldrb	r1, [r7, #11]
 801e388:	683b      	ldr	r3, [r7, #0]
 801e38a:	687a      	ldr	r2, [r7, #4]
 801e38c:	f7f9 fe71 	bl	8018072 <HAL_PCD_EP_Receive>
 801e390:	4603      	mov	r3, r0
 801e392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e394:	7dfb      	ldrb	r3, [r7, #23]
 801e396:	4618      	mov	r0, r3
 801e398:	f000 f832 	bl	801e400 <USBD_Get_USB_Status>
 801e39c:	4603      	mov	r3, r0
 801e39e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e3a0:	7dbb      	ldrb	r3, [r7, #22]
}
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	3718      	adds	r7, #24
 801e3a6:	46bd      	mov	sp, r7
 801e3a8:	bd80      	pop	{r7, pc}

0801e3aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3aa:	b580      	push	{r7, lr}
 801e3ac:	b082      	sub	sp, #8
 801e3ae:	af00      	add	r7, sp, #0
 801e3b0:	6078      	str	r0, [r7, #4]
 801e3b2:	460b      	mov	r3, r1
 801e3b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e3bc:	78fa      	ldrb	r2, [r7, #3]
 801e3be:	4611      	mov	r1, r2
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7f9 fea1 	bl	8018108 <HAL_PCD_EP_GetRxCount>
 801e3c6:	4603      	mov	r3, r0
}
 801e3c8:	4618      	mov	r0, r3
 801e3ca:	3708      	adds	r7, #8
 801e3cc:	46bd      	mov	sp, r7
 801e3ce:	bd80      	pop	{r7, pc}

0801e3d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e3d0:	b480      	push	{r7}
 801e3d2:	b083      	sub	sp, #12
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e3d8:	4b03      	ldr	r3, [pc, #12]	; (801e3e8 <USBD_static_malloc+0x18>)
}
 801e3da:	4618      	mov	r0, r3
 801e3dc:	370c      	adds	r7, #12
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e4:	4770      	bx	lr
 801e3e6:	bf00      	nop
 801e3e8:	2000adbc 	.word	0x2000adbc

0801e3ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e3ec:	b480      	push	{r7}
 801e3ee:	b083      	sub	sp, #12
 801e3f0:	af00      	add	r7, sp, #0
 801e3f2:	6078      	str	r0, [r7, #4]

}
 801e3f4:	bf00      	nop
 801e3f6:	370c      	adds	r7, #12
 801e3f8:	46bd      	mov	sp, r7
 801e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3fe:	4770      	bx	lr

0801e400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e400:	b480      	push	{r7}
 801e402:	b085      	sub	sp, #20
 801e404:	af00      	add	r7, sp, #0
 801e406:	4603      	mov	r3, r0
 801e408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e40a:	2300      	movs	r3, #0
 801e40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e40e:	79fb      	ldrb	r3, [r7, #7]
 801e410:	2b03      	cmp	r3, #3
 801e412:	d817      	bhi.n	801e444 <USBD_Get_USB_Status+0x44>
 801e414:	a201      	add	r2, pc, #4	; (adr r2, 801e41c <USBD_Get_USB_Status+0x1c>)
 801e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e41a:	bf00      	nop
 801e41c:	0801e42d 	.word	0x0801e42d
 801e420:	0801e433 	.word	0x0801e433
 801e424:	0801e439 	.word	0x0801e439
 801e428:	0801e43f 	.word	0x0801e43f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e42c:	2300      	movs	r3, #0
 801e42e:	73fb      	strb	r3, [r7, #15]
    break;
 801e430:	e00b      	b.n	801e44a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e432:	2303      	movs	r3, #3
 801e434:	73fb      	strb	r3, [r7, #15]
    break;
 801e436:	e008      	b.n	801e44a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e438:	2301      	movs	r3, #1
 801e43a:	73fb      	strb	r3, [r7, #15]
    break;
 801e43c:	e005      	b.n	801e44a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e43e:	2303      	movs	r3, #3
 801e440:	73fb      	strb	r3, [r7, #15]
    break;
 801e442:	e002      	b.n	801e44a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e444:	2303      	movs	r3, #3
 801e446:	73fb      	strb	r3, [r7, #15]
    break;
 801e448:	bf00      	nop
  }
  return usb_status;
 801e44a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e44c:	4618      	mov	r0, r3
 801e44e:	3714      	adds	r7, #20
 801e450:	46bd      	mov	sp, r7
 801e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e456:	4770      	bx	lr

0801e458 <__cxa_guard_acquire>:
 801e458:	6803      	ldr	r3, [r0, #0]
 801e45a:	07db      	lsls	r3, r3, #31
 801e45c:	d406      	bmi.n	801e46c <__cxa_guard_acquire+0x14>
 801e45e:	7843      	ldrb	r3, [r0, #1]
 801e460:	b103      	cbz	r3, 801e464 <__cxa_guard_acquire+0xc>
 801e462:	deff      	udf	#255	; 0xff
 801e464:	2301      	movs	r3, #1
 801e466:	7043      	strb	r3, [r0, #1]
 801e468:	4618      	mov	r0, r3
 801e46a:	4770      	bx	lr
 801e46c:	2000      	movs	r0, #0
 801e46e:	4770      	bx	lr

0801e470 <__cxa_guard_release>:
 801e470:	2301      	movs	r3, #1
 801e472:	6003      	str	r3, [r0, #0]
 801e474:	4770      	bx	lr

0801e476 <_ZNSaIcEC1Ev>:
 801e476:	4770      	bx	lr

0801e478 <_ZNSaIcED1Ev>:
 801e478:	4770      	bx	lr

0801e47a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801e47a:	b10a      	cbz	r2, 801e480 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801e47c:	f002 bc62 	b.w	8020d44 <memcpy>
 801e480:	4770      	bx	lr

0801e482 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 801e482:	b10a      	cbz	r2, 801e488 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 801e484:	f002 bbac 	b.w	8020be0 <memcmp>
 801e488:	4610      	mov	r0, r2
 801e48a:	4770      	bx	lr

0801e48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801e48c:	b508      	push	{r3, lr}
 801e48e:	680b      	ldr	r3, [r1, #0]
 801e490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e494:	d302      	bcc.n	801e49c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801e496:	480d      	ldr	r0, [pc, #52]	; (801e4cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801e498:	f000 fac2 	bl	801ea20 <_ZSt20__throw_length_errorPKc>
 801e49c:	4293      	cmp	r3, r2
 801e49e:	d90b      	bls.n	801e4b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801e4a0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801e4a4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801e4a8:	d206      	bcs.n	801e4b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801e4aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801e4ae:	bf2a      	itet	cs
 801e4b0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801e4b4:	6008      	strcc	r0, [r1, #0]
 801e4b6:	600b      	strcs	r3, [r1, #0]
 801e4b8:	6808      	ldr	r0, [r1, #0]
 801e4ba:	3001      	adds	r0, #1
 801e4bc:	d501      	bpl.n	801e4c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801e4be:	f000 faa9 	bl	801ea14 <_ZSt17__throw_bad_allocv>
 801e4c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801e4c6:	f000 ba94 	b.w	801e9f2 <_Znwj>
 801e4ca:	bf00      	nop
 801e4cc:	080225e0 	.word	0x080225e0

0801e4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801e4d0:	f850 3b08 	ldr.w	r3, [r0], #8
 801e4d4:	4283      	cmp	r3, r0
 801e4d6:	d002      	beq.n	801e4de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f000 ba88 	b.w	801e9ee <_ZdlPv>
 801e4de:	4770      	bx	lr

0801e4e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 801e4e0:	b508      	push	{r3, lr}
 801e4e2:	4603      	mov	r3, r0
 801e4e4:	4608      	mov	r0, r1
 801e4e6:	685b      	ldr	r3, [r3, #4]
 801e4e8:	4298      	cmp	r0, r3
 801e4ea:	4611      	mov	r1, r2
 801e4ec:	d903      	bls.n	801e4f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 801e4ee:	4602      	mov	r2, r0
 801e4f0:	4801      	ldr	r0, [pc, #4]	; (801e4f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 801e4f2:	f000 fa98 	bl	801ea26 <_ZSt24__throw_out_of_range_fmtPKcz>
 801e4f6:	bd08      	pop	{r3, pc}
 801e4f8:	080225f8 	.word	0x080225f8

0801e4fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801e4fc:	6840      	ldr	r0, [r0, #4]
 801e4fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801e502:	3901      	subs	r1, #1
 801e504:	1a09      	subs	r1, r1, r0
 801e506:	4291      	cmp	r1, r2
 801e508:	b508      	push	{r3, lr}
 801e50a:	d202      	bcs.n	801e512 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801e50c:	4618      	mov	r0, r3
 801e50e:	f000 fa87 	bl	801ea20 <_ZSt20__throw_length_errorPKc>
 801e512:	bd08      	pop	{r3, pc}

0801e514 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 801e514:	6803      	ldr	r3, [r0, #0]
 801e516:	428b      	cmp	r3, r1
 801e518:	d806      	bhi.n	801e528 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 801e51a:	6842      	ldr	r2, [r0, #4]
 801e51c:	4413      	add	r3, r2
 801e51e:	4299      	cmp	r1, r3
 801e520:	bf94      	ite	ls
 801e522:	2000      	movls	r0, #0
 801e524:	2001      	movhi	r0, #1
 801e526:	4770      	bx	lr
 801e528:	2001      	movs	r0, #1
 801e52a:	4770      	bx	lr

0801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801e52c:	2a01      	cmp	r2, #1
 801e52e:	b410      	push	{r4}
 801e530:	d104      	bne.n	801e53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801e532:	780a      	ldrb	r2, [r1, #0]
 801e534:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e538:	7002      	strb	r2, [r0, #0]
 801e53a:	4770      	bx	lr
 801e53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e540:	f7ff bf9b 	b.w	801e47a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801e544:	2a01      	cmp	r2, #1
 801e546:	b430      	push	{r4, r5}
 801e548:	d103      	bne.n	801e552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801e54a:	780b      	ldrb	r3, [r1, #0]
 801e54c:	7003      	strb	r3, [r0, #0]
 801e54e:	bc30      	pop	{r4, r5}
 801e550:	4770      	bx	lr
 801e552:	2a00      	cmp	r2, #0
 801e554:	d0fb      	beq.n	801e54e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801e556:	bc30      	pop	{r4, r5}
 801e558:	f002 bb52 	b.w	8020c00 <memmove>

0801e55c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801e55c:	b508      	push	{r3, lr}
 801e55e:	1a52      	subs	r2, r2, r1
 801e560:	f7ff ffe4 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e564:	bd08      	pop	{r3, pc}

0801e566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801e566:	b508      	push	{r3, lr}
 801e568:	1a52      	subs	r2, r2, r1
 801e56a:	f7ff ffdf 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e56e:	bd08      	pop	{r3, pc}

0801e570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801e570:	4288      	cmp	r0, r1
 801e572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e574:	4604      	mov	r4, r0
 801e576:	460e      	mov	r6, r1
 801e578:	d01e      	beq.n	801e5b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 801e57a:	4603      	mov	r3, r0
 801e57c:	684d      	ldr	r5, [r1, #4]
 801e57e:	f853 2b08 	ldr.w	r2, [r3], #8
 801e582:	429a      	cmp	r2, r3
 801e584:	bf14      	ite	ne
 801e586:	6882      	ldrne	r2, [r0, #8]
 801e588:	220f      	moveq	r2, #15
 801e58a:	42aa      	cmp	r2, r5
 801e58c:	d20a      	bcs.n	801e5a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 801e58e:	a901      	add	r1, sp, #4
 801e590:	9501      	str	r5, [sp, #4]
 801e592:	f7ff ff7b 	bl	801e48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e596:	4607      	mov	r7, r0
 801e598:	4620      	mov	r0, r4
 801e59a:	f7ff ff99 	bl	801e4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e59e:	9b01      	ldr	r3, [sp, #4]
 801e5a0:	6027      	str	r7, [r4, #0]
 801e5a2:	60a3      	str	r3, [r4, #8]
 801e5a4:	b125      	cbz	r5, 801e5b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 801e5a6:	6831      	ldr	r1, [r6, #0]
 801e5a8:	6820      	ldr	r0, [r4, #0]
 801e5aa:	462a      	mov	r2, r5
 801e5ac:	f7ff ffbe 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e5b0:	6823      	ldr	r3, [r4, #0]
 801e5b2:	6065      	str	r5, [r4, #4]
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	555a      	strb	r2, [r3, r5]
 801e5b8:	b003      	add	sp, #12
 801e5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e5bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801e5bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e5c0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e5c2:	461f      	mov	r7, r3
 801e5c4:	6843      	ldr	r3, [r0, #4]
 801e5c6:	eb01 0802 	add.w	r8, r1, r2
 801e5ca:	1ab2      	subs	r2, r6, r2
 801e5cc:	441a      	add	r2, r3
 801e5ce:	eba3 0908 	sub.w	r9, r3, r8
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	9201      	str	r2, [sp, #4]
 801e5d6:	f853 2b08 	ldr.w	r2, [r3], #8
 801e5da:	429a      	cmp	r2, r3
 801e5dc:	bf18      	it	ne
 801e5de:	6882      	ldrne	r2, [r0, #8]
 801e5e0:	460d      	mov	r5, r1
 801e5e2:	bf08      	it	eq
 801e5e4:	220f      	moveq	r2, #15
 801e5e6:	a901      	add	r1, sp, #4
 801e5e8:	4604      	mov	r4, r0
 801e5ea:	f7ff ff4f 	bl	801e48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e5ee:	4682      	mov	sl, r0
 801e5f0:	b11d      	cbz	r5, 801e5fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 801e5f2:	6821      	ldr	r1, [r4, #0]
 801e5f4:	462a      	mov	r2, r5
 801e5f6:	f7ff ff99 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e5fa:	b137      	cbz	r7, 801e60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801e5fc:	b12e      	cbz	r6, 801e60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801e5fe:	4632      	mov	r2, r6
 801e600:	4639      	mov	r1, r7
 801e602:	eb0a 0005 	add.w	r0, sl, r5
 801e606:	f7ff ff91 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e60a:	f1b9 0f00 	cmp.w	r9, #0
 801e60e:	d007      	beq.n	801e620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801e610:	6821      	ldr	r1, [r4, #0]
 801e612:	4435      	add	r5, r6
 801e614:	464a      	mov	r2, r9
 801e616:	4441      	add	r1, r8
 801e618:	eb0a 0005 	add.w	r0, sl, r5
 801e61c:	f7ff ff86 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e620:	4620      	mov	r0, r4
 801e622:	f7ff ff55 	bl	801e4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e626:	9b01      	ldr	r3, [sp, #4]
 801e628:	f8c4 a000 	str.w	sl, [r4]
 801e62c:	60a3      	str	r3, [r4, #8]
 801e62e:	b002      	add	sp, #8
 801e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801e634:	f100 0208 	add.w	r2, r0, #8
 801e638:	6002      	str	r2, [r0, #0]
 801e63a:	2200      	movs	r2, #0
 801e63c:	6042      	str	r2, [r0, #4]
 801e63e:	7202      	strb	r2, [r0, #8]
 801e640:	4770      	bx	lr

0801e642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801e642:	b570      	push	{r4, r5, r6, lr}
 801e644:	4604      	mov	r4, r0
 801e646:	460e      	mov	r6, r1
 801e648:	3008      	adds	r0, #8
 801e64a:	6020      	str	r0, [r4, #0]
 801e64c:	f856 3b08 	ldr.w	r3, [r6], #8
 801e650:	429e      	cmp	r6, r3
 801e652:	460d      	mov	r5, r1
 801e654:	d10b      	bne.n	801e66e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801e656:	2210      	movs	r2, #16
 801e658:	4631      	mov	r1, r6
 801e65a:	f7ff ff0e 	bl	801e47a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 801e65e:	686b      	ldr	r3, [r5, #4]
 801e660:	6063      	str	r3, [r4, #4]
 801e662:	2300      	movs	r3, #0
 801e664:	602e      	str	r6, [r5, #0]
 801e666:	606b      	str	r3, [r5, #4]
 801e668:	722b      	strb	r3, [r5, #8]
 801e66a:	4620      	mov	r0, r4
 801e66c:	bd70      	pop	{r4, r5, r6, pc}
 801e66e:	6023      	str	r3, [r4, #0]
 801e670:	688b      	ldr	r3, [r1, #8]
 801e672:	60a3      	str	r3, [r4, #8]
 801e674:	e7f3      	b.n	801e65e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801e676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801e676:	b510      	push	{r4, lr}
 801e678:	4604      	mov	r4, r0
 801e67a:	f7ff ff29 	bl	801e4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e67e:	4620      	mov	r0, r4
 801e680:	bd10      	pop	{r4, pc}

0801e682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801e682:	b510      	push	{r4, lr}
 801e684:	4604      	mov	r4, r0
 801e686:	f7ff ff73 	bl	801e570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801e68a:	4620      	mov	r0, r4
 801e68c:	bd10      	pop	{r4, pc}

0801e68e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801e68e:	b570      	push	{r4, r5, r6, lr}
 801e690:	460c      	mov	r4, r1
 801e692:	f851 3b08 	ldr.w	r3, [r1], #8
 801e696:	4299      	cmp	r1, r3
 801e698:	4605      	mov	r5, r0
 801e69a:	6800      	ldr	r0, [r0, #0]
 801e69c:	d110      	bne.n	801e6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 801e69e:	42a5      	cmp	r5, r4
 801e6a0:	d008      	beq.n	801e6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 801e6a2:	6862      	ldr	r2, [r4, #4]
 801e6a4:	b10a      	cbz	r2, 801e6aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 801e6a6:	f7ff ff41 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e6aa:	6863      	ldr	r3, [r4, #4]
 801e6ac:	682a      	ldr	r2, [r5, #0]
 801e6ae:	606b      	str	r3, [r5, #4]
 801e6b0:	2100      	movs	r1, #0
 801e6b2:	54d1      	strb	r1, [r2, r3]
 801e6b4:	6822      	ldr	r2, [r4, #0]
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	6063      	str	r3, [r4, #4]
 801e6ba:	7013      	strb	r3, [r2, #0]
 801e6bc:	4628      	mov	r0, r5
 801e6be:	bd70      	pop	{r4, r5, r6, pc}
 801e6c0:	602b      	str	r3, [r5, #0]
 801e6c2:	f105 0608 	add.w	r6, r5, #8
 801e6c6:	6863      	ldr	r3, [r4, #4]
 801e6c8:	606b      	str	r3, [r5, #4]
 801e6ca:	42b0      	cmp	r0, r6
 801e6cc:	68a3      	ldr	r3, [r4, #8]
 801e6ce:	bf18      	it	ne
 801e6d0:	68aa      	ldrne	r2, [r5, #8]
 801e6d2:	60ab      	str	r3, [r5, #8]
 801e6d4:	bf08      	it	eq
 801e6d6:	2000      	moveq	r0, #0
 801e6d8:	b110      	cbz	r0, 801e6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 801e6da:	6020      	str	r0, [r4, #0]
 801e6dc:	60a2      	str	r2, [r4, #8]
 801e6de:	e7e9      	b.n	801e6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 801e6e0:	6021      	str	r1, [r4, #0]
 801e6e2:	e7e7      	b.n	801e6b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

0801e6e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 801e6e4:	6840      	ldr	r0, [r0, #4]
 801e6e6:	4770      	bx	lr

0801e6e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 801e6e8:	6840      	ldr	r0, [r0, #4]
 801e6ea:	4770      	bx	lr

0801e6ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	f853 2b08 	ldr.w	r2, [r3], #8
 801e6f2:	429a      	cmp	r2, r3
 801e6f4:	bf14      	ite	ne
 801e6f6:	6880      	ldrne	r0, [r0, #8]
 801e6f8:	200f      	moveq	r0, #15
 801e6fa:	4770      	bx	lr

0801e6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 801e6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e702:	4614      	mov	r4, r2
 801e704:	4680      	mov	r8, r0
 801e706:	462a      	mov	r2, r5
 801e708:	4689      	mov	r9, r1
 801e70a:	461f      	mov	r7, r3
 801e70c:	4621      	mov	r1, r4
 801e70e:	4b39      	ldr	r3, [pc, #228]	; (801e7f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 801e710:	f7ff fef4 	bl	801e4fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801e714:	4642      	mov	r2, r8
 801e716:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e71a:	f852 6b08 	ldr.w	r6, [r2], #8
 801e71e:	4296      	cmp	r6, r2
 801e720:	bf18      	it	ne
 801e722:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 801e726:	eba5 0b04 	sub.w	fp, r5, r4
 801e72a:	eb03 0a0b 	add.w	sl, r3, fp
 801e72e:	bf08      	it	eq
 801e730:	220f      	moveq	r2, #15
 801e732:	4552      	cmp	r2, sl
 801e734:	d351      	bcc.n	801e7da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 801e736:	444e      	add	r6, r9
 801e738:	4639      	mov	r1, r7
 801e73a:	44a1      	add	r9, r4
 801e73c:	4640      	mov	r0, r8
 801e73e:	eba3 0909 	sub.w	r9, r3, r9
 801e742:	f7ff fee7 	bl	801e514 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801e746:	b180      	cbz	r0, 801e76a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 801e748:	f1b9 0f00 	cmp.w	r9, #0
 801e74c:	d006      	beq.n	801e75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801e74e:	42ac      	cmp	r4, r5
 801e750:	d004      	beq.n	801e75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801e752:	464a      	mov	r2, r9
 801e754:	1931      	adds	r1, r6, r4
 801e756:	1970      	adds	r0, r6, r5
 801e758:	f7ff fef4 	bl	801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e75c:	b315      	cbz	r5, 801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e75e:	462a      	mov	r2, r5
 801e760:	4639      	mov	r1, r7
 801e762:	4630      	mov	r0, r6
 801e764:	f7ff fee2 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e768:	e01c      	b.n	801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e76a:	b135      	cbz	r5, 801e77a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 801e76c:	42ac      	cmp	r4, r5
 801e76e:	d33c      	bcc.n	801e7ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 801e770:	462a      	mov	r2, r5
 801e772:	4639      	mov	r1, r7
 801e774:	4630      	mov	r0, r6
 801e776:	f7ff fee5 	bl	801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e77a:	f1b9 0f00 	cmp.w	r9, #0
 801e77e:	d011      	beq.n	801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e780:	42ac      	cmp	r4, r5
 801e782:	d00f      	beq.n	801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e784:	464a      	mov	r2, r9
 801e786:	1931      	adds	r1, r6, r4
 801e788:	1970      	adds	r0, r6, r5
 801e78a:	f7ff fedb 	bl	801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e78e:	42ac      	cmp	r4, r5
 801e790:	d208      	bcs.n	801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e792:	4434      	add	r4, r6
 801e794:	197b      	adds	r3, r7, r5
 801e796:	429c      	cmp	r4, r3
 801e798:	d30f      	bcc.n	801e7ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 801e79a:	462a      	mov	r2, r5
 801e79c:	4639      	mov	r1, r7
 801e79e:	4630      	mov	r0, r6
 801e7a0:	f7ff fed0 	bl	801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e7a4:	f8d8 3000 	ldr.w	r3, [r8]
 801e7a8:	f8c8 a004 	str.w	sl, [r8, #4]
 801e7ac:	2200      	movs	r2, #0
 801e7ae:	4640      	mov	r0, r8
 801e7b0:	f803 200a 	strb.w	r2, [r3, sl]
 801e7b4:	b003      	add	sp, #12
 801e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7ba:	42bc      	cmp	r4, r7
 801e7bc:	d803      	bhi.n	801e7c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 801e7be:	462a      	mov	r2, r5
 801e7c0:	eb07 010b 	add.w	r1, r7, fp
 801e7c4:	e7cd      	b.n	801e762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 801e7c6:	1be4      	subs	r4, r4, r7
 801e7c8:	4622      	mov	r2, r4
 801e7ca:	4639      	mov	r1, r7
 801e7cc:	4630      	mov	r0, r6
 801e7ce:	f7ff feb9 	bl	801e544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e7d2:	1b2a      	subs	r2, r5, r4
 801e7d4:	1971      	adds	r1, r6, r5
 801e7d6:	1930      	adds	r0, r6, r4
 801e7d8:	e7c4      	b.n	801e764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801e7da:	9500      	str	r5, [sp, #0]
 801e7dc:	463b      	mov	r3, r7
 801e7de:	4622      	mov	r2, r4
 801e7e0:	4649      	mov	r1, r9
 801e7e2:	4640      	mov	r0, r8
 801e7e4:	f7ff feea 	bl	801e5bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801e7e8:	e7dc      	b.n	801e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801e7ea:	f1b9 0f00 	cmp.w	r9, #0
 801e7ee:	d0d0      	beq.n	801e792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 801e7f0:	e7c8      	b.n	801e784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 801e7f2:	bf00      	nop
 801e7f4:	08022645 	.word	0x08022645

0801e7f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 801e7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e7fa:	4604      	mov	r4, r0
 801e7fc:	4608      	mov	r0, r1
 801e7fe:	9103      	str	r1, [sp, #12]
 801e800:	f7e1 fcf4 	bl	80001ec <strlen>
 801e804:	9b03      	ldr	r3, [sp, #12]
 801e806:	9000      	str	r0, [sp, #0]
 801e808:	6862      	ldr	r2, [r4, #4]
 801e80a:	2100      	movs	r1, #0
 801e80c:	4620      	mov	r0, r4
 801e80e:	f7ff ff75 	bl	801e6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801e812:	b004      	add	sp, #16
 801e814:	bd10      	pop	{r4, pc}

0801e816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 801e816:	b508      	push	{r3, lr}
 801e818:	f7ff ffee 	bl	801e7f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 801e81c:	bd08      	pop	{r3, pc}
	...

0801e820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 801e820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e822:	4604      	mov	r4, r0
 801e824:	4615      	mov	r5, r2
 801e826:	4a09      	ldr	r2, [pc, #36]	; (801e84c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 801e828:	9303      	str	r3, [sp, #12]
 801e82a:	460e      	mov	r6, r1
 801e82c:	f7ff fe58 	bl	801e4e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801e830:	6862      	ldr	r2, [r4, #4]
 801e832:	9b03      	ldr	r3, [sp, #12]
 801e834:	1b92      	subs	r2, r2, r6
 801e836:	4601      	mov	r1, r0
 801e838:	42aa      	cmp	r2, r5
 801e83a:	9808      	ldr	r0, [sp, #32]
 801e83c:	9000      	str	r0, [sp, #0]
 801e83e:	bf28      	it	cs
 801e840:	462a      	movcs	r2, r5
 801e842:	4620      	mov	r0, r4
 801e844:	f7ff ff5a 	bl	801e6fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801e848:	b004      	add	sp, #16
 801e84a:	bd70      	pop	{r4, r5, r6, pc}
 801e84c:	0802262f 	.word	0x0802262f

0801e850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 801e850:	b507      	push	{r0, r1, r2, lr}
 801e852:	6853      	ldr	r3, [r2, #4]
 801e854:	9300      	str	r3, [sp, #0]
 801e856:	6813      	ldr	r3, [r2, #0]
 801e858:	2200      	movs	r2, #0
 801e85a:	f7ff ffe1 	bl	801e820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 801e85e:	b003      	add	sp, #12
 801e860:	f85d fb04 	ldr.w	pc, [sp], #4

0801e864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 801e864:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e866:	4604      	mov	r4, r0
 801e868:	4623      	mov	r3, r4
 801e86a:	6840      	ldr	r0, [r0, #4]
 801e86c:	f853 6b08 	ldr.w	r6, [r3], #8
 801e870:	429e      	cmp	r6, r3
 801e872:	bf18      	it	ne
 801e874:	68a3      	ldrne	r3, [r4, #8]
 801e876:	eb00 0502 	add.w	r5, r0, r2
 801e87a:	bf08      	it	eq
 801e87c:	230f      	moveq	r3, #15
 801e87e:	429d      	cmp	r5, r3
 801e880:	d80a      	bhi.n	801e898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 801e882:	b112      	cbz	r2, 801e88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 801e884:	4430      	add	r0, r6
 801e886:	f7ff fe51 	bl	801e52c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e88a:	6823      	ldr	r3, [r4, #0]
 801e88c:	6065      	str	r5, [r4, #4]
 801e88e:	2200      	movs	r2, #0
 801e890:	4620      	mov	r0, r4
 801e892:	555a      	strb	r2, [r3, r5]
 801e894:	b002      	add	sp, #8
 801e896:	bd70      	pop	{r4, r5, r6, pc}
 801e898:	9200      	str	r2, [sp, #0]
 801e89a:	460b      	mov	r3, r1
 801e89c:	2200      	movs	r2, #0
 801e89e:	4601      	mov	r1, r0
 801e8a0:	4620      	mov	r0, r4
 801e8a2:	f7ff fe8b 	bl	801e5bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801e8a6:	e7f0      	b.n	801e88a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0801e8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 801e8a8:	b508      	push	{r3, lr}
 801e8aa:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e8ae:	f7ff ffd9 	bl	801e864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801e8b2:	bd08      	pop	{r3, pc}

0801e8b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 801e8b4:	b508      	push	{r3, lr}
 801e8b6:	f7ff fff7 	bl	801e8a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 801e8ba:	bd08      	pop	{r3, pc}

0801e8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801e8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8be:	4604      	mov	r4, r0
 801e8c0:	4608      	mov	r0, r1
 801e8c2:	460d      	mov	r5, r1
 801e8c4:	f7e1 fc92 	bl	80001ec <strlen>
 801e8c8:	4b06      	ldr	r3, [pc, #24]	; (801e8e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801e8ca:	9001      	str	r0, [sp, #4]
 801e8cc:	4602      	mov	r2, r0
 801e8ce:	2100      	movs	r1, #0
 801e8d0:	4620      	mov	r0, r4
 801e8d2:	f7ff fe13 	bl	801e4fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801e8d6:	9a01      	ldr	r2, [sp, #4]
 801e8d8:	4629      	mov	r1, r5
 801e8da:	4620      	mov	r0, r4
 801e8dc:	f7ff ffc2 	bl	801e864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801e8e0:	b003      	add	sp, #12
 801e8e2:	bd30      	pop	{r4, r5, pc}
 801e8e4:	0802265e 	.word	0x0802265e

0801e8e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 801e8e8:	b508      	push	{r3, lr}
 801e8ea:	f7ff ffe7 	bl	801e8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 801e8ee:	bd08      	pop	{r3, pc}

0801e8f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801e8f0:	6800      	ldr	r0, [r0, #0]
 801e8f2:	4770      	bx	lr

0801e8f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 801e8f4:	4770      	bx	lr

0801e8f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 801e8f6:	b538      	push	{r3, r4, r5, lr}
 801e8f8:	6845      	ldr	r5, [r0, #4]
 801e8fa:	684c      	ldr	r4, [r1, #4]
 801e8fc:	6800      	ldr	r0, [r0, #0]
 801e8fe:	6809      	ldr	r1, [r1, #0]
 801e900:	42a5      	cmp	r5, r4
 801e902:	462a      	mov	r2, r5
 801e904:	bf28      	it	cs
 801e906:	4622      	movcs	r2, r4
 801e908:	f7ff fdbb 	bl	801e482 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801e90c:	b900      	cbnz	r0, 801e910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 801e90e:	1b28      	subs	r0, r5, r4
 801e910:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801e914:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e916:	4604      	mov	r4, r0
 801e918:	4616      	mov	r6, r2
 801e91a:	460d      	mov	r5, r1
 801e91c:	b919      	cbnz	r1, 801e926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801e91e:	b112      	cbz	r2, 801e926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801e920:	480d      	ldr	r0, [pc, #52]	; (801e958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 801e922:	f000 f87a 	bl	801ea1a <_ZSt19__throw_logic_errorPKc>
 801e926:	1b73      	subs	r3, r6, r5
 801e928:	2b0f      	cmp	r3, #15
 801e92a:	9301      	str	r3, [sp, #4]
 801e92c:	d907      	bls.n	801e93e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801e92e:	2200      	movs	r2, #0
 801e930:	a901      	add	r1, sp, #4
 801e932:	4620      	mov	r0, r4
 801e934:	f7ff fdaa 	bl	801e48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e938:	9b01      	ldr	r3, [sp, #4]
 801e93a:	6020      	str	r0, [r4, #0]
 801e93c:	60a3      	str	r3, [r4, #8]
 801e93e:	4632      	mov	r2, r6
 801e940:	4629      	mov	r1, r5
 801e942:	6820      	ldr	r0, [r4, #0]
 801e944:	f7ff fe0a 	bl	801e55c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801e948:	9b01      	ldr	r3, [sp, #4]
 801e94a:	6822      	ldr	r2, [r4, #0]
 801e94c:	6063      	str	r3, [r4, #4]
 801e94e:	2100      	movs	r1, #0
 801e950:	54d1      	strb	r1, [r2, r3]
 801e952:	b002      	add	sp, #8
 801e954:	bd70      	pop	{r4, r5, r6, pc}
 801e956:	bf00      	nop
 801e958:	08022673 	.word	0x08022673

0801e95c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801e95c:	b538      	push	{r3, r4, r5, lr}
 801e95e:	f100 0308 	add.w	r3, r0, #8
 801e962:	6003      	str	r3, [r0, #0]
 801e964:	e9d1 5200 	ldrd	r5, r2, [r1]
 801e968:	4604      	mov	r4, r0
 801e96a:	f04f 0300 	mov.w	r3, #0
 801e96e:	442a      	add	r2, r5
 801e970:	4629      	mov	r1, r5
 801e972:	f7ff ffcf 	bl	801e914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801e976:	4620      	mov	r0, r4
 801e978:	bd38      	pop	{r3, r4, r5, pc}
	...

0801e97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801e97c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e97e:	4604      	mov	r4, r0
 801e980:	4616      	mov	r6, r2
 801e982:	460d      	mov	r5, r1
 801e984:	b919      	cbnz	r1, 801e98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801e986:	b112      	cbz	r2, 801e98e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801e988:	480d      	ldr	r0, [pc, #52]	; (801e9c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801e98a:	f000 f846 	bl	801ea1a <_ZSt19__throw_logic_errorPKc>
 801e98e:	1b73      	subs	r3, r6, r5
 801e990:	2b0f      	cmp	r3, #15
 801e992:	9301      	str	r3, [sp, #4]
 801e994:	d907      	bls.n	801e9a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801e996:	2200      	movs	r2, #0
 801e998:	a901      	add	r1, sp, #4
 801e99a:	4620      	mov	r0, r4
 801e99c:	f7ff fd76 	bl	801e48c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e9a0:	9b01      	ldr	r3, [sp, #4]
 801e9a2:	6020      	str	r0, [r4, #0]
 801e9a4:	60a3      	str	r3, [r4, #8]
 801e9a6:	4632      	mov	r2, r6
 801e9a8:	4629      	mov	r1, r5
 801e9aa:	6820      	ldr	r0, [r4, #0]
 801e9ac:	f7ff fddb 	bl	801e566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801e9b0:	9b01      	ldr	r3, [sp, #4]
 801e9b2:	6822      	ldr	r2, [r4, #0]
 801e9b4:	6063      	str	r3, [r4, #4]
 801e9b6:	2100      	movs	r1, #0
 801e9b8:	54d1      	strb	r1, [r2, r3]
 801e9ba:	b002      	add	sp, #8
 801e9bc:	bd70      	pop	{r4, r5, r6, pc}
 801e9be:	bf00      	nop
 801e9c0:	08022673 	.word	0x08022673

0801e9c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801e9c4:	b538      	push	{r3, r4, r5, lr}
 801e9c6:	f100 0308 	add.w	r3, r0, #8
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	6003      	str	r3, [r0, #0]
 801e9ce:	460d      	mov	r5, r1
 801e9d0:	b159      	cbz	r1, 801e9ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801e9d2:	4608      	mov	r0, r1
 801e9d4:	f7e1 fc0a 	bl	80001ec <strlen>
 801e9d8:	182a      	adds	r2, r5, r0
 801e9da:	4620      	mov	r0, r4
 801e9dc:	f04f 0300 	mov.w	r3, #0
 801e9e0:	4629      	mov	r1, r5
 801e9e2:	f7ff ffcb 	bl	801e97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801e9e6:	4620      	mov	r0, r4
 801e9e8:	bd38      	pop	{r3, r4, r5, pc}
 801e9ea:	2201      	movs	r2, #1
 801e9ec:	e7f5      	b.n	801e9da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801e9ee <_ZdlPv>:
 801e9ee:	f002 b843 	b.w	8020a78 <free>

0801e9f2 <_Znwj>:
 801e9f2:	2801      	cmp	r0, #1
 801e9f4:	bf38      	it	cc
 801e9f6:	2001      	movcc	r0, #1
 801e9f8:	b510      	push	{r4, lr}
 801e9fa:	4604      	mov	r4, r0
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f002 f833 	bl	8020a68 <malloc>
 801ea02:	b100      	cbz	r0, 801ea06 <_Znwj+0x14>
 801ea04:	bd10      	pop	{r4, pc}
 801ea06:	f000 f8bf 	bl	801eb88 <_ZSt15get_new_handlerv>
 801ea0a:	b908      	cbnz	r0, 801ea10 <_Znwj+0x1e>
 801ea0c:	f002 f824 	bl	8020a58 <abort>
 801ea10:	4780      	blx	r0
 801ea12:	e7f3      	b.n	801e9fc <_Znwj+0xa>

0801ea14 <_ZSt17__throw_bad_allocv>:
 801ea14:	b508      	push	{r3, lr}
 801ea16:	f002 f81f 	bl	8020a58 <abort>

0801ea1a <_ZSt19__throw_logic_errorPKc>:
 801ea1a:	b508      	push	{r3, lr}
 801ea1c:	f002 f81c 	bl	8020a58 <abort>

0801ea20 <_ZSt20__throw_length_errorPKc>:
 801ea20:	b508      	push	{r3, lr}
 801ea22:	f002 f819 	bl	8020a58 <abort>

0801ea26 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801ea26:	b40f      	push	{r0, r1, r2, r3}
 801ea28:	b580      	push	{r7, lr}
 801ea2a:	b084      	sub	sp, #16
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	f107 0418 	add.w	r4, r7, #24
 801ea32:	f854 2b04 	ldr.w	r2, [r4], #4
 801ea36:	607a      	str	r2, [r7, #4]
 801ea38:	4610      	mov	r0, r2
 801ea3a:	f7e1 fbd7 	bl	80001ec <strlen>
 801ea3e:	f200 2307 	addw	r3, r0, #519	; 0x207
 801ea42:	f023 0307 	bic.w	r3, r3, #7
 801ea46:	ebad 0d03 	sub.w	sp, sp, r3
 801ea4a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801ea4e:	687a      	ldr	r2, [r7, #4]
 801ea50:	60fc      	str	r4, [r7, #12]
 801ea52:	4623      	mov	r3, r4
 801ea54:	4668      	mov	r0, sp
 801ea56:	f000 f855 	bl	801eb04 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801ea5a:	f001 fffd 	bl	8020a58 <abort>
	...

0801ea60 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801ea60:	b580      	push	{r7, lr}
 801ea62:	b09c      	sub	sp, #112	; 0x70
 801ea64:	4606      	mov	r6, r0
 801ea66:	af00      	add	r7, sp, #0
 801ea68:	460c      	mov	r4, r1
 801ea6a:	1ba4      	subs	r4, r4, r6
 801ea6c:	490e      	ldr	r1, [pc, #56]	; (801eaa8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801ea6e:	2269      	movs	r2, #105	; 0x69
 801ea70:	1d38      	adds	r0, r7, #4
 801ea72:	f002 f967 	bl	8020d44 <memcpy>
 801ea76:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801ea7a:	f023 0307 	bic.w	r3, r3, #7
 801ea7e:	ebad 0d03 	sub.w	sp, sp, r3
 801ea82:	466d      	mov	r5, sp
 801ea84:	2268      	movs	r2, #104	; 0x68
 801ea86:	1d39      	adds	r1, r7, #4
 801ea88:	4628      	mov	r0, r5
 801ea8a:	f002 f95b 	bl	8020d44 <memcpy>
 801ea8e:	4622      	mov	r2, r4
 801ea90:	4631      	mov	r1, r6
 801ea92:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801ea96:	442c      	add	r4, r5
 801ea98:	f002 f954 	bl	8020d44 <memcpy>
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801eaa2:	4628      	mov	r0, r5
 801eaa4:	f7ff ffb9 	bl	801ea1a <_ZSt19__throw_logic_errorPKc>
 801eaa8:	0802269d 	.word	0x0802269d

0801eaac <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801eaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	b084      	sub	sp, #16
 801eab4:	466d      	mov	r5, sp
 801eab6:	f105 040c 	add.w	r4, r5, #12
 801eaba:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801eb00 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801eabe:	4623      	mov	r3, r4
 801eac0:	f04f 0c0a 	mov.w	ip, #10
 801eac4:	fbb2 f6fc 	udiv	r6, r2, ip
 801eac8:	fb0c 2e16 	mls	lr, ip, r6, r2
 801eacc:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ead0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 801ead4:	4696      	mov	lr, r2
 801ead6:	f1be 0f09 	cmp.w	lr, #9
 801eada:	4632      	mov	r2, r6
 801eadc:	d8f2      	bhi.n	801eac4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801eade:	1ae4      	subs	r4, r4, r3
 801eae0:	428c      	cmp	r4, r1
 801eae2:	d809      	bhi.n	801eaf8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801eae4:	f1c4 010c 	rsb	r1, r4, #12
 801eae8:	4622      	mov	r2, r4
 801eaea:	4429      	add	r1, r5
 801eaec:	f002 f92a 	bl	8020d44 <memcpy>
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eaf8:	f04f 34ff 	mov.w	r4, #4294967295
 801eafc:	e7f8      	b.n	801eaf0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801eafe:	bf00      	nop
 801eb00:	08022706 	.word	0x08022706

0801eb04 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801eb04:	3901      	subs	r1, #1
 801eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb0a:	4607      	mov	r7, r0
 801eb0c:	4615      	mov	r5, r2
 801eb0e:	eb00 0801 	add.w	r8, r0, r1
 801eb12:	4604      	mov	r4, r0
 801eb14:	782a      	ldrb	r2, [r5, #0]
 801eb16:	b392      	cbz	r2, 801eb7e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801eb18:	4544      	cmp	r4, r8
 801eb1a:	d216      	bcs.n	801eb4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 801eb1c:	2a25      	cmp	r2, #37	; 0x25
 801eb1e:	d107      	bne.n	801eb30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801eb20:	786a      	ldrb	r2, [r5, #1]
 801eb22:	2a73      	cmp	r2, #115	; 0x73
 801eb24:	d009      	beq.n	801eb3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801eb26:	2a7a      	cmp	r2, #122	; 0x7a
 801eb28:	d016      	beq.n	801eb58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 801eb2a:	2a25      	cmp	r2, #37	; 0x25
 801eb2c:	d100      	bne.n	801eb30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801eb2e:	3501      	adds	r5, #1
 801eb30:	f815 2b01 	ldrb.w	r2, [r5], #1
 801eb34:	f804 2b01 	strb.w	r2, [r4], #1
 801eb38:	e7ec      	b.n	801eb14 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801eb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb3e:	3a01      	subs	r2, #1
 801eb40:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801eb44:	b1c9      	cbz	r1, 801eb7a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801eb46:	4544      	cmp	r4, r8
 801eb48:	d103      	bne.n	801eb52 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 801eb4a:	4621      	mov	r1, r4
 801eb4c:	4638      	mov	r0, r7
 801eb4e:	f7ff ff87 	bl	801ea60 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801eb52:	f804 1b01 	strb.w	r1, [r4], #1
 801eb56:	e7f3      	b.n	801eb40 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801eb58:	78aa      	ldrb	r2, [r5, #2]
 801eb5a:	2a75      	cmp	r2, #117	; 0x75
 801eb5c:	d1e8      	bne.n	801eb30 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801eb5e:	461e      	mov	r6, r3
 801eb60:	eba8 0104 	sub.w	r1, r8, r4
 801eb64:	f856 2b04 	ldr.w	r2, [r6], #4
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f7ff ff9f 	bl	801eaac <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801eb6e:	2800      	cmp	r0, #0
 801eb70:	ddeb      	ble.n	801eb4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 801eb72:	4404      	add	r4, r0
 801eb74:	3503      	adds	r5, #3
 801eb76:	4633      	mov	r3, r6
 801eb78:	e7cc      	b.n	801eb14 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801eb7a:	3502      	adds	r5, #2
 801eb7c:	e7ca      	b.n	801eb14 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801eb7e:	7022      	strb	r2, [r4, #0]
 801eb80:	1be0      	subs	r0, r4, r7
 801eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801eb88 <_ZSt15get_new_handlerv>:
 801eb88:	4b02      	ldr	r3, [pc, #8]	; (801eb94 <_ZSt15get_new_handlerv+0xc>)
 801eb8a:	6818      	ldr	r0, [r3, #0]
 801eb8c:	f3bf 8f5b 	dmb	ish
 801eb90:	4770      	bx	lr
 801eb92:	bf00      	nop
 801eb94:	2000afdc 	.word	0x2000afdc

0801eb98 <pow>:
 801eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb9a:	ed2d 8b02 	vpush	{d8}
 801eb9e:	eeb0 8a40 	vmov.f32	s16, s0
 801eba2:	eef0 8a60 	vmov.f32	s17, s1
 801eba6:	ec55 4b11 	vmov	r4, r5, d1
 801ebaa:	f000 fb99 	bl	801f2e0 <__ieee754_pow>
 801ebae:	4622      	mov	r2, r4
 801ebb0:	462b      	mov	r3, r5
 801ebb2:	4620      	mov	r0, r4
 801ebb4:	4629      	mov	r1, r5
 801ebb6:	ec57 6b10 	vmov	r6, r7, d0
 801ebba:	f7e1 ff75 	bl	8000aa8 <__aeabi_dcmpun>
 801ebbe:	2800      	cmp	r0, #0
 801ebc0:	d13b      	bne.n	801ec3a <pow+0xa2>
 801ebc2:	ec51 0b18 	vmov	r0, r1, d8
 801ebc6:	2200      	movs	r2, #0
 801ebc8:	2300      	movs	r3, #0
 801ebca:	f7e1 ff3b 	bl	8000a44 <__aeabi_dcmpeq>
 801ebce:	b1b8      	cbz	r0, 801ec00 <pow+0x68>
 801ebd0:	2200      	movs	r2, #0
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	4620      	mov	r0, r4
 801ebd6:	4629      	mov	r1, r5
 801ebd8:	f7e1 ff34 	bl	8000a44 <__aeabi_dcmpeq>
 801ebdc:	2800      	cmp	r0, #0
 801ebde:	d146      	bne.n	801ec6e <pow+0xd6>
 801ebe0:	ec45 4b10 	vmov	d0, r4, r5
 801ebe4:	f000 f8cc 	bl	801ed80 <finite>
 801ebe8:	b338      	cbz	r0, 801ec3a <pow+0xa2>
 801ebea:	2200      	movs	r2, #0
 801ebec:	2300      	movs	r3, #0
 801ebee:	4620      	mov	r0, r4
 801ebf0:	4629      	mov	r1, r5
 801ebf2:	f7e1 ff31 	bl	8000a58 <__aeabi_dcmplt>
 801ebf6:	b300      	cbz	r0, 801ec3a <pow+0xa2>
 801ebf8:	f002 f878 	bl	8020cec <__errno>
 801ebfc:	2322      	movs	r3, #34	; 0x22
 801ebfe:	e01b      	b.n	801ec38 <pow+0xa0>
 801ec00:	ec47 6b10 	vmov	d0, r6, r7
 801ec04:	f000 f8bc 	bl	801ed80 <finite>
 801ec08:	b9e0      	cbnz	r0, 801ec44 <pow+0xac>
 801ec0a:	eeb0 0a48 	vmov.f32	s0, s16
 801ec0e:	eef0 0a68 	vmov.f32	s1, s17
 801ec12:	f000 f8b5 	bl	801ed80 <finite>
 801ec16:	b1a8      	cbz	r0, 801ec44 <pow+0xac>
 801ec18:	ec45 4b10 	vmov	d0, r4, r5
 801ec1c:	f000 f8b0 	bl	801ed80 <finite>
 801ec20:	b180      	cbz	r0, 801ec44 <pow+0xac>
 801ec22:	4632      	mov	r2, r6
 801ec24:	463b      	mov	r3, r7
 801ec26:	4630      	mov	r0, r6
 801ec28:	4639      	mov	r1, r7
 801ec2a:	f7e1 ff3d 	bl	8000aa8 <__aeabi_dcmpun>
 801ec2e:	2800      	cmp	r0, #0
 801ec30:	d0e2      	beq.n	801ebf8 <pow+0x60>
 801ec32:	f002 f85b 	bl	8020cec <__errno>
 801ec36:	2321      	movs	r3, #33	; 0x21
 801ec38:	6003      	str	r3, [r0, #0]
 801ec3a:	ecbd 8b02 	vpop	{d8}
 801ec3e:	ec47 6b10 	vmov	d0, r6, r7
 801ec42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec44:	2200      	movs	r2, #0
 801ec46:	2300      	movs	r3, #0
 801ec48:	4630      	mov	r0, r6
 801ec4a:	4639      	mov	r1, r7
 801ec4c:	f7e1 fefa 	bl	8000a44 <__aeabi_dcmpeq>
 801ec50:	2800      	cmp	r0, #0
 801ec52:	d0f2      	beq.n	801ec3a <pow+0xa2>
 801ec54:	eeb0 0a48 	vmov.f32	s0, s16
 801ec58:	eef0 0a68 	vmov.f32	s1, s17
 801ec5c:	f000 f890 	bl	801ed80 <finite>
 801ec60:	2800      	cmp	r0, #0
 801ec62:	d0ea      	beq.n	801ec3a <pow+0xa2>
 801ec64:	ec45 4b10 	vmov	d0, r4, r5
 801ec68:	f000 f88a 	bl	801ed80 <finite>
 801ec6c:	e7c3      	b.n	801ebf6 <pow+0x5e>
 801ec6e:	4f01      	ldr	r7, [pc, #4]	; (801ec74 <pow+0xdc>)
 801ec70:	2600      	movs	r6, #0
 801ec72:	e7e2      	b.n	801ec3a <pow+0xa2>
 801ec74:	3ff00000 	.word	0x3ff00000

0801ec78 <sqrt>:
 801ec78:	b538      	push	{r3, r4, r5, lr}
 801ec7a:	ed2d 8b02 	vpush	{d8}
 801ec7e:	ec55 4b10 	vmov	r4, r5, d0
 801ec82:	f000 f889 	bl	801ed98 <__ieee754_sqrt>
 801ec86:	4622      	mov	r2, r4
 801ec88:	462b      	mov	r3, r5
 801ec8a:	4620      	mov	r0, r4
 801ec8c:	4629      	mov	r1, r5
 801ec8e:	eeb0 8a40 	vmov.f32	s16, s0
 801ec92:	eef0 8a60 	vmov.f32	s17, s1
 801ec96:	f7e1 ff07 	bl	8000aa8 <__aeabi_dcmpun>
 801ec9a:	b990      	cbnz	r0, 801ecc2 <sqrt+0x4a>
 801ec9c:	2200      	movs	r2, #0
 801ec9e:	2300      	movs	r3, #0
 801eca0:	4620      	mov	r0, r4
 801eca2:	4629      	mov	r1, r5
 801eca4:	f7e1 fed8 	bl	8000a58 <__aeabi_dcmplt>
 801eca8:	b158      	cbz	r0, 801ecc2 <sqrt+0x4a>
 801ecaa:	f002 f81f 	bl	8020cec <__errno>
 801ecae:	2321      	movs	r3, #33	; 0x21
 801ecb0:	6003      	str	r3, [r0, #0]
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	2300      	movs	r3, #0
 801ecb6:	4610      	mov	r0, r2
 801ecb8:	4619      	mov	r1, r3
 801ecba:	f7e1 fd85 	bl	80007c8 <__aeabi_ddiv>
 801ecbe:	ec41 0b18 	vmov	d8, r0, r1
 801ecc2:	eeb0 0a48 	vmov.f32	s0, s16
 801ecc6:	eef0 0a68 	vmov.f32	s1, s17
 801ecca:	ecbd 8b02 	vpop	{d8}
 801ecce:	bd38      	pop	{r3, r4, r5, pc}

0801ecd0 <sin>:
 801ecd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ecd2:	ec53 2b10 	vmov	r2, r3, d0
 801ecd6:	4828      	ldr	r0, [pc, #160]	; (801ed78 <sin+0xa8>)
 801ecd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ecdc:	4281      	cmp	r1, r0
 801ecde:	dc07      	bgt.n	801ecf0 <sin+0x20>
 801ece0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801ed70 <sin+0xa0>
 801ece4:	2000      	movs	r0, #0
 801ece6:	b005      	add	sp, #20
 801ece8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecec:	f000 ba38 	b.w	801f160 <__kernel_sin>
 801ecf0:	4822      	ldr	r0, [pc, #136]	; (801ed7c <sin+0xac>)
 801ecf2:	4281      	cmp	r1, r0
 801ecf4:	dd09      	ble.n	801ed0a <sin+0x3a>
 801ecf6:	ee10 0a10 	vmov	r0, s0
 801ecfa:	4619      	mov	r1, r3
 801ecfc:	f7e1 fa82 	bl	8000204 <__aeabi_dsub>
 801ed00:	ec41 0b10 	vmov	d0, r0, r1
 801ed04:	b005      	add	sp, #20
 801ed06:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed0a:	4668      	mov	r0, sp
 801ed0c:	f001 f814 	bl	801fd38 <__ieee754_rem_pio2>
 801ed10:	f000 0003 	and.w	r0, r0, #3
 801ed14:	2801      	cmp	r0, #1
 801ed16:	d00c      	beq.n	801ed32 <sin+0x62>
 801ed18:	2802      	cmp	r0, #2
 801ed1a:	d011      	beq.n	801ed40 <sin+0x70>
 801ed1c:	b9f0      	cbnz	r0, 801ed5c <sin+0x8c>
 801ed1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ed22:	ed9d 0b00 	vldr	d0, [sp]
 801ed26:	2001      	movs	r0, #1
 801ed28:	f000 fa1a 	bl	801f160 <__kernel_sin>
 801ed2c:	ec51 0b10 	vmov	r0, r1, d0
 801ed30:	e7e6      	b.n	801ed00 <sin+0x30>
 801ed32:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ed36:	ed9d 0b00 	vldr	d0, [sp]
 801ed3a:	f000 f949 	bl	801efd0 <__kernel_cos>
 801ed3e:	e7f5      	b.n	801ed2c <sin+0x5c>
 801ed40:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ed44:	ed9d 0b00 	vldr	d0, [sp]
 801ed48:	2001      	movs	r0, #1
 801ed4a:	f000 fa09 	bl	801f160 <__kernel_sin>
 801ed4e:	ec53 2b10 	vmov	r2, r3, d0
 801ed52:	ee10 0a10 	vmov	r0, s0
 801ed56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ed5a:	e7d1      	b.n	801ed00 <sin+0x30>
 801ed5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ed60:	ed9d 0b00 	vldr	d0, [sp]
 801ed64:	f000 f934 	bl	801efd0 <__kernel_cos>
 801ed68:	e7f1      	b.n	801ed4e <sin+0x7e>
 801ed6a:	bf00      	nop
 801ed6c:	f3af 8000 	nop.w
	...
 801ed78:	3fe921fb 	.word	0x3fe921fb
 801ed7c:	7fefffff 	.word	0x7fefffff

0801ed80 <finite>:
 801ed80:	b082      	sub	sp, #8
 801ed82:	ed8d 0b00 	vstr	d0, [sp]
 801ed86:	9801      	ldr	r0, [sp, #4]
 801ed88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ed8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ed90:	0fc0      	lsrs	r0, r0, #31
 801ed92:	b002      	add	sp, #8
 801ed94:	4770      	bx	lr
	...

0801ed98 <__ieee754_sqrt>:
 801ed98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed9c:	ec55 4b10 	vmov	r4, r5, d0
 801eda0:	4e67      	ldr	r6, [pc, #412]	; (801ef40 <__ieee754_sqrt+0x1a8>)
 801eda2:	43ae      	bics	r6, r5
 801eda4:	ee10 0a10 	vmov	r0, s0
 801eda8:	ee10 2a10 	vmov	r2, s0
 801edac:	4629      	mov	r1, r5
 801edae:	462b      	mov	r3, r5
 801edb0:	d10d      	bne.n	801edce <__ieee754_sqrt+0x36>
 801edb2:	f7e1 fbdf 	bl	8000574 <__aeabi_dmul>
 801edb6:	4602      	mov	r2, r0
 801edb8:	460b      	mov	r3, r1
 801edba:	4620      	mov	r0, r4
 801edbc:	4629      	mov	r1, r5
 801edbe:	f7e1 fa23 	bl	8000208 <__adddf3>
 801edc2:	4604      	mov	r4, r0
 801edc4:	460d      	mov	r5, r1
 801edc6:	ec45 4b10 	vmov	d0, r4, r5
 801edca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edce:	2d00      	cmp	r5, #0
 801edd0:	dc0b      	bgt.n	801edea <__ieee754_sqrt+0x52>
 801edd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801edd6:	4326      	orrs	r6, r4
 801edd8:	d0f5      	beq.n	801edc6 <__ieee754_sqrt+0x2e>
 801edda:	b135      	cbz	r5, 801edea <__ieee754_sqrt+0x52>
 801eddc:	f7e1 fa12 	bl	8000204 <__aeabi_dsub>
 801ede0:	4602      	mov	r2, r0
 801ede2:	460b      	mov	r3, r1
 801ede4:	f7e1 fcf0 	bl	80007c8 <__aeabi_ddiv>
 801ede8:	e7eb      	b.n	801edc2 <__ieee754_sqrt+0x2a>
 801edea:	1509      	asrs	r1, r1, #20
 801edec:	f000 808d 	beq.w	801ef0a <__ieee754_sqrt+0x172>
 801edf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801edf4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801edf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801edfc:	07c9      	lsls	r1, r1, #31
 801edfe:	bf5c      	itt	pl
 801ee00:	005b      	lslpl	r3, r3, #1
 801ee02:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801ee06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ee0a:	bf58      	it	pl
 801ee0c:	0052      	lslpl	r2, r2, #1
 801ee0e:	2500      	movs	r5, #0
 801ee10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ee14:	1076      	asrs	r6, r6, #1
 801ee16:	0052      	lsls	r2, r2, #1
 801ee18:	f04f 0e16 	mov.w	lr, #22
 801ee1c:	46ac      	mov	ip, r5
 801ee1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ee22:	eb0c 0001 	add.w	r0, ip, r1
 801ee26:	4298      	cmp	r0, r3
 801ee28:	bfde      	ittt	le
 801ee2a:	1a1b      	suble	r3, r3, r0
 801ee2c:	eb00 0c01 	addle.w	ip, r0, r1
 801ee30:	186d      	addle	r5, r5, r1
 801ee32:	005b      	lsls	r3, r3, #1
 801ee34:	f1be 0e01 	subs.w	lr, lr, #1
 801ee38:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ee3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ee40:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ee44:	d1ed      	bne.n	801ee22 <__ieee754_sqrt+0x8a>
 801ee46:	4674      	mov	r4, lr
 801ee48:	2720      	movs	r7, #32
 801ee4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ee4e:	4563      	cmp	r3, ip
 801ee50:	eb01 000e 	add.w	r0, r1, lr
 801ee54:	dc02      	bgt.n	801ee5c <__ieee754_sqrt+0xc4>
 801ee56:	d113      	bne.n	801ee80 <__ieee754_sqrt+0xe8>
 801ee58:	4290      	cmp	r0, r2
 801ee5a:	d811      	bhi.n	801ee80 <__ieee754_sqrt+0xe8>
 801ee5c:	2800      	cmp	r0, #0
 801ee5e:	eb00 0e01 	add.w	lr, r0, r1
 801ee62:	da57      	bge.n	801ef14 <__ieee754_sqrt+0x17c>
 801ee64:	f1be 0f00 	cmp.w	lr, #0
 801ee68:	db54      	blt.n	801ef14 <__ieee754_sqrt+0x17c>
 801ee6a:	f10c 0801 	add.w	r8, ip, #1
 801ee6e:	eba3 030c 	sub.w	r3, r3, ip
 801ee72:	4290      	cmp	r0, r2
 801ee74:	bf88      	it	hi
 801ee76:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801ee7a:	1a12      	subs	r2, r2, r0
 801ee7c:	440c      	add	r4, r1
 801ee7e:	46c4      	mov	ip, r8
 801ee80:	005b      	lsls	r3, r3, #1
 801ee82:	3f01      	subs	r7, #1
 801ee84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ee88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ee8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ee90:	d1dd      	bne.n	801ee4e <__ieee754_sqrt+0xb6>
 801ee92:	4313      	orrs	r3, r2
 801ee94:	d01b      	beq.n	801eece <__ieee754_sqrt+0x136>
 801ee96:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801ef44 <__ieee754_sqrt+0x1ac>
 801ee9a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801ef48 <__ieee754_sqrt+0x1b0>
 801ee9e:	e9da 0100 	ldrd	r0, r1, [sl]
 801eea2:	e9db 2300 	ldrd	r2, r3, [fp]
 801eea6:	f7e1 f9ad 	bl	8000204 <__aeabi_dsub>
 801eeaa:	e9da 8900 	ldrd	r8, r9, [sl]
 801eeae:	4602      	mov	r2, r0
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	4640      	mov	r0, r8
 801eeb4:	4649      	mov	r1, r9
 801eeb6:	f7e1 fdd9 	bl	8000a6c <__aeabi_dcmple>
 801eeba:	b140      	cbz	r0, 801eece <__ieee754_sqrt+0x136>
 801eebc:	f1b4 3fff 	cmp.w	r4, #4294967295
 801eec0:	e9da 0100 	ldrd	r0, r1, [sl]
 801eec4:	e9db 2300 	ldrd	r2, r3, [fp]
 801eec8:	d126      	bne.n	801ef18 <__ieee754_sqrt+0x180>
 801eeca:	3501      	adds	r5, #1
 801eecc:	463c      	mov	r4, r7
 801eece:	106a      	asrs	r2, r5, #1
 801eed0:	0863      	lsrs	r3, r4, #1
 801eed2:	07e9      	lsls	r1, r5, #31
 801eed4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801eed8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801eedc:	bf48      	it	mi
 801eede:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801eee2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801eee6:	461c      	mov	r4, r3
 801eee8:	e76d      	b.n	801edc6 <__ieee754_sqrt+0x2e>
 801eeea:	0ad3      	lsrs	r3, r2, #11
 801eeec:	3815      	subs	r0, #21
 801eeee:	0552      	lsls	r2, r2, #21
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	d0fa      	beq.n	801eeea <__ieee754_sqrt+0x152>
 801eef4:	02dc      	lsls	r4, r3, #11
 801eef6:	d50a      	bpl.n	801ef0e <__ieee754_sqrt+0x176>
 801eef8:	f1c1 0420 	rsb	r4, r1, #32
 801eefc:	fa22 f404 	lsr.w	r4, r2, r4
 801ef00:	1e4d      	subs	r5, r1, #1
 801ef02:	408a      	lsls	r2, r1
 801ef04:	4323      	orrs	r3, r4
 801ef06:	1b41      	subs	r1, r0, r5
 801ef08:	e772      	b.n	801edf0 <__ieee754_sqrt+0x58>
 801ef0a:	4608      	mov	r0, r1
 801ef0c:	e7f0      	b.n	801eef0 <__ieee754_sqrt+0x158>
 801ef0e:	005b      	lsls	r3, r3, #1
 801ef10:	3101      	adds	r1, #1
 801ef12:	e7ef      	b.n	801eef4 <__ieee754_sqrt+0x15c>
 801ef14:	46e0      	mov	r8, ip
 801ef16:	e7aa      	b.n	801ee6e <__ieee754_sqrt+0xd6>
 801ef18:	f7e1 f976 	bl	8000208 <__adddf3>
 801ef1c:	e9da 8900 	ldrd	r8, r9, [sl]
 801ef20:	4602      	mov	r2, r0
 801ef22:	460b      	mov	r3, r1
 801ef24:	4640      	mov	r0, r8
 801ef26:	4649      	mov	r1, r9
 801ef28:	f7e1 fd96 	bl	8000a58 <__aeabi_dcmplt>
 801ef2c:	b120      	cbz	r0, 801ef38 <__ieee754_sqrt+0x1a0>
 801ef2e:	1ca0      	adds	r0, r4, #2
 801ef30:	bf08      	it	eq
 801ef32:	3501      	addeq	r5, #1
 801ef34:	3402      	adds	r4, #2
 801ef36:	e7ca      	b.n	801eece <__ieee754_sqrt+0x136>
 801ef38:	3401      	adds	r4, #1
 801ef3a:	f024 0401 	bic.w	r4, r4, #1
 801ef3e:	e7c6      	b.n	801eece <__ieee754_sqrt+0x136>
 801ef40:	7ff00000 	.word	0x7ff00000
 801ef44:	20000130 	.word	0x20000130
 801ef48:	20000138 	.word	0x20000138

0801ef4c <ceilf>:
 801ef4c:	ee10 3a10 	vmov	r3, s0
 801ef50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ef54:	3a7f      	subs	r2, #127	; 0x7f
 801ef56:	2a16      	cmp	r2, #22
 801ef58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ef5c:	dc2a      	bgt.n	801efb4 <ceilf+0x68>
 801ef5e:	2a00      	cmp	r2, #0
 801ef60:	da11      	bge.n	801ef86 <ceilf+0x3a>
 801ef62:	eddf 7a19 	vldr	s15, [pc, #100]	; 801efc8 <ceilf+0x7c>
 801ef66:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ef6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef72:	dd05      	ble.n	801ef80 <ceilf+0x34>
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	db23      	blt.n	801efc0 <ceilf+0x74>
 801ef78:	2900      	cmp	r1, #0
 801ef7a:	bf18      	it	ne
 801ef7c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801ef80:	ee00 3a10 	vmov	s0, r3
 801ef84:	4770      	bx	lr
 801ef86:	4911      	ldr	r1, [pc, #68]	; (801efcc <ceilf+0x80>)
 801ef88:	4111      	asrs	r1, r2
 801ef8a:	420b      	tst	r3, r1
 801ef8c:	d0fa      	beq.n	801ef84 <ceilf+0x38>
 801ef8e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801efc8 <ceilf+0x7c>
 801ef92:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ef96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef9e:	ddef      	ble.n	801ef80 <ceilf+0x34>
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	bfc2      	ittt	gt
 801efa4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801efa8:	fa40 f202 	asrgt.w	r2, r0, r2
 801efac:	189b      	addgt	r3, r3, r2
 801efae:	ea23 0301 	bic.w	r3, r3, r1
 801efb2:	e7e5      	b.n	801ef80 <ceilf+0x34>
 801efb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801efb8:	d3e4      	bcc.n	801ef84 <ceilf+0x38>
 801efba:	ee30 0a00 	vadd.f32	s0, s0, s0
 801efbe:	4770      	bx	lr
 801efc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801efc4:	e7dc      	b.n	801ef80 <ceilf+0x34>
 801efc6:	bf00      	nop
 801efc8:	7149f2ca 	.word	0x7149f2ca
 801efcc:	007fffff 	.word	0x007fffff

0801efd0 <__kernel_cos>:
 801efd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd4:	ec57 6b10 	vmov	r6, r7, d0
 801efd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801efdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801efe0:	ed8d 1b00 	vstr	d1, [sp]
 801efe4:	da07      	bge.n	801eff6 <__kernel_cos+0x26>
 801efe6:	ee10 0a10 	vmov	r0, s0
 801efea:	4639      	mov	r1, r7
 801efec:	f7e1 fd72 	bl	8000ad4 <__aeabi_d2iz>
 801eff0:	2800      	cmp	r0, #0
 801eff2:	f000 8088 	beq.w	801f106 <__kernel_cos+0x136>
 801eff6:	4632      	mov	r2, r6
 801eff8:	463b      	mov	r3, r7
 801effa:	4630      	mov	r0, r6
 801effc:	4639      	mov	r1, r7
 801effe:	f7e1 fab9 	bl	8000574 <__aeabi_dmul>
 801f002:	4b51      	ldr	r3, [pc, #324]	; (801f148 <__kernel_cos+0x178>)
 801f004:	2200      	movs	r2, #0
 801f006:	4604      	mov	r4, r0
 801f008:	460d      	mov	r5, r1
 801f00a:	f7e1 fab3 	bl	8000574 <__aeabi_dmul>
 801f00e:	a340      	add	r3, pc, #256	; (adr r3, 801f110 <__kernel_cos+0x140>)
 801f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f014:	4682      	mov	sl, r0
 801f016:	468b      	mov	fp, r1
 801f018:	4620      	mov	r0, r4
 801f01a:	4629      	mov	r1, r5
 801f01c:	f7e1 faaa 	bl	8000574 <__aeabi_dmul>
 801f020:	a33d      	add	r3, pc, #244	; (adr r3, 801f118 <__kernel_cos+0x148>)
 801f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f026:	f7e1 f8ef 	bl	8000208 <__adddf3>
 801f02a:	4622      	mov	r2, r4
 801f02c:	462b      	mov	r3, r5
 801f02e:	f7e1 faa1 	bl	8000574 <__aeabi_dmul>
 801f032:	a33b      	add	r3, pc, #236	; (adr r3, 801f120 <__kernel_cos+0x150>)
 801f034:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f038:	f7e1 f8e4 	bl	8000204 <__aeabi_dsub>
 801f03c:	4622      	mov	r2, r4
 801f03e:	462b      	mov	r3, r5
 801f040:	f7e1 fa98 	bl	8000574 <__aeabi_dmul>
 801f044:	a338      	add	r3, pc, #224	; (adr r3, 801f128 <__kernel_cos+0x158>)
 801f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f04a:	f7e1 f8dd 	bl	8000208 <__adddf3>
 801f04e:	4622      	mov	r2, r4
 801f050:	462b      	mov	r3, r5
 801f052:	f7e1 fa8f 	bl	8000574 <__aeabi_dmul>
 801f056:	a336      	add	r3, pc, #216	; (adr r3, 801f130 <__kernel_cos+0x160>)
 801f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f05c:	f7e1 f8d2 	bl	8000204 <__aeabi_dsub>
 801f060:	4622      	mov	r2, r4
 801f062:	462b      	mov	r3, r5
 801f064:	f7e1 fa86 	bl	8000574 <__aeabi_dmul>
 801f068:	a333      	add	r3, pc, #204	; (adr r3, 801f138 <__kernel_cos+0x168>)
 801f06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f06e:	f7e1 f8cb 	bl	8000208 <__adddf3>
 801f072:	4622      	mov	r2, r4
 801f074:	462b      	mov	r3, r5
 801f076:	f7e1 fa7d 	bl	8000574 <__aeabi_dmul>
 801f07a:	4622      	mov	r2, r4
 801f07c:	462b      	mov	r3, r5
 801f07e:	f7e1 fa79 	bl	8000574 <__aeabi_dmul>
 801f082:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f086:	4604      	mov	r4, r0
 801f088:	460d      	mov	r5, r1
 801f08a:	4630      	mov	r0, r6
 801f08c:	4639      	mov	r1, r7
 801f08e:	f7e1 fa71 	bl	8000574 <__aeabi_dmul>
 801f092:	460b      	mov	r3, r1
 801f094:	4602      	mov	r2, r0
 801f096:	4629      	mov	r1, r5
 801f098:	4620      	mov	r0, r4
 801f09a:	f7e1 f8b3 	bl	8000204 <__aeabi_dsub>
 801f09e:	4b2b      	ldr	r3, [pc, #172]	; (801f14c <__kernel_cos+0x17c>)
 801f0a0:	4598      	cmp	r8, r3
 801f0a2:	4606      	mov	r6, r0
 801f0a4:	460f      	mov	r7, r1
 801f0a6:	dc10      	bgt.n	801f0ca <__kernel_cos+0xfa>
 801f0a8:	4602      	mov	r2, r0
 801f0aa:	460b      	mov	r3, r1
 801f0ac:	4650      	mov	r0, sl
 801f0ae:	4659      	mov	r1, fp
 801f0b0:	f7e1 f8a8 	bl	8000204 <__aeabi_dsub>
 801f0b4:	460b      	mov	r3, r1
 801f0b6:	4926      	ldr	r1, [pc, #152]	; (801f150 <__kernel_cos+0x180>)
 801f0b8:	4602      	mov	r2, r0
 801f0ba:	2000      	movs	r0, #0
 801f0bc:	f7e1 f8a2 	bl	8000204 <__aeabi_dsub>
 801f0c0:	ec41 0b10 	vmov	d0, r0, r1
 801f0c4:	b003      	add	sp, #12
 801f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ca:	4b22      	ldr	r3, [pc, #136]	; (801f154 <__kernel_cos+0x184>)
 801f0cc:	4920      	ldr	r1, [pc, #128]	; (801f150 <__kernel_cos+0x180>)
 801f0ce:	4598      	cmp	r8, r3
 801f0d0:	bfcc      	ite	gt
 801f0d2:	4d21      	ldrgt	r5, [pc, #132]	; (801f158 <__kernel_cos+0x188>)
 801f0d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801f0d8:	2400      	movs	r4, #0
 801f0da:	4622      	mov	r2, r4
 801f0dc:	462b      	mov	r3, r5
 801f0de:	2000      	movs	r0, #0
 801f0e0:	f7e1 f890 	bl	8000204 <__aeabi_dsub>
 801f0e4:	4622      	mov	r2, r4
 801f0e6:	4680      	mov	r8, r0
 801f0e8:	4689      	mov	r9, r1
 801f0ea:	462b      	mov	r3, r5
 801f0ec:	4650      	mov	r0, sl
 801f0ee:	4659      	mov	r1, fp
 801f0f0:	f7e1 f888 	bl	8000204 <__aeabi_dsub>
 801f0f4:	4632      	mov	r2, r6
 801f0f6:	463b      	mov	r3, r7
 801f0f8:	f7e1 f884 	bl	8000204 <__aeabi_dsub>
 801f0fc:	4602      	mov	r2, r0
 801f0fe:	460b      	mov	r3, r1
 801f100:	4640      	mov	r0, r8
 801f102:	4649      	mov	r1, r9
 801f104:	e7da      	b.n	801f0bc <__kernel_cos+0xec>
 801f106:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801f140 <__kernel_cos+0x170>
 801f10a:	e7db      	b.n	801f0c4 <__kernel_cos+0xf4>
 801f10c:	f3af 8000 	nop.w
 801f110:	be8838d4 	.word	0xbe8838d4
 801f114:	bda8fae9 	.word	0xbda8fae9
 801f118:	bdb4b1c4 	.word	0xbdb4b1c4
 801f11c:	3e21ee9e 	.word	0x3e21ee9e
 801f120:	809c52ad 	.word	0x809c52ad
 801f124:	3e927e4f 	.word	0x3e927e4f
 801f128:	19cb1590 	.word	0x19cb1590
 801f12c:	3efa01a0 	.word	0x3efa01a0
 801f130:	16c15177 	.word	0x16c15177
 801f134:	3f56c16c 	.word	0x3f56c16c
 801f138:	5555554c 	.word	0x5555554c
 801f13c:	3fa55555 	.word	0x3fa55555
 801f140:	00000000 	.word	0x00000000
 801f144:	3ff00000 	.word	0x3ff00000
 801f148:	3fe00000 	.word	0x3fe00000
 801f14c:	3fd33332 	.word	0x3fd33332
 801f150:	3ff00000 	.word	0x3ff00000
 801f154:	3fe90000 	.word	0x3fe90000
 801f158:	3fd20000 	.word	0x3fd20000
 801f15c:	00000000 	.word	0x00000000

0801f160 <__kernel_sin>:
 801f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f164:	ed2d 8b04 	vpush	{d8-d9}
 801f168:	eeb0 8a41 	vmov.f32	s16, s2
 801f16c:	eef0 8a61 	vmov.f32	s17, s3
 801f170:	ec55 4b10 	vmov	r4, r5, d0
 801f174:	b083      	sub	sp, #12
 801f176:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f17a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f17e:	9001      	str	r0, [sp, #4]
 801f180:	da06      	bge.n	801f190 <__kernel_sin+0x30>
 801f182:	ee10 0a10 	vmov	r0, s0
 801f186:	4629      	mov	r1, r5
 801f188:	f7e1 fca4 	bl	8000ad4 <__aeabi_d2iz>
 801f18c:	2800      	cmp	r0, #0
 801f18e:	d051      	beq.n	801f234 <__kernel_sin+0xd4>
 801f190:	4622      	mov	r2, r4
 801f192:	462b      	mov	r3, r5
 801f194:	4620      	mov	r0, r4
 801f196:	4629      	mov	r1, r5
 801f198:	f7e1 f9ec 	bl	8000574 <__aeabi_dmul>
 801f19c:	4682      	mov	sl, r0
 801f19e:	468b      	mov	fp, r1
 801f1a0:	4602      	mov	r2, r0
 801f1a2:	460b      	mov	r3, r1
 801f1a4:	4620      	mov	r0, r4
 801f1a6:	4629      	mov	r1, r5
 801f1a8:	f7e1 f9e4 	bl	8000574 <__aeabi_dmul>
 801f1ac:	a341      	add	r3, pc, #260	; (adr r3, 801f2b4 <__kernel_sin+0x154>)
 801f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1b2:	4680      	mov	r8, r0
 801f1b4:	4689      	mov	r9, r1
 801f1b6:	4650      	mov	r0, sl
 801f1b8:	4659      	mov	r1, fp
 801f1ba:	f7e1 f9db 	bl	8000574 <__aeabi_dmul>
 801f1be:	a33f      	add	r3, pc, #252	; (adr r3, 801f2bc <__kernel_sin+0x15c>)
 801f1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1c4:	f7e1 f81e 	bl	8000204 <__aeabi_dsub>
 801f1c8:	4652      	mov	r2, sl
 801f1ca:	465b      	mov	r3, fp
 801f1cc:	f7e1 f9d2 	bl	8000574 <__aeabi_dmul>
 801f1d0:	a33c      	add	r3, pc, #240	; (adr r3, 801f2c4 <__kernel_sin+0x164>)
 801f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1d6:	f7e1 f817 	bl	8000208 <__adddf3>
 801f1da:	4652      	mov	r2, sl
 801f1dc:	465b      	mov	r3, fp
 801f1de:	f7e1 f9c9 	bl	8000574 <__aeabi_dmul>
 801f1e2:	a33a      	add	r3, pc, #232	; (adr r3, 801f2cc <__kernel_sin+0x16c>)
 801f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1e8:	f7e1 f80c 	bl	8000204 <__aeabi_dsub>
 801f1ec:	4652      	mov	r2, sl
 801f1ee:	465b      	mov	r3, fp
 801f1f0:	f7e1 f9c0 	bl	8000574 <__aeabi_dmul>
 801f1f4:	a337      	add	r3, pc, #220	; (adr r3, 801f2d4 <__kernel_sin+0x174>)
 801f1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1fa:	f7e1 f805 	bl	8000208 <__adddf3>
 801f1fe:	9b01      	ldr	r3, [sp, #4]
 801f200:	4606      	mov	r6, r0
 801f202:	460f      	mov	r7, r1
 801f204:	b9eb      	cbnz	r3, 801f242 <__kernel_sin+0xe2>
 801f206:	4602      	mov	r2, r0
 801f208:	460b      	mov	r3, r1
 801f20a:	4650      	mov	r0, sl
 801f20c:	4659      	mov	r1, fp
 801f20e:	f7e1 f9b1 	bl	8000574 <__aeabi_dmul>
 801f212:	a325      	add	r3, pc, #148	; (adr r3, 801f2a8 <__kernel_sin+0x148>)
 801f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f218:	f7e0 fff4 	bl	8000204 <__aeabi_dsub>
 801f21c:	4642      	mov	r2, r8
 801f21e:	464b      	mov	r3, r9
 801f220:	f7e1 f9a8 	bl	8000574 <__aeabi_dmul>
 801f224:	4602      	mov	r2, r0
 801f226:	460b      	mov	r3, r1
 801f228:	4620      	mov	r0, r4
 801f22a:	4629      	mov	r1, r5
 801f22c:	f7e0 ffec 	bl	8000208 <__adddf3>
 801f230:	4604      	mov	r4, r0
 801f232:	460d      	mov	r5, r1
 801f234:	ec45 4b10 	vmov	d0, r4, r5
 801f238:	b003      	add	sp, #12
 801f23a:	ecbd 8b04 	vpop	{d8-d9}
 801f23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f242:	4b1b      	ldr	r3, [pc, #108]	; (801f2b0 <__kernel_sin+0x150>)
 801f244:	ec51 0b18 	vmov	r0, r1, d8
 801f248:	2200      	movs	r2, #0
 801f24a:	f7e1 f993 	bl	8000574 <__aeabi_dmul>
 801f24e:	4632      	mov	r2, r6
 801f250:	ec41 0b19 	vmov	d9, r0, r1
 801f254:	463b      	mov	r3, r7
 801f256:	4640      	mov	r0, r8
 801f258:	4649      	mov	r1, r9
 801f25a:	f7e1 f98b 	bl	8000574 <__aeabi_dmul>
 801f25e:	4602      	mov	r2, r0
 801f260:	460b      	mov	r3, r1
 801f262:	ec51 0b19 	vmov	r0, r1, d9
 801f266:	f7e0 ffcd 	bl	8000204 <__aeabi_dsub>
 801f26a:	4652      	mov	r2, sl
 801f26c:	465b      	mov	r3, fp
 801f26e:	f7e1 f981 	bl	8000574 <__aeabi_dmul>
 801f272:	ec53 2b18 	vmov	r2, r3, d8
 801f276:	f7e0 ffc5 	bl	8000204 <__aeabi_dsub>
 801f27a:	a30b      	add	r3, pc, #44	; (adr r3, 801f2a8 <__kernel_sin+0x148>)
 801f27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f280:	4606      	mov	r6, r0
 801f282:	460f      	mov	r7, r1
 801f284:	4640      	mov	r0, r8
 801f286:	4649      	mov	r1, r9
 801f288:	f7e1 f974 	bl	8000574 <__aeabi_dmul>
 801f28c:	4602      	mov	r2, r0
 801f28e:	460b      	mov	r3, r1
 801f290:	4630      	mov	r0, r6
 801f292:	4639      	mov	r1, r7
 801f294:	f7e0 ffb8 	bl	8000208 <__adddf3>
 801f298:	4602      	mov	r2, r0
 801f29a:	460b      	mov	r3, r1
 801f29c:	4620      	mov	r0, r4
 801f29e:	4629      	mov	r1, r5
 801f2a0:	f7e0 ffb0 	bl	8000204 <__aeabi_dsub>
 801f2a4:	e7c4      	b.n	801f230 <__kernel_sin+0xd0>
 801f2a6:	bf00      	nop
 801f2a8:	55555549 	.word	0x55555549
 801f2ac:	3fc55555 	.word	0x3fc55555
 801f2b0:	3fe00000 	.word	0x3fe00000
 801f2b4:	5acfd57c 	.word	0x5acfd57c
 801f2b8:	3de5d93a 	.word	0x3de5d93a
 801f2bc:	8a2b9ceb 	.word	0x8a2b9ceb
 801f2c0:	3e5ae5e6 	.word	0x3e5ae5e6
 801f2c4:	57b1fe7d 	.word	0x57b1fe7d
 801f2c8:	3ec71de3 	.word	0x3ec71de3
 801f2cc:	19c161d5 	.word	0x19c161d5
 801f2d0:	3f2a01a0 	.word	0x3f2a01a0
 801f2d4:	1110f8a6 	.word	0x1110f8a6
 801f2d8:	3f811111 	.word	0x3f811111
 801f2dc:	00000000 	.word	0x00000000

0801f2e0 <__ieee754_pow>:
 801f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e4:	ed2d 8b06 	vpush	{d8-d10}
 801f2e8:	b089      	sub	sp, #36	; 0x24
 801f2ea:	ed8d 1b00 	vstr	d1, [sp]
 801f2ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 801f2f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801f2f6:	ea58 0102 	orrs.w	r1, r8, r2
 801f2fa:	ec57 6b10 	vmov	r6, r7, d0
 801f2fe:	d115      	bne.n	801f32c <__ieee754_pow+0x4c>
 801f300:	19b3      	adds	r3, r6, r6
 801f302:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801f306:	4152      	adcs	r2, r2
 801f308:	4299      	cmp	r1, r3
 801f30a:	4b89      	ldr	r3, [pc, #548]	; (801f530 <__ieee754_pow+0x250>)
 801f30c:	4193      	sbcs	r3, r2
 801f30e:	f080 84d1 	bcs.w	801fcb4 <__ieee754_pow+0x9d4>
 801f312:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f316:	4630      	mov	r0, r6
 801f318:	4639      	mov	r1, r7
 801f31a:	f7e0 ff75 	bl	8000208 <__adddf3>
 801f31e:	ec41 0b10 	vmov	d0, r0, r1
 801f322:	b009      	add	sp, #36	; 0x24
 801f324:	ecbd 8b06 	vpop	{d8-d10}
 801f328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f32c:	4b81      	ldr	r3, [pc, #516]	; (801f534 <__ieee754_pow+0x254>)
 801f32e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801f332:	429c      	cmp	r4, r3
 801f334:	ee10 aa10 	vmov	sl, s0
 801f338:	463d      	mov	r5, r7
 801f33a:	dc06      	bgt.n	801f34a <__ieee754_pow+0x6a>
 801f33c:	d101      	bne.n	801f342 <__ieee754_pow+0x62>
 801f33e:	2e00      	cmp	r6, #0
 801f340:	d1e7      	bne.n	801f312 <__ieee754_pow+0x32>
 801f342:	4598      	cmp	r8, r3
 801f344:	dc01      	bgt.n	801f34a <__ieee754_pow+0x6a>
 801f346:	d10f      	bne.n	801f368 <__ieee754_pow+0x88>
 801f348:	b172      	cbz	r2, 801f368 <__ieee754_pow+0x88>
 801f34a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801f34e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801f352:	ea55 050a 	orrs.w	r5, r5, sl
 801f356:	d1dc      	bne.n	801f312 <__ieee754_pow+0x32>
 801f358:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f35c:	18db      	adds	r3, r3, r3
 801f35e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801f362:	4152      	adcs	r2, r2
 801f364:	429d      	cmp	r5, r3
 801f366:	e7d0      	b.n	801f30a <__ieee754_pow+0x2a>
 801f368:	2d00      	cmp	r5, #0
 801f36a:	da3b      	bge.n	801f3e4 <__ieee754_pow+0x104>
 801f36c:	4b72      	ldr	r3, [pc, #456]	; (801f538 <__ieee754_pow+0x258>)
 801f36e:	4598      	cmp	r8, r3
 801f370:	dc51      	bgt.n	801f416 <__ieee754_pow+0x136>
 801f372:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801f376:	4598      	cmp	r8, r3
 801f378:	f340 84ab 	ble.w	801fcd2 <__ieee754_pow+0x9f2>
 801f37c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801f380:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f384:	2b14      	cmp	r3, #20
 801f386:	dd0f      	ble.n	801f3a8 <__ieee754_pow+0xc8>
 801f388:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f38c:	fa22 f103 	lsr.w	r1, r2, r3
 801f390:	fa01 f303 	lsl.w	r3, r1, r3
 801f394:	4293      	cmp	r3, r2
 801f396:	f040 849c 	bne.w	801fcd2 <__ieee754_pow+0x9f2>
 801f39a:	f001 0101 	and.w	r1, r1, #1
 801f39e:	f1c1 0302 	rsb	r3, r1, #2
 801f3a2:	9304      	str	r3, [sp, #16]
 801f3a4:	b182      	cbz	r2, 801f3c8 <__ieee754_pow+0xe8>
 801f3a6:	e05f      	b.n	801f468 <__ieee754_pow+0x188>
 801f3a8:	2a00      	cmp	r2, #0
 801f3aa:	d15b      	bne.n	801f464 <__ieee754_pow+0x184>
 801f3ac:	f1c3 0314 	rsb	r3, r3, #20
 801f3b0:	fa48 f103 	asr.w	r1, r8, r3
 801f3b4:	fa01 f303 	lsl.w	r3, r1, r3
 801f3b8:	4543      	cmp	r3, r8
 801f3ba:	f040 8487 	bne.w	801fccc <__ieee754_pow+0x9ec>
 801f3be:	f001 0101 	and.w	r1, r1, #1
 801f3c2:	f1c1 0302 	rsb	r3, r1, #2
 801f3c6:	9304      	str	r3, [sp, #16]
 801f3c8:	4b5c      	ldr	r3, [pc, #368]	; (801f53c <__ieee754_pow+0x25c>)
 801f3ca:	4598      	cmp	r8, r3
 801f3cc:	d132      	bne.n	801f434 <__ieee754_pow+0x154>
 801f3ce:	f1b9 0f00 	cmp.w	r9, #0
 801f3d2:	f280 8477 	bge.w	801fcc4 <__ieee754_pow+0x9e4>
 801f3d6:	4959      	ldr	r1, [pc, #356]	; (801f53c <__ieee754_pow+0x25c>)
 801f3d8:	4632      	mov	r2, r6
 801f3da:	463b      	mov	r3, r7
 801f3dc:	2000      	movs	r0, #0
 801f3de:	f7e1 f9f3 	bl	80007c8 <__aeabi_ddiv>
 801f3e2:	e79c      	b.n	801f31e <__ieee754_pow+0x3e>
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	9304      	str	r3, [sp, #16]
 801f3e8:	2a00      	cmp	r2, #0
 801f3ea:	d13d      	bne.n	801f468 <__ieee754_pow+0x188>
 801f3ec:	4b51      	ldr	r3, [pc, #324]	; (801f534 <__ieee754_pow+0x254>)
 801f3ee:	4598      	cmp	r8, r3
 801f3f0:	d1ea      	bne.n	801f3c8 <__ieee754_pow+0xe8>
 801f3f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801f3f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801f3fa:	ea53 030a 	orrs.w	r3, r3, sl
 801f3fe:	f000 8459 	beq.w	801fcb4 <__ieee754_pow+0x9d4>
 801f402:	4b4f      	ldr	r3, [pc, #316]	; (801f540 <__ieee754_pow+0x260>)
 801f404:	429c      	cmp	r4, r3
 801f406:	dd08      	ble.n	801f41a <__ieee754_pow+0x13a>
 801f408:	f1b9 0f00 	cmp.w	r9, #0
 801f40c:	f2c0 8456 	blt.w	801fcbc <__ieee754_pow+0x9dc>
 801f410:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f414:	e783      	b.n	801f31e <__ieee754_pow+0x3e>
 801f416:	2302      	movs	r3, #2
 801f418:	e7e5      	b.n	801f3e6 <__ieee754_pow+0x106>
 801f41a:	f1b9 0f00 	cmp.w	r9, #0
 801f41e:	f04f 0000 	mov.w	r0, #0
 801f422:	f04f 0100 	mov.w	r1, #0
 801f426:	f6bf af7a 	bge.w	801f31e <__ieee754_pow+0x3e>
 801f42a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801f42e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f432:	e774      	b.n	801f31e <__ieee754_pow+0x3e>
 801f434:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801f438:	d106      	bne.n	801f448 <__ieee754_pow+0x168>
 801f43a:	4632      	mov	r2, r6
 801f43c:	463b      	mov	r3, r7
 801f43e:	4630      	mov	r0, r6
 801f440:	4639      	mov	r1, r7
 801f442:	f7e1 f897 	bl	8000574 <__aeabi_dmul>
 801f446:	e76a      	b.n	801f31e <__ieee754_pow+0x3e>
 801f448:	4b3e      	ldr	r3, [pc, #248]	; (801f544 <__ieee754_pow+0x264>)
 801f44a:	4599      	cmp	r9, r3
 801f44c:	d10c      	bne.n	801f468 <__ieee754_pow+0x188>
 801f44e:	2d00      	cmp	r5, #0
 801f450:	db0a      	blt.n	801f468 <__ieee754_pow+0x188>
 801f452:	ec47 6b10 	vmov	d0, r6, r7
 801f456:	b009      	add	sp, #36	; 0x24
 801f458:	ecbd 8b06 	vpop	{d8-d10}
 801f45c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f460:	f7ff bc9a 	b.w	801ed98 <__ieee754_sqrt>
 801f464:	2300      	movs	r3, #0
 801f466:	9304      	str	r3, [sp, #16]
 801f468:	ec47 6b10 	vmov	d0, r6, r7
 801f46c:	f000 fe6a 	bl	8020144 <fabs>
 801f470:	ec51 0b10 	vmov	r0, r1, d0
 801f474:	f1ba 0f00 	cmp.w	sl, #0
 801f478:	d129      	bne.n	801f4ce <__ieee754_pow+0x1ee>
 801f47a:	b124      	cbz	r4, 801f486 <__ieee754_pow+0x1a6>
 801f47c:	4b2f      	ldr	r3, [pc, #188]	; (801f53c <__ieee754_pow+0x25c>)
 801f47e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801f482:	429a      	cmp	r2, r3
 801f484:	d123      	bne.n	801f4ce <__ieee754_pow+0x1ee>
 801f486:	f1b9 0f00 	cmp.w	r9, #0
 801f48a:	da05      	bge.n	801f498 <__ieee754_pow+0x1b8>
 801f48c:	4602      	mov	r2, r0
 801f48e:	460b      	mov	r3, r1
 801f490:	2000      	movs	r0, #0
 801f492:	492a      	ldr	r1, [pc, #168]	; (801f53c <__ieee754_pow+0x25c>)
 801f494:	f7e1 f998 	bl	80007c8 <__aeabi_ddiv>
 801f498:	2d00      	cmp	r5, #0
 801f49a:	f6bf af40 	bge.w	801f31e <__ieee754_pow+0x3e>
 801f49e:	9b04      	ldr	r3, [sp, #16]
 801f4a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801f4a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f4a8:	431c      	orrs	r4, r3
 801f4aa:	d108      	bne.n	801f4be <__ieee754_pow+0x1de>
 801f4ac:	4602      	mov	r2, r0
 801f4ae:	460b      	mov	r3, r1
 801f4b0:	4610      	mov	r0, r2
 801f4b2:	4619      	mov	r1, r3
 801f4b4:	f7e0 fea6 	bl	8000204 <__aeabi_dsub>
 801f4b8:	4602      	mov	r2, r0
 801f4ba:	460b      	mov	r3, r1
 801f4bc:	e78f      	b.n	801f3de <__ieee754_pow+0xfe>
 801f4be:	9b04      	ldr	r3, [sp, #16]
 801f4c0:	2b01      	cmp	r3, #1
 801f4c2:	f47f af2c 	bne.w	801f31e <__ieee754_pow+0x3e>
 801f4c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f4ca:	4619      	mov	r1, r3
 801f4cc:	e727      	b.n	801f31e <__ieee754_pow+0x3e>
 801f4ce:	0feb      	lsrs	r3, r5, #31
 801f4d0:	3b01      	subs	r3, #1
 801f4d2:	9306      	str	r3, [sp, #24]
 801f4d4:	9a06      	ldr	r2, [sp, #24]
 801f4d6:	9b04      	ldr	r3, [sp, #16]
 801f4d8:	4313      	orrs	r3, r2
 801f4da:	d102      	bne.n	801f4e2 <__ieee754_pow+0x202>
 801f4dc:	4632      	mov	r2, r6
 801f4de:	463b      	mov	r3, r7
 801f4e0:	e7e6      	b.n	801f4b0 <__ieee754_pow+0x1d0>
 801f4e2:	4b19      	ldr	r3, [pc, #100]	; (801f548 <__ieee754_pow+0x268>)
 801f4e4:	4598      	cmp	r8, r3
 801f4e6:	f340 80fb 	ble.w	801f6e0 <__ieee754_pow+0x400>
 801f4ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801f4ee:	4598      	cmp	r8, r3
 801f4f0:	4b13      	ldr	r3, [pc, #76]	; (801f540 <__ieee754_pow+0x260>)
 801f4f2:	dd0c      	ble.n	801f50e <__ieee754_pow+0x22e>
 801f4f4:	429c      	cmp	r4, r3
 801f4f6:	dc0f      	bgt.n	801f518 <__ieee754_pow+0x238>
 801f4f8:	f1b9 0f00 	cmp.w	r9, #0
 801f4fc:	da0f      	bge.n	801f51e <__ieee754_pow+0x23e>
 801f4fe:	2000      	movs	r0, #0
 801f500:	b009      	add	sp, #36	; 0x24
 801f502:	ecbd 8b06 	vpop	{d8-d10}
 801f506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f50a:	f000 beca 	b.w	80202a2 <__math_oflow>
 801f50e:	429c      	cmp	r4, r3
 801f510:	dbf2      	blt.n	801f4f8 <__ieee754_pow+0x218>
 801f512:	4b0a      	ldr	r3, [pc, #40]	; (801f53c <__ieee754_pow+0x25c>)
 801f514:	429c      	cmp	r4, r3
 801f516:	dd19      	ble.n	801f54c <__ieee754_pow+0x26c>
 801f518:	f1b9 0f00 	cmp.w	r9, #0
 801f51c:	dcef      	bgt.n	801f4fe <__ieee754_pow+0x21e>
 801f51e:	2000      	movs	r0, #0
 801f520:	b009      	add	sp, #36	; 0x24
 801f522:	ecbd 8b06 	vpop	{d8-d10}
 801f526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52a:	f000 beb1 	b.w	8020290 <__math_uflow>
 801f52e:	bf00      	nop
 801f530:	fff00000 	.word	0xfff00000
 801f534:	7ff00000 	.word	0x7ff00000
 801f538:	433fffff 	.word	0x433fffff
 801f53c:	3ff00000 	.word	0x3ff00000
 801f540:	3fefffff 	.word	0x3fefffff
 801f544:	3fe00000 	.word	0x3fe00000
 801f548:	41e00000 	.word	0x41e00000
 801f54c:	4b60      	ldr	r3, [pc, #384]	; (801f6d0 <__ieee754_pow+0x3f0>)
 801f54e:	2200      	movs	r2, #0
 801f550:	f7e0 fe58 	bl	8000204 <__aeabi_dsub>
 801f554:	a354      	add	r3, pc, #336	; (adr r3, 801f6a8 <__ieee754_pow+0x3c8>)
 801f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f55a:	4604      	mov	r4, r0
 801f55c:	460d      	mov	r5, r1
 801f55e:	f7e1 f809 	bl	8000574 <__aeabi_dmul>
 801f562:	a353      	add	r3, pc, #332	; (adr r3, 801f6b0 <__ieee754_pow+0x3d0>)
 801f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f568:	4606      	mov	r6, r0
 801f56a:	460f      	mov	r7, r1
 801f56c:	4620      	mov	r0, r4
 801f56e:	4629      	mov	r1, r5
 801f570:	f7e1 f800 	bl	8000574 <__aeabi_dmul>
 801f574:	4b57      	ldr	r3, [pc, #348]	; (801f6d4 <__ieee754_pow+0x3f4>)
 801f576:	4682      	mov	sl, r0
 801f578:	468b      	mov	fp, r1
 801f57a:	2200      	movs	r2, #0
 801f57c:	4620      	mov	r0, r4
 801f57e:	4629      	mov	r1, r5
 801f580:	f7e0 fff8 	bl	8000574 <__aeabi_dmul>
 801f584:	4602      	mov	r2, r0
 801f586:	460b      	mov	r3, r1
 801f588:	a14b      	add	r1, pc, #300	; (adr r1, 801f6b8 <__ieee754_pow+0x3d8>)
 801f58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f58e:	f7e0 fe39 	bl	8000204 <__aeabi_dsub>
 801f592:	4622      	mov	r2, r4
 801f594:	462b      	mov	r3, r5
 801f596:	f7e0 ffed 	bl	8000574 <__aeabi_dmul>
 801f59a:	4602      	mov	r2, r0
 801f59c:	460b      	mov	r3, r1
 801f59e:	2000      	movs	r0, #0
 801f5a0:	494d      	ldr	r1, [pc, #308]	; (801f6d8 <__ieee754_pow+0x3f8>)
 801f5a2:	f7e0 fe2f 	bl	8000204 <__aeabi_dsub>
 801f5a6:	4622      	mov	r2, r4
 801f5a8:	4680      	mov	r8, r0
 801f5aa:	4689      	mov	r9, r1
 801f5ac:	462b      	mov	r3, r5
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	4629      	mov	r1, r5
 801f5b2:	f7e0 ffdf 	bl	8000574 <__aeabi_dmul>
 801f5b6:	4602      	mov	r2, r0
 801f5b8:	460b      	mov	r3, r1
 801f5ba:	4640      	mov	r0, r8
 801f5bc:	4649      	mov	r1, r9
 801f5be:	f7e0 ffd9 	bl	8000574 <__aeabi_dmul>
 801f5c2:	a33f      	add	r3, pc, #252	; (adr r3, 801f6c0 <__ieee754_pow+0x3e0>)
 801f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c8:	f7e0 ffd4 	bl	8000574 <__aeabi_dmul>
 801f5cc:	4602      	mov	r2, r0
 801f5ce:	460b      	mov	r3, r1
 801f5d0:	4650      	mov	r0, sl
 801f5d2:	4659      	mov	r1, fp
 801f5d4:	f7e0 fe16 	bl	8000204 <__aeabi_dsub>
 801f5d8:	4602      	mov	r2, r0
 801f5da:	460b      	mov	r3, r1
 801f5dc:	4680      	mov	r8, r0
 801f5de:	4689      	mov	r9, r1
 801f5e0:	4630      	mov	r0, r6
 801f5e2:	4639      	mov	r1, r7
 801f5e4:	f7e0 fe10 	bl	8000208 <__adddf3>
 801f5e8:	2000      	movs	r0, #0
 801f5ea:	4632      	mov	r2, r6
 801f5ec:	463b      	mov	r3, r7
 801f5ee:	4604      	mov	r4, r0
 801f5f0:	460d      	mov	r5, r1
 801f5f2:	f7e0 fe07 	bl	8000204 <__aeabi_dsub>
 801f5f6:	4602      	mov	r2, r0
 801f5f8:	460b      	mov	r3, r1
 801f5fa:	4640      	mov	r0, r8
 801f5fc:	4649      	mov	r1, r9
 801f5fe:	f7e0 fe01 	bl	8000204 <__aeabi_dsub>
 801f602:	9b04      	ldr	r3, [sp, #16]
 801f604:	9a06      	ldr	r2, [sp, #24]
 801f606:	3b01      	subs	r3, #1
 801f608:	4313      	orrs	r3, r2
 801f60a:	4682      	mov	sl, r0
 801f60c:	468b      	mov	fp, r1
 801f60e:	f040 81e7 	bne.w	801f9e0 <__ieee754_pow+0x700>
 801f612:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801f6c8 <__ieee754_pow+0x3e8>
 801f616:	eeb0 8a47 	vmov.f32	s16, s14
 801f61a:	eef0 8a67 	vmov.f32	s17, s15
 801f61e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801f622:	2600      	movs	r6, #0
 801f624:	4632      	mov	r2, r6
 801f626:	463b      	mov	r3, r7
 801f628:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f62c:	f7e0 fdea 	bl	8000204 <__aeabi_dsub>
 801f630:	4622      	mov	r2, r4
 801f632:	462b      	mov	r3, r5
 801f634:	f7e0 ff9e 	bl	8000574 <__aeabi_dmul>
 801f638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f63c:	4680      	mov	r8, r0
 801f63e:	4689      	mov	r9, r1
 801f640:	4650      	mov	r0, sl
 801f642:	4659      	mov	r1, fp
 801f644:	f7e0 ff96 	bl	8000574 <__aeabi_dmul>
 801f648:	4602      	mov	r2, r0
 801f64a:	460b      	mov	r3, r1
 801f64c:	4640      	mov	r0, r8
 801f64e:	4649      	mov	r1, r9
 801f650:	f7e0 fdda 	bl	8000208 <__adddf3>
 801f654:	4632      	mov	r2, r6
 801f656:	463b      	mov	r3, r7
 801f658:	4680      	mov	r8, r0
 801f65a:	4689      	mov	r9, r1
 801f65c:	4620      	mov	r0, r4
 801f65e:	4629      	mov	r1, r5
 801f660:	f7e0 ff88 	bl	8000574 <__aeabi_dmul>
 801f664:	460b      	mov	r3, r1
 801f666:	4604      	mov	r4, r0
 801f668:	460d      	mov	r5, r1
 801f66a:	4602      	mov	r2, r0
 801f66c:	4649      	mov	r1, r9
 801f66e:	4640      	mov	r0, r8
 801f670:	f7e0 fdca 	bl	8000208 <__adddf3>
 801f674:	4b19      	ldr	r3, [pc, #100]	; (801f6dc <__ieee754_pow+0x3fc>)
 801f676:	4299      	cmp	r1, r3
 801f678:	ec45 4b19 	vmov	d9, r4, r5
 801f67c:	4606      	mov	r6, r0
 801f67e:	460f      	mov	r7, r1
 801f680:	468b      	mov	fp, r1
 801f682:	f340 82f0 	ble.w	801fc66 <__ieee754_pow+0x986>
 801f686:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801f68a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801f68e:	4303      	orrs	r3, r0
 801f690:	f000 81e4 	beq.w	801fa5c <__ieee754_pow+0x77c>
 801f694:	ec51 0b18 	vmov	r0, r1, d8
 801f698:	2200      	movs	r2, #0
 801f69a:	2300      	movs	r3, #0
 801f69c:	f7e1 f9dc 	bl	8000a58 <__aeabi_dcmplt>
 801f6a0:	3800      	subs	r0, #0
 801f6a2:	bf18      	it	ne
 801f6a4:	2001      	movne	r0, #1
 801f6a6:	e72b      	b.n	801f500 <__ieee754_pow+0x220>
 801f6a8:	60000000 	.word	0x60000000
 801f6ac:	3ff71547 	.word	0x3ff71547
 801f6b0:	f85ddf44 	.word	0xf85ddf44
 801f6b4:	3e54ae0b 	.word	0x3e54ae0b
 801f6b8:	55555555 	.word	0x55555555
 801f6bc:	3fd55555 	.word	0x3fd55555
 801f6c0:	652b82fe 	.word	0x652b82fe
 801f6c4:	3ff71547 	.word	0x3ff71547
 801f6c8:	00000000 	.word	0x00000000
 801f6cc:	bff00000 	.word	0xbff00000
 801f6d0:	3ff00000 	.word	0x3ff00000
 801f6d4:	3fd00000 	.word	0x3fd00000
 801f6d8:	3fe00000 	.word	0x3fe00000
 801f6dc:	408fffff 	.word	0x408fffff
 801f6e0:	4bd5      	ldr	r3, [pc, #852]	; (801fa38 <__ieee754_pow+0x758>)
 801f6e2:	402b      	ands	r3, r5
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	b92b      	cbnz	r3, 801f6f4 <__ieee754_pow+0x414>
 801f6e8:	4bd4      	ldr	r3, [pc, #848]	; (801fa3c <__ieee754_pow+0x75c>)
 801f6ea:	f7e0 ff43 	bl	8000574 <__aeabi_dmul>
 801f6ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801f6f2:	460c      	mov	r4, r1
 801f6f4:	1523      	asrs	r3, r4, #20
 801f6f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801f6fa:	4413      	add	r3, r2
 801f6fc:	9305      	str	r3, [sp, #20]
 801f6fe:	4bd0      	ldr	r3, [pc, #832]	; (801fa40 <__ieee754_pow+0x760>)
 801f700:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f704:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801f708:	429c      	cmp	r4, r3
 801f70a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f70e:	dd08      	ble.n	801f722 <__ieee754_pow+0x442>
 801f710:	4bcc      	ldr	r3, [pc, #816]	; (801fa44 <__ieee754_pow+0x764>)
 801f712:	429c      	cmp	r4, r3
 801f714:	f340 8162 	ble.w	801f9dc <__ieee754_pow+0x6fc>
 801f718:	9b05      	ldr	r3, [sp, #20]
 801f71a:	3301      	adds	r3, #1
 801f71c:	9305      	str	r3, [sp, #20]
 801f71e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801f722:	2400      	movs	r4, #0
 801f724:	00e3      	lsls	r3, r4, #3
 801f726:	9307      	str	r3, [sp, #28]
 801f728:	4bc7      	ldr	r3, [pc, #796]	; (801fa48 <__ieee754_pow+0x768>)
 801f72a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f72e:	ed93 7b00 	vldr	d7, [r3]
 801f732:	4629      	mov	r1, r5
 801f734:	ec53 2b17 	vmov	r2, r3, d7
 801f738:	eeb0 9a47 	vmov.f32	s18, s14
 801f73c:	eef0 9a67 	vmov.f32	s19, s15
 801f740:	4682      	mov	sl, r0
 801f742:	f7e0 fd5f 	bl	8000204 <__aeabi_dsub>
 801f746:	4652      	mov	r2, sl
 801f748:	4606      	mov	r6, r0
 801f74a:	460f      	mov	r7, r1
 801f74c:	462b      	mov	r3, r5
 801f74e:	ec51 0b19 	vmov	r0, r1, d9
 801f752:	f7e0 fd59 	bl	8000208 <__adddf3>
 801f756:	4602      	mov	r2, r0
 801f758:	460b      	mov	r3, r1
 801f75a:	2000      	movs	r0, #0
 801f75c:	49bb      	ldr	r1, [pc, #748]	; (801fa4c <__ieee754_pow+0x76c>)
 801f75e:	f7e1 f833 	bl	80007c8 <__aeabi_ddiv>
 801f762:	ec41 0b1a 	vmov	d10, r0, r1
 801f766:	4602      	mov	r2, r0
 801f768:	460b      	mov	r3, r1
 801f76a:	4630      	mov	r0, r6
 801f76c:	4639      	mov	r1, r7
 801f76e:	f7e0 ff01 	bl	8000574 <__aeabi_dmul>
 801f772:	2300      	movs	r3, #0
 801f774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f778:	9302      	str	r3, [sp, #8]
 801f77a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801f77e:	46ab      	mov	fp, r5
 801f780:	106d      	asrs	r5, r5, #1
 801f782:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801f786:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801f78a:	ec41 0b18 	vmov	d8, r0, r1
 801f78e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801f792:	2200      	movs	r2, #0
 801f794:	4640      	mov	r0, r8
 801f796:	4649      	mov	r1, r9
 801f798:	4614      	mov	r4, r2
 801f79a:	461d      	mov	r5, r3
 801f79c:	f7e0 feea 	bl	8000574 <__aeabi_dmul>
 801f7a0:	4602      	mov	r2, r0
 801f7a2:	460b      	mov	r3, r1
 801f7a4:	4630      	mov	r0, r6
 801f7a6:	4639      	mov	r1, r7
 801f7a8:	f7e0 fd2c 	bl	8000204 <__aeabi_dsub>
 801f7ac:	ec53 2b19 	vmov	r2, r3, d9
 801f7b0:	4606      	mov	r6, r0
 801f7b2:	460f      	mov	r7, r1
 801f7b4:	4620      	mov	r0, r4
 801f7b6:	4629      	mov	r1, r5
 801f7b8:	f7e0 fd24 	bl	8000204 <__aeabi_dsub>
 801f7bc:	4602      	mov	r2, r0
 801f7be:	460b      	mov	r3, r1
 801f7c0:	4650      	mov	r0, sl
 801f7c2:	4659      	mov	r1, fp
 801f7c4:	f7e0 fd1e 	bl	8000204 <__aeabi_dsub>
 801f7c8:	4642      	mov	r2, r8
 801f7ca:	464b      	mov	r3, r9
 801f7cc:	f7e0 fed2 	bl	8000574 <__aeabi_dmul>
 801f7d0:	4602      	mov	r2, r0
 801f7d2:	460b      	mov	r3, r1
 801f7d4:	4630      	mov	r0, r6
 801f7d6:	4639      	mov	r1, r7
 801f7d8:	f7e0 fd14 	bl	8000204 <__aeabi_dsub>
 801f7dc:	ec53 2b1a 	vmov	r2, r3, d10
 801f7e0:	f7e0 fec8 	bl	8000574 <__aeabi_dmul>
 801f7e4:	ec53 2b18 	vmov	r2, r3, d8
 801f7e8:	ec41 0b19 	vmov	d9, r0, r1
 801f7ec:	ec51 0b18 	vmov	r0, r1, d8
 801f7f0:	f7e0 fec0 	bl	8000574 <__aeabi_dmul>
 801f7f4:	a37c      	add	r3, pc, #496	; (adr r3, 801f9e8 <__ieee754_pow+0x708>)
 801f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7fa:	4604      	mov	r4, r0
 801f7fc:	460d      	mov	r5, r1
 801f7fe:	f7e0 feb9 	bl	8000574 <__aeabi_dmul>
 801f802:	a37b      	add	r3, pc, #492	; (adr r3, 801f9f0 <__ieee754_pow+0x710>)
 801f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f808:	f7e0 fcfe 	bl	8000208 <__adddf3>
 801f80c:	4622      	mov	r2, r4
 801f80e:	462b      	mov	r3, r5
 801f810:	f7e0 feb0 	bl	8000574 <__aeabi_dmul>
 801f814:	a378      	add	r3, pc, #480	; (adr r3, 801f9f8 <__ieee754_pow+0x718>)
 801f816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f81a:	f7e0 fcf5 	bl	8000208 <__adddf3>
 801f81e:	4622      	mov	r2, r4
 801f820:	462b      	mov	r3, r5
 801f822:	f7e0 fea7 	bl	8000574 <__aeabi_dmul>
 801f826:	a376      	add	r3, pc, #472	; (adr r3, 801fa00 <__ieee754_pow+0x720>)
 801f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f82c:	f7e0 fcec 	bl	8000208 <__adddf3>
 801f830:	4622      	mov	r2, r4
 801f832:	462b      	mov	r3, r5
 801f834:	f7e0 fe9e 	bl	8000574 <__aeabi_dmul>
 801f838:	a373      	add	r3, pc, #460	; (adr r3, 801fa08 <__ieee754_pow+0x728>)
 801f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f83e:	f7e0 fce3 	bl	8000208 <__adddf3>
 801f842:	4622      	mov	r2, r4
 801f844:	462b      	mov	r3, r5
 801f846:	f7e0 fe95 	bl	8000574 <__aeabi_dmul>
 801f84a:	a371      	add	r3, pc, #452	; (adr r3, 801fa10 <__ieee754_pow+0x730>)
 801f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f850:	f7e0 fcda 	bl	8000208 <__adddf3>
 801f854:	4622      	mov	r2, r4
 801f856:	4606      	mov	r6, r0
 801f858:	460f      	mov	r7, r1
 801f85a:	462b      	mov	r3, r5
 801f85c:	4620      	mov	r0, r4
 801f85e:	4629      	mov	r1, r5
 801f860:	f7e0 fe88 	bl	8000574 <__aeabi_dmul>
 801f864:	4602      	mov	r2, r0
 801f866:	460b      	mov	r3, r1
 801f868:	4630      	mov	r0, r6
 801f86a:	4639      	mov	r1, r7
 801f86c:	f7e0 fe82 	bl	8000574 <__aeabi_dmul>
 801f870:	4642      	mov	r2, r8
 801f872:	4604      	mov	r4, r0
 801f874:	460d      	mov	r5, r1
 801f876:	464b      	mov	r3, r9
 801f878:	ec51 0b18 	vmov	r0, r1, d8
 801f87c:	f7e0 fcc4 	bl	8000208 <__adddf3>
 801f880:	ec53 2b19 	vmov	r2, r3, d9
 801f884:	f7e0 fe76 	bl	8000574 <__aeabi_dmul>
 801f888:	4622      	mov	r2, r4
 801f88a:	462b      	mov	r3, r5
 801f88c:	f7e0 fcbc 	bl	8000208 <__adddf3>
 801f890:	4642      	mov	r2, r8
 801f892:	4682      	mov	sl, r0
 801f894:	468b      	mov	fp, r1
 801f896:	464b      	mov	r3, r9
 801f898:	4640      	mov	r0, r8
 801f89a:	4649      	mov	r1, r9
 801f89c:	f7e0 fe6a 	bl	8000574 <__aeabi_dmul>
 801f8a0:	4b6b      	ldr	r3, [pc, #428]	; (801fa50 <__ieee754_pow+0x770>)
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	4606      	mov	r6, r0
 801f8a6:	460f      	mov	r7, r1
 801f8a8:	f7e0 fcae 	bl	8000208 <__adddf3>
 801f8ac:	4652      	mov	r2, sl
 801f8ae:	465b      	mov	r3, fp
 801f8b0:	f7e0 fcaa 	bl	8000208 <__adddf3>
 801f8b4:	2000      	movs	r0, #0
 801f8b6:	4604      	mov	r4, r0
 801f8b8:	460d      	mov	r5, r1
 801f8ba:	4602      	mov	r2, r0
 801f8bc:	460b      	mov	r3, r1
 801f8be:	4640      	mov	r0, r8
 801f8c0:	4649      	mov	r1, r9
 801f8c2:	f7e0 fe57 	bl	8000574 <__aeabi_dmul>
 801f8c6:	4b62      	ldr	r3, [pc, #392]	; (801fa50 <__ieee754_pow+0x770>)
 801f8c8:	4680      	mov	r8, r0
 801f8ca:	4689      	mov	r9, r1
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	4620      	mov	r0, r4
 801f8d0:	4629      	mov	r1, r5
 801f8d2:	f7e0 fc97 	bl	8000204 <__aeabi_dsub>
 801f8d6:	4632      	mov	r2, r6
 801f8d8:	463b      	mov	r3, r7
 801f8da:	f7e0 fc93 	bl	8000204 <__aeabi_dsub>
 801f8de:	4602      	mov	r2, r0
 801f8e0:	460b      	mov	r3, r1
 801f8e2:	4650      	mov	r0, sl
 801f8e4:	4659      	mov	r1, fp
 801f8e6:	f7e0 fc8d 	bl	8000204 <__aeabi_dsub>
 801f8ea:	ec53 2b18 	vmov	r2, r3, d8
 801f8ee:	f7e0 fe41 	bl	8000574 <__aeabi_dmul>
 801f8f2:	4622      	mov	r2, r4
 801f8f4:	4606      	mov	r6, r0
 801f8f6:	460f      	mov	r7, r1
 801f8f8:	462b      	mov	r3, r5
 801f8fa:	ec51 0b19 	vmov	r0, r1, d9
 801f8fe:	f7e0 fe39 	bl	8000574 <__aeabi_dmul>
 801f902:	4602      	mov	r2, r0
 801f904:	460b      	mov	r3, r1
 801f906:	4630      	mov	r0, r6
 801f908:	4639      	mov	r1, r7
 801f90a:	f7e0 fc7d 	bl	8000208 <__adddf3>
 801f90e:	4606      	mov	r6, r0
 801f910:	460f      	mov	r7, r1
 801f912:	4602      	mov	r2, r0
 801f914:	460b      	mov	r3, r1
 801f916:	4640      	mov	r0, r8
 801f918:	4649      	mov	r1, r9
 801f91a:	f7e0 fc75 	bl	8000208 <__adddf3>
 801f91e:	a33e      	add	r3, pc, #248	; (adr r3, 801fa18 <__ieee754_pow+0x738>)
 801f920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f924:	2000      	movs	r0, #0
 801f926:	4604      	mov	r4, r0
 801f928:	460d      	mov	r5, r1
 801f92a:	f7e0 fe23 	bl	8000574 <__aeabi_dmul>
 801f92e:	4642      	mov	r2, r8
 801f930:	ec41 0b18 	vmov	d8, r0, r1
 801f934:	464b      	mov	r3, r9
 801f936:	4620      	mov	r0, r4
 801f938:	4629      	mov	r1, r5
 801f93a:	f7e0 fc63 	bl	8000204 <__aeabi_dsub>
 801f93e:	4602      	mov	r2, r0
 801f940:	460b      	mov	r3, r1
 801f942:	4630      	mov	r0, r6
 801f944:	4639      	mov	r1, r7
 801f946:	f7e0 fc5d 	bl	8000204 <__aeabi_dsub>
 801f94a:	a335      	add	r3, pc, #212	; (adr r3, 801fa20 <__ieee754_pow+0x740>)
 801f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f950:	f7e0 fe10 	bl	8000574 <__aeabi_dmul>
 801f954:	a334      	add	r3, pc, #208	; (adr r3, 801fa28 <__ieee754_pow+0x748>)
 801f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f95a:	4606      	mov	r6, r0
 801f95c:	460f      	mov	r7, r1
 801f95e:	4620      	mov	r0, r4
 801f960:	4629      	mov	r1, r5
 801f962:	f7e0 fe07 	bl	8000574 <__aeabi_dmul>
 801f966:	4602      	mov	r2, r0
 801f968:	460b      	mov	r3, r1
 801f96a:	4630      	mov	r0, r6
 801f96c:	4639      	mov	r1, r7
 801f96e:	f7e0 fc4b 	bl	8000208 <__adddf3>
 801f972:	9a07      	ldr	r2, [sp, #28]
 801f974:	4b37      	ldr	r3, [pc, #220]	; (801fa54 <__ieee754_pow+0x774>)
 801f976:	4413      	add	r3, r2
 801f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f97c:	f7e0 fc44 	bl	8000208 <__adddf3>
 801f980:	4682      	mov	sl, r0
 801f982:	9805      	ldr	r0, [sp, #20]
 801f984:	468b      	mov	fp, r1
 801f986:	f7e0 fd8b 	bl	80004a0 <__aeabi_i2d>
 801f98a:	9a07      	ldr	r2, [sp, #28]
 801f98c:	4b32      	ldr	r3, [pc, #200]	; (801fa58 <__ieee754_pow+0x778>)
 801f98e:	4413      	add	r3, r2
 801f990:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f994:	4606      	mov	r6, r0
 801f996:	460f      	mov	r7, r1
 801f998:	4652      	mov	r2, sl
 801f99a:	465b      	mov	r3, fp
 801f99c:	ec51 0b18 	vmov	r0, r1, d8
 801f9a0:	f7e0 fc32 	bl	8000208 <__adddf3>
 801f9a4:	4642      	mov	r2, r8
 801f9a6:	464b      	mov	r3, r9
 801f9a8:	f7e0 fc2e 	bl	8000208 <__adddf3>
 801f9ac:	4632      	mov	r2, r6
 801f9ae:	463b      	mov	r3, r7
 801f9b0:	f7e0 fc2a 	bl	8000208 <__adddf3>
 801f9b4:	2000      	movs	r0, #0
 801f9b6:	4632      	mov	r2, r6
 801f9b8:	463b      	mov	r3, r7
 801f9ba:	4604      	mov	r4, r0
 801f9bc:	460d      	mov	r5, r1
 801f9be:	f7e0 fc21 	bl	8000204 <__aeabi_dsub>
 801f9c2:	4642      	mov	r2, r8
 801f9c4:	464b      	mov	r3, r9
 801f9c6:	f7e0 fc1d 	bl	8000204 <__aeabi_dsub>
 801f9ca:	ec53 2b18 	vmov	r2, r3, d8
 801f9ce:	f7e0 fc19 	bl	8000204 <__aeabi_dsub>
 801f9d2:	4602      	mov	r2, r0
 801f9d4:	460b      	mov	r3, r1
 801f9d6:	4650      	mov	r0, sl
 801f9d8:	4659      	mov	r1, fp
 801f9da:	e610      	b.n	801f5fe <__ieee754_pow+0x31e>
 801f9dc:	2401      	movs	r4, #1
 801f9de:	e6a1      	b.n	801f724 <__ieee754_pow+0x444>
 801f9e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801fa30 <__ieee754_pow+0x750>
 801f9e4:	e617      	b.n	801f616 <__ieee754_pow+0x336>
 801f9e6:	bf00      	nop
 801f9e8:	4a454eef 	.word	0x4a454eef
 801f9ec:	3fca7e28 	.word	0x3fca7e28
 801f9f0:	93c9db65 	.word	0x93c9db65
 801f9f4:	3fcd864a 	.word	0x3fcd864a
 801f9f8:	a91d4101 	.word	0xa91d4101
 801f9fc:	3fd17460 	.word	0x3fd17460
 801fa00:	518f264d 	.word	0x518f264d
 801fa04:	3fd55555 	.word	0x3fd55555
 801fa08:	db6fabff 	.word	0xdb6fabff
 801fa0c:	3fdb6db6 	.word	0x3fdb6db6
 801fa10:	33333303 	.word	0x33333303
 801fa14:	3fe33333 	.word	0x3fe33333
 801fa18:	e0000000 	.word	0xe0000000
 801fa1c:	3feec709 	.word	0x3feec709
 801fa20:	dc3a03fd 	.word	0xdc3a03fd
 801fa24:	3feec709 	.word	0x3feec709
 801fa28:	145b01f5 	.word	0x145b01f5
 801fa2c:	be3e2fe0 	.word	0xbe3e2fe0
 801fa30:	00000000 	.word	0x00000000
 801fa34:	3ff00000 	.word	0x3ff00000
 801fa38:	7ff00000 	.word	0x7ff00000
 801fa3c:	43400000 	.word	0x43400000
 801fa40:	0003988e 	.word	0x0003988e
 801fa44:	000bb679 	.word	0x000bb679
 801fa48:	08022718 	.word	0x08022718
 801fa4c:	3ff00000 	.word	0x3ff00000
 801fa50:	40080000 	.word	0x40080000
 801fa54:	08022738 	.word	0x08022738
 801fa58:	08022728 	.word	0x08022728
 801fa5c:	a3b3      	add	r3, pc, #716	; (adr r3, 801fd2c <__ieee754_pow+0xa4c>)
 801fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa62:	4640      	mov	r0, r8
 801fa64:	4649      	mov	r1, r9
 801fa66:	f7e0 fbcf 	bl	8000208 <__adddf3>
 801fa6a:	4622      	mov	r2, r4
 801fa6c:	ec41 0b1a 	vmov	d10, r0, r1
 801fa70:	462b      	mov	r3, r5
 801fa72:	4630      	mov	r0, r6
 801fa74:	4639      	mov	r1, r7
 801fa76:	f7e0 fbc5 	bl	8000204 <__aeabi_dsub>
 801fa7a:	4602      	mov	r2, r0
 801fa7c:	460b      	mov	r3, r1
 801fa7e:	ec51 0b1a 	vmov	r0, r1, d10
 801fa82:	f7e1 f807 	bl	8000a94 <__aeabi_dcmpgt>
 801fa86:	2800      	cmp	r0, #0
 801fa88:	f47f ae04 	bne.w	801f694 <__ieee754_pow+0x3b4>
 801fa8c:	4aa2      	ldr	r2, [pc, #648]	; (801fd18 <__ieee754_pow+0xa38>)
 801fa8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fa92:	4293      	cmp	r3, r2
 801fa94:	f340 8107 	ble.w	801fca6 <__ieee754_pow+0x9c6>
 801fa98:	151b      	asrs	r3, r3, #20
 801fa9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801fa9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801faa2:	fa4a fa03 	asr.w	sl, sl, r3
 801faa6:	44da      	add	sl, fp
 801faa8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801faac:	489b      	ldr	r0, [pc, #620]	; (801fd1c <__ieee754_pow+0xa3c>)
 801faae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801fab2:	4108      	asrs	r0, r1
 801fab4:	ea00 030a 	and.w	r3, r0, sl
 801fab8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801fabc:	f1c1 0114 	rsb	r1, r1, #20
 801fac0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801fac4:	fa4a fa01 	asr.w	sl, sl, r1
 801fac8:	f1bb 0f00 	cmp.w	fp, #0
 801facc:	f04f 0200 	mov.w	r2, #0
 801fad0:	4620      	mov	r0, r4
 801fad2:	4629      	mov	r1, r5
 801fad4:	bfb8      	it	lt
 801fad6:	f1ca 0a00 	rsblt	sl, sl, #0
 801fada:	f7e0 fb93 	bl	8000204 <__aeabi_dsub>
 801fade:	ec41 0b19 	vmov	d9, r0, r1
 801fae2:	4642      	mov	r2, r8
 801fae4:	464b      	mov	r3, r9
 801fae6:	ec51 0b19 	vmov	r0, r1, d9
 801faea:	f7e0 fb8d 	bl	8000208 <__adddf3>
 801faee:	a37a      	add	r3, pc, #488	; (adr r3, 801fcd8 <__ieee754_pow+0x9f8>)
 801faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faf4:	2000      	movs	r0, #0
 801faf6:	4604      	mov	r4, r0
 801faf8:	460d      	mov	r5, r1
 801fafa:	f7e0 fd3b 	bl	8000574 <__aeabi_dmul>
 801fafe:	ec53 2b19 	vmov	r2, r3, d9
 801fb02:	4606      	mov	r6, r0
 801fb04:	460f      	mov	r7, r1
 801fb06:	4620      	mov	r0, r4
 801fb08:	4629      	mov	r1, r5
 801fb0a:	f7e0 fb7b 	bl	8000204 <__aeabi_dsub>
 801fb0e:	4602      	mov	r2, r0
 801fb10:	460b      	mov	r3, r1
 801fb12:	4640      	mov	r0, r8
 801fb14:	4649      	mov	r1, r9
 801fb16:	f7e0 fb75 	bl	8000204 <__aeabi_dsub>
 801fb1a:	a371      	add	r3, pc, #452	; (adr r3, 801fce0 <__ieee754_pow+0xa00>)
 801fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb20:	f7e0 fd28 	bl	8000574 <__aeabi_dmul>
 801fb24:	a370      	add	r3, pc, #448	; (adr r3, 801fce8 <__ieee754_pow+0xa08>)
 801fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb2a:	4680      	mov	r8, r0
 801fb2c:	4689      	mov	r9, r1
 801fb2e:	4620      	mov	r0, r4
 801fb30:	4629      	mov	r1, r5
 801fb32:	f7e0 fd1f 	bl	8000574 <__aeabi_dmul>
 801fb36:	4602      	mov	r2, r0
 801fb38:	460b      	mov	r3, r1
 801fb3a:	4640      	mov	r0, r8
 801fb3c:	4649      	mov	r1, r9
 801fb3e:	f7e0 fb63 	bl	8000208 <__adddf3>
 801fb42:	4604      	mov	r4, r0
 801fb44:	460d      	mov	r5, r1
 801fb46:	4602      	mov	r2, r0
 801fb48:	460b      	mov	r3, r1
 801fb4a:	4630      	mov	r0, r6
 801fb4c:	4639      	mov	r1, r7
 801fb4e:	f7e0 fb5b 	bl	8000208 <__adddf3>
 801fb52:	4632      	mov	r2, r6
 801fb54:	463b      	mov	r3, r7
 801fb56:	4680      	mov	r8, r0
 801fb58:	4689      	mov	r9, r1
 801fb5a:	f7e0 fb53 	bl	8000204 <__aeabi_dsub>
 801fb5e:	4602      	mov	r2, r0
 801fb60:	460b      	mov	r3, r1
 801fb62:	4620      	mov	r0, r4
 801fb64:	4629      	mov	r1, r5
 801fb66:	f7e0 fb4d 	bl	8000204 <__aeabi_dsub>
 801fb6a:	4642      	mov	r2, r8
 801fb6c:	4606      	mov	r6, r0
 801fb6e:	460f      	mov	r7, r1
 801fb70:	464b      	mov	r3, r9
 801fb72:	4640      	mov	r0, r8
 801fb74:	4649      	mov	r1, r9
 801fb76:	f7e0 fcfd 	bl	8000574 <__aeabi_dmul>
 801fb7a:	a35d      	add	r3, pc, #372	; (adr r3, 801fcf0 <__ieee754_pow+0xa10>)
 801fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb80:	4604      	mov	r4, r0
 801fb82:	460d      	mov	r5, r1
 801fb84:	f7e0 fcf6 	bl	8000574 <__aeabi_dmul>
 801fb88:	a35b      	add	r3, pc, #364	; (adr r3, 801fcf8 <__ieee754_pow+0xa18>)
 801fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb8e:	f7e0 fb39 	bl	8000204 <__aeabi_dsub>
 801fb92:	4622      	mov	r2, r4
 801fb94:	462b      	mov	r3, r5
 801fb96:	f7e0 fced 	bl	8000574 <__aeabi_dmul>
 801fb9a:	a359      	add	r3, pc, #356	; (adr r3, 801fd00 <__ieee754_pow+0xa20>)
 801fb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fba0:	f7e0 fb32 	bl	8000208 <__adddf3>
 801fba4:	4622      	mov	r2, r4
 801fba6:	462b      	mov	r3, r5
 801fba8:	f7e0 fce4 	bl	8000574 <__aeabi_dmul>
 801fbac:	a356      	add	r3, pc, #344	; (adr r3, 801fd08 <__ieee754_pow+0xa28>)
 801fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbb2:	f7e0 fb27 	bl	8000204 <__aeabi_dsub>
 801fbb6:	4622      	mov	r2, r4
 801fbb8:	462b      	mov	r3, r5
 801fbba:	f7e0 fcdb 	bl	8000574 <__aeabi_dmul>
 801fbbe:	a354      	add	r3, pc, #336	; (adr r3, 801fd10 <__ieee754_pow+0xa30>)
 801fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbc4:	f7e0 fb20 	bl	8000208 <__adddf3>
 801fbc8:	4622      	mov	r2, r4
 801fbca:	462b      	mov	r3, r5
 801fbcc:	f7e0 fcd2 	bl	8000574 <__aeabi_dmul>
 801fbd0:	4602      	mov	r2, r0
 801fbd2:	460b      	mov	r3, r1
 801fbd4:	4640      	mov	r0, r8
 801fbd6:	4649      	mov	r1, r9
 801fbd8:	f7e0 fb14 	bl	8000204 <__aeabi_dsub>
 801fbdc:	4604      	mov	r4, r0
 801fbde:	460d      	mov	r5, r1
 801fbe0:	4602      	mov	r2, r0
 801fbe2:	460b      	mov	r3, r1
 801fbe4:	4640      	mov	r0, r8
 801fbe6:	4649      	mov	r1, r9
 801fbe8:	f7e0 fcc4 	bl	8000574 <__aeabi_dmul>
 801fbec:	2200      	movs	r2, #0
 801fbee:	ec41 0b19 	vmov	d9, r0, r1
 801fbf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fbf6:	4620      	mov	r0, r4
 801fbf8:	4629      	mov	r1, r5
 801fbfa:	f7e0 fb03 	bl	8000204 <__aeabi_dsub>
 801fbfe:	4602      	mov	r2, r0
 801fc00:	460b      	mov	r3, r1
 801fc02:	ec51 0b19 	vmov	r0, r1, d9
 801fc06:	f7e0 fddf 	bl	80007c8 <__aeabi_ddiv>
 801fc0a:	4632      	mov	r2, r6
 801fc0c:	4604      	mov	r4, r0
 801fc0e:	460d      	mov	r5, r1
 801fc10:	463b      	mov	r3, r7
 801fc12:	4640      	mov	r0, r8
 801fc14:	4649      	mov	r1, r9
 801fc16:	f7e0 fcad 	bl	8000574 <__aeabi_dmul>
 801fc1a:	4632      	mov	r2, r6
 801fc1c:	463b      	mov	r3, r7
 801fc1e:	f7e0 faf3 	bl	8000208 <__adddf3>
 801fc22:	4602      	mov	r2, r0
 801fc24:	460b      	mov	r3, r1
 801fc26:	4620      	mov	r0, r4
 801fc28:	4629      	mov	r1, r5
 801fc2a:	f7e0 faeb 	bl	8000204 <__aeabi_dsub>
 801fc2e:	4642      	mov	r2, r8
 801fc30:	464b      	mov	r3, r9
 801fc32:	f7e0 fae7 	bl	8000204 <__aeabi_dsub>
 801fc36:	460b      	mov	r3, r1
 801fc38:	4602      	mov	r2, r0
 801fc3a:	4939      	ldr	r1, [pc, #228]	; (801fd20 <__ieee754_pow+0xa40>)
 801fc3c:	2000      	movs	r0, #0
 801fc3e:	f7e0 fae1 	bl	8000204 <__aeabi_dsub>
 801fc42:	ec41 0b10 	vmov	d0, r0, r1
 801fc46:	ee10 3a90 	vmov	r3, s1
 801fc4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801fc4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fc52:	da2b      	bge.n	801fcac <__ieee754_pow+0x9cc>
 801fc54:	4650      	mov	r0, sl
 801fc56:	f000 fa7f 	bl	8020158 <scalbn>
 801fc5a:	ec51 0b10 	vmov	r0, r1, d0
 801fc5e:	ec53 2b18 	vmov	r2, r3, d8
 801fc62:	f7ff bbee 	b.w	801f442 <__ieee754_pow+0x162>
 801fc66:	4b2f      	ldr	r3, [pc, #188]	; (801fd24 <__ieee754_pow+0xa44>)
 801fc68:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801fc6c:	429e      	cmp	r6, r3
 801fc6e:	f77f af0d 	ble.w	801fa8c <__ieee754_pow+0x7ac>
 801fc72:	4b2d      	ldr	r3, [pc, #180]	; (801fd28 <__ieee754_pow+0xa48>)
 801fc74:	440b      	add	r3, r1
 801fc76:	4303      	orrs	r3, r0
 801fc78:	d009      	beq.n	801fc8e <__ieee754_pow+0x9ae>
 801fc7a:	ec51 0b18 	vmov	r0, r1, d8
 801fc7e:	2200      	movs	r2, #0
 801fc80:	2300      	movs	r3, #0
 801fc82:	f7e0 fee9 	bl	8000a58 <__aeabi_dcmplt>
 801fc86:	3800      	subs	r0, #0
 801fc88:	bf18      	it	ne
 801fc8a:	2001      	movne	r0, #1
 801fc8c:	e448      	b.n	801f520 <__ieee754_pow+0x240>
 801fc8e:	4622      	mov	r2, r4
 801fc90:	462b      	mov	r3, r5
 801fc92:	f7e0 fab7 	bl	8000204 <__aeabi_dsub>
 801fc96:	4642      	mov	r2, r8
 801fc98:	464b      	mov	r3, r9
 801fc9a:	f7e0 fef1 	bl	8000a80 <__aeabi_dcmpge>
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	f43f aef4 	beq.w	801fa8c <__ieee754_pow+0x7ac>
 801fca4:	e7e9      	b.n	801fc7a <__ieee754_pow+0x99a>
 801fca6:	f04f 0a00 	mov.w	sl, #0
 801fcaa:	e71a      	b.n	801fae2 <__ieee754_pow+0x802>
 801fcac:	ec51 0b10 	vmov	r0, r1, d0
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	e7d4      	b.n	801fc5e <__ieee754_pow+0x97e>
 801fcb4:	491a      	ldr	r1, [pc, #104]	; (801fd20 <__ieee754_pow+0xa40>)
 801fcb6:	2000      	movs	r0, #0
 801fcb8:	f7ff bb31 	b.w	801f31e <__ieee754_pow+0x3e>
 801fcbc:	2000      	movs	r0, #0
 801fcbe:	2100      	movs	r1, #0
 801fcc0:	f7ff bb2d 	b.w	801f31e <__ieee754_pow+0x3e>
 801fcc4:	4630      	mov	r0, r6
 801fcc6:	4639      	mov	r1, r7
 801fcc8:	f7ff bb29 	b.w	801f31e <__ieee754_pow+0x3e>
 801fccc:	9204      	str	r2, [sp, #16]
 801fcce:	f7ff bb7b 	b.w	801f3c8 <__ieee754_pow+0xe8>
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	f7ff bb65 	b.w	801f3a2 <__ieee754_pow+0xc2>
 801fcd8:	00000000 	.word	0x00000000
 801fcdc:	3fe62e43 	.word	0x3fe62e43
 801fce0:	fefa39ef 	.word	0xfefa39ef
 801fce4:	3fe62e42 	.word	0x3fe62e42
 801fce8:	0ca86c39 	.word	0x0ca86c39
 801fcec:	be205c61 	.word	0xbe205c61
 801fcf0:	72bea4d0 	.word	0x72bea4d0
 801fcf4:	3e663769 	.word	0x3e663769
 801fcf8:	c5d26bf1 	.word	0xc5d26bf1
 801fcfc:	3ebbbd41 	.word	0x3ebbbd41
 801fd00:	af25de2c 	.word	0xaf25de2c
 801fd04:	3f11566a 	.word	0x3f11566a
 801fd08:	16bebd93 	.word	0x16bebd93
 801fd0c:	3f66c16c 	.word	0x3f66c16c
 801fd10:	5555553e 	.word	0x5555553e
 801fd14:	3fc55555 	.word	0x3fc55555
 801fd18:	3fe00000 	.word	0x3fe00000
 801fd1c:	fff00000 	.word	0xfff00000
 801fd20:	3ff00000 	.word	0x3ff00000
 801fd24:	4090cbff 	.word	0x4090cbff
 801fd28:	3f6f3400 	.word	0x3f6f3400
 801fd2c:	652b82fe 	.word	0x652b82fe
 801fd30:	3c971547 	.word	0x3c971547
 801fd34:	00000000 	.word	0x00000000

0801fd38 <__ieee754_rem_pio2>:
 801fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd3c:	ed2d 8b02 	vpush	{d8}
 801fd40:	ec55 4b10 	vmov	r4, r5, d0
 801fd44:	4bca      	ldr	r3, [pc, #808]	; (8020070 <__ieee754_rem_pio2+0x338>)
 801fd46:	b08b      	sub	sp, #44	; 0x2c
 801fd48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801fd4c:	4598      	cmp	r8, r3
 801fd4e:	4682      	mov	sl, r0
 801fd50:	9502      	str	r5, [sp, #8]
 801fd52:	dc08      	bgt.n	801fd66 <__ieee754_rem_pio2+0x2e>
 801fd54:	2200      	movs	r2, #0
 801fd56:	2300      	movs	r3, #0
 801fd58:	ed80 0b00 	vstr	d0, [r0]
 801fd5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801fd60:	f04f 0b00 	mov.w	fp, #0
 801fd64:	e028      	b.n	801fdb8 <__ieee754_rem_pio2+0x80>
 801fd66:	4bc3      	ldr	r3, [pc, #780]	; (8020074 <__ieee754_rem_pio2+0x33c>)
 801fd68:	4598      	cmp	r8, r3
 801fd6a:	dc78      	bgt.n	801fe5e <__ieee754_rem_pio2+0x126>
 801fd6c:	9b02      	ldr	r3, [sp, #8]
 801fd6e:	4ec2      	ldr	r6, [pc, #776]	; (8020078 <__ieee754_rem_pio2+0x340>)
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	ee10 0a10 	vmov	r0, s0
 801fd76:	a3b0      	add	r3, pc, #704	; (adr r3, 8020038 <__ieee754_rem_pio2+0x300>)
 801fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd7c:	4629      	mov	r1, r5
 801fd7e:	dd39      	ble.n	801fdf4 <__ieee754_rem_pio2+0xbc>
 801fd80:	f7e0 fa40 	bl	8000204 <__aeabi_dsub>
 801fd84:	45b0      	cmp	r8, r6
 801fd86:	4604      	mov	r4, r0
 801fd88:	460d      	mov	r5, r1
 801fd8a:	d01b      	beq.n	801fdc4 <__ieee754_rem_pio2+0x8c>
 801fd8c:	a3ac      	add	r3, pc, #688	; (adr r3, 8020040 <__ieee754_rem_pio2+0x308>)
 801fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd92:	f7e0 fa37 	bl	8000204 <__aeabi_dsub>
 801fd96:	4602      	mov	r2, r0
 801fd98:	460b      	mov	r3, r1
 801fd9a:	e9ca 2300 	strd	r2, r3, [sl]
 801fd9e:	4620      	mov	r0, r4
 801fda0:	4629      	mov	r1, r5
 801fda2:	f7e0 fa2f 	bl	8000204 <__aeabi_dsub>
 801fda6:	a3a6      	add	r3, pc, #664	; (adr r3, 8020040 <__ieee754_rem_pio2+0x308>)
 801fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdac:	f7e0 fa2a 	bl	8000204 <__aeabi_dsub>
 801fdb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801fdb4:	f04f 0b01 	mov.w	fp, #1
 801fdb8:	4658      	mov	r0, fp
 801fdba:	b00b      	add	sp, #44	; 0x2c
 801fdbc:	ecbd 8b02 	vpop	{d8}
 801fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc4:	a3a0      	add	r3, pc, #640	; (adr r3, 8020048 <__ieee754_rem_pio2+0x310>)
 801fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdca:	f7e0 fa1b 	bl	8000204 <__aeabi_dsub>
 801fdce:	a3a0      	add	r3, pc, #640	; (adr r3, 8020050 <__ieee754_rem_pio2+0x318>)
 801fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdd4:	4604      	mov	r4, r0
 801fdd6:	460d      	mov	r5, r1
 801fdd8:	f7e0 fa14 	bl	8000204 <__aeabi_dsub>
 801fddc:	4602      	mov	r2, r0
 801fdde:	460b      	mov	r3, r1
 801fde0:	e9ca 2300 	strd	r2, r3, [sl]
 801fde4:	4620      	mov	r0, r4
 801fde6:	4629      	mov	r1, r5
 801fde8:	f7e0 fa0c 	bl	8000204 <__aeabi_dsub>
 801fdec:	a398      	add	r3, pc, #608	; (adr r3, 8020050 <__ieee754_rem_pio2+0x318>)
 801fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdf2:	e7db      	b.n	801fdac <__ieee754_rem_pio2+0x74>
 801fdf4:	f7e0 fa08 	bl	8000208 <__adddf3>
 801fdf8:	45b0      	cmp	r8, r6
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	460d      	mov	r5, r1
 801fdfe:	d016      	beq.n	801fe2e <__ieee754_rem_pio2+0xf6>
 801fe00:	a38f      	add	r3, pc, #572	; (adr r3, 8020040 <__ieee754_rem_pio2+0x308>)
 801fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe06:	f7e0 f9ff 	bl	8000208 <__adddf3>
 801fe0a:	4602      	mov	r2, r0
 801fe0c:	460b      	mov	r3, r1
 801fe0e:	e9ca 2300 	strd	r2, r3, [sl]
 801fe12:	4620      	mov	r0, r4
 801fe14:	4629      	mov	r1, r5
 801fe16:	f7e0 f9f5 	bl	8000204 <__aeabi_dsub>
 801fe1a:	a389      	add	r3, pc, #548	; (adr r3, 8020040 <__ieee754_rem_pio2+0x308>)
 801fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe20:	f7e0 f9f2 	bl	8000208 <__adddf3>
 801fe24:	f04f 3bff 	mov.w	fp, #4294967295
 801fe28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801fe2c:	e7c4      	b.n	801fdb8 <__ieee754_rem_pio2+0x80>
 801fe2e:	a386      	add	r3, pc, #536	; (adr r3, 8020048 <__ieee754_rem_pio2+0x310>)
 801fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe34:	f7e0 f9e8 	bl	8000208 <__adddf3>
 801fe38:	a385      	add	r3, pc, #532	; (adr r3, 8020050 <__ieee754_rem_pio2+0x318>)
 801fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe3e:	4604      	mov	r4, r0
 801fe40:	460d      	mov	r5, r1
 801fe42:	f7e0 f9e1 	bl	8000208 <__adddf3>
 801fe46:	4602      	mov	r2, r0
 801fe48:	460b      	mov	r3, r1
 801fe4a:	e9ca 2300 	strd	r2, r3, [sl]
 801fe4e:	4620      	mov	r0, r4
 801fe50:	4629      	mov	r1, r5
 801fe52:	f7e0 f9d7 	bl	8000204 <__aeabi_dsub>
 801fe56:	a37e      	add	r3, pc, #504	; (adr r3, 8020050 <__ieee754_rem_pio2+0x318>)
 801fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe5c:	e7e0      	b.n	801fe20 <__ieee754_rem_pio2+0xe8>
 801fe5e:	4b87      	ldr	r3, [pc, #540]	; (802007c <__ieee754_rem_pio2+0x344>)
 801fe60:	4598      	cmp	r8, r3
 801fe62:	f300 80d8 	bgt.w	8020016 <__ieee754_rem_pio2+0x2de>
 801fe66:	f000 f96d 	bl	8020144 <fabs>
 801fe6a:	ec55 4b10 	vmov	r4, r5, d0
 801fe6e:	ee10 0a10 	vmov	r0, s0
 801fe72:	a379      	add	r3, pc, #484	; (adr r3, 8020058 <__ieee754_rem_pio2+0x320>)
 801fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe78:	4629      	mov	r1, r5
 801fe7a:	f7e0 fb7b 	bl	8000574 <__aeabi_dmul>
 801fe7e:	4b80      	ldr	r3, [pc, #512]	; (8020080 <__ieee754_rem_pio2+0x348>)
 801fe80:	2200      	movs	r2, #0
 801fe82:	f7e0 f9c1 	bl	8000208 <__adddf3>
 801fe86:	f7e0 fe25 	bl	8000ad4 <__aeabi_d2iz>
 801fe8a:	4683      	mov	fp, r0
 801fe8c:	f7e0 fb08 	bl	80004a0 <__aeabi_i2d>
 801fe90:	4602      	mov	r2, r0
 801fe92:	460b      	mov	r3, r1
 801fe94:	ec43 2b18 	vmov	d8, r2, r3
 801fe98:	a367      	add	r3, pc, #412	; (adr r3, 8020038 <__ieee754_rem_pio2+0x300>)
 801fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe9e:	f7e0 fb69 	bl	8000574 <__aeabi_dmul>
 801fea2:	4602      	mov	r2, r0
 801fea4:	460b      	mov	r3, r1
 801fea6:	4620      	mov	r0, r4
 801fea8:	4629      	mov	r1, r5
 801feaa:	f7e0 f9ab 	bl	8000204 <__aeabi_dsub>
 801feae:	a364      	add	r3, pc, #400	; (adr r3, 8020040 <__ieee754_rem_pio2+0x308>)
 801feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feb4:	4606      	mov	r6, r0
 801feb6:	460f      	mov	r7, r1
 801feb8:	ec51 0b18 	vmov	r0, r1, d8
 801febc:	f7e0 fb5a 	bl	8000574 <__aeabi_dmul>
 801fec0:	f1bb 0f1f 	cmp.w	fp, #31
 801fec4:	4604      	mov	r4, r0
 801fec6:	460d      	mov	r5, r1
 801fec8:	dc0d      	bgt.n	801fee6 <__ieee754_rem_pio2+0x1ae>
 801feca:	4b6e      	ldr	r3, [pc, #440]	; (8020084 <__ieee754_rem_pio2+0x34c>)
 801fecc:	f10b 32ff 	add.w	r2, fp, #4294967295
 801fed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fed4:	4543      	cmp	r3, r8
 801fed6:	d006      	beq.n	801fee6 <__ieee754_rem_pio2+0x1ae>
 801fed8:	4622      	mov	r2, r4
 801feda:	462b      	mov	r3, r5
 801fedc:	4630      	mov	r0, r6
 801fede:	4639      	mov	r1, r7
 801fee0:	f7e0 f990 	bl	8000204 <__aeabi_dsub>
 801fee4:	e00e      	b.n	801ff04 <__ieee754_rem_pio2+0x1cc>
 801fee6:	462b      	mov	r3, r5
 801fee8:	4622      	mov	r2, r4
 801feea:	4630      	mov	r0, r6
 801feec:	4639      	mov	r1, r7
 801feee:	f7e0 f989 	bl	8000204 <__aeabi_dsub>
 801fef2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fef6:	9303      	str	r3, [sp, #12]
 801fef8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801fefc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ff00:	2b10      	cmp	r3, #16
 801ff02:	dc02      	bgt.n	801ff0a <__ieee754_rem_pio2+0x1d2>
 801ff04:	e9ca 0100 	strd	r0, r1, [sl]
 801ff08:	e039      	b.n	801ff7e <__ieee754_rem_pio2+0x246>
 801ff0a:	a34f      	add	r3, pc, #316	; (adr r3, 8020048 <__ieee754_rem_pio2+0x310>)
 801ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff10:	ec51 0b18 	vmov	r0, r1, d8
 801ff14:	f7e0 fb2e 	bl	8000574 <__aeabi_dmul>
 801ff18:	4604      	mov	r4, r0
 801ff1a:	460d      	mov	r5, r1
 801ff1c:	4602      	mov	r2, r0
 801ff1e:	460b      	mov	r3, r1
 801ff20:	4630      	mov	r0, r6
 801ff22:	4639      	mov	r1, r7
 801ff24:	f7e0 f96e 	bl	8000204 <__aeabi_dsub>
 801ff28:	4602      	mov	r2, r0
 801ff2a:	460b      	mov	r3, r1
 801ff2c:	4680      	mov	r8, r0
 801ff2e:	4689      	mov	r9, r1
 801ff30:	4630      	mov	r0, r6
 801ff32:	4639      	mov	r1, r7
 801ff34:	f7e0 f966 	bl	8000204 <__aeabi_dsub>
 801ff38:	4622      	mov	r2, r4
 801ff3a:	462b      	mov	r3, r5
 801ff3c:	f7e0 f962 	bl	8000204 <__aeabi_dsub>
 801ff40:	a343      	add	r3, pc, #268	; (adr r3, 8020050 <__ieee754_rem_pio2+0x318>)
 801ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff46:	4604      	mov	r4, r0
 801ff48:	460d      	mov	r5, r1
 801ff4a:	ec51 0b18 	vmov	r0, r1, d8
 801ff4e:	f7e0 fb11 	bl	8000574 <__aeabi_dmul>
 801ff52:	4622      	mov	r2, r4
 801ff54:	462b      	mov	r3, r5
 801ff56:	f7e0 f955 	bl	8000204 <__aeabi_dsub>
 801ff5a:	4602      	mov	r2, r0
 801ff5c:	460b      	mov	r3, r1
 801ff5e:	4604      	mov	r4, r0
 801ff60:	460d      	mov	r5, r1
 801ff62:	4640      	mov	r0, r8
 801ff64:	4649      	mov	r1, r9
 801ff66:	f7e0 f94d 	bl	8000204 <__aeabi_dsub>
 801ff6a:	9a03      	ldr	r2, [sp, #12]
 801ff6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ff70:	1ad3      	subs	r3, r2, r3
 801ff72:	2b31      	cmp	r3, #49	; 0x31
 801ff74:	dc24      	bgt.n	801ffc0 <__ieee754_rem_pio2+0x288>
 801ff76:	e9ca 0100 	strd	r0, r1, [sl]
 801ff7a:	4646      	mov	r6, r8
 801ff7c:	464f      	mov	r7, r9
 801ff7e:	e9da 8900 	ldrd	r8, r9, [sl]
 801ff82:	4630      	mov	r0, r6
 801ff84:	4642      	mov	r2, r8
 801ff86:	464b      	mov	r3, r9
 801ff88:	4639      	mov	r1, r7
 801ff8a:	f7e0 f93b 	bl	8000204 <__aeabi_dsub>
 801ff8e:	462b      	mov	r3, r5
 801ff90:	4622      	mov	r2, r4
 801ff92:	f7e0 f937 	bl	8000204 <__aeabi_dsub>
 801ff96:	9b02      	ldr	r3, [sp, #8]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ff9e:	f6bf af0b 	bge.w	801fdb8 <__ieee754_rem_pio2+0x80>
 801ffa2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ffa6:	f8ca 3004 	str.w	r3, [sl, #4]
 801ffaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ffae:	f8ca 8000 	str.w	r8, [sl]
 801ffb2:	f8ca 0008 	str.w	r0, [sl, #8]
 801ffb6:	f8ca 300c 	str.w	r3, [sl, #12]
 801ffba:	f1cb 0b00 	rsb	fp, fp, #0
 801ffbe:	e6fb      	b.n	801fdb8 <__ieee754_rem_pio2+0x80>
 801ffc0:	a327      	add	r3, pc, #156	; (adr r3, 8020060 <__ieee754_rem_pio2+0x328>)
 801ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffc6:	ec51 0b18 	vmov	r0, r1, d8
 801ffca:	f7e0 fad3 	bl	8000574 <__aeabi_dmul>
 801ffce:	4604      	mov	r4, r0
 801ffd0:	460d      	mov	r5, r1
 801ffd2:	4602      	mov	r2, r0
 801ffd4:	460b      	mov	r3, r1
 801ffd6:	4640      	mov	r0, r8
 801ffd8:	4649      	mov	r1, r9
 801ffda:	f7e0 f913 	bl	8000204 <__aeabi_dsub>
 801ffde:	4602      	mov	r2, r0
 801ffe0:	460b      	mov	r3, r1
 801ffe2:	4606      	mov	r6, r0
 801ffe4:	460f      	mov	r7, r1
 801ffe6:	4640      	mov	r0, r8
 801ffe8:	4649      	mov	r1, r9
 801ffea:	f7e0 f90b 	bl	8000204 <__aeabi_dsub>
 801ffee:	4622      	mov	r2, r4
 801fff0:	462b      	mov	r3, r5
 801fff2:	f7e0 f907 	bl	8000204 <__aeabi_dsub>
 801fff6:	a31c      	add	r3, pc, #112	; (adr r3, 8020068 <__ieee754_rem_pio2+0x330>)
 801fff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fffc:	4604      	mov	r4, r0
 801fffe:	460d      	mov	r5, r1
 8020000:	ec51 0b18 	vmov	r0, r1, d8
 8020004:	f7e0 fab6 	bl	8000574 <__aeabi_dmul>
 8020008:	4622      	mov	r2, r4
 802000a:	462b      	mov	r3, r5
 802000c:	f7e0 f8fa 	bl	8000204 <__aeabi_dsub>
 8020010:	4604      	mov	r4, r0
 8020012:	460d      	mov	r5, r1
 8020014:	e760      	b.n	801fed8 <__ieee754_rem_pio2+0x1a0>
 8020016:	4b1c      	ldr	r3, [pc, #112]	; (8020088 <__ieee754_rem_pio2+0x350>)
 8020018:	4598      	cmp	r8, r3
 802001a:	dd37      	ble.n	802008c <__ieee754_rem_pio2+0x354>
 802001c:	ee10 2a10 	vmov	r2, s0
 8020020:	462b      	mov	r3, r5
 8020022:	4620      	mov	r0, r4
 8020024:	4629      	mov	r1, r5
 8020026:	f7e0 f8ed 	bl	8000204 <__aeabi_dsub>
 802002a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802002e:	e9ca 0100 	strd	r0, r1, [sl]
 8020032:	e695      	b.n	801fd60 <__ieee754_rem_pio2+0x28>
 8020034:	f3af 8000 	nop.w
 8020038:	54400000 	.word	0x54400000
 802003c:	3ff921fb 	.word	0x3ff921fb
 8020040:	1a626331 	.word	0x1a626331
 8020044:	3dd0b461 	.word	0x3dd0b461
 8020048:	1a600000 	.word	0x1a600000
 802004c:	3dd0b461 	.word	0x3dd0b461
 8020050:	2e037073 	.word	0x2e037073
 8020054:	3ba3198a 	.word	0x3ba3198a
 8020058:	6dc9c883 	.word	0x6dc9c883
 802005c:	3fe45f30 	.word	0x3fe45f30
 8020060:	2e000000 	.word	0x2e000000
 8020064:	3ba3198a 	.word	0x3ba3198a
 8020068:	252049c1 	.word	0x252049c1
 802006c:	397b839a 	.word	0x397b839a
 8020070:	3fe921fb 	.word	0x3fe921fb
 8020074:	4002d97b 	.word	0x4002d97b
 8020078:	3ff921fb 	.word	0x3ff921fb
 802007c:	413921fb 	.word	0x413921fb
 8020080:	3fe00000 	.word	0x3fe00000
 8020084:	08022748 	.word	0x08022748
 8020088:	7fefffff 	.word	0x7fefffff
 802008c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8020090:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8020094:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8020098:	4620      	mov	r0, r4
 802009a:	460d      	mov	r5, r1
 802009c:	f7e0 fd1a 	bl	8000ad4 <__aeabi_d2iz>
 80200a0:	f7e0 f9fe 	bl	80004a0 <__aeabi_i2d>
 80200a4:	4602      	mov	r2, r0
 80200a6:	460b      	mov	r3, r1
 80200a8:	4620      	mov	r0, r4
 80200aa:	4629      	mov	r1, r5
 80200ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80200b0:	f7e0 f8a8 	bl	8000204 <__aeabi_dsub>
 80200b4:	4b21      	ldr	r3, [pc, #132]	; (802013c <__ieee754_rem_pio2+0x404>)
 80200b6:	2200      	movs	r2, #0
 80200b8:	f7e0 fa5c 	bl	8000574 <__aeabi_dmul>
 80200bc:	460d      	mov	r5, r1
 80200be:	4604      	mov	r4, r0
 80200c0:	f7e0 fd08 	bl	8000ad4 <__aeabi_d2iz>
 80200c4:	f7e0 f9ec 	bl	80004a0 <__aeabi_i2d>
 80200c8:	4602      	mov	r2, r0
 80200ca:	460b      	mov	r3, r1
 80200cc:	4620      	mov	r0, r4
 80200ce:	4629      	mov	r1, r5
 80200d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80200d4:	f7e0 f896 	bl	8000204 <__aeabi_dsub>
 80200d8:	4b18      	ldr	r3, [pc, #96]	; (802013c <__ieee754_rem_pio2+0x404>)
 80200da:	2200      	movs	r2, #0
 80200dc:	f7e0 fa4a 	bl	8000574 <__aeabi_dmul>
 80200e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80200e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80200e8:	2703      	movs	r7, #3
 80200ea:	2400      	movs	r4, #0
 80200ec:	2500      	movs	r5, #0
 80200ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80200f2:	4622      	mov	r2, r4
 80200f4:	462b      	mov	r3, r5
 80200f6:	46b9      	mov	r9, r7
 80200f8:	3f01      	subs	r7, #1
 80200fa:	f7e0 fca3 	bl	8000a44 <__aeabi_dcmpeq>
 80200fe:	2800      	cmp	r0, #0
 8020100:	d1f5      	bne.n	80200ee <__ieee754_rem_pio2+0x3b6>
 8020102:	4b0f      	ldr	r3, [pc, #60]	; (8020140 <__ieee754_rem_pio2+0x408>)
 8020104:	9301      	str	r3, [sp, #4]
 8020106:	2302      	movs	r3, #2
 8020108:	9300      	str	r3, [sp, #0]
 802010a:	4632      	mov	r2, r6
 802010c:	464b      	mov	r3, r9
 802010e:	4651      	mov	r1, sl
 8020110:	a804      	add	r0, sp, #16
 8020112:	f000 f8d1 	bl	80202b8 <__kernel_rem_pio2>
 8020116:	9b02      	ldr	r3, [sp, #8]
 8020118:	2b00      	cmp	r3, #0
 802011a:	4683      	mov	fp, r0
 802011c:	f6bf ae4c 	bge.w	801fdb8 <__ieee754_rem_pio2+0x80>
 8020120:	e9da 2100 	ldrd	r2, r1, [sl]
 8020124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020128:	e9ca 2300 	strd	r2, r3, [sl]
 802012c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8020130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020134:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8020138:	e73f      	b.n	801ffba <__ieee754_rem_pio2+0x282>
 802013a:	bf00      	nop
 802013c:	41700000 	.word	0x41700000
 8020140:	080227c8 	.word	0x080227c8

08020144 <fabs>:
 8020144:	ec51 0b10 	vmov	r0, r1, d0
 8020148:	ee10 2a10 	vmov	r2, s0
 802014c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020150:	ec43 2b10 	vmov	d0, r2, r3
 8020154:	4770      	bx	lr
	...

08020158 <scalbn>:
 8020158:	b570      	push	{r4, r5, r6, lr}
 802015a:	ec55 4b10 	vmov	r4, r5, d0
 802015e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020162:	4606      	mov	r6, r0
 8020164:	462b      	mov	r3, r5
 8020166:	b999      	cbnz	r1, 8020190 <scalbn+0x38>
 8020168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802016c:	4323      	orrs	r3, r4
 802016e:	d03f      	beq.n	80201f0 <scalbn+0x98>
 8020170:	4b35      	ldr	r3, [pc, #212]	; (8020248 <scalbn+0xf0>)
 8020172:	4629      	mov	r1, r5
 8020174:	ee10 0a10 	vmov	r0, s0
 8020178:	2200      	movs	r2, #0
 802017a:	f7e0 f9fb 	bl	8000574 <__aeabi_dmul>
 802017e:	4b33      	ldr	r3, [pc, #204]	; (802024c <scalbn+0xf4>)
 8020180:	429e      	cmp	r6, r3
 8020182:	4604      	mov	r4, r0
 8020184:	460d      	mov	r5, r1
 8020186:	da10      	bge.n	80201aa <scalbn+0x52>
 8020188:	a327      	add	r3, pc, #156	; (adr r3, 8020228 <scalbn+0xd0>)
 802018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802018e:	e01f      	b.n	80201d0 <scalbn+0x78>
 8020190:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8020194:	4291      	cmp	r1, r2
 8020196:	d10c      	bne.n	80201b2 <scalbn+0x5a>
 8020198:	ee10 2a10 	vmov	r2, s0
 802019c:	4620      	mov	r0, r4
 802019e:	4629      	mov	r1, r5
 80201a0:	f7e0 f832 	bl	8000208 <__adddf3>
 80201a4:	4604      	mov	r4, r0
 80201a6:	460d      	mov	r5, r1
 80201a8:	e022      	b.n	80201f0 <scalbn+0x98>
 80201aa:	460b      	mov	r3, r1
 80201ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80201b0:	3936      	subs	r1, #54	; 0x36
 80201b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80201b6:	4296      	cmp	r6, r2
 80201b8:	dd0d      	ble.n	80201d6 <scalbn+0x7e>
 80201ba:	2d00      	cmp	r5, #0
 80201bc:	a11c      	add	r1, pc, #112	; (adr r1, 8020230 <scalbn+0xd8>)
 80201be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201c2:	da02      	bge.n	80201ca <scalbn+0x72>
 80201c4:	a11c      	add	r1, pc, #112	; (adr r1, 8020238 <scalbn+0xe0>)
 80201c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80201ca:	a319      	add	r3, pc, #100	; (adr r3, 8020230 <scalbn+0xd8>)
 80201cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201d0:	f7e0 f9d0 	bl	8000574 <__aeabi_dmul>
 80201d4:	e7e6      	b.n	80201a4 <scalbn+0x4c>
 80201d6:	1872      	adds	r2, r6, r1
 80201d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80201dc:	428a      	cmp	r2, r1
 80201de:	dcec      	bgt.n	80201ba <scalbn+0x62>
 80201e0:	2a00      	cmp	r2, #0
 80201e2:	dd08      	ble.n	80201f6 <scalbn+0x9e>
 80201e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80201e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80201ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80201f0:	ec45 4b10 	vmov	d0, r4, r5
 80201f4:	bd70      	pop	{r4, r5, r6, pc}
 80201f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80201fa:	da08      	bge.n	802020e <scalbn+0xb6>
 80201fc:	2d00      	cmp	r5, #0
 80201fe:	a10a      	add	r1, pc, #40	; (adr r1, 8020228 <scalbn+0xd0>)
 8020200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020204:	dac0      	bge.n	8020188 <scalbn+0x30>
 8020206:	a10e      	add	r1, pc, #56	; (adr r1, 8020240 <scalbn+0xe8>)
 8020208:	e9d1 0100 	ldrd	r0, r1, [r1]
 802020c:	e7bc      	b.n	8020188 <scalbn+0x30>
 802020e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020212:	3236      	adds	r2, #54	; 0x36
 8020214:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020218:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802021c:	4620      	mov	r0, r4
 802021e:	4b0c      	ldr	r3, [pc, #48]	; (8020250 <scalbn+0xf8>)
 8020220:	2200      	movs	r2, #0
 8020222:	e7d5      	b.n	80201d0 <scalbn+0x78>
 8020224:	f3af 8000 	nop.w
 8020228:	c2f8f359 	.word	0xc2f8f359
 802022c:	01a56e1f 	.word	0x01a56e1f
 8020230:	8800759c 	.word	0x8800759c
 8020234:	7e37e43c 	.word	0x7e37e43c
 8020238:	8800759c 	.word	0x8800759c
 802023c:	fe37e43c 	.word	0xfe37e43c
 8020240:	c2f8f359 	.word	0xc2f8f359
 8020244:	81a56e1f 	.word	0x81a56e1f
 8020248:	43500000 	.word	0x43500000
 802024c:	ffff3cb0 	.word	0xffff3cb0
 8020250:	3c900000 	.word	0x3c900000

08020254 <with_errno>:
 8020254:	b570      	push	{r4, r5, r6, lr}
 8020256:	4604      	mov	r4, r0
 8020258:	460d      	mov	r5, r1
 802025a:	4616      	mov	r6, r2
 802025c:	f000 fd46 	bl	8020cec <__errno>
 8020260:	4629      	mov	r1, r5
 8020262:	6006      	str	r6, [r0, #0]
 8020264:	4620      	mov	r0, r4
 8020266:	bd70      	pop	{r4, r5, r6, pc}

08020268 <xflow>:
 8020268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802026a:	4614      	mov	r4, r2
 802026c:	461d      	mov	r5, r3
 802026e:	b108      	cbz	r0, 8020274 <xflow+0xc>
 8020270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020274:	e9cd 2300 	strd	r2, r3, [sp]
 8020278:	e9dd 2300 	ldrd	r2, r3, [sp]
 802027c:	4620      	mov	r0, r4
 802027e:	4629      	mov	r1, r5
 8020280:	f7e0 f978 	bl	8000574 <__aeabi_dmul>
 8020284:	2222      	movs	r2, #34	; 0x22
 8020286:	b003      	add	sp, #12
 8020288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802028c:	f7ff bfe2 	b.w	8020254 <with_errno>

08020290 <__math_uflow>:
 8020290:	b508      	push	{r3, lr}
 8020292:	2200      	movs	r2, #0
 8020294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8020298:	f7ff ffe6 	bl	8020268 <xflow>
 802029c:	ec41 0b10 	vmov	d0, r0, r1
 80202a0:	bd08      	pop	{r3, pc}

080202a2 <__math_oflow>:
 80202a2:	b508      	push	{r3, lr}
 80202a4:	2200      	movs	r2, #0
 80202a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80202aa:	f7ff ffdd 	bl	8020268 <xflow>
 80202ae:	ec41 0b10 	vmov	d0, r0, r1
 80202b2:	bd08      	pop	{r3, pc}
 80202b4:	0000      	movs	r0, r0
	...

080202b8 <__kernel_rem_pio2>:
 80202b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202bc:	ed2d 8b02 	vpush	{d8}
 80202c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80202c4:	f112 0f14 	cmn.w	r2, #20
 80202c8:	9306      	str	r3, [sp, #24]
 80202ca:	9104      	str	r1, [sp, #16]
 80202cc:	4bc2      	ldr	r3, [pc, #776]	; (80205d8 <__kernel_rem_pio2+0x320>)
 80202ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80202d0:	9009      	str	r0, [sp, #36]	; 0x24
 80202d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80202d6:	9300      	str	r3, [sp, #0]
 80202d8:	9b06      	ldr	r3, [sp, #24]
 80202da:	f103 33ff 	add.w	r3, r3, #4294967295
 80202de:	bfa8      	it	ge
 80202e0:	1ed4      	subge	r4, r2, #3
 80202e2:	9305      	str	r3, [sp, #20]
 80202e4:	bfb2      	itee	lt
 80202e6:	2400      	movlt	r4, #0
 80202e8:	2318      	movge	r3, #24
 80202ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80202ee:	f06f 0317 	mvn.w	r3, #23
 80202f2:	fb04 3303 	mla	r3, r4, r3, r3
 80202f6:	eb03 0a02 	add.w	sl, r3, r2
 80202fa:	9b00      	ldr	r3, [sp, #0]
 80202fc:	9a05      	ldr	r2, [sp, #20]
 80202fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80205c8 <__kernel_rem_pio2+0x310>
 8020302:	eb03 0802 	add.w	r8, r3, r2
 8020306:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8020308:	1aa7      	subs	r7, r4, r2
 802030a:	ae20      	add	r6, sp, #128	; 0x80
 802030c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8020310:	2500      	movs	r5, #0
 8020312:	4545      	cmp	r5, r8
 8020314:	dd13      	ble.n	802033e <__kernel_rem_pio2+0x86>
 8020316:	9b06      	ldr	r3, [sp, #24]
 8020318:	aa20      	add	r2, sp, #128	; 0x80
 802031a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802031e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8020322:	f04f 0800 	mov.w	r8, #0
 8020326:	9b00      	ldr	r3, [sp, #0]
 8020328:	4598      	cmp	r8, r3
 802032a:	dc31      	bgt.n	8020390 <__kernel_rem_pio2+0xd8>
 802032c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80205c8 <__kernel_rem_pio2+0x310>
 8020330:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020334:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020338:	462f      	mov	r7, r5
 802033a:	2600      	movs	r6, #0
 802033c:	e01b      	b.n	8020376 <__kernel_rem_pio2+0xbe>
 802033e:	42ef      	cmn	r7, r5
 8020340:	d407      	bmi.n	8020352 <__kernel_rem_pio2+0x9a>
 8020342:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8020346:	f7e0 f8ab 	bl	80004a0 <__aeabi_i2d>
 802034a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802034e:	3501      	adds	r5, #1
 8020350:	e7df      	b.n	8020312 <__kernel_rem_pio2+0x5a>
 8020352:	ec51 0b18 	vmov	r0, r1, d8
 8020356:	e7f8      	b.n	802034a <__kernel_rem_pio2+0x92>
 8020358:	e9d7 2300 	ldrd	r2, r3, [r7]
 802035c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8020360:	f7e0 f908 	bl	8000574 <__aeabi_dmul>
 8020364:	4602      	mov	r2, r0
 8020366:	460b      	mov	r3, r1
 8020368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802036c:	f7df ff4c 	bl	8000208 <__adddf3>
 8020370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020374:	3601      	adds	r6, #1
 8020376:	9b05      	ldr	r3, [sp, #20]
 8020378:	429e      	cmp	r6, r3
 802037a:	f1a7 0708 	sub.w	r7, r7, #8
 802037e:	ddeb      	ble.n	8020358 <__kernel_rem_pio2+0xa0>
 8020380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020384:	f108 0801 	add.w	r8, r8, #1
 8020388:	ecab 7b02 	vstmia	fp!, {d7}
 802038c:	3508      	adds	r5, #8
 802038e:	e7ca      	b.n	8020326 <__kernel_rem_pio2+0x6e>
 8020390:	9b00      	ldr	r3, [sp, #0]
 8020392:	aa0c      	add	r2, sp, #48	; 0x30
 8020394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020398:	930b      	str	r3, [sp, #44]	; 0x2c
 802039a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802039c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80203a0:	9c00      	ldr	r4, [sp, #0]
 80203a2:	930a      	str	r3, [sp, #40]	; 0x28
 80203a4:	00e3      	lsls	r3, r4, #3
 80203a6:	9308      	str	r3, [sp, #32]
 80203a8:	ab98      	add	r3, sp, #608	; 0x260
 80203aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80203ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80203b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80203b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80203b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80203bc:	46c3      	mov	fp, r8
 80203be:	46a1      	mov	r9, r4
 80203c0:	f1b9 0f00 	cmp.w	r9, #0
 80203c4:	f1a5 0508 	sub.w	r5, r5, #8
 80203c8:	dc77      	bgt.n	80204ba <__kernel_rem_pio2+0x202>
 80203ca:	ec47 6b10 	vmov	d0, r6, r7
 80203ce:	4650      	mov	r0, sl
 80203d0:	f7ff fec2 	bl	8020158 <scalbn>
 80203d4:	ec57 6b10 	vmov	r6, r7, d0
 80203d8:	2200      	movs	r2, #0
 80203da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80203de:	ee10 0a10 	vmov	r0, s0
 80203e2:	4639      	mov	r1, r7
 80203e4:	f7e0 f8c6 	bl	8000574 <__aeabi_dmul>
 80203e8:	ec41 0b10 	vmov	d0, r0, r1
 80203ec:	f000 fab4 	bl	8020958 <floor>
 80203f0:	4b7a      	ldr	r3, [pc, #488]	; (80205dc <__kernel_rem_pio2+0x324>)
 80203f2:	ec51 0b10 	vmov	r0, r1, d0
 80203f6:	2200      	movs	r2, #0
 80203f8:	f7e0 f8bc 	bl	8000574 <__aeabi_dmul>
 80203fc:	4602      	mov	r2, r0
 80203fe:	460b      	mov	r3, r1
 8020400:	4630      	mov	r0, r6
 8020402:	4639      	mov	r1, r7
 8020404:	f7df fefe 	bl	8000204 <__aeabi_dsub>
 8020408:	460f      	mov	r7, r1
 802040a:	4606      	mov	r6, r0
 802040c:	f7e0 fb62 	bl	8000ad4 <__aeabi_d2iz>
 8020410:	9002      	str	r0, [sp, #8]
 8020412:	f7e0 f845 	bl	80004a0 <__aeabi_i2d>
 8020416:	4602      	mov	r2, r0
 8020418:	460b      	mov	r3, r1
 802041a:	4630      	mov	r0, r6
 802041c:	4639      	mov	r1, r7
 802041e:	f7df fef1 	bl	8000204 <__aeabi_dsub>
 8020422:	f1ba 0f00 	cmp.w	sl, #0
 8020426:	4606      	mov	r6, r0
 8020428:	460f      	mov	r7, r1
 802042a:	dd6d      	ble.n	8020508 <__kernel_rem_pio2+0x250>
 802042c:	1e61      	subs	r1, r4, #1
 802042e:	ab0c      	add	r3, sp, #48	; 0x30
 8020430:	9d02      	ldr	r5, [sp, #8]
 8020432:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020436:	f1ca 0018 	rsb	r0, sl, #24
 802043a:	fa43 f200 	asr.w	r2, r3, r0
 802043e:	4415      	add	r5, r2
 8020440:	4082      	lsls	r2, r0
 8020442:	1a9b      	subs	r3, r3, r2
 8020444:	aa0c      	add	r2, sp, #48	; 0x30
 8020446:	9502      	str	r5, [sp, #8]
 8020448:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 802044c:	f1ca 0217 	rsb	r2, sl, #23
 8020450:	fa43 fb02 	asr.w	fp, r3, r2
 8020454:	f1bb 0f00 	cmp.w	fp, #0
 8020458:	dd65      	ble.n	8020526 <__kernel_rem_pio2+0x26e>
 802045a:	9b02      	ldr	r3, [sp, #8]
 802045c:	2200      	movs	r2, #0
 802045e:	3301      	adds	r3, #1
 8020460:	9302      	str	r3, [sp, #8]
 8020462:	4615      	mov	r5, r2
 8020464:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8020468:	4294      	cmp	r4, r2
 802046a:	f300 809f 	bgt.w	80205ac <__kernel_rem_pio2+0x2f4>
 802046e:	f1ba 0f00 	cmp.w	sl, #0
 8020472:	dd07      	ble.n	8020484 <__kernel_rem_pio2+0x1cc>
 8020474:	f1ba 0f01 	cmp.w	sl, #1
 8020478:	f000 80c1 	beq.w	80205fe <__kernel_rem_pio2+0x346>
 802047c:	f1ba 0f02 	cmp.w	sl, #2
 8020480:	f000 80c7 	beq.w	8020612 <__kernel_rem_pio2+0x35a>
 8020484:	f1bb 0f02 	cmp.w	fp, #2
 8020488:	d14d      	bne.n	8020526 <__kernel_rem_pio2+0x26e>
 802048a:	4632      	mov	r2, r6
 802048c:	463b      	mov	r3, r7
 802048e:	4954      	ldr	r1, [pc, #336]	; (80205e0 <__kernel_rem_pio2+0x328>)
 8020490:	2000      	movs	r0, #0
 8020492:	f7df feb7 	bl	8000204 <__aeabi_dsub>
 8020496:	4606      	mov	r6, r0
 8020498:	460f      	mov	r7, r1
 802049a:	2d00      	cmp	r5, #0
 802049c:	d043      	beq.n	8020526 <__kernel_rem_pio2+0x26e>
 802049e:	4650      	mov	r0, sl
 80204a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80205d0 <__kernel_rem_pio2+0x318>
 80204a4:	f7ff fe58 	bl	8020158 <scalbn>
 80204a8:	4630      	mov	r0, r6
 80204aa:	4639      	mov	r1, r7
 80204ac:	ec53 2b10 	vmov	r2, r3, d0
 80204b0:	f7df fea8 	bl	8000204 <__aeabi_dsub>
 80204b4:	4606      	mov	r6, r0
 80204b6:	460f      	mov	r7, r1
 80204b8:	e035      	b.n	8020526 <__kernel_rem_pio2+0x26e>
 80204ba:	4b4a      	ldr	r3, [pc, #296]	; (80205e4 <__kernel_rem_pio2+0x32c>)
 80204bc:	2200      	movs	r2, #0
 80204be:	4630      	mov	r0, r6
 80204c0:	4639      	mov	r1, r7
 80204c2:	f7e0 f857 	bl	8000574 <__aeabi_dmul>
 80204c6:	f7e0 fb05 	bl	8000ad4 <__aeabi_d2iz>
 80204ca:	f7df ffe9 	bl	80004a0 <__aeabi_i2d>
 80204ce:	4602      	mov	r2, r0
 80204d0:	460b      	mov	r3, r1
 80204d2:	ec43 2b18 	vmov	d8, r2, r3
 80204d6:	4b44      	ldr	r3, [pc, #272]	; (80205e8 <__kernel_rem_pio2+0x330>)
 80204d8:	2200      	movs	r2, #0
 80204da:	f7e0 f84b 	bl	8000574 <__aeabi_dmul>
 80204de:	4602      	mov	r2, r0
 80204e0:	460b      	mov	r3, r1
 80204e2:	4630      	mov	r0, r6
 80204e4:	4639      	mov	r1, r7
 80204e6:	f7df fe8d 	bl	8000204 <__aeabi_dsub>
 80204ea:	f7e0 faf3 	bl	8000ad4 <__aeabi_d2iz>
 80204ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80204f2:	f84b 0b04 	str.w	r0, [fp], #4
 80204f6:	ec51 0b18 	vmov	r0, r1, d8
 80204fa:	f7df fe85 	bl	8000208 <__adddf3>
 80204fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8020502:	4606      	mov	r6, r0
 8020504:	460f      	mov	r7, r1
 8020506:	e75b      	b.n	80203c0 <__kernel_rem_pio2+0x108>
 8020508:	d106      	bne.n	8020518 <__kernel_rem_pio2+0x260>
 802050a:	1e63      	subs	r3, r4, #1
 802050c:	aa0c      	add	r2, sp, #48	; 0x30
 802050e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020512:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8020516:	e79d      	b.n	8020454 <__kernel_rem_pio2+0x19c>
 8020518:	4b34      	ldr	r3, [pc, #208]	; (80205ec <__kernel_rem_pio2+0x334>)
 802051a:	2200      	movs	r2, #0
 802051c:	f7e0 fab0 	bl	8000a80 <__aeabi_dcmpge>
 8020520:	2800      	cmp	r0, #0
 8020522:	d140      	bne.n	80205a6 <__kernel_rem_pio2+0x2ee>
 8020524:	4683      	mov	fp, r0
 8020526:	2200      	movs	r2, #0
 8020528:	2300      	movs	r3, #0
 802052a:	4630      	mov	r0, r6
 802052c:	4639      	mov	r1, r7
 802052e:	f7e0 fa89 	bl	8000a44 <__aeabi_dcmpeq>
 8020532:	2800      	cmp	r0, #0
 8020534:	f000 80c1 	beq.w	80206ba <__kernel_rem_pio2+0x402>
 8020538:	1e65      	subs	r5, r4, #1
 802053a:	462b      	mov	r3, r5
 802053c:	2200      	movs	r2, #0
 802053e:	9900      	ldr	r1, [sp, #0]
 8020540:	428b      	cmp	r3, r1
 8020542:	da6d      	bge.n	8020620 <__kernel_rem_pio2+0x368>
 8020544:	2a00      	cmp	r2, #0
 8020546:	f000 808a 	beq.w	802065e <__kernel_rem_pio2+0x3a6>
 802054a:	ab0c      	add	r3, sp, #48	; 0x30
 802054c:	f1aa 0a18 	sub.w	sl, sl, #24
 8020550:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8020554:	2b00      	cmp	r3, #0
 8020556:	f000 80ae 	beq.w	80206b6 <__kernel_rem_pio2+0x3fe>
 802055a:	4650      	mov	r0, sl
 802055c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80205d0 <__kernel_rem_pio2+0x318>
 8020560:	f7ff fdfa 	bl	8020158 <scalbn>
 8020564:	1c6b      	adds	r3, r5, #1
 8020566:	00da      	lsls	r2, r3, #3
 8020568:	9205      	str	r2, [sp, #20]
 802056a:	ec57 6b10 	vmov	r6, r7, d0
 802056e:	aa70      	add	r2, sp, #448	; 0x1c0
 8020570:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80205e4 <__kernel_rem_pio2+0x32c>
 8020574:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8020578:	462c      	mov	r4, r5
 802057a:	f04f 0800 	mov.w	r8, #0
 802057e:	2c00      	cmp	r4, #0
 8020580:	f280 80d4 	bge.w	802072c <__kernel_rem_pio2+0x474>
 8020584:	462c      	mov	r4, r5
 8020586:	2c00      	cmp	r4, #0
 8020588:	f2c0 8102 	blt.w	8020790 <__kernel_rem_pio2+0x4d8>
 802058c:	4b18      	ldr	r3, [pc, #96]	; (80205f0 <__kernel_rem_pio2+0x338>)
 802058e:	461e      	mov	r6, r3
 8020590:	ab70      	add	r3, sp, #448	; 0x1c0
 8020592:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8020596:	1b2b      	subs	r3, r5, r4
 8020598:	f04f 0900 	mov.w	r9, #0
 802059c:	f04f 0a00 	mov.w	sl, #0
 80205a0:	2700      	movs	r7, #0
 80205a2:	9306      	str	r3, [sp, #24]
 80205a4:	e0e6      	b.n	8020774 <__kernel_rem_pio2+0x4bc>
 80205a6:	f04f 0b02 	mov.w	fp, #2
 80205aa:	e756      	b.n	802045a <__kernel_rem_pio2+0x1a2>
 80205ac:	f8d8 3000 	ldr.w	r3, [r8]
 80205b0:	bb05      	cbnz	r5, 80205f4 <__kernel_rem_pio2+0x33c>
 80205b2:	b123      	cbz	r3, 80205be <__kernel_rem_pio2+0x306>
 80205b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80205b8:	f8c8 3000 	str.w	r3, [r8]
 80205bc:	2301      	movs	r3, #1
 80205be:	3201      	adds	r2, #1
 80205c0:	f108 0804 	add.w	r8, r8, #4
 80205c4:	461d      	mov	r5, r3
 80205c6:	e74f      	b.n	8020468 <__kernel_rem_pio2+0x1b0>
	...
 80205d4:	3ff00000 	.word	0x3ff00000
 80205d8:	08022910 	.word	0x08022910
 80205dc:	40200000 	.word	0x40200000
 80205e0:	3ff00000 	.word	0x3ff00000
 80205e4:	3e700000 	.word	0x3e700000
 80205e8:	41700000 	.word	0x41700000
 80205ec:	3fe00000 	.word	0x3fe00000
 80205f0:	080228d0 	.word	0x080228d0
 80205f4:	1acb      	subs	r3, r1, r3
 80205f6:	f8c8 3000 	str.w	r3, [r8]
 80205fa:	462b      	mov	r3, r5
 80205fc:	e7df      	b.n	80205be <__kernel_rem_pio2+0x306>
 80205fe:	1e62      	subs	r2, r4, #1
 8020600:	ab0c      	add	r3, sp, #48	; 0x30
 8020602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020606:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802060a:	a90c      	add	r1, sp, #48	; 0x30
 802060c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8020610:	e738      	b.n	8020484 <__kernel_rem_pio2+0x1cc>
 8020612:	1e62      	subs	r2, r4, #1
 8020614:	ab0c      	add	r3, sp, #48	; 0x30
 8020616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802061a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802061e:	e7f4      	b.n	802060a <__kernel_rem_pio2+0x352>
 8020620:	a90c      	add	r1, sp, #48	; 0x30
 8020622:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8020626:	3b01      	subs	r3, #1
 8020628:	430a      	orrs	r2, r1
 802062a:	e788      	b.n	802053e <__kernel_rem_pio2+0x286>
 802062c:	3301      	adds	r3, #1
 802062e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8020632:	2900      	cmp	r1, #0
 8020634:	d0fa      	beq.n	802062c <__kernel_rem_pio2+0x374>
 8020636:	9a08      	ldr	r2, [sp, #32]
 8020638:	f502 7218 	add.w	r2, r2, #608	; 0x260
 802063c:	446a      	add	r2, sp
 802063e:	3a98      	subs	r2, #152	; 0x98
 8020640:	9208      	str	r2, [sp, #32]
 8020642:	9a06      	ldr	r2, [sp, #24]
 8020644:	a920      	add	r1, sp, #128	; 0x80
 8020646:	18a2      	adds	r2, r4, r2
 8020648:	18e3      	adds	r3, r4, r3
 802064a:	f104 0801 	add.w	r8, r4, #1
 802064e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8020652:	9302      	str	r3, [sp, #8]
 8020654:	9b02      	ldr	r3, [sp, #8]
 8020656:	4543      	cmp	r3, r8
 8020658:	da04      	bge.n	8020664 <__kernel_rem_pio2+0x3ac>
 802065a:	461c      	mov	r4, r3
 802065c:	e6a2      	b.n	80203a4 <__kernel_rem_pio2+0xec>
 802065e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020660:	2301      	movs	r3, #1
 8020662:	e7e4      	b.n	802062e <__kernel_rem_pio2+0x376>
 8020664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020666:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802066a:	f7df ff19 	bl	80004a0 <__aeabi_i2d>
 802066e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8020672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020674:	46ab      	mov	fp, r5
 8020676:	461c      	mov	r4, r3
 8020678:	f04f 0900 	mov.w	r9, #0
 802067c:	2600      	movs	r6, #0
 802067e:	2700      	movs	r7, #0
 8020680:	9b05      	ldr	r3, [sp, #20]
 8020682:	4599      	cmp	r9, r3
 8020684:	dd06      	ble.n	8020694 <__kernel_rem_pio2+0x3dc>
 8020686:	9b08      	ldr	r3, [sp, #32]
 8020688:	e8e3 6702 	strd	r6, r7, [r3], #8
 802068c:	f108 0801 	add.w	r8, r8, #1
 8020690:	9308      	str	r3, [sp, #32]
 8020692:	e7df      	b.n	8020654 <__kernel_rem_pio2+0x39c>
 8020694:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8020698:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802069c:	f7df ff6a 	bl	8000574 <__aeabi_dmul>
 80206a0:	4602      	mov	r2, r0
 80206a2:	460b      	mov	r3, r1
 80206a4:	4630      	mov	r0, r6
 80206a6:	4639      	mov	r1, r7
 80206a8:	f7df fdae 	bl	8000208 <__adddf3>
 80206ac:	f109 0901 	add.w	r9, r9, #1
 80206b0:	4606      	mov	r6, r0
 80206b2:	460f      	mov	r7, r1
 80206b4:	e7e4      	b.n	8020680 <__kernel_rem_pio2+0x3c8>
 80206b6:	3d01      	subs	r5, #1
 80206b8:	e747      	b.n	802054a <__kernel_rem_pio2+0x292>
 80206ba:	ec47 6b10 	vmov	d0, r6, r7
 80206be:	f1ca 0000 	rsb	r0, sl, #0
 80206c2:	f7ff fd49 	bl	8020158 <scalbn>
 80206c6:	ec57 6b10 	vmov	r6, r7, d0
 80206ca:	4ba0      	ldr	r3, [pc, #640]	; (802094c <__kernel_rem_pio2+0x694>)
 80206cc:	ee10 0a10 	vmov	r0, s0
 80206d0:	2200      	movs	r2, #0
 80206d2:	4639      	mov	r1, r7
 80206d4:	f7e0 f9d4 	bl	8000a80 <__aeabi_dcmpge>
 80206d8:	b1f8      	cbz	r0, 802071a <__kernel_rem_pio2+0x462>
 80206da:	4b9d      	ldr	r3, [pc, #628]	; (8020950 <__kernel_rem_pio2+0x698>)
 80206dc:	2200      	movs	r2, #0
 80206de:	4630      	mov	r0, r6
 80206e0:	4639      	mov	r1, r7
 80206e2:	f7df ff47 	bl	8000574 <__aeabi_dmul>
 80206e6:	f7e0 f9f5 	bl	8000ad4 <__aeabi_d2iz>
 80206ea:	4680      	mov	r8, r0
 80206ec:	f7df fed8 	bl	80004a0 <__aeabi_i2d>
 80206f0:	4b96      	ldr	r3, [pc, #600]	; (802094c <__kernel_rem_pio2+0x694>)
 80206f2:	2200      	movs	r2, #0
 80206f4:	f7df ff3e 	bl	8000574 <__aeabi_dmul>
 80206f8:	460b      	mov	r3, r1
 80206fa:	4602      	mov	r2, r0
 80206fc:	4639      	mov	r1, r7
 80206fe:	4630      	mov	r0, r6
 8020700:	f7df fd80 	bl	8000204 <__aeabi_dsub>
 8020704:	f7e0 f9e6 	bl	8000ad4 <__aeabi_d2iz>
 8020708:	1c65      	adds	r5, r4, #1
 802070a:	ab0c      	add	r3, sp, #48	; 0x30
 802070c:	f10a 0a18 	add.w	sl, sl, #24
 8020710:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020714:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8020718:	e71f      	b.n	802055a <__kernel_rem_pio2+0x2a2>
 802071a:	4630      	mov	r0, r6
 802071c:	4639      	mov	r1, r7
 802071e:	f7e0 f9d9 	bl	8000ad4 <__aeabi_d2iz>
 8020722:	ab0c      	add	r3, sp, #48	; 0x30
 8020724:	4625      	mov	r5, r4
 8020726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802072a:	e716      	b.n	802055a <__kernel_rem_pio2+0x2a2>
 802072c:	ab0c      	add	r3, sp, #48	; 0x30
 802072e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020732:	f7df feb5 	bl	80004a0 <__aeabi_i2d>
 8020736:	4632      	mov	r2, r6
 8020738:	463b      	mov	r3, r7
 802073a:	f7df ff1b 	bl	8000574 <__aeabi_dmul>
 802073e:	4642      	mov	r2, r8
 8020740:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8020744:	464b      	mov	r3, r9
 8020746:	4630      	mov	r0, r6
 8020748:	4639      	mov	r1, r7
 802074a:	f7df ff13 	bl	8000574 <__aeabi_dmul>
 802074e:	3c01      	subs	r4, #1
 8020750:	4606      	mov	r6, r0
 8020752:	460f      	mov	r7, r1
 8020754:	e713      	b.n	802057e <__kernel_rem_pio2+0x2c6>
 8020756:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 802075a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 802075e:	f7df ff09 	bl	8000574 <__aeabi_dmul>
 8020762:	4602      	mov	r2, r0
 8020764:	460b      	mov	r3, r1
 8020766:	4648      	mov	r0, r9
 8020768:	4651      	mov	r1, sl
 802076a:	f7df fd4d 	bl	8000208 <__adddf3>
 802076e:	3701      	adds	r7, #1
 8020770:	4681      	mov	r9, r0
 8020772:	468a      	mov	sl, r1
 8020774:	9b00      	ldr	r3, [sp, #0]
 8020776:	429f      	cmp	r7, r3
 8020778:	dc02      	bgt.n	8020780 <__kernel_rem_pio2+0x4c8>
 802077a:	9b06      	ldr	r3, [sp, #24]
 802077c:	429f      	cmp	r7, r3
 802077e:	ddea      	ble.n	8020756 <__kernel_rem_pio2+0x49e>
 8020780:	9a06      	ldr	r2, [sp, #24]
 8020782:	ab48      	add	r3, sp, #288	; 0x120
 8020784:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8020788:	e9c6 9a00 	strd	r9, sl, [r6]
 802078c:	3c01      	subs	r4, #1
 802078e:	e6fa      	b.n	8020586 <__kernel_rem_pio2+0x2ce>
 8020790:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8020792:	2b02      	cmp	r3, #2
 8020794:	dc0b      	bgt.n	80207ae <__kernel_rem_pio2+0x4f6>
 8020796:	2b00      	cmp	r3, #0
 8020798:	dc39      	bgt.n	802080e <__kernel_rem_pio2+0x556>
 802079a:	d05d      	beq.n	8020858 <__kernel_rem_pio2+0x5a0>
 802079c:	9b02      	ldr	r3, [sp, #8]
 802079e:	f003 0007 	and.w	r0, r3, #7
 80207a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80207a6:	ecbd 8b02 	vpop	{d8}
 80207aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80207b0:	2b03      	cmp	r3, #3
 80207b2:	d1f3      	bne.n	802079c <__kernel_rem_pio2+0x4e4>
 80207b4:	9b05      	ldr	r3, [sp, #20]
 80207b6:	9500      	str	r5, [sp, #0]
 80207b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80207bc:	eb0d 0403 	add.w	r4, sp, r3
 80207c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80207c4:	46a2      	mov	sl, r4
 80207c6:	9b00      	ldr	r3, [sp, #0]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80207ce:	dc69      	bgt.n	80208a4 <__kernel_rem_pio2+0x5ec>
 80207d0:	46aa      	mov	sl, r5
 80207d2:	f1ba 0f01 	cmp.w	sl, #1
 80207d6:	f1a4 0408 	sub.w	r4, r4, #8
 80207da:	f300 8083 	bgt.w	80208e4 <__kernel_rem_pio2+0x62c>
 80207de:	9c05      	ldr	r4, [sp, #20]
 80207e0:	ab48      	add	r3, sp, #288	; 0x120
 80207e2:	441c      	add	r4, r3
 80207e4:	2000      	movs	r0, #0
 80207e6:	2100      	movs	r1, #0
 80207e8:	2d01      	cmp	r5, #1
 80207ea:	f300 809a 	bgt.w	8020922 <__kernel_rem_pio2+0x66a>
 80207ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80207f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80207f6:	f1bb 0f00 	cmp.w	fp, #0
 80207fa:	f040 8098 	bne.w	802092e <__kernel_rem_pio2+0x676>
 80207fe:	9b04      	ldr	r3, [sp, #16]
 8020800:	e9c3 7800 	strd	r7, r8, [r3]
 8020804:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8020808:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802080c:	e7c6      	b.n	802079c <__kernel_rem_pio2+0x4e4>
 802080e:	9e05      	ldr	r6, [sp, #20]
 8020810:	ab48      	add	r3, sp, #288	; 0x120
 8020812:	441e      	add	r6, r3
 8020814:	462c      	mov	r4, r5
 8020816:	2000      	movs	r0, #0
 8020818:	2100      	movs	r1, #0
 802081a:	2c00      	cmp	r4, #0
 802081c:	da33      	bge.n	8020886 <__kernel_rem_pio2+0x5ce>
 802081e:	f1bb 0f00 	cmp.w	fp, #0
 8020822:	d036      	beq.n	8020892 <__kernel_rem_pio2+0x5da>
 8020824:	4602      	mov	r2, r0
 8020826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802082a:	9c04      	ldr	r4, [sp, #16]
 802082c:	e9c4 2300 	strd	r2, r3, [r4]
 8020830:	4602      	mov	r2, r0
 8020832:	460b      	mov	r3, r1
 8020834:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8020838:	f7df fce4 	bl	8000204 <__aeabi_dsub>
 802083c:	ae4a      	add	r6, sp, #296	; 0x128
 802083e:	2401      	movs	r4, #1
 8020840:	42a5      	cmp	r5, r4
 8020842:	da29      	bge.n	8020898 <__kernel_rem_pio2+0x5e0>
 8020844:	f1bb 0f00 	cmp.w	fp, #0
 8020848:	d002      	beq.n	8020850 <__kernel_rem_pio2+0x598>
 802084a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802084e:	4619      	mov	r1, r3
 8020850:	9b04      	ldr	r3, [sp, #16]
 8020852:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8020856:	e7a1      	b.n	802079c <__kernel_rem_pio2+0x4e4>
 8020858:	9c05      	ldr	r4, [sp, #20]
 802085a:	ab48      	add	r3, sp, #288	; 0x120
 802085c:	441c      	add	r4, r3
 802085e:	2000      	movs	r0, #0
 8020860:	2100      	movs	r1, #0
 8020862:	2d00      	cmp	r5, #0
 8020864:	da09      	bge.n	802087a <__kernel_rem_pio2+0x5c2>
 8020866:	f1bb 0f00 	cmp.w	fp, #0
 802086a:	d002      	beq.n	8020872 <__kernel_rem_pio2+0x5ba>
 802086c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020870:	4619      	mov	r1, r3
 8020872:	9b04      	ldr	r3, [sp, #16]
 8020874:	e9c3 0100 	strd	r0, r1, [r3]
 8020878:	e790      	b.n	802079c <__kernel_rem_pio2+0x4e4>
 802087a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802087e:	f7df fcc3 	bl	8000208 <__adddf3>
 8020882:	3d01      	subs	r5, #1
 8020884:	e7ed      	b.n	8020862 <__kernel_rem_pio2+0x5aa>
 8020886:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 802088a:	f7df fcbd 	bl	8000208 <__adddf3>
 802088e:	3c01      	subs	r4, #1
 8020890:	e7c3      	b.n	802081a <__kernel_rem_pio2+0x562>
 8020892:	4602      	mov	r2, r0
 8020894:	460b      	mov	r3, r1
 8020896:	e7c8      	b.n	802082a <__kernel_rem_pio2+0x572>
 8020898:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802089c:	f7df fcb4 	bl	8000208 <__adddf3>
 80208a0:	3401      	adds	r4, #1
 80208a2:	e7cd      	b.n	8020840 <__kernel_rem_pio2+0x588>
 80208a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80208a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80208ac:	9b00      	ldr	r3, [sp, #0]
 80208ae:	3b01      	subs	r3, #1
 80208b0:	9300      	str	r3, [sp, #0]
 80208b2:	4632      	mov	r2, r6
 80208b4:	463b      	mov	r3, r7
 80208b6:	4640      	mov	r0, r8
 80208b8:	4649      	mov	r1, r9
 80208ba:	f7df fca5 	bl	8000208 <__adddf3>
 80208be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80208c2:	4602      	mov	r2, r0
 80208c4:	460b      	mov	r3, r1
 80208c6:	4640      	mov	r0, r8
 80208c8:	4649      	mov	r1, r9
 80208ca:	f7df fc9b 	bl	8000204 <__aeabi_dsub>
 80208ce:	4632      	mov	r2, r6
 80208d0:	463b      	mov	r3, r7
 80208d2:	f7df fc99 	bl	8000208 <__adddf3>
 80208d6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80208da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80208de:	ed8a 7b00 	vstr	d7, [sl]
 80208e2:	e770      	b.n	80207c6 <__kernel_rem_pio2+0x50e>
 80208e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80208e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80208ec:	4640      	mov	r0, r8
 80208ee:	4632      	mov	r2, r6
 80208f0:	463b      	mov	r3, r7
 80208f2:	4649      	mov	r1, r9
 80208f4:	f7df fc88 	bl	8000208 <__adddf3>
 80208f8:	e9cd 0100 	strd	r0, r1, [sp]
 80208fc:	4602      	mov	r2, r0
 80208fe:	460b      	mov	r3, r1
 8020900:	4640      	mov	r0, r8
 8020902:	4649      	mov	r1, r9
 8020904:	f7df fc7e 	bl	8000204 <__aeabi_dsub>
 8020908:	4632      	mov	r2, r6
 802090a:	463b      	mov	r3, r7
 802090c:	f7df fc7c 	bl	8000208 <__adddf3>
 8020910:	ed9d 7b00 	vldr	d7, [sp]
 8020914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8020918:	ed84 7b00 	vstr	d7, [r4]
 802091c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020920:	e757      	b.n	80207d2 <__kernel_rem_pio2+0x51a>
 8020922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8020926:	f7df fc6f 	bl	8000208 <__adddf3>
 802092a:	3d01      	subs	r5, #1
 802092c:	e75c      	b.n	80207e8 <__kernel_rem_pio2+0x530>
 802092e:	9b04      	ldr	r3, [sp, #16]
 8020930:	9a04      	ldr	r2, [sp, #16]
 8020932:	601f      	str	r7, [r3, #0]
 8020934:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8020938:	605c      	str	r4, [r3, #4]
 802093a:	609d      	str	r5, [r3, #8]
 802093c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8020940:	60d3      	str	r3, [r2, #12]
 8020942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020946:	6110      	str	r0, [r2, #16]
 8020948:	6153      	str	r3, [r2, #20]
 802094a:	e727      	b.n	802079c <__kernel_rem_pio2+0x4e4>
 802094c:	41700000 	.word	0x41700000
 8020950:	3e700000 	.word	0x3e700000
 8020954:	00000000 	.word	0x00000000

08020958 <floor>:
 8020958:	ec51 0b10 	vmov	r0, r1, d0
 802095c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8020960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020964:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8020968:	2e13      	cmp	r6, #19
 802096a:	ee10 5a10 	vmov	r5, s0
 802096e:	ee10 8a10 	vmov	r8, s0
 8020972:	460c      	mov	r4, r1
 8020974:	dc31      	bgt.n	80209da <floor+0x82>
 8020976:	2e00      	cmp	r6, #0
 8020978:	da14      	bge.n	80209a4 <floor+0x4c>
 802097a:	a333      	add	r3, pc, #204	; (adr r3, 8020a48 <floor+0xf0>)
 802097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020980:	f7df fc42 	bl	8000208 <__adddf3>
 8020984:	2200      	movs	r2, #0
 8020986:	2300      	movs	r3, #0
 8020988:	f7e0 f884 	bl	8000a94 <__aeabi_dcmpgt>
 802098c:	b138      	cbz	r0, 802099e <floor+0x46>
 802098e:	2c00      	cmp	r4, #0
 8020990:	da53      	bge.n	8020a3a <floor+0xe2>
 8020992:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8020996:	4325      	orrs	r5, r4
 8020998:	d052      	beq.n	8020a40 <floor+0xe8>
 802099a:	4c2d      	ldr	r4, [pc, #180]	; (8020a50 <floor+0xf8>)
 802099c:	2500      	movs	r5, #0
 802099e:	4621      	mov	r1, r4
 80209a0:	4628      	mov	r0, r5
 80209a2:	e024      	b.n	80209ee <floor+0x96>
 80209a4:	4f2b      	ldr	r7, [pc, #172]	; (8020a54 <floor+0xfc>)
 80209a6:	4137      	asrs	r7, r6
 80209a8:	ea01 0307 	and.w	r3, r1, r7
 80209ac:	4303      	orrs	r3, r0
 80209ae:	d01e      	beq.n	80209ee <floor+0x96>
 80209b0:	a325      	add	r3, pc, #148	; (adr r3, 8020a48 <floor+0xf0>)
 80209b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209b6:	f7df fc27 	bl	8000208 <__adddf3>
 80209ba:	2200      	movs	r2, #0
 80209bc:	2300      	movs	r3, #0
 80209be:	f7e0 f869 	bl	8000a94 <__aeabi_dcmpgt>
 80209c2:	2800      	cmp	r0, #0
 80209c4:	d0eb      	beq.n	802099e <floor+0x46>
 80209c6:	2c00      	cmp	r4, #0
 80209c8:	bfbe      	ittt	lt
 80209ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80209ce:	4133      	asrlt	r3, r6
 80209d0:	18e4      	addlt	r4, r4, r3
 80209d2:	ea24 0407 	bic.w	r4, r4, r7
 80209d6:	2500      	movs	r5, #0
 80209d8:	e7e1      	b.n	802099e <floor+0x46>
 80209da:	2e33      	cmp	r6, #51	; 0x33
 80209dc:	dd0b      	ble.n	80209f6 <floor+0x9e>
 80209de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80209e2:	d104      	bne.n	80209ee <floor+0x96>
 80209e4:	ee10 2a10 	vmov	r2, s0
 80209e8:	460b      	mov	r3, r1
 80209ea:	f7df fc0d 	bl	8000208 <__adddf3>
 80209ee:	ec41 0b10 	vmov	d0, r0, r1
 80209f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209f6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80209fa:	f04f 37ff 	mov.w	r7, #4294967295
 80209fe:	40df      	lsrs	r7, r3
 8020a00:	4238      	tst	r0, r7
 8020a02:	d0f4      	beq.n	80209ee <floor+0x96>
 8020a04:	a310      	add	r3, pc, #64	; (adr r3, 8020a48 <floor+0xf0>)
 8020a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a0a:	f7df fbfd 	bl	8000208 <__adddf3>
 8020a0e:	2200      	movs	r2, #0
 8020a10:	2300      	movs	r3, #0
 8020a12:	f7e0 f83f 	bl	8000a94 <__aeabi_dcmpgt>
 8020a16:	2800      	cmp	r0, #0
 8020a18:	d0c1      	beq.n	802099e <floor+0x46>
 8020a1a:	2c00      	cmp	r4, #0
 8020a1c:	da0a      	bge.n	8020a34 <floor+0xdc>
 8020a1e:	2e14      	cmp	r6, #20
 8020a20:	d101      	bne.n	8020a26 <floor+0xce>
 8020a22:	3401      	adds	r4, #1
 8020a24:	e006      	b.n	8020a34 <floor+0xdc>
 8020a26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020a2a:	2301      	movs	r3, #1
 8020a2c:	40b3      	lsls	r3, r6
 8020a2e:	441d      	add	r5, r3
 8020a30:	45a8      	cmp	r8, r5
 8020a32:	d8f6      	bhi.n	8020a22 <floor+0xca>
 8020a34:	ea25 0507 	bic.w	r5, r5, r7
 8020a38:	e7b1      	b.n	802099e <floor+0x46>
 8020a3a:	2500      	movs	r5, #0
 8020a3c:	462c      	mov	r4, r5
 8020a3e:	e7ae      	b.n	802099e <floor+0x46>
 8020a40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8020a44:	e7ab      	b.n	802099e <floor+0x46>
 8020a46:	bf00      	nop
 8020a48:	8800759c 	.word	0x8800759c
 8020a4c:	7e37e43c 	.word	0x7e37e43c
 8020a50:	bff00000 	.word	0xbff00000
 8020a54:	000fffff 	.word	0x000fffff

08020a58 <abort>:
 8020a58:	b508      	push	{r3, lr}
 8020a5a:	2006      	movs	r0, #6
 8020a5c:	f000 f91a 	bl	8020c94 <raise>
 8020a60:	2001      	movs	r0, #1
 8020a62:	f7f5 fea1 	bl	80167a8 <_exit>
	...

08020a68 <malloc>:
 8020a68:	4b02      	ldr	r3, [pc, #8]	; (8020a74 <malloc+0xc>)
 8020a6a:	4601      	mov	r1, r0
 8020a6c:	6818      	ldr	r0, [r3, #0]
 8020a6e:	f000 b82b 	b.w	8020ac8 <_malloc_r>
 8020a72:	bf00      	nop
 8020a74:	2000018c 	.word	0x2000018c

08020a78 <free>:
 8020a78:	4b02      	ldr	r3, [pc, #8]	; (8020a84 <free+0xc>)
 8020a7a:	4601      	mov	r1, r0
 8020a7c:	6818      	ldr	r0, [r3, #0]
 8020a7e:	f000 b96f 	b.w	8020d60 <_free_r>
 8020a82:	bf00      	nop
 8020a84:	2000018c 	.word	0x2000018c

08020a88 <sbrk_aligned>:
 8020a88:	b570      	push	{r4, r5, r6, lr}
 8020a8a:	4e0e      	ldr	r6, [pc, #56]	; (8020ac4 <sbrk_aligned+0x3c>)
 8020a8c:	460c      	mov	r4, r1
 8020a8e:	6831      	ldr	r1, [r6, #0]
 8020a90:	4605      	mov	r5, r0
 8020a92:	b911      	cbnz	r1, 8020a9a <sbrk_aligned+0x12>
 8020a94:	f000 f91a 	bl	8020ccc <_sbrk_r>
 8020a98:	6030      	str	r0, [r6, #0]
 8020a9a:	4621      	mov	r1, r4
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	f000 f915 	bl	8020ccc <_sbrk_r>
 8020aa2:	1c43      	adds	r3, r0, #1
 8020aa4:	d00a      	beq.n	8020abc <sbrk_aligned+0x34>
 8020aa6:	1cc4      	adds	r4, r0, #3
 8020aa8:	f024 0403 	bic.w	r4, r4, #3
 8020aac:	42a0      	cmp	r0, r4
 8020aae:	d007      	beq.n	8020ac0 <sbrk_aligned+0x38>
 8020ab0:	1a21      	subs	r1, r4, r0
 8020ab2:	4628      	mov	r0, r5
 8020ab4:	f000 f90a 	bl	8020ccc <_sbrk_r>
 8020ab8:	3001      	adds	r0, #1
 8020aba:	d101      	bne.n	8020ac0 <sbrk_aligned+0x38>
 8020abc:	f04f 34ff 	mov.w	r4, #4294967295
 8020ac0:	4620      	mov	r0, r4
 8020ac2:	bd70      	pop	{r4, r5, r6, pc}
 8020ac4:	2000afe4 	.word	0x2000afe4

08020ac8 <_malloc_r>:
 8020ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020acc:	1ccd      	adds	r5, r1, #3
 8020ace:	f025 0503 	bic.w	r5, r5, #3
 8020ad2:	3508      	adds	r5, #8
 8020ad4:	2d0c      	cmp	r5, #12
 8020ad6:	bf38      	it	cc
 8020ad8:	250c      	movcc	r5, #12
 8020ada:	2d00      	cmp	r5, #0
 8020adc:	4607      	mov	r7, r0
 8020ade:	db01      	blt.n	8020ae4 <_malloc_r+0x1c>
 8020ae0:	42a9      	cmp	r1, r5
 8020ae2:	d905      	bls.n	8020af0 <_malloc_r+0x28>
 8020ae4:	230c      	movs	r3, #12
 8020ae6:	603b      	str	r3, [r7, #0]
 8020ae8:	2600      	movs	r6, #0
 8020aea:	4630      	mov	r0, r6
 8020aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8020bc4 <_malloc_r+0xfc>
 8020af4:	f000 f868 	bl	8020bc8 <__malloc_lock>
 8020af8:	f8d8 3000 	ldr.w	r3, [r8]
 8020afc:	461c      	mov	r4, r3
 8020afe:	bb5c      	cbnz	r4, 8020b58 <_malloc_r+0x90>
 8020b00:	4629      	mov	r1, r5
 8020b02:	4638      	mov	r0, r7
 8020b04:	f7ff ffc0 	bl	8020a88 <sbrk_aligned>
 8020b08:	1c43      	adds	r3, r0, #1
 8020b0a:	4604      	mov	r4, r0
 8020b0c:	d155      	bne.n	8020bba <_malloc_r+0xf2>
 8020b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8020b12:	4626      	mov	r6, r4
 8020b14:	2e00      	cmp	r6, #0
 8020b16:	d145      	bne.n	8020ba4 <_malloc_r+0xdc>
 8020b18:	2c00      	cmp	r4, #0
 8020b1a:	d048      	beq.n	8020bae <_malloc_r+0xe6>
 8020b1c:	6823      	ldr	r3, [r4, #0]
 8020b1e:	4631      	mov	r1, r6
 8020b20:	4638      	mov	r0, r7
 8020b22:	eb04 0903 	add.w	r9, r4, r3
 8020b26:	f000 f8d1 	bl	8020ccc <_sbrk_r>
 8020b2a:	4581      	cmp	r9, r0
 8020b2c:	d13f      	bne.n	8020bae <_malloc_r+0xe6>
 8020b2e:	6821      	ldr	r1, [r4, #0]
 8020b30:	1a6d      	subs	r5, r5, r1
 8020b32:	4629      	mov	r1, r5
 8020b34:	4638      	mov	r0, r7
 8020b36:	f7ff ffa7 	bl	8020a88 <sbrk_aligned>
 8020b3a:	3001      	adds	r0, #1
 8020b3c:	d037      	beq.n	8020bae <_malloc_r+0xe6>
 8020b3e:	6823      	ldr	r3, [r4, #0]
 8020b40:	442b      	add	r3, r5
 8020b42:	6023      	str	r3, [r4, #0]
 8020b44:	f8d8 3000 	ldr.w	r3, [r8]
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	d038      	beq.n	8020bbe <_malloc_r+0xf6>
 8020b4c:	685a      	ldr	r2, [r3, #4]
 8020b4e:	42a2      	cmp	r2, r4
 8020b50:	d12b      	bne.n	8020baa <_malloc_r+0xe2>
 8020b52:	2200      	movs	r2, #0
 8020b54:	605a      	str	r2, [r3, #4]
 8020b56:	e00f      	b.n	8020b78 <_malloc_r+0xb0>
 8020b58:	6822      	ldr	r2, [r4, #0]
 8020b5a:	1b52      	subs	r2, r2, r5
 8020b5c:	d41f      	bmi.n	8020b9e <_malloc_r+0xd6>
 8020b5e:	2a0b      	cmp	r2, #11
 8020b60:	d917      	bls.n	8020b92 <_malloc_r+0xca>
 8020b62:	1961      	adds	r1, r4, r5
 8020b64:	42a3      	cmp	r3, r4
 8020b66:	6025      	str	r5, [r4, #0]
 8020b68:	bf18      	it	ne
 8020b6a:	6059      	strne	r1, [r3, #4]
 8020b6c:	6863      	ldr	r3, [r4, #4]
 8020b6e:	bf08      	it	eq
 8020b70:	f8c8 1000 	streq.w	r1, [r8]
 8020b74:	5162      	str	r2, [r4, r5]
 8020b76:	604b      	str	r3, [r1, #4]
 8020b78:	4638      	mov	r0, r7
 8020b7a:	f104 060b 	add.w	r6, r4, #11
 8020b7e:	f000 f829 	bl	8020bd4 <__malloc_unlock>
 8020b82:	f026 0607 	bic.w	r6, r6, #7
 8020b86:	1d23      	adds	r3, r4, #4
 8020b88:	1af2      	subs	r2, r6, r3
 8020b8a:	d0ae      	beq.n	8020aea <_malloc_r+0x22>
 8020b8c:	1b9b      	subs	r3, r3, r6
 8020b8e:	50a3      	str	r3, [r4, r2]
 8020b90:	e7ab      	b.n	8020aea <_malloc_r+0x22>
 8020b92:	42a3      	cmp	r3, r4
 8020b94:	6862      	ldr	r2, [r4, #4]
 8020b96:	d1dd      	bne.n	8020b54 <_malloc_r+0x8c>
 8020b98:	f8c8 2000 	str.w	r2, [r8]
 8020b9c:	e7ec      	b.n	8020b78 <_malloc_r+0xb0>
 8020b9e:	4623      	mov	r3, r4
 8020ba0:	6864      	ldr	r4, [r4, #4]
 8020ba2:	e7ac      	b.n	8020afe <_malloc_r+0x36>
 8020ba4:	4634      	mov	r4, r6
 8020ba6:	6876      	ldr	r6, [r6, #4]
 8020ba8:	e7b4      	b.n	8020b14 <_malloc_r+0x4c>
 8020baa:	4613      	mov	r3, r2
 8020bac:	e7cc      	b.n	8020b48 <_malloc_r+0x80>
 8020bae:	230c      	movs	r3, #12
 8020bb0:	603b      	str	r3, [r7, #0]
 8020bb2:	4638      	mov	r0, r7
 8020bb4:	f000 f80e 	bl	8020bd4 <__malloc_unlock>
 8020bb8:	e797      	b.n	8020aea <_malloc_r+0x22>
 8020bba:	6025      	str	r5, [r4, #0]
 8020bbc:	e7dc      	b.n	8020b78 <_malloc_r+0xb0>
 8020bbe:	605b      	str	r3, [r3, #4]
 8020bc0:	deff      	udf	#255	; 0xff
 8020bc2:	bf00      	nop
 8020bc4:	2000afe0 	.word	0x2000afe0

08020bc8 <__malloc_lock>:
 8020bc8:	4801      	ldr	r0, [pc, #4]	; (8020bd0 <__malloc_lock+0x8>)
 8020bca:	f000 b8b9 	b.w	8020d40 <__retarget_lock_acquire_recursive>
 8020bce:	bf00      	nop
 8020bd0:	2000b124 	.word	0x2000b124

08020bd4 <__malloc_unlock>:
 8020bd4:	4801      	ldr	r0, [pc, #4]	; (8020bdc <__malloc_unlock+0x8>)
 8020bd6:	f000 b8b4 	b.w	8020d42 <__retarget_lock_release_recursive>
 8020bda:	bf00      	nop
 8020bdc:	2000b124 	.word	0x2000b124

08020be0 <memcmp>:
 8020be0:	b510      	push	{r4, lr}
 8020be2:	3901      	subs	r1, #1
 8020be4:	4402      	add	r2, r0
 8020be6:	4290      	cmp	r0, r2
 8020be8:	d101      	bne.n	8020bee <memcmp+0xe>
 8020bea:	2000      	movs	r0, #0
 8020bec:	e005      	b.n	8020bfa <memcmp+0x1a>
 8020bee:	7803      	ldrb	r3, [r0, #0]
 8020bf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020bf4:	42a3      	cmp	r3, r4
 8020bf6:	d001      	beq.n	8020bfc <memcmp+0x1c>
 8020bf8:	1b18      	subs	r0, r3, r4
 8020bfa:	bd10      	pop	{r4, pc}
 8020bfc:	3001      	adds	r0, #1
 8020bfe:	e7f2      	b.n	8020be6 <memcmp+0x6>

08020c00 <memmove>:
 8020c00:	4288      	cmp	r0, r1
 8020c02:	b510      	push	{r4, lr}
 8020c04:	eb01 0402 	add.w	r4, r1, r2
 8020c08:	d902      	bls.n	8020c10 <memmove+0x10>
 8020c0a:	4284      	cmp	r4, r0
 8020c0c:	4623      	mov	r3, r4
 8020c0e:	d807      	bhi.n	8020c20 <memmove+0x20>
 8020c10:	1e43      	subs	r3, r0, #1
 8020c12:	42a1      	cmp	r1, r4
 8020c14:	d008      	beq.n	8020c28 <memmove+0x28>
 8020c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020c1e:	e7f8      	b.n	8020c12 <memmove+0x12>
 8020c20:	4402      	add	r2, r0
 8020c22:	4601      	mov	r1, r0
 8020c24:	428a      	cmp	r2, r1
 8020c26:	d100      	bne.n	8020c2a <memmove+0x2a>
 8020c28:	bd10      	pop	{r4, pc}
 8020c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020c32:	e7f7      	b.n	8020c24 <memmove+0x24>

08020c34 <memset>:
 8020c34:	4402      	add	r2, r0
 8020c36:	4603      	mov	r3, r0
 8020c38:	4293      	cmp	r3, r2
 8020c3a:	d100      	bne.n	8020c3e <memset+0xa>
 8020c3c:	4770      	bx	lr
 8020c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8020c42:	e7f9      	b.n	8020c38 <memset+0x4>

08020c44 <_raise_r>:
 8020c44:	291f      	cmp	r1, #31
 8020c46:	b538      	push	{r3, r4, r5, lr}
 8020c48:	4604      	mov	r4, r0
 8020c4a:	460d      	mov	r5, r1
 8020c4c:	d904      	bls.n	8020c58 <_raise_r+0x14>
 8020c4e:	2316      	movs	r3, #22
 8020c50:	6003      	str	r3, [r0, #0]
 8020c52:	f04f 30ff 	mov.w	r0, #4294967295
 8020c56:	bd38      	pop	{r3, r4, r5, pc}
 8020c58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020c5a:	b112      	cbz	r2, 8020c62 <_raise_r+0x1e>
 8020c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020c60:	b94b      	cbnz	r3, 8020c76 <_raise_r+0x32>
 8020c62:	4620      	mov	r0, r4
 8020c64:	f000 f830 	bl	8020cc8 <_getpid_r>
 8020c68:	462a      	mov	r2, r5
 8020c6a:	4601      	mov	r1, r0
 8020c6c:	4620      	mov	r0, r4
 8020c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c72:	f000 b817 	b.w	8020ca4 <_kill_r>
 8020c76:	2b01      	cmp	r3, #1
 8020c78:	d00a      	beq.n	8020c90 <_raise_r+0x4c>
 8020c7a:	1c59      	adds	r1, r3, #1
 8020c7c:	d103      	bne.n	8020c86 <_raise_r+0x42>
 8020c7e:	2316      	movs	r3, #22
 8020c80:	6003      	str	r3, [r0, #0]
 8020c82:	2001      	movs	r0, #1
 8020c84:	e7e7      	b.n	8020c56 <_raise_r+0x12>
 8020c86:	2400      	movs	r4, #0
 8020c88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020c8c:	4628      	mov	r0, r5
 8020c8e:	4798      	blx	r3
 8020c90:	2000      	movs	r0, #0
 8020c92:	e7e0      	b.n	8020c56 <_raise_r+0x12>

08020c94 <raise>:
 8020c94:	4b02      	ldr	r3, [pc, #8]	; (8020ca0 <raise+0xc>)
 8020c96:	4601      	mov	r1, r0
 8020c98:	6818      	ldr	r0, [r3, #0]
 8020c9a:	f7ff bfd3 	b.w	8020c44 <_raise_r>
 8020c9e:	bf00      	nop
 8020ca0:	2000018c 	.word	0x2000018c

08020ca4 <_kill_r>:
 8020ca4:	b538      	push	{r3, r4, r5, lr}
 8020ca6:	4d07      	ldr	r5, [pc, #28]	; (8020cc4 <_kill_r+0x20>)
 8020ca8:	2300      	movs	r3, #0
 8020caa:	4604      	mov	r4, r0
 8020cac:	4608      	mov	r0, r1
 8020cae:	4611      	mov	r1, r2
 8020cb0:	602b      	str	r3, [r5, #0]
 8020cb2:	f7f5 fd69 	bl	8016788 <_kill>
 8020cb6:	1c43      	adds	r3, r0, #1
 8020cb8:	d102      	bne.n	8020cc0 <_kill_r+0x1c>
 8020cba:	682b      	ldr	r3, [r5, #0]
 8020cbc:	b103      	cbz	r3, 8020cc0 <_kill_r+0x1c>
 8020cbe:	6023      	str	r3, [r4, #0]
 8020cc0:	bd38      	pop	{r3, r4, r5, pc}
 8020cc2:	bf00      	nop
 8020cc4:	2000b120 	.word	0x2000b120

08020cc8 <_getpid_r>:
 8020cc8:	f7f5 bd56 	b.w	8016778 <_getpid>

08020ccc <_sbrk_r>:
 8020ccc:	b538      	push	{r3, r4, r5, lr}
 8020cce:	4d06      	ldr	r5, [pc, #24]	; (8020ce8 <_sbrk_r+0x1c>)
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	4604      	mov	r4, r0
 8020cd4:	4608      	mov	r0, r1
 8020cd6:	602b      	str	r3, [r5, #0]
 8020cd8:	f7f5 fd70 	bl	80167bc <_sbrk>
 8020cdc:	1c43      	adds	r3, r0, #1
 8020cde:	d102      	bne.n	8020ce6 <_sbrk_r+0x1a>
 8020ce0:	682b      	ldr	r3, [r5, #0]
 8020ce2:	b103      	cbz	r3, 8020ce6 <_sbrk_r+0x1a>
 8020ce4:	6023      	str	r3, [r4, #0]
 8020ce6:	bd38      	pop	{r3, r4, r5, pc}
 8020ce8:	2000b120 	.word	0x2000b120

08020cec <__errno>:
 8020cec:	4b01      	ldr	r3, [pc, #4]	; (8020cf4 <__errno+0x8>)
 8020cee:	6818      	ldr	r0, [r3, #0]
 8020cf0:	4770      	bx	lr
 8020cf2:	bf00      	nop
 8020cf4:	2000018c 	.word	0x2000018c

08020cf8 <__libc_init_array>:
 8020cf8:	b570      	push	{r4, r5, r6, lr}
 8020cfa:	4d0d      	ldr	r5, [pc, #52]	; (8020d30 <__libc_init_array+0x38>)
 8020cfc:	4c0d      	ldr	r4, [pc, #52]	; (8020d34 <__libc_init_array+0x3c>)
 8020cfe:	1b64      	subs	r4, r4, r5
 8020d00:	10a4      	asrs	r4, r4, #2
 8020d02:	2600      	movs	r6, #0
 8020d04:	42a6      	cmp	r6, r4
 8020d06:	d109      	bne.n	8020d1c <__libc_init_array+0x24>
 8020d08:	4d0b      	ldr	r5, [pc, #44]	; (8020d38 <__libc_init_array+0x40>)
 8020d0a:	4c0c      	ldr	r4, [pc, #48]	; (8020d3c <__libc_init_array+0x44>)
 8020d0c:	f000 f874 	bl	8020df8 <_init>
 8020d10:	1b64      	subs	r4, r4, r5
 8020d12:	10a4      	asrs	r4, r4, #2
 8020d14:	2600      	movs	r6, #0
 8020d16:	42a6      	cmp	r6, r4
 8020d18:	d105      	bne.n	8020d26 <__libc_init_array+0x2e>
 8020d1a:	bd70      	pop	{r4, r5, r6, pc}
 8020d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d20:	4798      	blx	r3
 8020d22:	3601      	adds	r6, #1
 8020d24:	e7ee      	b.n	8020d04 <__libc_init_array+0xc>
 8020d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8020d2a:	4798      	blx	r3
 8020d2c:	3601      	adds	r6, #1
 8020d2e:	e7f2      	b.n	8020d16 <__libc_init_array+0x1e>
 8020d30:	08022928 	.word	0x08022928
 8020d34:	08022928 	.word	0x08022928
 8020d38:	08022928 	.word	0x08022928
 8020d3c:	08022974 	.word	0x08022974

08020d40 <__retarget_lock_acquire_recursive>:
 8020d40:	4770      	bx	lr

08020d42 <__retarget_lock_release_recursive>:
 8020d42:	4770      	bx	lr

08020d44 <memcpy>:
 8020d44:	440a      	add	r2, r1
 8020d46:	4291      	cmp	r1, r2
 8020d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8020d4c:	d100      	bne.n	8020d50 <memcpy+0xc>
 8020d4e:	4770      	bx	lr
 8020d50:	b510      	push	{r4, lr}
 8020d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020d5a:	4291      	cmp	r1, r2
 8020d5c:	d1f9      	bne.n	8020d52 <memcpy+0xe>
 8020d5e:	bd10      	pop	{r4, pc}

08020d60 <_free_r>:
 8020d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020d62:	2900      	cmp	r1, #0
 8020d64:	d044      	beq.n	8020df0 <_free_r+0x90>
 8020d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d6a:	9001      	str	r0, [sp, #4]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	f1a1 0404 	sub.w	r4, r1, #4
 8020d72:	bfb8      	it	lt
 8020d74:	18e4      	addlt	r4, r4, r3
 8020d76:	f7ff ff27 	bl	8020bc8 <__malloc_lock>
 8020d7a:	4a1e      	ldr	r2, [pc, #120]	; (8020df4 <_free_r+0x94>)
 8020d7c:	9801      	ldr	r0, [sp, #4]
 8020d7e:	6813      	ldr	r3, [r2, #0]
 8020d80:	b933      	cbnz	r3, 8020d90 <_free_r+0x30>
 8020d82:	6063      	str	r3, [r4, #4]
 8020d84:	6014      	str	r4, [r2, #0]
 8020d86:	b003      	add	sp, #12
 8020d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020d8c:	f7ff bf22 	b.w	8020bd4 <__malloc_unlock>
 8020d90:	42a3      	cmp	r3, r4
 8020d92:	d908      	bls.n	8020da6 <_free_r+0x46>
 8020d94:	6825      	ldr	r5, [r4, #0]
 8020d96:	1961      	adds	r1, r4, r5
 8020d98:	428b      	cmp	r3, r1
 8020d9a:	bf01      	itttt	eq
 8020d9c:	6819      	ldreq	r1, [r3, #0]
 8020d9e:	685b      	ldreq	r3, [r3, #4]
 8020da0:	1949      	addeq	r1, r1, r5
 8020da2:	6021      	streq	r1, [r4, #0]
 8020da4:	e7ed      	b.n	8020d82 <_free_r+0x22>
 8020da6:	461a      	mov	r2, r3
 8020da8:	685b      	ldr	r3, [r3, #4]
 8020daa:	b10b      	cbz	r3, 8020db0 <_free_r+0x50>
 8020dac:	42a3      	cmp	r3, r4
 8020dae:	d9fa      	bls.n	8020da6 <_free_r+0x46>
 8020db0:	6811      	ldr	r1, [r2, #0]
 8020db2:	1855      	adds	r5, r2, r1
 8020db4:	42a5      	cmp	r5, r4
 8020db6:	d10b      	bne.n	8020dd0 <_free_r+0x70>
 8020db8:	6824      	ldr	r4, [r4, #0]
 8020dba:	4421      	add	r1, r4
 8020dbc:	1854      	adds	r4, r2, r1
 8020dbe:	42a3      	cmp	r3, r4
 8020dc0:	6011      	str	r1, [r2, #0]
 8020dc2:	d1e0      	bne.n	8020d86 <_free_r+0x26>
 8020dc4:	681c      	ldr	r4, [r3, #0]
 8020dc6:	685b      	ldr	r3, [r3, #4]
 8020dc8:	6053      	str	r3, [r2, #4]
 8020dca:	440c      	add	r4, r1
 8020dcc:	6014      	str	r4, [r2, #0]
 8020dce:	e7da      	b.n	8020d86 <_free_r+0x26>
 8020dd0:	d902      	bls.n	8020dd8 <_free_r+0x78>
 8020dd2:	230c      	movs	r3, #12
 8020dd4:	6003      	str	r3, [r0, #0]
 8020dd6:	e7d6      	b.n	8020d86 <_free_r+0x26>
 8020dd8:	6825      	ldr	r5, [r4, #0]
 8020dda:	1961      	adds	r1, r4, r5
 8020ddc:	428b      	cmp	r3, r1
 8020dde:	bf04      	itt	eq
 8020de0:	6819      	ldreq	r1, [r3, #0]
 8020de2:	685b      	ldreq	r3, [r3, #4]
 8020de4:	6063      	str	r3, [r4, #4]
 8020de6:	bf04      	itt	eq
 8020de8:	1949      	addeq	r1, r1, r5
 8020dea:	6021      	streq	r1, [r4, #0]
 8020dec:	6054      	str	r4, [r2, #4]
 8020dee:	e7ca      	b.n	8020d86 <_free_r+0x26>
 8020df0:	b003      	add	sp, #12
 8020df2:	bd30      	pop	{r4, r5, pc}
 8020df4:	2000afe0 	.word	0x2000afe0

08020df8 <_init>:
 8020df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dfa:	bf00      	nop
 8020dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020dfe:	bc08      	pop	{r3}
 8020e00:	469e      	mov	lr, r3
 8020e02:	4770      	bx	lr

08020e04 <_fini>:
 8020e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e06:	bf00      	nop
 8020e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e0a:	bc08      	pop	{r3}
 8020e0c:	469e      	mov	lr, r3
 8020e0e:	4770      	bx	lr
